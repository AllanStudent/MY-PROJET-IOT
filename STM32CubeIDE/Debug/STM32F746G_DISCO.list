
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020114  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000432c  080202e8  080202e8  000302e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000008  08024614  08024614  00034614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802461c  0802461c  000501b4  2**0
                  CONTENTS
  5 .ARM          00000008  0802461c  0802461c  0003461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08024624  08024624  000501b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08024624  08024624  00034624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08024640  08024640  00034640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a0  20000000  08024648  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00014934  200000a0  080246e8  000400a0  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  200149d4  080246e8  000449d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000501b4  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00060000  2**2
                  ALLOC
 14 ExtFlashSection 00000000  90000000  90000000  000501e4  2**0
                  CONTENTS
 15 FontFlashSection 000001b4  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000000  900001b4  900001b4  000501e4  2**0
                  CONTENTS
 17 .comment      000000c2  00000000  00000000  000501e4  2**0
                  CONTENTS, READONLY
 18 .debug_info   000af660  00000000  00000000  000502a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000137db  00000000  00000000  000ff906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00034eb0  00000000  00000000  001130e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00002f60  00000000  00000000  00147f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00003424  00000000  00000000  0014aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0001280f  00000000  00000000  0014e31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0006cc14  00000000  00000000  00160b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0012e915  00000000  00000000  001cd73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  00009d90  00000000  00000000  002fc054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000072  00000000  00000000  00305de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080202cc 	.word	0x080202cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	080202cc 	.word	0x080202cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0a:	f000 b9bb 	b.w	8000e84 <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e90:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	a80a      	add	r0, sp, #40	; 0x28
 8000e94:	f01e fad0 	bl	801f438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	2214      	movs	r2, #20
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	a803      	add	r0, sp, #12
 8000e9e:	f01e facb 	bl	801f438 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ea4:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <SystemClock_Config+0x94>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000ec2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec4:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000edc:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ee0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee4:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ee8:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	f004 fb86 	bl	80055fc <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ef0:	f004 f828 	bl	8004f44 <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ef6:	2000      	movs	r0, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ef8:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f02:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f0a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f0e:	f004 fd5d 	bl	80059cc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f12:	b014      	add	sp, #80	; 0x50
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <main>:
{
 8000f20:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000f24:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f26:	2210      	movs	r2, #16
 8000f28:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f2a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f2c:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000f2e:	f04f 4b10 	mov.w	fp, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f32:	f01e fa81 	bl	801f438 <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f36:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000f38:	f002 ff66 	bl	8003e08 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000f3c:	4bc7      	ldr	r3, [pc, #796]	; (800125c <main+0x33c>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f3e:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f40:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f44:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000f46:	e9cd b30e 	strd	fp, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f4a:	f002 ff7b 	bl	8003e44 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000f4e:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f50:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f52:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000f56:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f5a:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f5e:	f002 ff71 	bl	8003e44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f002 ff5e 	bl	8003e24 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f6c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f70:	4abb      	ldr	r2, [pc, #748]	; (8001260 <main+0x340>)
 8000f72:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f7a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f7e:	6953      	ldr	r3, [r2, #20]
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f8e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f96:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f9a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f9e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fa2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000fa6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fa8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fac:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fae:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fb2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb4:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000fb8:	d2f9      	bcs.n	8000fae <main+0x8e>
    } while(sets-- != 0U);
 8000fba:	3b20      	subs	r3, #32
 8000fbc:	f113 0f20 	cmn.w	r3, #32
 8000fc0:	d1f2      	bne.n	8000fa8 <main+0x88>
 8000fc2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fc6:	6953      	ldr	r3, [r2, #20]
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fd2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000fd6:	f002 fe7d 	bl	8003cd4 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2400      	movs	r4, #0
  SystemClock_Config();
 8000fdc:	f7ff ff54 	bl	8000e88 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	2214      	movs	r2, #20
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	a80d      	add	r0, sp, #52	; 0x34
 8000fe6:	f01e fa27 	bl	801f438 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	4b9e      	ldr	r3, [pc, #632]	; (8001264 <main+0x344>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000fec:	2110      	movs	r1, #16
 8000fee:	489e      	ldr	r0, [pc, #632]	; (8001268 <main+0x348>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2701      	movs	r7, #1
 8000ff4:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffc:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8001000:	f04f 0a40 	mov.w	sl, #64	; 0x40
  hdma2d.Instance = DMA2D;
 8001004:	4d99      	ldr	r5, [pc, #612]	; (800126c <main+0x34c>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001006:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800100e:	4e98      	ldr	r6, [pc, #608]	; (8001270 <main+0x350>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001010:	f002 0210 	and.w	r2, r2, #16
 8001014:	9202      	str	r2, [sp, #8]
 8001016:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101a:	f042 0202 	orr.w	r2, r2, #2
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
 8001020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001022:	f002 0202 	and.w	r2, r2, #2
 8001026:	9203      	str	r2, [sp, #12]
 8001028:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102c:	f042 0201 	orr.w	r2, r2, #1
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
 8001032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001034:	f002 0201 	and.w	r2, r2, #1
 8001038:	9204      	str	r2, [sp, #16]
 800103a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
 8001044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001046:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800104a:	9205      	str	r2, [sp, #20]
 800104c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800104e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
 8001056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001058:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800105c:	9206      	str	r2, [sp, #24]
 800105e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001062:	f042 0208 	orr.w	r2, r2, #8
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
 8001068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106a:	f002 0208 	and.w	r2, r2, #8
 800106e:	9207      	str	r2, [sp, #28]
 8001070:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
 800107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001080:	9208      	str	r2, [sp, #32]
 8001082:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
 800108c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001092:	9209      	str	r2, [sp, #36]	; 0x24
 8001094:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001098:	f042 0220 	orr.w	r2, r2, #32
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
 800109e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a0:	f002 0220 	and.w	r2, r2, #32
 80010a4:	920a      	str	r2, [sp, #40]	; 0x28
 80010a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
 80010b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80010b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010bc:	f042 0204 	orr.w	r2, r2, #4
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	930c      	str	r3, [sp, #48]	; 0x30
 80010cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010ce:	f003 fa0b 	bl	80044e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	4867      	ldr	r0, [pc, #412]	; (8001274 <main+0x354>)
 80010d8:	f003 fa06 	bl	80044e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2108      	movs	r1, #8
 80010e0:	4865      	ldr	r0, [pc, #404]	; (8001278 <main+0x358>)
 80010e2:	f003 fa01 	bl	80044e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	4861      	ldr	r0, [pc, #388]	; (8001274 <main+0x354>)
 80010ee:	f003 f9fb 	bl	80044e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	21c0      	movs	r1, #192	; 0xc0
 80010f6:	4861      	ldr	r0, [pc, #388]	; (800127c <main+0x35c>)
 80010f8:	f003 f9f6 	bl	80044e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, SPEAKER_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	21c0      	movs	r1, #192	; 0xc0
 8001100:	485f      	ldr	r0, [pc, #380]	; (8001280 <main+0x360>)
 8001102:	f003 f9f1 	bl	80044e8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001106:	a90d      	add	r1, sp, #52	; 0x34
 8001108:	4857      	ldr	r0, [pc, #348]	; (8001268 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001112:	f003 f861 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin|LCD_DISP_Pin;
 8001116:	f241 0308 	movw	r3, #4104	; 0x1008
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800111a:	a90d      	add	r1, sp, #52	; 0x34
 800111c:	4855      	ldr	r0, [pc, #340]	; (8001274 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001126:	f003 f857 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800112a:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800112c:	a90d      	add	r1, sp, #52	; 0x34
 800112e:	4852      	ldr	r0, [pc, #328]	; (8001278 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001138:	f003 f84e 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 800113c:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	a90d      	add	r1, sp, #52	; 0x34
 8001140:	484e      	ldr	r0, [pc, #312]	; (800127c <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f003 f845 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPEAKER_Pin;
 800114e:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8001150:	a90d      	add	r1, sp, #52	; 0x34
 8001152:	484b      	ldr	r0, [pc, #300]	; (8001280 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 800115c:	f003 f83c 	bl	80041d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001160:	a90d      	add	r1, sp, #52	; 0x34
 8001162:	4847      	ldr	r0, [pc, #284]	; (8001280 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800116c:	f003 f834 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAPTEURDEUX_Pin;
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(CAPTEURDEUX_GPIO_Port, &GPIO_InitStruct);
 8001174:	a90d      	add	r1, sp, #52	; 0x34
 8001176:	4843      	ldr	r0, [pc, #268]	; (8001284 <main+0x364>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(CAPTEURDEUX_GPIO_Port, &GPIO_InitStruct);
 800117e:	f003 f82b 	bl	80041d8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001182:	4841      	ldr	r0, [pc, #260]	; (8001288 <main+0x368>)
 8001184:	4a41      	ldr	r2, [pc, #260]	; (800128c <main+0x36c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001186:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001188:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800118a:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800118c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001190:	f002 fe84 	bl	8003e9c <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 8001194:	4a3e      	ldr	r2, [pc, #248]	; (8001290 <main+0x370>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001196:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001198:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800119c:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80011a0:	e9c5 2400 	strd	r2, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80011a4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011a8:	f002 ff15 	bl	8003fd6 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011ac:	4639      	mov	r1, r7
 80011ae:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80011b0:	4d38      	ldr	r5, [pc, #224]	; (8001294 <main+0x374>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011b2:	f002 ffc9 	bl	8004148 <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011b6:	4a38      	ldr	r2, [pc, #224]	; (8001298 <main+0x378>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011bc:	f8c6 a014 	str.w	sl, [r6, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80011c0:	f04f 0a02 	mov.w	sl, #2
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011c4:	a90d      	add	r1, sp, #52	; 0x34
 80011c6:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011c8:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011ca:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 80011cc:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80011d0:	e9c6 2400 	strd	r2, r4, [r6]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011d4:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011d8:	e9c6 2406 	strd	r2, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e0:	e9c6 3208 	strd	r3, r2, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80011e4:	2207      	movs	r2, #7
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80011e6:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80011ea:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 80011ee:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 80011f2:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011f6:	f004 ff4f 	bl	8006098 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011fa:	4629      	mov	r1, r5
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 8001202:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001204:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001208:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800120c:	f004 ff64 	bl	80060d8 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8001210:	4638      	mov	r0, r7
 8001212:	f002 fd83 	bl	8003d1c <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001216:	4629      	mov	r1, r5
 8001218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121c:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800121e:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001222:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001226:	f004 ff57 	bl	80060d8 <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 800122a:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800122c:	4629      	mov	r1, r5
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = 0;
 8001234:	e9c5 3402 	strd	r3, r4, [r5, #8]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001238:	e9c5 b800 	strd	fp, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800123c:	f004 ff4c 	bl	80060d8 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001240:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800124a:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800124c:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800124e:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 8001250:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8001252:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001254:	e9c5 9800 	strd	r9, r8, [r5]
 8001258:	e020      	b.n	800129c <main+0x37c>
 800125a:	bf00      	nop
 800125c:	0300001b 	.word	0x0300001b
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400
 800126c:	200000f0 	.word	0x200000f0
 8001270:	20000278 	.word	0x20000278
 8001274:	40022000 	.word	0x40022000
 8001278:	40022800 	.word	0x40022800
 800127c:	40020800 	.word	0x40020800
 8001280:	40021800 	.word	0x40021800
 8001284:	40021400 	.word	0x40021400
 8001288:	200000cc 	.word	0x200000cc
 800128c:	40023000 	.word	0x40023000
 8001290:	4002b000 	.word	0x4002b000
 8001294:	200000bc 	.word	0x200000bc
 8001298:	a0000140 	.word	0xa0000140
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800129c:	f004 ff1c 	bl	80060d8 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80012a0:	f240 712b 	movw	r1, #1835	; 0x72b
 80012a4:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80012a6:	4d6f      	ldr	r5, [pc, #444]	; (8001464 <main+0x544>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80012a8:	f004 ff35 	bl	8006116 <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80012ac:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80012b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 80012b4:	2064      	movs	r0, #100	; 0x64
  hltdc.Init.AccumulatedActiveH = 283;
 80012b6:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80012ba:	601a      	str	r2, [r3, #0]
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 80012bc:	f002 fd2e 	bl	8003d1c <HAL_Delay>
  hi2c3.Init.Timing = 0x20404768;
 80012c0:	4b69      	ldr	r3, [pc, #420]	; (8001468 <main+0x548>)
 80012c2:	4a6a      	ldr	r2, [pc, #424]	; (800146c <main+0x54c>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012c4:	4628      	mov	r0, r5
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80012c8:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012cc:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80012d0:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012d8:	f003 fa2e 	bl	8004738 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012dc:	4621      	mov	r1, r4
 80012de:	4628      	mov	r0, r5
 80012e0:	f003 fc4c 	bl	8004b7c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012e4:	4621      	mov	r1, r4
 80012e6:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 80012e8:	4d61      	ldr	r5, [pc, #388]	; (8001470 <main+0x550>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012ea:	f003 fc6d 	bl	8004bc8 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012ee:	2234      	movs	r2, #52	; 0x34
 80012f0:	4621      	mov	r1, r4
 80012f2:	eb0d 0002 	add.w	r0, sp, r2
 80012f6:	f01e f89f 	bl	801f438 <memset>
  hltdc.Instance = LTDC;
 80012fa:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <main+0x554>)
  hltdc.Init.VerticalSync = 9;
 80012fc:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 80012fe:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 8001300:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001304:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001306:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8001308:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800130c:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8001310:	2309      	movs	r3, #9
 8001312:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8001316:	230b      	movs	r3, #11
 8001318:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 800131c:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001320:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8001322:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8001326:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800132a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800132e:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001332:	f003 fcf1 	bl	8004d18 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001336:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001338:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 800133c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8001340:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001344:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8001346:	940d      	str	r4, [sp, #52]	; 0x34
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001348:	250c      	movs	r5, #12
  pLayerCfg.ImageHeight = 272;
 800134a:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800134c:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 8001350:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 8001354:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001358:	2105      	movs	r1, #5
 800135a:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 800135e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8001362:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 8001366:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800136a:	4622      	mov	r2, r4
 800136c:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800136e:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001372:	f003 fd9c 	bl	8004eae <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 8001376:	4840      	ldr	r0, [pc, #256]	; (8001478 <main+0x558>)
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <main+0x55c>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800137a:	6204      	str	r4, [r0, #32]
  huart2.Init.BaudRate = 9600;
 800137c:	f8df a128 	ldr.w	sl, [pc, #296]	; 80014a8 <main+0x588>
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001380:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ClockPrescaler = 1;
 8001384:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001388:	f04f 0818 	mov.w	r8, #24
 800138c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  huart1.Init.BaudRate = 115200;
 8001390:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80014ac <main+0x58c>
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001394:	e9c0 8304 	strd	r8, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001398:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800139c:	f003 feec 	bl	8005178 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80013a0:	f002 fb16 	bl	80039d0 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80013a4:	f002 fa5a 	bl	800385c <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80013a8:	205c      	movs	r0, #92	; 0x5c
 80013aa:	f002 fd1b 	bl	8003de4 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80013ae:	f000 fc3d 	bl	8001c2c <MX_LIBJPEG_Init>
  huart1.Instance = USART1;
 80013b2:	4833      	ldr	r0, [pc, #204]	; (8001480 <main+0x560>)
  huart1.Init.BaudRate = 115200;
 80013b4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b8:	6104      	str	r4, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ba:	6244      	str	r4, [r0, #36]	; 0x24
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013bc:	e9c0 5405 	strd	r5, r4, [r0, #20]
  huart1.Init.BaudRate = 115200;
 80013c0:	e9c0 9300 	strd	r9, r3, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c8:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013cc:	f005 fab3 	bl	8006936 <HAL_UART_Init>
  huart2.Instance = USART2;
 80013d0:	482c      	ldr	r0, [pc, #176]	; (8001484 <main+0x564>)
  huart2.Init.BaudRate = 9600;
 80013d2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013d6:	e9c0 a300 	strd	sl, r3, [r0]
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013de:	e9c0 4504 	strd	r4, r5, [r0, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 80013ea:	e9c0 4708 	strd	r4, r7, [r0, #32]
	  sensor_value = HAL_GPIO_ReadPin(CAPTEURDEUX_GPIO_Port,CAPTEURDEUX_Pin);
 80013ee:	4d26      	ldr	r5, [pc, #152]	; (8001488 <main+0x568>)
 80013f0:	4c26      	ldr	r4, [pc, #152]	; (800148c <main+0x56c>)
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80013f2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f4:	f005 fa9f 	bl	8006936 <HAL_UART_Init>
  printf("bienvenue\r\n");
 80013f8:	4825      	ldr	r0, [pc, #148]	; (8001490 <main+0x570>)
 80013fa:	f01d ff1d 	bl	801f238 <puts>
	  HAL_Delay(500);
 80013fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001402:	f002 fc8b 	bl	8003d1c <HAL_Delay>
	  sensor_value = HAL_GPIO_ReadPin(CAPTEURDEUX_GPIO_Port,CAPTEURDEUX_Pin);
 8001406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140a:	4620      	mov	r0, r4
 800140c:	f003 f866 	bl	80044dc <HAL_GPIO_ReadPin>
 8001410:	4601      	mov	r1, r0
 8001412:	6028      	str	r0, [r5, #0]
	  printf("sensor value : %d\r\n", sensor_value);
 8001414:	481f      	ldr	r0, [pc, #124]	; (8001494 <main+0x574>)
 8001416:	f01d fea9 	bl	801f16c <iprintf>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800141a:	2108      	movs	r1, #8
 800141c:	481e      	ldr	r0, [pc, #120]	; (8001498 <main+0x578>)
 800141e:	f003 f868 	bl	80044f2 <HAL_GPIO_TogglePin>
	  if(HAL_GPIO_ReadPin(CAPTEURDEUX_GPIO_Port, CAPTEURDEUX_Pin) == GPIO_PIN_SET)
 8001422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001426:	4620      	mov	r0, r4
 8001428:	f003 f858 	bl	80044dc <HAL_GPIO_ReadPin>
 800142c:	2801      	cmp	r0, #1
 800142e:	4602      	mov	r2, r0
 8001430:	d10c      	bne.n	800144c <main+0x52c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Allumer la LED sur PC13
 8001432:	2108      	movs	r1, #8
 8001434:	4818      	ldr	r0, [pc, #96]	; (8001498 <main+0x578>)
 8001436:	f003 f857 	bl	80044e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_RESET);
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <main+0x57c>)
 800143c:	2200      	movs	r2, #0
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	f003 f852 	bl	80044e8 <HAL_GPIO_WritePin>
		printf("Il y a du mouvement\r\n\n");
 8001444:	4816      	ldr	r0, [pc, #88]	; (80014a0 <main+0x580>)
		printf("Pas de mouvement\r\n\n");
 8001446:	f01d fef7 	bl	801f238 <puts>
 800144a:	e7d8      	b.n	80013fe <main+0x4de>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Éteindre la LED sur PC13
 800144c:	2200      	movs	r2, #0
 800144e:	2108      	movs	r1, #8
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <main+0x578>)
 8001452:	f003 f849 	bl	80044e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_SET);
 8001456:	4811      	ldr	r0, [pc, #68]	; (800149c <main+0x57c>)
 8001458:	2201      	movs	r2, #1
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	f003 f844 	bl	80044e8 <HAL_GPIO_WritePin>
		printf("Pas de mouvement\r\n\n");
 8001460:	4810      	ldr	r0, [pc, #64]	; (80014a4 <main+0x584>)
 8001462:	e7f0      	b.n	8001446 <main+0x526>
 8001464:	20000130 	.word	0x20000130
 8001468:	20404768 	.word	0x20404768
 800146c:	40005c00 	.word	0x40005c00
 8001470:	20000184 	.word	0x20000184
 8001474:	40016800 	.word	0x40016800
 8001478:	2000022c 	.word	0x2000022c
 800147c:	a0001000 	.word	0xa0001000
 8001480:	200002ac 	.word	0x200002ac
 8001484:	20000334 	.word	0x20000334
 8001488:	200003bc 	.word	0x200003bc
 800148c:	40021400 	.word	0x40021400
 8001490:	080202e8 	.word	0x080202e8
 8001494:	080202f3 	.word	0x080202f3
 8001498:	40022000 	.word	0x40022000
 800149c:	40021800 	.word	0x40021800
 80014a0:	08020307 	.word	0x08020307
 80014a4:	0802031d 	.word	0x0802031d
 80014a8:	40004400 	.word	0x40004400
 80014ac:	40011000 	.word	0x40011000

080014b0 <__io_putchar>:
int __io_putchar(int ch) {
 80014b0:	b507      	push	{r0, r1, r2, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,0xFFFF);
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
int __io_putchar(int ch) {
 80014b6:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,0xFFFF);
 80014b8:	2201      	movs	r2, #1
 80014ba:	a901      	add	r1, sp, #4
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <__io_putchar+0x1c>)
 80014be:	f005 f9c6 	bl	800684e <HAL_UART_Transmit>
}
 80014c2:	9801      	ldr	r0, [sp, #4]
 80014c4:	b003      	add	sp, #12
 80014c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ca:	bf00      	nop
 80014cc:	200002ac 	.word	0x200002ac

080014d0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d101      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80014d8:	f002 bc0e 	b.w	8003cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40001000 	.word	0x40001000

080014e4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_MspInit+0x38>)
{
 80014ea:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ec:	210f      	movs	r1, #15
 80014ee:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
 80014fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800150a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151a:	f002 bc23 	b.w	8003d64 <HAL_NVIC_SetPriority>
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001524:	6802      	ldr	r2, [r0, #0]
{
 8001526:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_CRC_MspInit+0x28>)
 800152a:	429a      	cmp	r2, r3
 800152c:	d10b      	bne.n	8001546 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800152e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001536:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001546:	b002      	add	sp, #8
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023000 	.word	0x40023000

08001550 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_DMA2D_MspInit+0x3c>)
{
 8001552:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001554:	6802      	ldr	r2, [r0, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d115      	bne.n	8001586 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800155a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800155e:	2105      	movs	r1, #5
 8001560:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001564:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800156a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001576:	f002 fbf5 	bl	8003d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800157a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800157c:	b003      	add	sp, #12
 800157e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001582:	f002 bc21 	b.w	8003dc8 <HAL_NVIC_EnableIRQ>
}
 8001586:	b003      	add	sp, #12
 8001588:	f85d fb04 	ldr.w	pc, [sp], #4
 800158c:	4002b000 	.word	0x4002b000

08001590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001590:	b510      	push	{r4, lr}
 8001592:	b0a8      	sub	sp, #160	; 0xa0
 8001594:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	2214      	movs	r2, #20
 8001598:	2100      	movs	r1, #0
 800159a:	a802      	add	r0, sp, #8
 800159c:	f01d ff4c 	bl	801f438 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	2284      	movs	r2, #132	; 0x84
 80015a2:	2100      	movs	r1, #0
 80015a4:	a807      	add	r0, sp, #28
 80015a6:	f01d ff47 	bl	801f438 <memset>
  if(hi2c->Instance==I2C3)
 80015aa:	6822      	ldr	r2, [r4, #0]
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_I2C_MspInit+0x7c>)
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d12a      	bne.n	8001608 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015b8:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ba:	f004 fae3 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	b108      	cbz	r0, 80015c4 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 80015c0:	f7ff ff90 	bl	80014e4 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c4:	4c12      	ldr	r4, [pc, #72]	; (8001610 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	6323      	str	r3, [r4, #48]	; 0x30
 80015d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e0:	2312      	movs	r3, #18
 80015e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015ec:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015ee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015f0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f2:	f002 fdf1 	bl	80041d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015fc:	6423      	str	r3, [r4, #64]	; 0x40
 80015fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001608:	b028      	add	sp, #160	; 0xa0
 800160a:	bd10      	pop	{r4, pc}
 800160c:	40005c00 	.word	0x40005c00
 8001610:	40023800 	.word	0x40023800
 8001614:	40021c00 	.word	0x40021c00

08001618 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 8001618:	6802      	ldr	r2, [r0, #0]
{
 800161a:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_I2C_MspDeInit+0x2c>)
 800161e:	429a      	cmp	r2, r3
 8001620:	d10f      	bne.n	8001642 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001628:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800162a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001630:	f002 feb4 	bl	800439c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800163a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800163e:	f002 bead 	b.w	800439c <HAL_GPIO_DeInit>
}
 8001642:	bd08      	pop	{r3, pc}
 8001644:	40005c00 	.word	0x40005c00
 8001648:	40023800 	.word	0x40023800
 800164c:	40021c00 	.word	0x40021c00

08001650 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	b0ac      	sub	sp, #176	; 0xb0
 8001654:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	2214      	movs	r2, #20
 8001658:	2100      	movs	r1, #0
 800165a:	a806      	add	r0, sp, #24
 800165c:	f01d feec 	bl	801f438 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	2284      	movs	r2, #132	; 0x84
 8001662:	2100      	movs	r1, #0
 8001664:	a80b      	add	r0, sp, #44	; 0x2c
 8001666:	f01d fee7 	bl	801f438 <memset>
  if(hltdc->Instance==LTDC)
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	4b48      	ldr	r3, [pc, #288]	; (8001790 <HAL_LTDC_MspInit+0x140>)
 800166e:	429a      	cmp	r2, r3
 8001670:	f040 808c 	bne.w	800178c <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001674:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001676:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001678:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800167a:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800167c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001680:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800168e:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001692:	f004 fa77 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	b108      	cbz	r0, 800169c <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001698:	f7ff ff24 	bl	80014e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016a2:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a6:	a906      	add	r1, sp, #24
 80016a8:	483b      	ldr	r0, [pc, #236]	; (8001798 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44
 80016b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016b2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80016b6:	9200      	str	r2, [sp, #0]
 80016b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016bc:	f042 0210 	orr.w	r2, r2, #16
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
 80016c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c4:	f002 0210 	and.w	r2, r2, #16
 80016c8:	9201      	str	r2, [sp, #4]
 80016ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
 80016d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80016da:	9202      	str	r2, [sp, #8]
 80016dc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
 80016e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80016ec:	9203      	str	r2, [sp, #12]
 80016ee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
 80016f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016fa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80016fe:	9204      	str	r2, [sp, #16]
 8001700:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	9305      	str	r3, [sp, #20]
 8001712:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2310      	movs	r3, #16
 8001716:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800171e:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001720:	f002 fd5a 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001724:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001728:	a906      	add	r1, sp, #24
 800172a:	481c      	ldr	r0, [pc, #112]	; (800179c <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800172c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001736:	f002 fd4f 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800173a:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800173c:	a906      	add	r1, sp, #24
 800173e:	4818      	ldr	r0, [pc, #96]	; (80017a0 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001740:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800174a:	f002 fd45 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	a906      	add	r1, sp, #24
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800175a:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001760:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001762:	f002 fd39 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001766:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800176a:	a906      	add	r1, sp, #24
 800176c:	480e      	ldr	r0, [pc, #56]	; (80017a8 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800176e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001778:	f002 fd2e 	bl	80041d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800177c:	2058      	movs	r0, #88	; 0x58
 800177e:	4622      	mov	r2, r4
 8001780:	2105      	movs	r1, #5
 8001782:	f002 faef 	bl	8003d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001786:	2058      	movs	r0, #88	; 0x58
 8001788:	f002 fb1e 	bl	8003dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800178c:	b02c      	add	sp, #176	; 0xb0
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	40016800 	.word	0x40016800
 8001794:	40023800 	.word	0x40023800
 8001798:	40021000 	.word	0x40021000
 800179c:	40022400 	.word	0x40022400
 80017a0:	40022800 	.word	0x40022800
 80017a4:	40021800 	.word	0x40021800
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	2214      	movs	r2, #20
 80017ae:	2100      	movs	r1, #0
{
 80017b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b4:	b08a      	sub	sp, #40	; 0x28
 80017b6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	eb0d 0002 	add.w	r0, sp, r2
 80017bc:	f01d fe3c 	bl	801f438 <memset>
  if(hqspi->Instance==QUADSPI)
 80017c0:	6822      	ldr	r2, [r4, #0]
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_QSPI_MspInit+0xc8>)
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d151      	bne.n	800186c <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017cc:	2403      	movs	r4, #3
 80017ce:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d6:	a905      	add	r1, sp, #20
 80017d8:	4828      	ldr	r0, [pc, #160]	; (800187c <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017da:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38
 80017e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e4:	f002 0202 	and.w	r2, r2, #2
 80017e8:	9201      	str	r2, [sp, #4]
 80017ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ee:	f042 0210 	orr.w	r2, r2, #16
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
 80017f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f6:	f002 0210 	and.w	r2, r2, #16
 80017fa:	9202      	str	r2, [sp, #8]
 80017fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001800:	f042 0202 	orr.w	r2, r2, #2
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
 8001806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001808:	f002 0202 	and.w	r2, r2, #2
 800180c:	9203      	str	r2, [sp, #12]
 800180e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001812:	f042 0208 	orr.w	r2, r2, #8
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	9304      	str	r3, [sp, #16]
 8001820:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001826:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182a:	f002 fcd5 	bl	80041d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800182e:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	a905      	add	r1, sp, #20
 8001832:	4813      	ldr	r0, [pc, #76]	; (8001880 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001838:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800183e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f002 fcca 	bl	80041d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	a905      	add	r1, sp, #20
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001848:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	f002 fcc1 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001856:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	a905      	add	r1, sp, #20
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800185e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001868:	f002 fcb6 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800186c:	b00a      	add	sp, #40	; 0x28
 800186e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001872:	bf00      	nop
 8001874:	a0001000 	.word	0xa0001000
 8001878:	40023800 	.word	0x40023800
 800187c:	40021000 	.word	0x40021000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020c00 	.word	0x40020c00

08001888 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001888:	6802      	ldr	r2, [r0, #0]
{
 800188a:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_QSPI_MspDeInit+0x34>)
 800188e:	429a      	cmp	r2, r3
 8001890:	d113      	bne.n	80018ba <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001894:	2104      	movs	r1, #4
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001898:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800189a:	f023 0302 	bic.w	r3, r3, #2
 800189e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80018a0:	f002 fd7c 	bl	800439c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 80018a4:	2144      	movs	r1, #68	; 0x44
 80018a6:	4808      	ldr	r0, [pc, #32]	; (80018c8 <HAL_QSPI_MspDeInit+0x40>)
 80018a8:	f002 fd78 	bl	800439c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80018ac:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80018b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80018b6:	f002 bd71 	b.w	800439c <HAL_GPIO_DeInit>
}
 80018ba:	bd08      	pop	{r3, pc}
 80018bc:	a0001000 	.word	0xa0001000
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	b0ad      	sub	sp, #180	; 0xb4
 80018d4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	2214      	movs	r2, #20
 80018d8:	2100      	movs	r1, #0
 80018da:	a806      	add	r0, sp, #24
 80018dc:	f01d fdac 	bl	801f438 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e0:	2284      	movs	r2, #132	; 0x84
 80018e2:	2100      	movs	r1, #0
 80018e4:	a80b      	add	r0, sp, #44	; 0x2c
 80018e6:	f01d fda7 	bl	801f438 <memset>
  if(huart->Instance==USART1)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	4a36      	ldr	r2, [pc, #216]	; (80019c8 <HAL_UART_MspInit+0xf8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d13e      	bne.n	8001970 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018f2:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018f6:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f8:	f004 f944 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	b108      	cbz	r0, 8001902 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80018fe:	f7ff fdf1 	bl	80014e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001902:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_UART_MspInit+0xfc>)
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2600      	movs	r6, #0
 8001908:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800190a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800190c:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	a906      	add	r1, sp, #24
 8001910:	482f      	ldr	r0, [pc, #188]	; (80019d0 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001912:	f042 0210 	orr.w	r2, r2, #16
 8001916:	645a      	str	r2, [r3, #68]	; 0x44
 8001918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800191a:	f002 0210 	and.w	r2, r2, #16
 800191e:	9201      	str	r2, [sp, #4]
 8001920:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001924:	f042 0202 	orr.w	r2, r2, #2
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
 800192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192c:	f002 0202 	and.w	r2, r2, #2
 8001930:	9202      	str	r2, [sp, #8]
 8001932:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800193e:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	9303      	str	r3, [sp, #12]
 8001946:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	e9cd 6508 	strd	r6, r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	e9cd 3706 	strd	r3, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f002 fc41 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001956:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	a906      	add	r1, sp, #24
 800195c:	481d      	ldr	r0, [pc, #116]	; (80019d4 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800195e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	e9cd 6508 	strd	r6, r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001968:	f002 fc36 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196c:	b02d      	add	sp, #180	; 0xb4
 800196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_UART_MspInit+0x108>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d1fa      	bne.n	800196c <HAL_UART_MspInit+0x9c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001976:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001978:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800197a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197c:	f004 f902 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 8001980:	b108      	cbz	r0, 8001986 <HAL_UART_MspInit+0xb6>
      Error_Handler();
 8001982:	f7ff fdaf 	bl	80014e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2100      	movs	r1, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198a:	4814      	ldr	r0, [pc, #80]	; (80019dc <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800198c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
 8001994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001996:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800199a:	9204      	str	r2, [sp, #16]
 800199c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a0:	f042 0208 	orr.w	r2, r2, #8
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2260      	movs	r2, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	9305      	str	r3, [sp, #20]
 80019b0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e9cd 1308 	strd	r1, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	e7d0      	b.n	8001968 <HAL_UART_MspInit+0x98>
 80019c6:	bf00      	nop
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40020c00 	.word	0x40020c00

080019e0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019e2:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80019e4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019e6:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <HAL_SDRAM_MspInit+0xb0>)
 80019ea:	681e      	ldr	r6, [r3, #0]
 80019ec:	2e00      	cmp	r6, #0
 80019ee:	d14d      	bne.n	8001a8c <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 80019f0:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f4:	2503      	movs	r5, #3
 80019f6:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80019f8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fa:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a16:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1e:	f002 fbdb 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001a22:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a26:	a901      	add	r1, sp, #4
 8001a28:	481c      	ldr	r0, [pc, #112]	; (8001a9c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a2a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a34:	f002 fbd0 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001a38:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3c:	a901      	add	r1, sp, #4
 8001a3e:	4818      	ldr	r0, [pc, #96]	; (8001aa0 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4a:	f002 fbc5 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a52:	a901      	add	r1, sp, #4
 8001a54:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a56:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a60:	f002 fbba 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001a64:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a66:	a901      	add	r1, sp, #4
 8001a68:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a6a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a74:	f002 fbb0 	bl	80041d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a78:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	a901      	add	r1, sp, #4
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a7e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	f002 fba6 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a8c:	b007      	add	sp, #28
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a90:	200003c0 	.word	0x200003c0
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021400 	.word	0x40021400
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40020800 	.word	0x40020800

08001ab0 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_InitTick+0x88>)
 8001ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab4:	f042 0210 	orr.w	r2, r2, #16
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001abc:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8001ac0:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac2:	a901      	add	r1, sp, #4
 8001ac4:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ace:	f004 f83b 	bl	8005b48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ad2:	9b06      	ldr	r3, [sp, #24]
 8001ad4:	bb4b      	cbnz	r3, 8001b2a <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ad6:	f004 f817 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ada:	4e18      	ldr	r6, [pc, #96]	; (8001b3c <HAL_InitTick+0x8c>)
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_InitTick+0x90>)
 8001ade:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ae0:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001ae4:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_InitTick+0x94>)
 8001ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aec:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8001aee:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8001af0:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af6:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8001afa:	f004 fc7d 	bl	80063f8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001afe:	4604      	mov	r4, r0
 8001b00:	b980      	cbnz	r0, 8001b24 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b02:	4630      	mov	r0, r6
 8001b04:	f004 fb20 	bl	8006148 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001b08:	4604      	mov	r4, r0
 8001b0a:	b958      	cbnz	r0, 8001b24 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b0c:	2036      	movs	r0, #54	; 0x36
 8001b0e:	f002 f95b 	bl	8003dc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	2d0f      	cmp	r5, #15
 8001b14:	d80d      	bhi.n	8001b32 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b16:	4622      	mov	r2, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	2036      	movs	r0, #54	; 0x36
 8001b1c:	f002 f922 	bl	8003d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_InitTick+0x98>)
 8001b22:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001b24:	4620      	mov	r0, r4
 8001b26:	b008      	add	sp, #32
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b2a:	f003 ffed 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>
 8001b2e:	0040      	lsls	r0, r0, #1
 8001b30:	e7d3      	b.n	8001ada <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8001b32:	2401      	movs	r4, #1
 8001b34:	e7f6      	b.n	8001b24 <HAL_InitTick+0x74>
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	200003c4 	.word	0x200003c4
 8001b40:	40001000 	.word	0x40001000
 8001b44:	000f4240 	.word	0x000f4240
 8001b48:	20000034 	.word	0x20000034

08001b4c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b4c:	4770      	bx	lr

08001b4e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <HardFault_Handler>

08001b50 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler>

08001b52 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler>

08001b54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler>

08001b56 <DebugMon_Handler>:
 8001b56:	4770      	bx	lr

08001b58 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b58:	4801      	ldr	r0, [pc, #4]	; (8001b60 <TIM6_DAC_IRQHandler+0x8>)
 8001b5a:	f004 bb37 	b.w	80061cc <HAL_TIM_IRQHandler>
 8001b5e:	bf00      	nop
 8001b60:	200003c4 	.word	0x200003c4

08001b64 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b64:	4801      	ldr	r0, [pc, #4]	; (8001b6c <LTDC_IRQHandler+0x8>)
 8001b66:	f003 b945 	b.w	8004df4 <HAL_LTDC_IRQHandler>
 8001b6a:	bf00      	nop
 8001b6c:	20000184 	.word	0x20000184

08001b70 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b70:	4801      	ldr	r0, [pc, #4]	; (8001b78 <DMA2D_IRQHandler+0x8>)
 8001b72:	f002 ba5e 	b.w	8004032 <HAL_DMA2D_IRQHandler>
 8001b76:	bf00      	nop
 8001b78:	200000f0 	.word	0x200000f0

08001b7c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	4770      	bx	lr

08001b80 <_kill>:

int _kill(int pid, int sig)
{
 8001b80:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b82:	f01d fd0d 	bl	801f5a0 <__errno>
 8001b86:	2316      	movs	r3, #22
 8001b88:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8e:	bd08      	pop	{r3, pc}

08001b90 <_exit>:

void _exit (int status)
{
 8001b90:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b92:	f01d fd05 	bl	801f5a0 <__errno>
 8001b96:	2316      	movs	r3, #22
 8001b98:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001b9a:	e7fe      	b.n	8001b9a <_exit+0xa>

08001b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	460d      	mov	r5, r1
 8001ba0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	460e      	mov	r6, r1
 8001ba4:	1b73      	subs	r3, r6, r5
 8001ba6:	429c      	cmp	r4, r3
 8001ba8:	dc01      	bgt.n	8001bae <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001baa:	4620      	mov	r0, r4
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	e7f5      	b.n	8001ba4 <_read+0x8>

08001bb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	460d      	mov	r5, r1
 8001bbc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	460e      	mov	r6, r1
 8001bc0:	1b73      	subs	r3, r6, r5
 8001bc2:	429c      	cmp	r4, r3
 8001bc4:	dc01      	bgt.n	8001bca <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001bca:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001bce:	f7ff fc6f 	bl	80014b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	e7f5      	b.n	8001bc0 <_write+0x8>

08001bd4 <_close>:

int _close(int file)
{
	return -1;
}
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001bde:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001be0:	604b      	str	r3, [r1, #4]
}
 8001be2:	4770      	bx	lr

08001be4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001be4:	2001      	movs	r0, #1
 8001be6:	4770      	bx	lr

08001be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001be8:	2000      	movs	r0, #0
 8001bea:	4770      	bx	lr

08001bec <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <_sbrk+0x30>)
{
 8001bee:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001bf0:	6811      	ldr	r1, [r2, #0]
{
 8001bf2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001bf4:	b909      	cbnz	r1, 8001bfa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <_sbrk+0x34>)
 8001bf8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	6810      	ldr	r0, [r2, #0]
 8001bfc:	4909      	ldr	r1, [pc, #36]	; (8001c24 <_sbrk+0x38>)
 8001bfe:	4c0a      	ldr	r4, [pc, #40]	; (8001c28 <_sbrk+0x3c>)
 8001c00:	4403      	add	r3, r0
 8001c02:	1b09      	subs	r1, r1, r4
 8001c04:	428b      	cmp	r3, r1
 8001c06:	d906      	bls.n	8001c16 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c08:	f01d fcca 	bl	801f5a0 <__errno>
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001c14:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001c16:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001c18:	e7fc      	b.n	8001c14 <_sbrk+0x28>
 8001c1a:	bf00      	nop
 8001c1c:	20000410 	.word	0x20000410
 8001c20:	200149d8 	.word	0x200149d8
 8001c24:	20050000 	.word	0x20050000
 8001c28:	00000a00 	.word	0x00000a00

08001c2c <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001c2c:	4770      	bx	lr
	...

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c36:	e003      	b.n	8001c40 <LoopCopyDataInit>

08001c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c3e:	3104      	adds	r1, #4

08001c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c48:	d3f6      	bcc.n	8001c38 <CopyDataInit>
  ldr  r2, =_sbss
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c4c:	e002      	b.n	8001c54 <LoopFillZerobss>

08001c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c50:	f842 3b04 	str.w	r3, [r2], #4

08001c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c58:	d3f9      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c5a:	f001 ff51 	bl	8003b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f01d fca5 	bl	801f5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7ff f95d 	bl	8000f20 <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c68:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001c6c:	08024648 	.word	0x08024648
  ldr  r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c74:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8001c78:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8001c7c:	200149d4 	.word	0x200149d4

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>

08001c82 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001c82:	6840      	ldr	r0, [r0, #4]
    }
 8001c84:	4770      	bx	lr

08001c86 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001c86:	6041      	str	r1, [r0, #4]
    }
 8001c88:	4770      	bx	lr
	...

08001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001c8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c90:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001ca0:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	4770      	bx	lr
 8001cb4:	e0001000 	.word	0xe0001000
 8001cb8:	c5acce55 	.word	0xc5acce55

08001cbc <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001cbc:	1a51      	subs	r1, r2, r1
 8001cbe:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001cc2:	fbb1 f0f3 	udiv	r0, r1, r3
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001cca:	6858      	ldr	r0, [r3, #4]
}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e0001000 	.word	0xe0001000

08001cd4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001cd4:	4770      	bx	lr

08001cd6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
 8001cda:	210c      	movs	r1, #12
 8001cdc:	f01c f94c 	bl	801df78 <_ZdlPvj>
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce4:	6803      	ldr	r3, [r0, #0]
{
 8001ce6:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce8:	691b      	ldr	r3, [r3, #16]
{
 8001cea:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001cec:	b131      	cbz	r1, 8001cfc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001cee:	4798      	blx	r3
 8001cf0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	4418      	add	r0, r3
 8001cf8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001cfa:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001cfc:	4798      	blx	r3
 8001cfe:	60a0      	str	r0, [r4, #8]
}
 8001d00:	e7fb      	b.n	8001cfa <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001d04 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001d04:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001d06:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001d08:	4a02      	ldr	r2, [pc, #8]	; (8001d14 <_ZN20STM32TouchController4initEv+0x10>)
 8001d0a:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4718      	bx	r3
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000414 	.word	0x20000414

08001d18 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d18:	4770      	bx	lr

08001d1a <_ZN20STM32TouchControllerD0Ev>:
 8001d1a:	b510      	push	{r4, lr}
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	2104      	movs	r1, #4
 8001d20:	f01c f92a 	bl	801df78 <_ZdlPvj>
 8001d24:	4620      	mov	r0, r4
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001d28:	b573      	push	{r0, r1, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001d2a:	4e0e      	ldr	r6, [pc, #56]	; (8001d64 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
{
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	4614      	mov	r4, r2
    if (tsDriver)
 8001d30:	6833      	ldr	r3, [r6, #0]
 8001d32:	b913      	cbnz	r3, 8001d3a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = (int32_t)_x;
            y = (int32_t)_y;
            return true;
        }
    }
    return false;
 8001d34:	2000      	movs	r0, #0
}
 8001d36:	b002      	add	sp, #8
 8001d38:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2070      	movs	r0, #112	; 0x70
 8001d3e:	4798      	blx	r3
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d0f7      	beq.n	8001d34 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, &_y, &_x);
 8001d44:	6833      	ldr	r3, [r6, #0]
 8001d46:	2070      	movs	r0, #112	; 0x70
 8001d48:	aa01      	add	r2, sp, #4
 8001d4a:	f10d 0106 	add.w	r1, sp, #6
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	4798      	blx	r3
            x = (int32_t)_x;
 8001d52:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001d56:	2001      	movs	r0, #1
 8001d58:	602b      	str	r3, [r5, #0]
            y = (int32_t)_y;
 8001d5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001d5e:	6023      	str	r3, [r4, #0]
            return true;
 8001d60:	e7e9      	b.n	8001d36 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001d62:	bf00      	nop
 8001d64:	20000414 	.word	0x20000414

08001d68 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d6a:	2301      	movs	r3, #1
{
 8001d6c:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001d78:	f10d 0217 	add.w	r2, sp, #23
 8001d7c:	9200      	str	r2, [sp, #0]
 8001d7e:	460a      	mov	r2, r1
 8001d80:	4601      	mov	r1, r0
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <TS_IO_Write+0x30>)
 8001d84:	f002 fd42 	bl	800480c <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001d88:	b110      	cbz	r0, 8001d90 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <TS_IO_Write+0x30>)
 8001d8c:	f002 fd25 	bl	80047da <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001d90:	b007      	add	sp, #28
 8001d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d96:	bf00      	nop
 8001d98:	20000130 	.word	0x20000130

08001d9c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001d9e:	2300      	movs	r3, #0
{
 8001da0:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001da2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001da6:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001daa:	2301      	movs	r3, #1
 8001dac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001db0:	f10d 0117 	add.w	r1, sp, #23
 8001db4:	9100      	str	r1, [sp, #0]
 8001db6:	4601      	mov	r1, r0
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <TS_IO_Read+0x34>)
 8001dba:	f002 fe01 	bl	80049c0 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001dbe:	b110      	cbz	r0, 8001dc6 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <TS_IO_Read+0x34>)
 8001dc2:	f002 fd0a 	bl	80047da <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001dc6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001dca:	b007      	add	sp, #28
 8001dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dd0:	20000130 	.word	0x20000130

08001dd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001dd4:	2803      	cmp	r0, #3
 8001dd6:	d823      	bhi.n	8001e20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001dd8:	e8df f000 	tbb	[pc, r0]
 8001ddc:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001de2:	2110      	movs	r1, #16
 8001de4:	4810      	ldr	r0, [pc, #64]	; (8001e28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001dee:	f002 bb7b 	b.w	80044e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001df4:	2140      	movs	r1, #64	; 0x40
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001dfe:	480b      	ldr	r0, [pc, #44]	; (8001e2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001e00:	e7f5      	b.n	8001dee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	0952      	lsrs	r2, r2, #5
 8001e0e:	e7f6      	b.n	8001dfe <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001e12:	2140      	movs	r1, #64	; 0x40
 8001e14:	4806      	ldr	r0, [pc, #24]	; (8001e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	0952      	lsrs	r2, r2, #5
 8001e1e:	e7e6      	b.n	8001dee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000418 	.word	0x20000418
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40021800 	.word	0x40021800

08001e34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e34:	2803      	cmp	r0, #3
 8001e36:	d823      	bhi.n	8001e80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001e38:	e8df f000 	tbb	[pc, r0]
 8001e3c:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e42:	2110      	movs	r1, #16
 8001e44:	4810      	ldr	r0, [pc, #64]	; (8001e88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	3a00      	subs	r2, #0
 8001e4a:	bf18      	it	ne
 8001e4c:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001e4e:	f002 bb4b 	b.w	80044e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e54:	2140      	movs	r1, #64	; 0x40
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	3a00      	subs	r2, #0
 8001e5a:	bf18      	it	ne
 8001e5c:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001e60:	e7f5      	b.n	8001e4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	3a00      	subs	r2, #0
 8001e6a:	bf18      	it	ne
 8001e6c:	2201      	movne	r2, #1
 8001e6e:	e7f6      	b.n	8001e5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	3a00      	subs	r2, #0
 8001e7a:	bf18      	it	ne
 8001e7c:	2201      	movne	r2, #1
 8001e7e:	e7e6      	b.n	8001e4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000418 	.word	0x20000418
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40021800 	.word	0x40021800

08001e94 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e94:	2803      	cmp	r0, #3
 8001e96:	d80f      	bhi.n	8001eb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001e98:	e8df f000 	tbb	[pc, r0]
 8001e9c:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ea4:	f002 bb25 	b.w	80044f2 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ea8:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001eac:	e7fa      	b.n	8001ea4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	e7fb      	b.n	8001eaa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001eb6:	e7f5      	b.n	8001ea4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40021800 	.word	0x40021800

08001ec8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001ec8:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001eca:	2803      	cmp	r0, #3
 8001ecc:	d813      	bhi.n	8001ef6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8001ece:	e8df f000 	tbb	[pc, r0]
 8001ed2:	0a02      	.short	0x0a02
 8001ed4:	0f0d      	.short	0x0f0d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4808      	ldr	r0, [pc, #32]	; (8001efc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001eda:	f002 faff 	bl	80044dc <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001ede:	1e43      	subs	r3, r0, #1
 8001ee0:	4258      	negs	r0, r3
 8001ee2:	4158      	adcs	r0, r3
 8001ee4:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ee6:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8001eea:	e7f6      	b.n	8001eda <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	e7fb      	b.n	8001ee8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	4804      	ldr	r0, [pc, #16]	; (8001f04 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001ef4:	e7f1      	b.n	8001eda <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e7f1      	b.n	8001ede <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001efa:	bf00      	nop
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40021800 	.word	0x40021800

08001f08 <_ZN8touchgfx4GPIO4initEv>:
{
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	4d08      	ldr	r5, [pc, #32]	; (8001f2c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001f0c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001f0e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001f10:	b2e0      	uxtb	r0, r4
 8001f12:	f7ff ffd9 	bl	8001ec8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001f16:	b118      	cbz	r0, 8001f20 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001f1c:	bf18      	it	ne
 8001f1e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001f20:	3401      	adds	r4, #1
 8001f22:	3504      	adds	r5, #4
 8001f24:	2c05      	cmp	r4, #5
 8001f26:	d1f3      	bne.n	8001f10 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000418 	.word	0x20000418

08001f30 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001f30:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001f32:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8001f36:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    }
 8001f3a:	4770      	bx	lr

08001f3c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	4770      	bx	lr

08001f40 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001f40:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001f42:	3900      	subs	r1, #0
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001f46:	bf18      	it	ne
 8001f48:	2101      	movne	r1, #1
 8001f4a:	7019      	strb	r1, [r3, #0]
    }
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2001468f 	.word	0x2001468f

08001f54 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001f54:	2000      	movs	r0, #0
 8001f56:	4770      	bx	lr

08001f58 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001f58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f5a:	b10b      	cbz	r3, 8001f60 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4718      	bx	r3
        }
    }
 8001f60:	4770      	bx	lr

08001f62 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001f62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f66:	4770      	bx	lr

08001f68 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001f68:	6840      	ldr	r0, [r0, #4]
 8001f6a:	6803      	ldr	r3, [r0, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	4718      	bx	r3

08001f70 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001f70:	4770      	bx	lr
	...

08001f74 <_ZN11TouchGFXHAL10initializeEv>:
LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");
}

void TouchGFXHAL::initialize()
{
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001f78:	f000 ffe8 	bl	8002f4c <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setAnimationStorage((void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001f7c:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	4620      	mov	r0, r4
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001f82:	4d08      	ldr	r5, [pc, #32]	; (8001fa4 <_ZN11TouchGFXHAL10initializeEv+0x30>)
    setAnimationStorage((void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f88:	4798      	blx	r3
        lockDMAToPorch = enableLock;
 8001f8a:	2300      	movs	r3, #0
    instrumentation.init();
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001f92:	f7ff fe7b 	bl	8001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001f96:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f98:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f9a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	c0000000 	.word	0xc0000000
 8001fa4:	20000428 	.word	0x20000428

08001fa8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001fa8:	f000 bf72 	b.w	8002e90 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001fac <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001fac:	f000 bf76 	b.w	8002e9c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001fb0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001fb0:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001fb2:	f000 fff5 	bl	8002fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001fb6:	4910      	ldr	r1, [pc, #64]	; (8001ff8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fbe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001fc2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fc6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fca:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001fce:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001fd2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fd4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fd8:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fda:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001fde:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fe0:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001fe4:	d2f9      	bcs.n	8001fda <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001fe6:	3b20      	subs	r3, #32
 8001fe8:	f113 0f20 	cmn.w	r3, #32
 8001fec:	d1f2      	bne.n	8001fd4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001fee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ff2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001ffc:	f000 bfd2 	b.w	8002fa4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08002000 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002000:	f000 bf22 	b.w	8002e48 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08002004 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002004:	f001 b8ec 	b.w	80031e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08002008 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8002008:	f001 b8f4 	b.w	80031f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800200c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800200c:	f000 bf26 	b.w	8002e5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002010 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002010:	b510      	push	{r4, lr}
 8002012:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002014:	f014 f956 	bl	80162c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	4620      	mov	r0, r4
 800201c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8002020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002024:	4718      	bx	r3

08002026 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8002026:	f013 bb5b 	b.w	80156e0 <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800202a <_ZN11TouchGFXHALD0Ev>:
 800202a:	b510      	push	{r4, lr}
 800202c:	4604      	mov	r4, r0
 800202e:	217c      	movs	r1, #124	; 0x7c
 8002030:	f01b ffa2 	bl	801df78 <_ZdlPvj>
 8002034:	4620      	mov	r0, r4
 8002036:	bd10      	pop	{r4, pc}

08002038 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8002038:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 800203c:	b11b      	cbz	r3, 8002046 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 800203e:	6840      	ldr	r0, [r0, #4]
 8002040:	6803      	ldr	r3, [r0, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4718      	bx	r3
    }
 8002046:	4618      	mov	r0, r3
 8002048:	4770      	bx	lr
	...

0800204c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800204c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8002052:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002054:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
            if (DISPLAY_ROTATION == rotate0)
 8002058:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800205a:	428c      	cmp	r4, r1
 800205c:	d009      	beq.n	8002072 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800205e:	b93a      	cbnz	r2, 8002070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002060:	490a      	ldr	r1, [pc, #40]	; (800208c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002064:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002066:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8002068:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800206a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800206c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 800206e:	701a      	strb	r2, [r3, #0]
        }
    }
 8002070:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002072:	2a00      	cmp	r2, #0
 8002074:	d0fc      	beq.n	8002070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002076:	4a06      	ldr	r2, [pc, #24]	; (8002090 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002078:	4904      	ldr	r1, [pc, #16]	; (800208c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800207a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 800207c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800207e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002080:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002082:	2200      	movs	r2, #0
 8002084:	e7f3      	b.n	800206e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002086:	bf00      	nop
 8002088:	20014688 	.word	0x20014688
 800208c:	20014686 	.word	0x20014686
 8002090:	20014684 	.word	0x20014684

08002094 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	460d      	mov	r5, r1
 8002098:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800209a:	b935      	cbnz	r5, 80020aa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 800209e:	f240 21d2 	movw	r1, #722	; 0x2d2
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80020a6:	f01c fead 	bl	801ee04 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80020aa:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80020ae:	3a00      	subs	r2, #0
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80020b2:	bf18      	it	ne
 80020b4:	2201      	movne	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80020b8:	6803      	ldr	r3, [r0, #0]
    }
 80020ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80020be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c2:	4718      	bx	r3
 80020c4:	08020370 	.word	0x08020370
 80020c8:	080203a8 	.word	0x080203a8
 80020cc:	080203f6 	.word	0x080203f6
 80020d0:	2001468e 	.word	0x2001468e

080020d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80020d4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	428b      	cmp	r3, r1
 80020dc:	d803      	bhi.n	80020e6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d905      	bls.n	80020f2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80020e8:	219e      	movs	r1, #158	; 0x9e
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80020ee:	f01c fe89 	bl	801ee04 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80020f4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80020f8:	801a      	strh	r2, [r3, #0]
    }
 80020fa:	bd08      	pop	{r3, pc}
 80020fc:	20014684 	.word	0x20014684
 8002100:	20014686 	.word	0x20014686
 8002104:	0802043b 	.word	0x0802043b
 8002108:	0802049e 	.word	0x0802049e
 800210c:	080203f6 	.word	0x080203f6
 8002110:	2001468a 	.word	0x2001468a
 8002114:	2001468c 	.word	0x2001468c

08002118 <_GLOBAL__sub_I_instrumentation>:
        : cc_consumed(0),
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <_GLOBAL__sub_I_instrumentation+0x10>)
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	4a02      	ldr	r2, [pc, #8]	; (800212c <_GLOBAL__sub_I_instrumentation+0x14>)
 8002122:	601a      	str	r2, [r3, #0]
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000428 	.word	0x20000428
 800212c:	08020338 	.word	0x08020338

08002130 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002130:	2101      	movs	r1, #1
 8002132:	2200      	movs	r2, #0
{
 8002134:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002136:	4608      	mov	r0, r1
 8002138:	f004 fd54 	bl	8006be4 <osSemaphoreNew>
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800213e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002140:	b928      	cbnz	r0, 800214e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002144:	2128      	movs	r1, #40	; 0x28
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002148:	480a      	ldr	r0, [pc, #40]	; (8002174 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800214a:	f01c fe5b 	bl	801ee04 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800214e:	2200      	movs	r2, #0
 8002150:	2104      	movs	r1, #4
 8002152:	2001      	movs	r0, #1
 8002154:	f004 fe0c 	bl	8006d70 <osMessageQueueNew>
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800215a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800215c:	b918      	cbnz	r0, 8002166 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	4a03      	ldr	r2, [pc, #12]	; (8002170 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002164:	e7f0      	b.n	8002148 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002166:	bd08      	pop	{r3, pc}
 8002168:	20000438 	.word	0x20000438
 800216c:	080205bc 	.word	0x080205bc
 8002170:	08020605 	.word	0x08020605
 8002174:	08020634 	.word	0x08020634
 8002178:	20000434 	.word	0x20000434
 800217c:	08020688 	.word	0x08020688

08002180 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002182:	f04f 31ff 	mov.w	r1, #4294967295
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	f004 bd82 	b.w	8006c90 <osSemaphoreAcquire>
 800218c:	20000438 	.word	0x20000438

08002190 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002190:	4b01      	ldr	r3, [pc, #4]	; (8002198 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	f004 bdb6 	b.w	8006d04 <osSemaphoreRelease>
 8002198:	20000438 	.word	0x20000438

0800219c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 800219e:	2100      	movs	r1, #0
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	f004 bd75 	b.w	8006c90 <osSemaphoreAcquire>
 80021a6:	bf00      	nop
 80021a8:	20000438 	.word	0x20000438

080021ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 80021ac:	f7ff bff0 	b.w	8002190 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080021b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80021b0:	2300      	movs	r3, #0
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80021b4:	4903      	ldr	r1, [pc, #12]	; (80021c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80021b6:	461a      	mov	r2, r3
 80021b8:	6800      	ldr	r0, [r0, #0]
 80021ba:	f004 be1f 	b.w	8006dfc <osMessageQueuePut>
 80021be:	bf00      	nop
 80021c0:	20000434 	.word	0x20000434
 80021c4:	20000000 	.word	0x20000000

080021c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80021c8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80021ca:	2300      	movs	r3, #0
 80021cc:	4c07      	ldr	r4, [pc, #28]	; (80021ec <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80021ce:	a901      	add	r1, sp, #4
 80021d0:	461a      	mov	r2, r3
 80021d2:	6820      	ldr	r0, [r4, #0]
 80021d4:	f004 fe54 	bl	8006e80 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
 80021dc:	2200      	movs	r2, #0
 80021de:	a901      	add	r1, sp, #4
 80021e0:	6820      	ldr	r0, [r4, #0]
 80021e2:	f004 fe4d 	bl	8006e80 <osMessageQueueGet>
}
 80021e6:	b002      	add	sp, #8
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	bf00      	nop
 80021ec:	20000434 	.word	0x20000434

080021f0 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 80021f0:	6803      	ldr	r3, [r0, #0]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	4718      	bx	r3

080021f6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 80021f6:	2001      	movs	r0, #1
 80021f8:	4770      	bx	lr

080021fa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 80021fa:	6803      	ldr	r3, [r0, #0]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	4718      	bx	r3

08002200 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8002202:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002206:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
 800220c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002212:	9201      	str	r2, [sp, #4]
 8002214:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800221c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002224:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <_ZN8STM32DMA10initializeEv+0x3c>)
 8002228:	4a05      	ldr	r2, [pc, #20]	; (8002240 <_ZN8STM32DMA10initializeEv+0x40>)
 800222a:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <_ZN8STM32DMA10initializeEv+0x44>)
 8002232:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8002234:	b002      	add	sp, #8
 8002236:	4770      	bx	lr
 8002238:	40023800 	.word	0x40023800
 800223c:	200000f0 	.word	0x200000f0
 8002240:	08002289 	.word	0x08002289
 8002244:	e000e100 	.word	0xe000e100

08002248 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002248:	f240 30ef 	movw	r0, #1007	; 0x3ef
 800224c:	4770      	bx	lr
	...

08002250 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002256:	6003      	str	r3, [r0, #0]
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN8STM32DMAD1Ev+0x1c>)
 800225a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800225e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002262:	f3bf 8f6f 	isb	sy
}
 8002266:	4770      	bx	lr
 8002268:	0802082c 	.word	0x0802082c
 800226c:	e000e100 	.word	0xe000e100

08002270 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002270:	b510      	push	{r4, lr}
 8002272:	4604      	mov	r4, r0
}
 8002274:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002278:	f7ff ffea 	bl	8002250 <_ZN8STM32DMAD1Ev>
 800227c:	4620      	mov	r0, r4
 800227e:	f01b fe7b 	bl	801df78 <_ZdlPvj>
 8002282:	4620      	mov	r0, r4
 8002284:	bd10      	pop	{r4, pc}
	...

08002288 <DMA2D_XferCpltCallback>:
        return instance;
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <DMA2D_XferCpltCallback+0xc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4718      	bx	r3
 8002294:	20014690 	.word	0x20014690

08002298 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <_ZN8STM32DMAC1Ev+0x30>)
 800229e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80022a0:	2600      	movs	r6, #0
 80022a2:	4625      	mov	r5, r4
 80022a4:	2260      	movs	r2, #96	; 0x60
 80022a6:	6060      	str	r0, [r4, #4]
 80022a8:	7226      	strb	r6, [r4, #8]
 80022aa:	7266      	strb	r6, [r4, #9]
 80022ac:	f845 3b20 	str.w	r3, [r5], #32
 80022b0:	4629      	mov	r1, r5
 80022b2:	f014 f95f 	bl	8016574 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80022b6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 80022ba:	60ee      	str	r6, [r5, #12]
 80022bc:	3524      	adds	r5, #36	; 0x24
 80022be:	42ab      	cmp	r3, r5
 80022c0:	d1fb      	bne.n	80022ba <_ZN8STM32DMAC1Ev+0x22>
}
 80022c2:	4620      	mov	r0, r4
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	bf00      	nop
 80022c8:	0802082c 	.word	0x0802082c

080022cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80022cc:	b508      	push	{r3, lr}
    switch (format)
 80022ce:	290b      	cmp	r1, #11
 80022d0:	d80b      	bhi.n	80022ea <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 80022d2:	e8df f001 	tbb	[pc, r1]
 80022d6:	0612      	.short	0x0612
 80022d8:	0a0a0a10 	.word	0x0a0a0a10
 80022dc:	0808080a 	.word	0x0808080a
 80022e0:	0808      	.short	0x0808
 80022e2:	2001      	movs	r0, #1
}
 80022e4:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80022e6:	2005      	movs	r0, #5
        break;
 80022e8:	e7fc      	b.n	80022e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80022ec:	2165      	movs	r1, #101	; 0x65
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 80022f2:	f01c fd87 	bl	801ee04 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022f6:	2000      	movs	r0, #0
 80022f8:	e7f4      	b.n	80022e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80022fa:	2002      	movs	r0, #2
    return dma2dColorMode;
 80022fc:	e7f2      	b.n	80022e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80022fe:	bf00      	nop
 8002300:	080206ca 	.word	0x080206ca
 8002304:	080206e5 	.word	0x080206e5
 8002308:	0802072f 	.word	0x0802072f

0800230c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800230c:	b508      	push	{r3, lr}
    switch (format)
 800230e:	290a      	cmp	r1, #10
 8002310:	d809      	bhi.n	8002326 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002312:	e8df f001 	tbb	[pc, r1]
 8002316:	0610      	.short	0x0610
 8002318:	0808080e 	.word	0x0808080e
 800231c:	06060608 	.word	0x06060608
 8002320:	06          	.byte	0x06
 8002321:	00          	.byte	0x00
 8002322:	2001      	movs	r0, #1
}
 8002324:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002328:	2186      	movs	r1, #134	; 0x86
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800232e:	f01c fd69 	bl	801ee04 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002332:	2000      	movs	r0, #0
 8002334:	e7f6      	b.n	8002324 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002336:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002338:	e7f4      	b.n	8002324 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800233a:	bf00      	nop
 800233c:	080206ca 	.word	0x080206ca
 8002340:	08020781 	.word	0x08020781
 8002344:	0802072f 	.word	0x0802072f

08002348 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800234c:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8002350:	460c      	mov	r4, r1
 8002352:	4607      	mov	r7, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002354:	4641      	mov	r1, r8
 8002356:	f7ff ffb9 	bl	80022cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800235a:	f894 901e 	ldrb.w	r9, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800235e:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002360:	4638      	mov	r0, r7
 8002362:	4649      	mov	r1, r9
 8002364:	f7ff ffb2 	bl	80022cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002368:	4649      	mov	r1, r9
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800236a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800236c:	4638      	mov	r0, r7
 800236e:	f7ff ffcd 	bl	800230c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002372:	8aa1      	ldrh	r1, [r4, #20]
 8002374:	8b62      	ldrh	r2, [r4, #26]
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002378:	1a52      	subs	r2, r2, r1
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800237c:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800237e:	8b22      	ldrh	r2, [r4, #24]
 8002380:	1a52      	subs	r2, r2, r1
 8002382:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002384:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002386:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002388:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800238c:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800238e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002390:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002392:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002394:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002396:	6827      	ldr	r7, [r4, #0]
 8002398:	2f80      	cmp	r7, #128	; 0x80
 800239a:	d028      	beq.n	80023ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800239c:	7f22      	ldrb	r2, [r4, #28]
 800239e:	d80f      	bhi.n	80023c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80023a0:	2f20      	cmp	r7, #32
 80023a2:	d065      	beq.n	8002470 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 80023a4:	2f40      	cmp	r7, #64	; 0x40
 80023a6:	d063      	beq.n	8002470 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 80023a8:	2f04      	cmp	r7, #4
 80023aa:	d01a      	beq.n	80023e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023ac:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80023b0:	4b34      	ldr	r3, [pc, #208]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80023b2:	45c8      	cmp	r8, r9
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023b4:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 80023b8:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80023ba:	d05f      	beq.n	800247c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80023bc:	4a32      	ldr	r2, [pc, #200]	; (8002488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 80023be:	e044      	b.n	800244a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
    switch (blitOp.operation)
 80023c0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80023c4:	d004      	beq.n	80023d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x88>
 80023c6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80023ca:	d1ef      	bne.n	80023ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x64>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023cc:	492f      	ldr	r1, [pc, #188]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80023ce:	e000      	b.n	80023d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023d0:	492f      	ldr	r1, [pc, #188]	; (8002490 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023d2:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 80023d6:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80023d8:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80023da:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023dc:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023de:	6158      	str	r0, [r3, #20]
 80023e0:	e032      	b.n	8002448 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023e2:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 80023e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023ea:	61da      	str	r2, [r3, #28]
 80023ec:	e7f6      	b.n	80023dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80023ee:	68a7      	ldr	r7, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80023f0:	1d3a      	adds	r2, r7, #4
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023f4:	7f21      	ldrb	r1, [r4, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 80023f6:	783a      	ldrb	r2, [r7, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023f8:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 80023fc:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8002400:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002402:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002404:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002406:	b142      	cbz	r2, 800241a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8002408:	2a01      	cmp	r2, #1
 800240a:	d021      	beq.n	8002450 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
                assert(0 && "Unsupported format");
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 800240e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8002414:	4821      	ldr	r0, [pc, #132]	; (800249c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002416:	f01c fcf5 	bl	801ee04 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	8879      	ldrh	r1, [r7, #2]
 800241e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002422:	3901      	subs	r1, #1
 8002424:	f022 0210 	bic.w	r2, r2, #16
 8002428:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            bool blend = true;
 800242c:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800242e:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	0692      	lsls	r2, r2, #26
 800243e:	d4fc      	bmi.n	800243a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002440:	2210      	movs	r2, #16
 8002442:	609a      	str	r2, [r3, #8]
            if (blend)
 8002444:	2900      	cmp	r1, #0
 8002446:	d0b9      	beq.n	80023bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x74>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800244a:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 800244c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002450:	69da      	ldr	r2, [r3, #28]
                if (blitOp.alpha == 255)
 8002452:	39ff      	subs	r1, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002454:	8878      	ldrh	r0, [r7, #2]
 8002456:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
                if (blitOp.alpha == 255)
 800245a:	bf18      	it	ne
 800245c:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800245e:	3801      	subs	r0, #1
 8002460:	f022 0210 	bic.w	r2, r2, #16
 8002464:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002468:	f042 0210 	orr.w	r2, r2, #16
 800246c:	61da      	str	r2, [r3, #28]
                break;
 800246e:	e7df      	b.n	8002430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002470:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002476:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800247a:	e7b6      	b.n	80023ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800247c:	f240 2201 	movw	r2, #513	; 0x201
 8002480:	e7e3      	b.n	800244a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 8002482:	bf00      	nop
 8002484:	4002b000 	.word	0x4002b000
 8002488:	00010201 	.word	0x00010201
 800248c:	00020009 	.word	0x00020009
 8002490:	0002000a 	.word	0x0002000a
 8002494:	080207cc 	.word	0x080207cc
 8002498:	080207e6 	.word	0x080207e6
 800249c:	0802072f 	.word	0x0802072f
 80024a0:	00020201 	.word	0x00020201

080024a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024a8:	7f89      	ldrb	r1, [r1, #30]
 80024aa:	f7ff ff2f 	bl	800230c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024b0:	8aa5      	ldrh	r5, [r4, #20]
 80024b2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024b4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024b6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024ba:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024be:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024c0:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024c2:	1b52      	subs	r2, r2, r5
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80024c6:	6825      	ldr	r5, [r4, #0]
 80024c8:	2d08      	cmp	r5, #8
 80024ca:	d10e      	bne.n	80024ea <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024cc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024ce:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024d0:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80024d4:	7f20      	ldrb	r0, [r4, #28]
 80024d6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80024da:	61da      	str	r2, [r3, #28]
 80024dc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024de:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024e2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024e4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80024e6:	601a      	str	r2, [r3, #0]
    }
}
 80024e8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80024ea:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80024ec:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80024f2:	0a0a      	lsrs	r2, r1, #8
 80024f4:	0948      	lsrs	r0, r1, #5
 80024f6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80024fa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80024fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002502:	4302      	orrs	r2, r0
 8002504:	430a      	orrs	r2, r1
 8002506:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002508:	4a03      	ldr	r2, [pc, #12]	; (8002518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 800250a:	e7ec      	b.n	80024e6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800250c:	4002b000 	.word	0x4002b000
 8002510:	00010009 	.word	0x00010009
 8002514:	00020201 	.word	0x00020201
 8002518:	00030201 	.word	0x00030201

0800251c <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	07d2      	lsls	r2, r2, #31
 8002522:	d4fc      	bmi.n	800251e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002524:	2223      	movs	r2, #35	; 0x23
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	4002b000 	.word	0x4002b000

08002530 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8002530:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002532:	4c10      	ldr	r4, [pc, #64]	; (8002574 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8002534:	6825      	ldr	r5, [r4, #0]
 8002536:	07ed      	lsls	r5, r5, #31
 8002538:	d4fc      	bmi.n	8002534 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800253a:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800253c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800253e:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002540:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002542:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8002546:	f04f 0502 	mov.w	r5, #2
 800254a:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800254c:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800254e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002550:	d00a      	beq.n	8002568 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002552:	4909      	ldr	r1, [pc, #36]	; (8002578 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002554:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002556:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800255a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 800255e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002560:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002562:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002564:	6023      	str	r3, [r4, #0]
    }
}
 8002566:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002568:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 800256a:	9b03      	ldr	r3, [sp, #12]
 800256c:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 8002570:	e7f8      	b.n	8002564 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 8002572:	bf00      	nop
 8002574:	4002b000 	.word	0x4002b000
 8002578:	00010009 	.word	0x00010009
 800257c:	00020001 	.word	0x00020001
 8002580:	00030001 	.word	0x00030001

08002584 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002584:	6940      	ldr	r0, [r0, #20]
 8002586:	4770      	bx	lr

08002588 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002588:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800258c:	4770      	bx	lr

0800258e <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800258e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002590:	b923      	cbnz	r3, 800259c <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 8002592:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002594:	3800      	subs	r0, #0
 8002596:	bf18      	it	ne
 8002598:	2001      	movne	r0, #1
 800259a:	4770      	bx	lr
 800259c:	2001      	movs	r0, #1
}
 800259e:	4770      	bx	lr

080025a0 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	4770      	bx	lr

080025a4 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80025a4:	3004      	adds	r0, #4
{
 80025a6:	b510      	push	{r4, lr}
 80025a8:	460c      	mov	r4, r1
    *data = videoInfo;
 80025aa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80025ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 80025b0:	bd10      	pop	{r4, pc}

080025b2 <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 80025b2:	4770      	bx	lr

080025b4 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80025b4:	b508      	push	{r3, lr}
    assert(0);
 80025b6:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80025b8:	f240 2112 	movw	r1, #530	; 0x212
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80025c0:	f01c fc20 	bl	801ee04 <__assert_func>
 80025c4:	08020874 	.word	0x08020874
 80025c8:	08021c9f 	.word	0x08021c9f
 80025cc:	080208cf 	.word	0x080208cf

080025d0 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4604      	mov	r4, r0
 80025d4:	2148      	movs	r1, #72	; 0x48
 80025d6:	f01b fccf 	bl	801df78 <_ZdlPvj>
 80025da:	4620      	mov	r0, r4
 80025dc:	bd10      	pop	{r4, pc}
	...

080025e0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80025e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025e4:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80025e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80025e8:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80025ec:	4605      	mov	r5, r0
 80025ee:	460e      	mov	r6, r1
 80025f0:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d037      	beq.n	8002666 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x86>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80025f6:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 80025f8:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80025fa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80026a4 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80025fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 8002602:	f00c f867 	bl	800e6d4 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 8002606:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800260a:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 800260c:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 800260e:	a824      	add	r0, sp, #144	; 0x90
 8002610:	f005 ffaf 	bl	8008572 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002614:	463a      	mov	r2, r7
 8002616:	4631      	mov	r1, r6
 8002618:	a824      	add	r0, sp, #144	; 0x90
 800261a:	f006 ff2b 	bl	8009474 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 800261e:	2101      	movs	r1, #1
 8002620:	a824      	add	r0, sp, #144	; 0x90
 8002622:	f006 f8a9 	bl	8008778 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 8002626:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8002628:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 800262a:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 800262e:	f006 f947 	bl	80088c0 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002632:	f8bd 3298 	ldrh.w	r3, [sp, #664]	; 0x298
 8002636:	9a2b      	ldr	r2, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002638:	f8bd 629c 	ldrh.w	r6, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 800263c:	4293      	cmp	r3, r2
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 800263e:	9fa8      	ldr	r7, [sp, #672]	; 0x2a0
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002640:	bf28      	it	cs
 8002642:	4613      	movcs	r3, r2
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002644:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002646:	4296      	cmp	r6, r2
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002648:	eb03 0843 	add.w	r8, r3, r3, lsl #1
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 800264c:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002650:	bf28      	it	cs
 8002652:	4616      	movcs	r6, r2
        while (cinfo.output_scanline < height)
 8002654:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002656:	429e      	cmp	r6, r3
 8002658:	d809      	bhi.n	800266e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8e>
        jpeg_finish_decompress(&cinfo);
 800265a:	a824      	add	r0, sp, #144	; 0x90
 800265c:	f006 f8ae 	bl	80087bc <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8002660:	a824      	add	r0, sp, #144	; 0x90
 8002662:	f005 ffd3 	bl	800860c <jpeg_destroy_decompress>
}
 8002666:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800266a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800266e:	2201      	movs	r2, #1
 8002670:	a901      	add	r1, sp, #4
 8002672:	a824      	add	r0, sp, #144	; 0x90
 8002674:	f006 f96d 	bl	8008952 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 8002678:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 800267a:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 800267e:	4298      	cmp	r0, r3
 8002680:	d801      	bhi.n	8002686 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa6>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002682:	443c      	add	r4, r7
 8002684:	e7e6      	b.n	8002654 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 8002686:	7859      	ldrb	r1, [r3, #1]
 8002688:	789a      	ldrb	r2, [r3, #2]
 800268a:	00c9      	lsls	r1, r1, #3
 800268c:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 8002690:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002694:	430a      	orrs	r2, r1
 8002696:	f813 1b03 	ldrb.w	r1, [r3], #3
 800269a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 800269e:	f824 2b02 	strh.w	r2, [r4], #2
                RGB_matrix++;
 80026a2:	e7ec      	b.n	800267e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x9e>
 80026a4:	fffff800 	.word	0xfffff800

080026a8 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 80026aa:	6002      	str	r2, [r0, #0]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80026ac:	2200      	movs	r2, #0
 80026ae:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80026b2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80026b6:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80026ba:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80026be:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 80026c2:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80026c6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 80026ca:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80026ce:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 80026d2:	4770      	bx	lr
 80026d4:	08020bb4 	.word	0x08020bb4

080026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 80026d8:	b410      	push	{r4}
 80026da:	460c      	mov	r4, r1
 80026dc:	4611      	mov	r1, r2
 80026de:	461a      	mov	r2, r3
    if (reader != 0)
 80026e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026e2:	b13b      	cbz	r3, 80026f4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80026e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80026e8:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80026ea:	4420      	add	r0, r4
}
 80026ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80026f0:	f01c beaa 	b.w	801f448 <strncmp>
        src = (const char*)movieData + offset;
 80026f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80026f6:	e7f8      	b.n	80026ea <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

080026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80026f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80026fa:	b510      	push	{r4, lr}
    if (reader != 0)
 80026fc:	b173      	cbz	r3, 800271c <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80026fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002700:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 8002702:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002704:	1853      	adds	r3, r2, r1
 8002706:	5c52      	ldrb	r2, [r2, r1]
 8002708:	7898      	ldrb	r0, [r3, #2]
 800270a:	785c      	ldrb	r4, [r3, #1]
 800270c:	0400      	lsls	r0, r0, #16
 800270e:	78db      	ldrb	r3, [r3, #3]
 8002710:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002714:	4310      	orrs	r0, r2
 8002716:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800271a:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 800271c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800271e:	5858      	ldr	r0, [r3, r1]
 8002720:	e7fb      	b.n	800271a <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

08002722 <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002722:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002724:	b143      	cbz	r3, 8002738 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002726:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002728:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800272a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800272c:	185a      	adds	r2, r3, r1
 800272e:	5c58      	ldrb	r0, [r3, r1]
 8002730:	7852      	ldrb	r2, [r2, #1]
 8002732:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002736:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8002738:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800273a:	5a58      	ldrh	r0, [r3, r1]
}
 800273c:	4770      	bx	lr
	...

08002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	4604      	mov	r4, r0
    if (reader != 0)
 8002744:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8002746:	460d      	mov	r5, r1
 8002748:	4616      	mov	r6, r2
    if (reader != 0)
 800274a:	b1d8      	cbz	r0, 8002784 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800274c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800274e:	4293      	cmp	r3, r2
 8002750:	d208      	bcs.n	8002764 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002752:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002754:	4a0d      	ldr	r2, [pc, #52]	; (800278c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 8002756:	2165      	movs	r1, #101	; 0x65
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800275a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 8002760:	f01c fb50 	bl	801ee04 <__assert_func>
        reader->seek(offset);
 8002764:	6803      	ldr	r3, [r0, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800276a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800276c:	4632      	mov	r2, r6
 800276e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002770:	6803      	ldr	r3, [r0, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4798      	blx	r3
 8002776:	b910      	cbnz	r0, 800277e <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002778:	230d      	movs	r3, #13
 800277a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 800277e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 8002780:	6425      	str	r5, [r4, #64]	; 0x40
}
 8002782:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002784:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002786:	4408      	add	r0, r1
 8002788:	e7fb      	b.n	8002782 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 800278a:	bf00      	nop
 800278c:	08020940 	.word	0x08020940
 8002790:	080208cf 	.word	0x080208cf
 8002794:	0802092d 	.word	0x0802092d

08002798 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800279c:	6943      	ldr	r3, [r0, #20]
{
 800279e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80027a0:	b92b      	cbnz	r3, 80027ae <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80027a4:	21aa      	movs	r1, #170	; 0xaa
 80027a6:	4a23      	ldr	r2, [pc, #140]	; (8002834 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80027a8:	4823      	ldr	r0, [pc, #140]	; (8002838 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 80027aa:	f01c fb2b 	bl	801ee04 <__assert_func>
    readData(currentMovieOffset, 8);
 80027ae:	2208      	movs	r2, #8
 80027b0:	6981      	ldr	r1, [r0, #24]
 80027b2:	f7ff ffc5 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027b6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027b8:	f243 0630 	movw	r6, #12336	; 0x3030
 80027bc:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c0:	3104      	adds	r1, #4
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff ff98 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80027c8:	69a3      	ldr	r3, [r4, #24]
 80027ca:	4418      	add	r0, r3
 80027cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027ce:	f100 0208 	add.w	r2, r0, #8
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d306      	bcc.n	80027e4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80027d6:	2301      	movs	r3, #1
    return false;
 80027d8:	2000      	movs	r0, #0
    frameNumber = 1;
 80027da:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80027dc:	6a23      	ldr	r3, [r4, #32]
 80027de:	61a3      	str	r3, [r4, #24]
}
 80027e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 80027e4:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027e6:	3009      	adds	r0, #9
        readData(currentMovieOffset, 8);
 80027e8:	2208      	movs	r2, #8
        frameNumber++;
 80027ea:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027ec:	f020 0101 	bic.w	r1, r0, #1
        readData(currentMovieOffset, 8);
 80027f0:	4620      	mov	r0, r4
        frameNumber++;
 80027f2:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027f4:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 80027f6:	f7ff ffa3 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 80027fa:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80027fe:	4620      	mov	r0, r4
 8002800:	4649      	mov	r1, r9
 8002802:	f7ff ff8e 	bl	8002722 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002806:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo = getU16(currentMovieOffset);
 800280a:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff ff88 	bl	8002722 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002812:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002816:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff ff6d 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800281e:	45b0      	cmp	r8, r6
 8002820:	d1d2      	bne.n	80027c8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002822:	42bd      	cmp	r5, r7
 8002824:	d1d0      	bne.n	80027c8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002826:	2800      	cmp	r0, #0
 8002828:	d0ce      	beq.n	80027c8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800282a:	2001      	movs	r0, #1
 800282c:	e7d8      	b.n	80027e0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800282e:	bf00      	nop
 8002830:	08020982 	.word	0x08020982
 8002834:	080209cb 	.word	0x080209cb
 8002838:	080208cf 	.word	0x080208cf

0800283c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 800283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002840:	4604      	mov	r4, r0
 8002842:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002846:	468a      	mov	sl, r1
 8002848:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 800284a:	6981      	ldr	r1, [r0, #24]
 800284c:	2208      	movs	r2, #8
{
 800284e:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 8002850:	f7ff ff76 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002854:	69a7      	ldr	r7, [r4, #24]
 8002856:	4620      	mov	r0, r4
 8002858:	1d39      	adds	r1, r7, #4
 800285a:	f7ff ff4d 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800285e:	f107 0108 	add.w	r1, r7, #8
 8002862:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002864:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff ff6a 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 800286c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800286e:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002870:	b933      	cbnz	r3, 8002880 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 8002874:	f240 11ab 	movw	r1, #427	; 0x1ab
 8002878:	4a3b      	ldr	r2, [pc, #236]	; (8002968 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 800287a:	483c      	ldr	r0, [pc, #240]	; (800296c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 800287c:	f01c fac2 	bl	801ee04 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002880:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 8002882:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002884:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002888:	f00b ff24 	bl	800e6d4 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 800288c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002890:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 8002892:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002894:	a824      	add	r0, sp, #144	; 0x90
 8002896:	f005 fe6c 	bl	8008572 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 800289a:	462a      	mov	r2, r5
 800289c:	4639      	mov	r1, r7
 800289e:	a824      	add	r0, sp, #144	; 0x90
 80028a0:	f006 fde8 	bl	8009474 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 80028a4:	2101      	movs	r1, #1
 80028a6:	a824      	add	r0, sp, #144	; 0x90
 80028a8:	f005 ff66 	bl	8008778 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 80028ac:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 80028ae:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 80028b0:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 80028b4:	f006 f804 	bl	80088c0 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 80028b8:	f9ba 5002 	ldrsh.w	r5, [sl, #2]
    while (cinfo.output_scanline < startY)
 80028bc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80028be:	42ab      	cmp	r3, r5
 80028c0:	d329      	bcc.n	8002916 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xda>
    const uint32_t startX = area.x;
 80028c2:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 80028c6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80028ca:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 80028ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 80028d0:	fb08 6605 	mla	r6, r8, r5, r6
 80028d4:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 80028d6:	f8ba 5002 	ldrh.w	r5, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80028da:	f8df b094 	ldr.w	fp, [pc, #148]	; 8002970 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 80028de:	b23f      	sxth	r7, r7
 80028e0:	429f      	cmp	r7, r3
 80028e2:	bf28      	it	cs
 80028e4:	461f      	movcs	r7, r3
 80028e6:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80028ea:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 80028ee:	441d      	add	r5, r3
 80028f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 80028f2:	b22d      	sxth	r5, r5
 80028f4:	429d      	cmp	r5, r3
 80028f6:	bf28      	it	cs
 80028f8:	461d      	movcs	r5, r3
    while (cinfo.output_scanline < endY)
 80028fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80028fc:	42ab      	cmp	r3, r5
 80028fe:	d310      	bcc.n	8002922 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe6>
    jpeg_finish_decompress(&cinfo);
 8002900:	a824      	add	r0, sp, #144	; 0x90
 8002902:	f005 ff5b 	bl	80087bc <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 8002906:	a824      	add	r0, sp, #144	; 0x90
 8002908:	f005 fe80 	bl	800860c <jpeg_destroy_decompress>
}
 800290c:	2001      	movs	r0, #1
 800290e:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8002912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002916:	2201      	movs	r2, #1
 8002918:	a901      	add	r1, sp, #4
 800291a:	a824      	add	r0, sp, #144	; 0x90
 800291c:	f006 f819 	bl	8008952 <jpeg_read_scanlines>
 8002920:	e7cc      	b.n	80028bc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002922:	2201      	movs	r2, #1
 8002924:	a901      	add	r1, sp, #4
 8002926:	a824      	add	r0, sp, #144	; 0x90
 8002928:	f006 f813 	bl	8008952 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 800292c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800292e:	4649      	mov	r1, r9
 8002930:	4452      	add	r2, sl
 8002932:	42b9      	cmp	r1, r7
 8002934:	f102 0203 	add.w	r2, r2, #3
 8002938:	d301      	bcc.n	800293e <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x102>
        lineptr += framebuffer_width; //move to next line
 800293a:	4446      	add	r6, r8
 800293c:	e7dd      	b.n	80028fa <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xbe>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 800293e:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8002942:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8002946:	00c0      	lsls	r0, r0, #3
 8002948:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 800294c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002950:	4303      	orrs	r3, r0
 8002952:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8002956:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 800295a:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 800295e:	3101      	adds	r1, #1
 8002960:	e7e7      	b.n	8002932 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf6>
 8002962:	bf00      	nop
 8002964:	080209fe 	.word	0x080209fe
 8002968:	08020a54 	.word	0x08020a54
 800296c:	080208cf 	.word	0x080208cf
 8002970:	fffff800 	.word	0xfffff800

08002974 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002974:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002976:	6803      	ldr	r3, [r0, #0]
 8002978:	bf38      	it	cc
 800297a:	2101      	movcc	r1, #1
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800297e:	b570      	push	{r4, r5, r6, lr}
 8002980:	460d      	mov	r5, r1
 8002982:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002984:	4798      	blx	r3
 8002986:	42a8      	cmp	r0, r5
 8002988:	d204      	bcs.n	8002994 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	4620      	mov	r0, r4
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4798      	blx	r3
 8002992:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002994:	1e6b      	subs	r3, r5, #1
 8002996:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002998:	2210      	movs	r2, #16
 800299a:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800299c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80029a0:	f106 0108 	add.w	r1, r6, #8
 80029a4:	f7ff fecc 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80029a8:	f106 0110 	add.w	r1, r6, #16
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff fea3 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80029b2:	6a23      	ldr	r3, [r4, #32]
 80029b4:	3b04      	subs	r3, #4
 80029b6:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80029b8:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80029bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080029c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 80029c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 80029c4:	2100      	movs	r1, #0
{
 80029c6:	4604      	mov	r4, r0
    readData(0, 72);
 80029c8:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 80029ca:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80029cc:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 80029d0:	f7ff feb6 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80029d4:	69a7      	ldr	r7, [r4, #24]
 80029d6:	2304      	movs	r3, #4
 80029d8:	4a63      	ldr	r2, [pc, #396]	; (8002b68 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80029da:	4639      	mov	r1, r7
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff fe7b 	bl	80026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80029e2:	b140      	cbz	r0, 80029f6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 80029e4:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80029e6:	4a61      	ldr	r2, [pc, #388]	; (8002b6c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80029e8:	21f2      	movs	r1, #242	; 0xf2
        lastError = AVI_ERROR_NOT_RIFF;
 80029ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 80029ee:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80029f0:	4860      	ldr	r0, [pc, #384]	; (8002b74 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80029f2:	f01c fa07 	bl	801ee04 <__assert_func>
    currentMovieOffset += 8;
 80029f6:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80029fa:	2304      	movs	r3, #4
 80029fc:	4a5e      	ldr	r2, [pc, #376]	; (8002b78 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80029fe:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002a00:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002a02:	f7ff fe69 	bl	80026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002a06:	b130      	cbz	r0, 8002a16 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002a08:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002a0a:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002a0c:	21fa      	movs	r1, #250	; 0xfa
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002a0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 8002a12:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002a14:	e7ec      	b.n	80029f0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002a16:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002a1e:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002a20:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002a22:	f7ff fe59 	bl	80026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002a26:	4606      	mov	r6, r0
 8002a28:	b138      	cbz	r0, 8002a3a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002a2a:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	; (8002b6c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002a2e:	f240 1101 	movw	r1, #257	; 0x101
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002a32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 8002a36:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002a38:	e7da      	b.n	80029f0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002a3a:	f107 0110 	add.w	r1, r7, #16
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff fe5a 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002a44:	4605      	mov	r5, r0
 8002a46:	b920      	cbnz	r0, 8002a52 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002a4a:	f240 1107 	movw	r1, #263	; 0x107
 8002a4e:	4a47      	ldr	r2, [pc, #284]	; (8002b6c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002a50:	e7ce      	b.n	80029f0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 8002a52:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 8002a56:	2304      	movs	r3, #4
 8002a58:	4a4c      	ldr	r2, [pc, #304]	; (8002b8c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	f7ff fe3b 	bl	80026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d04b      	beq.n	8002afe <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002a66:	2306      	movs	r3, #6
 8002a68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	4a48      	ldr	r2, [pc, #288]	; (8002b90 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002a70:	f107 0118 	add.w	r1, r7, #24
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff fe2f 	bl	80026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d041      	beq.n	8002b02 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002a7e:	2307      	movs	r3, #7
 8002a80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002a84:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002a86:	4f43      	ldr	r7, [pc, #268]	; (8002b94 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002a88:	220c      	movs	r2, #12
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f7ff fe57 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002a92:	f105 0608 	add.w	r6, r5, #8
 8002a96:	2304      	movs	r3, #4
 8002a98:	463a      	mov	r2, r7
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4631      	mov	r1, r6
 8002a9e:	f7ff fe1b 	bl	80026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002aa2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d04a      	beq.n	8002b40 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d14a      	bne.n	8002b44 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002ab0:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002ab2:	42ab      	cmp	r3, r5
 8002ab4:	d84a      	bhi.n	8002b4c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002ab6:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002aba:	1d29      	adds	r1, r5, #4
 8002abc:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002abe:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002ac0:	9101      	str	r1, [sp, #4]
 8002ac2:	f7ff fe19 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002ac6:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002ac8:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002aca:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff fe13 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002ad2:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4631      	mov	r1, r6
 8002ada:	f7ff fe31 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002ade:	2304      	movs	r3, #4
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fdf7 	bl	80026d8 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d139      	bne.n	8002b62 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 8002aee:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002af0:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8002af2:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002af4:	69a3      	ldr	r3, [r4, #24]
 8002af6:	6223      	str	r3, [r4, #32]
}
 8002af8:	b002      	add	sp, #8
 8002afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002afe:	2601      	movs	r6, #1
 8002b00:	e7b4      	b.n	8002a6c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 8002b02:	2e00      	cmp	r6, #0
 8002b04:	d0be      	beq.n	8002a84 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002b06:	f107 0120 	add.w	r1, r7, #32
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f7ff fdf4 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002b14:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002b18:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b1c:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7ff fdea 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002b24:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002b28:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7ff fde4 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002b30:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002b34:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff fdde 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002b3c:	6120      	str	r0, [r4, #16]
 8002b3e:	e7a1      	b.n	8002a84 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0b8      	beq.n	8002ab6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002b44:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002b46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002b4a:	e7d5      	b.n	8002af8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff fdd3 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002b52:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002b54:	220c      	movs	r2, #12
        listOffset += listSize;
 8002b56:	4405      	add	r5, r0
        readData(listOffset, 12);
 8002b58:	4620      	mov	r0, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	f7ff fdf0 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
 8002b60:	e797      	b.n	8002a92 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002b62:	230b      	movs	r3, #11
 8002b64:	e7ef      	b.n	8002b46 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002b66:	bf00      	nop
 8002b68:	08020aae 	.word	0x08020aae
 8002b6c:	08020acc 	.word	0x08020acc
 8002b70:	08020ab3 	.word	0x08020ab3
 8002b74:	080208cf 	.word	0x080208cf
 8002b78:	08020af9 	.word	0x08020af9
 8002b7c:	08020afe 	.word	0x08020afe
 8002b80:	08020b16 	.word	0x08020b16
 8002b84:	08020b1b 	.word	0x08020b1b
 8002b88:	08020b31 	.word	0x08020b31
 8002b8c:	08020b3d 	.word	0x08020b3d
 8002b90:	08020b42 	.word	0x08020b42
 8002b94:	08020b47 	.word	0x08020b47
 8002b98:	08020b4c 	.word	0x08020b4c

08002b9c <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002b9c:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002ba4:	f7ff bf0c 	b.w	80029c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002ba8 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002ba8:	b510      	push	{r4, lr}
    movieData = 0;
 8002baa:	2300      	movs	r3, #0
{
 8002bac:	4604      	mov	r4, r0
 8002bae:	4608      	mov	r0, r1
    movieData = 0;
 8002bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8002bb2:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002bb4:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4798      	blx	r3
 8002bba:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002bbc:	4620      	mov	r0, r4
}
 8002bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002bc2:	f7ff befd 	b.w	80029c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002bc6 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002bc6:	b4f0      	push	{r4, r5, r6, r7}
 8002bc8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002bcc:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 8002bd0:	b12a      	cbz	r2, 8002bde <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002bd2:	b123      	cbz	r3, 8002bde <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002bd4:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 8002bd8:	bcf0      	pop	{r4, r5, r6, r7}
 8002bda:	f7ff bd01 	b.w	80025e0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002bde:	bcf0      	pop	{r4, r5, r6, r7}
 8002be0:	4770      	bx	lr
	...

08002be4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be8:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002bea:	6943      	ldr	r3, [r0, #20]
{
 8002bec:	b085      	sub	sp, #20
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460f      	mov	r7, r1
 8002bf2:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002bf4:	b92b      	cbnz	r3, 8002c02 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002bf8:	2177      	movs	r1, #119	; 0x77
 8002bfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002bfc:	482a      	ldr	r0, [pc, #168]	; (8002ca8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002bfe:	f01c f901 	bl	801ee04 <__assert_func>
    readData(currentMovieOffset, 8);
 8002c02:	2208      	movs	r2, #8
 8002c04:	6981      	ldr	r1, [r0, #24]
 8002c06:	f7ff fd9b 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002c0a:	69a6      	ldr	r6, [r4, #24]
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	4631      	mov	r1, r6
 8002c10:	f7ff fd87 	bl	8002722 <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c14:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo = getU16(currentMovieOffset);
 8002c16:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff fd82 	bl	8002722 <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c1e:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c20:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff fd68 	bl	80026f8 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002c28:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c2e:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c30:	1842      	adds	r2, r0, r1
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d227      	bcs.n	8002c86 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002c36:	f243 0330 	movw	r3, #12336	; 0x3030
 8002c3a:	459b      	cmp	fp, r3
 8002c3c:	d117      	bne.n	8002c6e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c3e:	f246 3364 	movw	r3, #25444	; 0x6364
 8002c42:	459a      	cmp	sl, r3
 8002c44:	d113      	bne.n	8002c6e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c46:	b190      	cbz	r0, 8002c6e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c48:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002c4a:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f7ff fd77 	bl	8002740 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c54:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c56:	462a      	mov	r2, r5
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f8cd 8000 	str.w	r8, [sp]
 8002c5e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002c62:	463b      	mov	r3, r7
 8002c64:	f7ff ffaf 	bl	8002bc6 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002c68:	6963      	ldr	r3, [r4, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002c6e:	69a3      	ldr	r3, [r4, #24]
 8002c70:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8002c72:	b18d      	cbz	r5, 8002c98 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 8002c74:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002c76:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002c78:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c80:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002c82:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002c84:	d10a      	bne.n	8002c9c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8002c86:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8002c88:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8002c8a:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002c8c:	61a3      	str	r3, [r4, #24]
}
 8002c8e:	f080 0001 	eor.w	r0, r0, #1
 8002c92:	b005      	add	sp, #20
 8002c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            currentMovieOffset += 8;
 8002c98:	3308      	adds	r3, #8
 8002c9a:	e7eb      	b.n	8002c74 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	e7f6      	b.n	8002c8e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002ca0:	08020982 	.word	0x08020982
 8002ca4:	08020b51 	.word	0x08020b51
 8002ca8:	080208cf 	.word	0x080208cf

08002cac <_GLOBAL__sub_I_touchgfx_init>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8002cac:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002cae:	4e24      	ldr	r6, [pc, #144]	; (8002d40 <_GLOBAL__sub_I_touchgfx_init+0x94>)
{
public:

    STM32TouchController() {}
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002cb2:	4c25      	ldr	r4, [pc, #148]	; (8002d48 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002cb4:	4630      	mov	r0, r6
static LCD16bpp display;
 8002cb6:	4d25      	ldr	r5, [pc, #148]	; (8002d4c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002cb8:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002cba:	f7ff faed 	bl	8002298 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f019 f89c 	bl	801bdfc <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8002cc4:	4822      	ldr	r0, [pc, #136]	; (8002d50 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8002cc6:	f016 ff9d 	bl	8019c04 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
        : dma(dmaInterface),
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
          mcuInstrumentation(0),
 8002ccc:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002cce:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002cd2:	4821      	ldr	r0, [pc, #132]	; (8002d58 <_GLOBAL__sub_I_touchgfx_init+0xac>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002cd4:	861a      	strh	r2, [r3, #48]	; 0x30
          useAuxiliaryLCD(false),
 8002cd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          lastY(0),
 8002cda:	665a      	str	r2, [r3, #100]	; 0x64
          updateMCULoad(0),
 8002cdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8002ce0:	675a      	str	r2, [r3, #116]	; 0x74
          touchController(touchCtrl),
 8002ce2:	60dc      	str	r4, [r3, #12]
          auxiliaryLCD(0),
 8002ce4:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
          touchSampleRate(1),
 8002ce8:	491c      	ldr	r1, [pc, #112]	; (8002d5c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          vSyncCompensationEnabled(false),
 8002cea:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002cee:	491c      	ldr	r1, [pc, #112]	; (8002d60 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
 8002cf0:	6799      	str	r1, [r3, #120]	; 0x78
        instance = this;
 8002cf2:	491c      	ldr	r1, [pc, #112]	; (8002d64 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8002cf4:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002cf6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002cfa:	8001      	strh	r1, [r0, #0]
 8002cfc:	481a      	ldr	r0, [pc, #104]	; (8002d68 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002cfe:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d00:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d04:	4819      	ldr	r0, [pc, #100]	; (8002d6c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          buttonController(0),
 8002d06:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002d0a:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002d0e:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002d12:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
          frameBuffer0(0),
 8002d16:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
 8002d1a:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002d1e:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
          lastX(0),
 8002d22:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
          lcdRef(display),
 8002d26:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d2a:	8001      	strh	r1, [r0, #0]
 8002d2c:	4810      	ldr	r0, [pc, #64]	; (8002d70 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d32:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002d34:	490f      	ldr	r1, [pc, #60]	; (8002d74 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 8002d36:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002d38:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000045c 	.word	0x2000045c
 8002d44:	08020360 	.word	0x08020360
 8002d48:	20000458 	.word	0x20000458
 8002d4c:	20001278 	.word	0x20001278
 8002d50:	2000043c 	.word	0x2000043c
 8002d54:	200011fc 	.word	0x200011fc
 8002d58:	20014684 	.word	0x20014684
 8002d5c:	01000001 	.word	0x01000001
 8002d60:	01010000 	.word	0x01010000
 8002d64:	20014690 	.word	0x20014690
 8002d68:	2001468a 	.word	0x2001468a
 8002d6c:	20014686 	.word	0x20014686
 8002d70:	2001468c 	.word	0x2001468c
 8002d74:	20014688 	.word	0x20014688
 8002d78:	080204ec 	.word	0x080204ec

08002d7c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002d7c:	4801      	ldr	r0, [pc, #4]	; (8002d84 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002d7e:	f7ff ba67 	b.w	8002250 <_ZN8STM32DMAD1Ev>
 8002d82:	bf00      	nop
 8002d84:	2000045c 	.word	0x2000045c

08002d88 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002d88:	2000      	movs	r0, #0
 8002d8a:	4770      	bx	lr

08002d8c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002d8c:	8081      	strh	r1, [r0, #4]
    }
 8002d8e:	4770      	bx	lr

08002d90 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002d90:	80c1      	strh	r1, [r0, #6]
    }
 8002d92:	4770      	bx	lr

08002d94 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002d94:	8101      	strh	r1, [r0, #8]
    }
 8002d96:	4770      	bx	lr

08002d98 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002d98:	8141      	strh	r1, [r0, #10]
    }
 8002d9a:	4770      	bx	lr

08002d9c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002d9c:	4770      	bx	lr

08002d9e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002d9e:	4770      	bx	lr

08002da0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002da0:	4770      	bx	lr

08002da2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002da2:	4770      	bx	lr

08002da4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002da4:	4770      	bx	lr

08002da6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002da6:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002da8:	88c4      	ldrh	r4, [r0, #6]
 8002daa:	6803      	ldr	r3, [r0, #0]
 8002dac:	1b12      	subs	r2, r2, r4
 8002dae:	8884      	ldrh	r4, [r0, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	1b09      	subs	r1, r1, r4
 8002db4:	b212      	sxth	r2, r2
    }
 8002db6:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002dba:	b209      	sxth	r1, r1
 8002dbc:	4718      	bx	r3

08002dbe <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc2:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002dce:	6010      	str	r0, [r2, #0]
    }
 8002dd0:	4770      	bx	lr

08002dd2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002dd2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002dd6:	b11a      	cbz	r2, 8002de0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002dd8:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002ddc:	b102      	cbz	r2, 8002de0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002dde:	6018      	str	r0, [r3, #0]
        }
    }
 8002de0:	4770      	bx	lr

08002de2 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002de2:	2000      	movs	r0, #0
 8002de4:	4770      	bx	lr

08002de6 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002de6:	888b      	ldrh	r3, [r1, #4]
 8002de8:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002dea:	2001      	movs	r0, #1
 8002dec:	4770      	bx	lr

08002dee <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002dee:	4770      	bx	lr

08002df0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002df0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002df4:	4770      	bx	lr

08002df6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002df6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002dfa:	4770      	bx	lr

08002dfc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002dfc:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002dfe:	b510      	push	{r4, lr}
        return rect.width;
 8002e00:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002e04:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002e08:	8002      	strh	r2, [r0, #0]
 8002e0a:	8042      	strh	r2, [r0, #2]
 8002e0c:	8084      	strh	r4, [r0, #4]
 8002e0e:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002e10:	bd10      	pop	{r4, pc}

08002e12 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002e12:	2200      	movs	r2, #0
 8002e14:	8002      	strh	r2, [r0, #0]
 8002e16:	8042      	strh	r2, [r0, #2]
 8002e18:	8082      	strh	r2, [r0, #4]
 8002e1a:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002e1c:	4770      	bx	lr

08002e1e <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8002e1e:	7701      	strb	r1, [r0, #28]
    }
 8002e20:	4770      	bx	lr

08002e22 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8002e22:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8002e26:	4770      	bx	lr

08002e28 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8002e28:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    }
 8002e2c:	4770      	bx	lr

08002e2e <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 8002e2e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    }
 8002e32:	4770      	bx	lr

08002e34 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8002e34:	2001      	movs	r0, #1
 8002e36:	4770      	bx	lr

08002e38 <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8002e38:	3098      	adds	r0, #152	; 0x98
 8002e3a:	4770      	bx	lr

08002e3c <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8002e3c:	308c      	adds	r0, #140	; 0x8c
 8002e3e:	4770      	bx	lr

08002e40 <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8002e40:	3084      	adds	r0, #132	; 0x84
 8002e42:	4770      	bx	lr

08002e44 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 8002e44:	4770      	bx	lr
	...

08002e48 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002e4a:	2290      	movs	r2, #144	; 0x90
 8002e4c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002e50:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e5c:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002e60:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002e62:	480a      	ldr	r0, [pc, #40]	; (8002e8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002e6e:	6911      	ldr	r1, [r2, #16]
 8002e70:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002e74:	3901      	subs	r1, #1
 8002e76:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002e7a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002e82:	4770      	bx	lr
 8002e84:	40016800 	.word	0x40016800
 8002e88:	2000135e 	.word	0x2000135e
 8002e8c:	2000135c 	.word	0x2000135c

08002e90 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002e92:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002e96:	4770      	bx	lr
 8002e98:	40016800 	.word	0x40016800

08002e9c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002e9e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002ea0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ea6:	4770      	bx	lr
 8002ea8:	40016800 	.word	0x40016800

08002eac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002eae:	6953      	ldr	r3, [r2, #20]
 8002eb0:	03db      	lsls	r3, r3, #15
{
 8002eb2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002eb4:	d51e      	bpl.n	8002ef4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002ebc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002ec0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ec4:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ec8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002ecc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002ed0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ed2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ed6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ed8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002edc:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ede:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002ee2:	d2f9      	bcs.n	8002ed8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002ee4:	3b20      	subs	r3, #32
 8002ee6:	f113 0f20 	cmn.w	r3, #32
 8002eea:	d1f2      	bne.n	8002ed2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ef0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
 8002ef6:	bf00      	nop
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002efc:	4770      	bx	lr

08002efe <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8002efe:	4770      	bx	lr

08002f00 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8002f00:	4770      	bx	lr

08002f02 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002f02:	2338      	movs	r3, #56	; 0x38
 8002f04:	2200      	movs	r2, #0
 8002f06:	fb01 3303 	mla	r3, r1, r3, r3
 8002f0a:	54c2      	strb	r2, [r0, r3]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002f0c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f10:	b90b      	cbnz	r3, 8002f16 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002f12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f14:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002f16:	4770      	bx	lr

08002f18 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002f18:	4770      	bx	lr

08002f1a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8002f1a:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    }
 8002f1e:	4770      	bx	lr

08002f20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002f20:	b510      	push	{r4, lr}
 8002f22:	4604      	mov	r4, r0
 8002f24:	2158      	movs	r1, #88	; 0x58
 8002f26:	f01b f827 	bl	801df78 <_ZdlPvj>
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	bd10      	pop	{r4, pc}

08002f2e <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	4604      	mov	r4, r0
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	f01b f820 	bl	801df78 <_ZdlPvj>
 8002f38:	4620      	mov	r0, r4
 8002f3a:	bd10      	pop	{r4, pc}

08002f3c <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
 8002f40:	21bc      	movs	r1, #188	; 0xbc
 8002f42:	f01b f819 	bl	801df78 <_ZdlPvj>
 8002f46:	4620      	mov	r0, r4
 8002f48:	bd10      	pop	{r4, pc}
	...

08002f4c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4604      	mov	r4, r0
    HAL::initialize();
 8002f50:	f012 fc1b 	bl	801578a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002f58:	f016 fc86 	bl	8019868 <_ZN8touchgfx11Application11getInstanceEv>
 8002f5c:	4601      	mov	r1, r0
 8002f5e:	4620      	mov	r0, r4
 8002f60:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002f66:	4620      	mov	r0, r4
 8002f68:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002f72:	47a8      	blx	r5
        mjpegDecoders[index] = &decoder;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002f78:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002f7a:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002f7e:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002f80:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	c007f800 	.word	0xc007f800
 8002f8c:	20001304 	.word	0x20001304
 8002f90:	20001b9c 	.word	0x20001b9c
 8002f94:	c00bf400 	.word	0xc00bf400

08002f98 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002f98:	f012 bbde 	b.w	8015758 <_ZN8touchgfx3HAL10beginFrameEv>

08002f9c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8002f9c:	f012 bbe8 	b.w	8015770 <_ZN8touchgfx3HAL8endFrameEv>

08002fa0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002fa0:	f012 bba4 	b.w	80156ec <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002fa4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002fa4:	f012 bd13 	b.w	80159ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002fa8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002fa8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002fac:	b112      	cbz	r2, 8002fb4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002fae:	6803      	ldr	r3, [r0, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4718      	bx	r3
    }
 8002fb4:	4770      	bx	lr
	...

08002fb8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8002fb8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002fba:	b131      	cbz	r1, 8002fca <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002fbe:	f240 1197 	movw	r1, #407	; 0x197
 8002fc2:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002fc4:	4804      	ldr	r0, [pc, #16]	; (8002fd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002fc6:	f01b ff1d 	bl	801ee04 <__assert_func>
    }
 8002fca:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002fce:	bd08      	pop	{r3, pc}
 8002fd0:	08020bec 	.word	0x08020bec
 8002fd4:	08020c00 	.word	0x08020c00
 8002fd8:	08020d8d 	.word	0x08020d8d

08002fdc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002fdc:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002fde:	b131      	cbz	r1, 8002fee <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002fe2:	f240 1191 	movw	r1, #401	; 0x191
 8002fe6:	4a06      	ldr	r2, [pc, #24]	; (8003000 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002fe8:	4806      	ldr	r0, [pc, #24]	; (8003004 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002fea:	f01b ff0b 	bl	801ee04 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002fee:	6840      	ldr	r0, [r0, #4]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	6803      	ldr	r3, [r0, #0]
    }
 8002ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4718      	bx	r3
 8002ffc:	08020bec 	.word	0x08020bec
 8003000:	08020dcf 	.word	0x08020dcf
 8003004:	08020d8d 	.word	0x08020d8d

08003008 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003008:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800300a:	b129      	cbz	r1, 8003018 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 800300e:	217a      	movs	r1, #122	; 0x7a
 8003010:	4a03      	ldr	r2, [pc, #12]	; (8003020 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8003012:	4804      	ldr	r0, [pc, #16]	; (8003024 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8003014:	f01b fef6 	bl	801ee04 <__assert_func>
    }
 8003018:	6900      	ldr	r0, [r0, #16]
 800301a:	bd08      	pop	{r3, pc}
 800301c:	08020bec 	.word	0x08020bec
 8003020:	08020f80 	.word	0x08020f80
 8003024:	08020d8d 	.word	0x08020d8d

08003028 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003028:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800302a:	b129      	cbz	r1, 8003038 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 800302e:	2183      	movs	r1, #131	; 0x83
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8003034:	f01b fee6 	bl	801ee04 <__assert_func>
        stream.tickCount = 0;
 8003038:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 800303a:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 800303c:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003040:	bd08      	pop	{r3, pc}
 8003042:	bf00      	nop
 8003044:	08020bec 	.word	0x08020bec
 8003048:	08021138 	.word	0x08021138
 800304c:	08020d8d 	.word	0x08020d8d

08003050 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003050:	b510      	push	{r4, lr}
 8003052:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003054:	b129      	cbz	r1, 8003062 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003056:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8003058:	21a4      	movs	r1, #164	; 0xa4
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 800305c:	4827      	ldr	r0, [pc, #156]	; (80030fc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 800305e:	f01b fed1 	bl	801ee04 <__assert_func>
        switch (cmd)
 8003062:	2a05      	cmp	r2, #5
 8003064:	d834      	bhi.n	80030d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8003066:	e8df f002 	tbb	[pc, r2]
 800306a:	2903      	.short	0x2903
 800306c:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8003070:	6840      	ldr	r0, [r0, #4]
 8003072:	6803      	ldr	r3, [r0, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4798      	blx	r3
 8003078:	b350      	cbz	r0, 80030d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 800307a:	f04f 31ff 	mov.w	r1, #4294967295
 800307e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003080:	f003 fd56 	bl	8006b30 <osMutexAcquire>
                stream.cancelDecoding = false;
 8003084:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8003086:	2201      	movs	r2, #1
                if (stream.isStopped)
 8003088:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 800308c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8003090:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8003094:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8003096:	6163      	str	r3, [r4, #20]
                if (stream.isStopped)
 8003098:	b101      	cbz	r1, 800309c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 800309a:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 800309c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 80030a0:	6263      	str	r3, [r4, #36]	; 0x24
                if (stream.nextBuffer == 0)
 80030a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030a4:	b92b      	cbnz	r3, 80030b2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 80030a6:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 80030a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 80030aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 80030ae:	f003 fe29 	bl	8006d04 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 80030b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 80030b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 80030b8:	f003 bd6a 	b.w	8006b90 <osMutexRelease>
            stream.isPlaying = false;
 80030bc:	2300      	movs	r3, #0
 80030be:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 80030c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 80030c6:	e003      	b.n	80030d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 80030c8:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 80030ce:	6143      	str	r3, [r0, #20]
    }
 80030d0:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80030d2:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 80030d8:	6143      	str	r3, [r0, #20]
 80030da:	e7f2      	b.n	80030c2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 80030dc:	2300      	movs	r3, #0
 80030de:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e7ed      	b.n	80030c2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 80030e6:	3b00      	subs	r3, #0
 80030e8:	bf18      	it	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 80030f0:	e7ee      	b.n	80030d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 80030f2:	bf00      	nop
 80030f4:	08020bec 	.word	0x08020bec
 80030f8:	080212f7 	.word	0x080212f7
 80030fc:	08020d8d 	.word	0x08020d8d

08003100 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4604      	mov	r4, r0
 8003104:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8003106:	b129      	cbz	r1, 8003114 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003108:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 800310a:	21e7      	movs	r1, #231	; 0xe7
 800310c:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 800310e:	4832      	ldr	r0, [pc, #200]	; (80031d8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8003110:	f01b fe78 	bl	801ee04 <__assert_func>
        if (stream.isPlaying)
 8003114:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003118:	b133      	cbz	r3, 8003128 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003122:	6943      	ldr	r3, [r0, #20]
 8003124:	4413      	add	r3, r2
 8003126:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8003128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04d      	beq.n	80031ca <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800312e:	69e1      	ldr	r1, [r4, #28]
 8003130:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003134:	4353      	muls	r3, r2
 8003136:	68a2      	ldr	r2, [r4, #8]
 8003138:	434a      	muls	r2, r1
 800313a:	4293      	cmp	r3, r2
 800313c:	d220      	bcs.n	8003180 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 800313e:	6a23      	ldr	r3, [r4, #32]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d042      	beq.n	80031ca <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8003144:	f04f 31ff 	mov.w	r1, #4294967295
 8003148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800314a:	f003 fcf1 	bl	8006b30 <osMutexAcquire>
            if (stream.seek_to_frame > 0)
 800314e:	6a23      	ldr	r3, [r4, #32]
 8003150:	b10b      	cbz	r3, 8003156 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	62e3      	str	r3, [r4, #44]	; 0x2c
            if (stream.nextBuffer != 0)
 8003156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003158:	b9fb      	cbnz	r3, 800319a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 800315a:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 800315c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800315e:	f003 fd17 	bl	8006b90 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8003162:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003166:	b90b      	cbnz	r3, 800316c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8003168:	6a23      	ldr	r3, [r4, #32]
 800316a:	b13b      	cbz	r3, 800317c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 800316c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800316e:	b92b      	cbnz	r3, 800317c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8003170:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8003172:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8003174:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8003178:	f003 fdc4 	bl	8006d04 <osSemaphoreRelease>
    }
 800317c:	4628      	mov	r0, r5
 800317e:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8003180:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8003184:	2800      	cmp	r0, #0
 8003186:	d0dd      	beq.n	8003144 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800318e:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003190:	bf98      	it	ls
 8003192:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003196:	6262      	str	r2, [r4, #36]	; 0x24
 8003198:	e7d4      	b.n	8003144 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 800319a:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 800319c:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 80031a0:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 80031a2:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 80031a4:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 80031a6:	68e2      	ldr	r2, [r4, #12]
 80031a8:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 80031aa:	68a2      	ldr	r2, [r4, #8]
 80031ac:	3201      	adds	r2, #1
 80031ae:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80031b0:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 80031b2:	6833      	ldr	r3, [r6, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	d1ce      	bne.n	800315a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 80031bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1cb      	bne.n	800315c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 80031c4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80031c8:	e7c8      	b.n	800315c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 80031ca:	2501      	movs	r5, #1
 80031cc:	e7c9      	b.n	8003162 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 80031ce:	bf00      	nop
 80031d0:	08020bec 	.word	0x08020bec
 80031d4:	080214ce 	.word	0x080214ce
 80031d8:	08020d8d 	.word	0x08020d8d
 80031dc:	20014690 	.word	0x20014690

080031e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80031e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ec:	609a      	str	r2, [r3, #8]
}
 80031ee:	4770      	bx	lr
 80031f0:	e000e100 	.word	0xe000e100

080031f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80031f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80031fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800320a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800320e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003212:	f3bf 8f6f 	isb	sy
}
 8003216:	4770      	bx	lr
 8003218:	e000e100 	.word	0xe000e100

0800321c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003220:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8003224:	bb38      	cbnz	r0, 8003276 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x5a>
        streams[handle].isActive = true;
 8003226:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003228:	6098      	str	r0, [r3, #8]
 800322a:	60d8      	str	r0, [r3, #12]
        streams[handle].isActive = true;
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
                streams[i] = Stream();
 800322e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003232:	6158      	str	r0, [r3, #20]
 8003234:	879a      	strh	r2, [r3, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003236:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800323a:	6198      	str	r0, [r3, #24]
 800323c:	61d8      	str	r0, [r3, #28]
 800323e:	6218      	str	r0, [r3, #32]
 8003240:	6258      	str	r0, [r3, #36]	; 0x24
 8003242:	6298      	str	r0, [r3, #40]	; 0x28
 8003244:	62d8      	str	r0, [r3, #44]	; 0x2c
 8003246:	6318      	str	r0, [r3, #48]	; 0x30
 8003248:	6358      	str	r0, [r3, #52]	; 0x34
 800324a:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
 800324e:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003250:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8003254:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
        bufferHeight = height;
 8003258:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 800325a:	6308      	str	r0, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800325c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 800325e:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003260:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8003264:	e9d3 1510 	ldrd	r1, r5, [r3, #64]	; 0x40
 8003268:	4429      	add	r1, r5
 800326a:	428c      	cmp	r4, r1
 800326c:	d90a      	bls.n	8003284 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8003270:	2158      	movs	r1, #88	; 0x58
 8003272:	4a08      	ldr	r2, [pc, #32]	; (8003294 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003274:	e003      	b.n	800327e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x62>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 8003278:	f240 11f5 	movw	r1, #501	; 0x1f5
 800327c:	4a07      	ldr	r2, [pc, #28]	; (800329c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 800327e:	4808      	ldr	r0, [pc, #32]	; (80032a0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003280:	f01b fdc0 	bl	801ee04 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003286:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 800328a:	649c      	str	r4, [r3, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 800328c:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	0802182c 	.word	0x0802182c
 8003294:	0802186c 	.word	0x0802186c
 8003298:	08021672 	.word	0x08021672
 800329c:	080216a2 	.word	0x080216a2
 80032a0:	08020d8d 	.word	0x08020d8d

080032a4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 80032a4:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 80032a6:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80032a8:	4e12      	ldr	r6, [pc, #72]	; (80032f4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 80032aa:	4605      	mov	r5, r0
 80032ac:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 80032b0:	6003      	str	r3, [r0, #0]
 80032b2:	6833      	ldr	r3, [r6, #0]
 80032b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80032b8:	b10a      	cbz	r2, 80032be <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 80032ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032bc:	b900      	cbnz	r0, 80032c0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 80032be:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80032c0:	6803      	ldr	r3, [r0, #0]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	4798      	blx	r3
        return auxiliaryLCD;
 80032c6:	6833      	ldr	r3, [r6, #0]
 80032c8:	fab0 f480 	clz	r4, r0
 80032cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032ce:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 80032d0:	b130      	cbz	r0, 80032e0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80032d2:	6803      	ldr	r3, [r0, #0]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	4798      	blx	r3
 80032d8:	2800      	cmp	r0, #0
 80032da:	bf08      	it	eq
 80032dc:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80032e0:	b92c      	cbnz	r4, 80032ee <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	4a06      	ldr	r2, [pc, #24]	; (8003300 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 80032e8:	4806      	ldr	r0, [pc, #24]	; (8003304 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 80032ea:	f01b fd8b 	bl	801ee04 <__assert_func>
    }
 80032ee:	4628      	mov	r0, r5
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
 80032f2:	bf00      	nop
 80032f4:	20014690 	.word	0x20014690
 80032f8:	08021b14 	.word	0x08021b14
 80032fc:	08021a12 	.word	0x08021a12
 8003300:	08021a70 	.word	0x08021a70
 8003304:	08021aa9 	.word	0x08021aa9

08003308 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003308:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB565 renderer;
 800330a:	4e24      	ldr	r6, [pc, #144]	; (800339c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 800330c:	6835      	ldr	r5, [r6, #0]
 800330e:	f3bf 8f5b 	dmb	ish
 8003312:	f015 0501 	ands.w	r5, r5, #1
 8003316:	d13f      	bne.n	8003398 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003318:	4630      	mov	r0, r6
 800331a:	f01a fe2f 	bl	801df7c <__cxa_guard_acquire>
 800331e:	2800      	cmp	r0, #0
 8003320:	d03a      	beq.n	8003398 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003322:	4c1f      	ldr	r4, [pc, #124]	; (80033a0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003324:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003326:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800332a:	6125      	str	r5, [r4, #16]
 800332c:	84e5      	strh	r5, [r4, #38]	; 0x26
 800332e:	62a5      	str	r5, [r4, #40]	; 0x28
 8003330:	85a5      	strh	r5, [r4, #44]	; 0x2c
 8003332:	e9c4 3500 	strd	r3, r5, [r4]
 8003336:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800333a:	f016 fec2 	bl	801a0c2 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 800333e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003342:	f014 fd17 	bl	8017d74 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8003348:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 800334a:	65a3      	str	r3, [r4, #88]	; 0x58
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 800334e:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8003352:	f7ff ffa7 	bl	80032a4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003358:	4816      	ldr	r0, [pc, #88]	; (80033b4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 800335a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800335e:	3324      	adds	r3, #36	; 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003360:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8003364:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003368:	2364      	movs	r3, #100	; 0x64
 800336a:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 800336e:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003372:	e9c4 3528 	strd	r3, r5, [r4, #160]	; 0xa0
 8003376:	2300      	movs	r3, #0
 8003378:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 800337c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8003380:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8003384:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 800338a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800338e:	f01b fd57 	bl	801ee40 <atexit>
 8003392:	4630      	mov	r0, r6
 8003394:	f01a fdfe 	bl	801df94 <__cxa_guard_release>
}
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	20001300 	.word	0x20001300
 80033a0:	20001360 	.word	0x20001360
 80033a4:	08023fa8 	.word	0x08023fa8
 80033a8:	08021b34 	.word	0x08021b34
 80033ac:	08021bac 	.word	0x08021bac
 80033b0:	08023f5c 	.word	0x08023f5c
 80033b4:	08002e45 	.word	0x08002e45
 80033b8:	08023f3c 	.word	0x08023f3c

080033bc <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80033bc:	b510      	push	{r4, lr}
        return instance;
 80033be:	4c14      	ldr	r4, [pc, #80]	; (8003410 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	b323      	cbz	r3, 800340e <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_LTDC_LineEventCallback+0x58>)
 80033c6:	4a14      	ldr	r2, [pc, #80]	; (8003418 <HAL_LTDC_LineEventCallback+0x5c>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	8811      	ldrh	r1, [r2, #0]
 80033cc:	428b      	cmp	r3, r1
 80033ce:	d113      	bne.n	80033f8 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_LTDC_LineEventCallback+0x60>)
 80033d2:	8819      	ldrh	r1, [r3, #0]
 80033d4:	f001 fd98 	bl	8004f08 <HAL_LTDC_ProgramLineEvent>
 80033d8:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80033da:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 80033de:	3301      	adds	r3, #1
 80033e0:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80033e4:	f7fe fee4 	bl	80021b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	f012 ff6b 	bl	80162c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80033ee:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80033f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80033f4:	f7fe bcee 	b.w	8001dd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80033f8:	f001 fd86 	bl	8004f08 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80033fc:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80033fe:	6803      	ldr	r3, [r0, #0]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003404:	2000      	movs	r0, #0
    }
 8003406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800340a:	f7fe bd13 	b.w	8001e34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800340e:	bd10      	pop	{r4, pc}
 8003410:	20014690 	.word	0x20014690
 8003414:	40016800 	.word	0x40016800
 8003418:	2000135e 	.word	0x2000135e
 800341c:	2000135c 	.word	0x2000135c

08003420 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 8003420:	6803      	ldr	r3, [r0, #0]
 8003422:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 8003428:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800342a:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 800342c:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 800342e:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003436:	f003 fb7b 	bl	8006b30 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 800343a:	2338      	movs	r3, #56	; 0x38
 800343c:	fb03 4205 	mla	r2, r3, r5, r4
 8003440:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003442:	b109      	cbz	r1, 8003448 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 8003444:	2100      	movs	r1, #0
 8003446:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003448:	fb03 4505 	mla	r5, r3, r5, r4
        }
        stream.cancelDecoding = true;
 800344c:	2301      	movs	r3, #1
 800344e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 8003452:	2300      	movs	r3, #0
 8003454:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 8003458:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 800345a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 800345e:	f003 bb97 	b.w	8006b90 <osMutexRelease>

08003462 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003462:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 8003464:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003468:	4604      	mov	r4, r0
 800346a:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 800346c:	4611      	mov	r1, r2
 800346e:	6858      	ldr	r0, [r3, #4]
 8003470:	6803      	ldr	r3, [r0, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4798      	blx	r3
        clearState(handle);
 8003476:	4629      	mov	r1, r5
 8003478:	4620      	mov	r0, r4
 800347a:	f7ff ffd1 	bl	8003420 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800347e:	bd38      	pop	{r3, r4, r5, pc}

08003480 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	460d      	mov	r5, r1
 8003484:	4611      	mov	r1, r2
 8003486:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003488:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800348c:	6850      	ldr	r0, [r2, #4]
 800348e:	6802      	ldr	r2, [r0, #0]
 8003490:	6896      	ldr	r6, [r2, #8]
 8003492:	461a      	mov	r2, r3
 8003494:	47b0      	blx	r6
        clearState(handle);
 8003496:	4629      	mov	r1, r5
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff ffc1 	bl	8003420 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800349e:	bd70      	pop	{r4, r5, r6, pc}

080034a0 <_GLOBAL__sub_I_lineBuffer>:
}
 80034a0:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 80034a2:	4916      	ldr	r1, [pc, #88]	; (80034fc <_GLOBAL__sub_I_lineBuffer+0x5c>)
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 80034a4:	2500      	movs	r5, #0
 80034a6:	4816      	ldr	r0, [pc, #88]	; (8003500 <_GLOBAL__sub_I_lineBuffer+0x60>)
 80034a8:	f7ff f8fe 	bl	80026a8 <_ZN20SoftwareMJPEGDecoderC1EPh>
          semDecode(0), mutexBuffers(0)
 80034ac:	4c15      	ldr	r4, [pc, #84]	; (8003504 <_GLOBAL__sub_I_lineBuffer+0x64>)
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <_GLOBAL__sub_I_lineBuffer+0x68>)
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 80034b0:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 80034b2:	462a      	mov	r2, r5
 80034b4:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 80034b6:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034b8:	f44f 7380 	mov.w	r3, #256	; 0x100
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 80034bc:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034be:	87a3      	strh	r3, [r4, #60]	; 0x3c
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 80034c0:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 80034c4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 80034c8:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
          semDecode(0), mutexBuffers(0)
 80034cc:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034d4:	e9c4 5503 	strd	r5, r5, [r4, #12]
            frame_rate_video(0), frame_rate_ticks(0),
 80034d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 80034dc:	e9c4 5507 	strd	r5, r5, [r4, #28]
            currentBuffer(0), nextBuffer(0), bufferA(0), bufferB(0),
 80034e0:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 80034e4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 80034ec:	f003 fb7a 	bl	8006be4 <osSemaphoreNew>
 80034f0:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 80034f2:	4628      	mov	r0, r5
 80034f4:	f003 fad8 	bl	8006aa8 <osMutexNew>
 80034f8:	6560      	str	r0, [r4, #84]	; 0x54
}
 80034fa:	bd38      	pop	{r3, r4, r5, pc}
 80034fc:	2000141c 	.word	0x2000141c
 8003500:	20001b9c 	.word	0x20001b9c
 8003504:	20001304 	.word	0x20001304
 8003508:	08021bf8 	.word	0x08021bf8

0800350c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800350c:	b513      	push	{r0, r1, r4, lr}
 800350e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003510:	b151      	cbz	r1, 8003528 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003512:	6803      	ldr	r3, [r0, #0]
 8003514:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003516:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003518:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800351c:	689c      	ldr	r4, [r3, #8]
 800351e:	f10d 0303 	add.w	r3, sp, #3
 8003522:	47a0      	blx	r4
        return glyph;
    }
 8003524:	b002      	add	sp, #8
 8003526:	bd10      	pop	{r4, pc}
            return 0;
 8003528:	4608      	mov	r0, r1
 800352a:	e7fb      	b.n	8003524 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

0800352c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800352c:	89c0      	ldrh	r0, [r0, #14]
 800352e:	4770      	bx	lr

08003530 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003530:	8a00      	ldrh	r0, [r0, #16]
 8003532:	4770      	bx	lr

08003534 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003534:	88c0      	ldrh	r0, [r0, #6]
 8003536:	4770      	bx	lr

08003538 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003538:	8880      	ldrh	r0, [r0, #4]
 800353a:	4770      	bx	lr

0800353c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800353c:	7a80      	ldrb	r0, [r0, #10]
    }
 800353e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003542:	4770      	bx	lr

08003544 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003544:	7a80      	ldrb	r0, [r0, #10]
    }
 8003546:	09c0      	lsrs	r0, r0, #7
 8003548:	4770      	bx	lr

0800354a <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 800354a:	2000      	movs	r0, #0
 800354c:	4770      	bx	lr
	...

08003550 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003550:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003558 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	00000000 	.word	0x00000000

0800355c <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003564:	b10a      	cbz	r2, 800356a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003566:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003568:	b900      	cbnz	r0, 800356c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800356a:	6898      	ldr	r0, [r3, #8]
    }
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20014690 	.word	0x20014690

08003574 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003574:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003576:	4770      	bx	lr

08003578 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003578:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800357a:	4770      	bx	lr

0800357c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800357c:	4770      	bx	lr

0800357e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800357e:	888b      	ldrh	r3, [r1, #4]
 8003580:	69c0      	ldr	r0, [r0, #28]
 8003582:	0adb      	lsrs	r3, r3, #11
 8003584:	680a      	ldr	r2, [r1, #0]
 8003586:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800358a:	4410      	add	r0, r2
 800358c:	4770      	bx	lr

0800358e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800358e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8003590:	b1c2      	cbz	r2, 80035c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003592:	7b13      	ldrb	r3, [r2, #12]
 8003594:	b1b3      	cbz	r3, 80035c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003596:	7b54      	ldrb	r4, [r2, #13]
 8003598:	7ad2      	ldrb	r2, [r2, #11]
 800359a:	0224      	lsls	r4, r4, #8
 800359c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80035a0:	4314      	orrs	r4, r2
 80035a2:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80035a4:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80035a6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80035aa:	8813      	ldrh	r3, [r2, #0]
 80035ac:	428b      	cmp	r3, r1
 80035ae:	d102      	bne.n	80035b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80035b0:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80035b4:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80035b6:	d805      	bhi.n	80035c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80035b8:	3801      	subs	r0, #1
 80035ba:	3204      	adds	r2, #4
 80035bc:	b280      	uxth	r0, r0
 80035be:	2800      	cmp	r0, #0
 80035c0:	d1f3      	bne.n	80035aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80035c2:	e7f7      	b.n	80035b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80035c4:	2000      	movs	r0, #0
 80035c6:	e7f5      	b.n	80035b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080035c8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80035c8:	b510      	push	{r4, lr}
 80035ca:	4604      	mov	r4, r0
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	f01a fcd3 	bl	801df78 <_ZdlPvj>
 80035d2:	4620      	mov	r0, r4
 80035d4:	bd10      	pop	{r4, pc}
	...

080035d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80035d8:	b530      	push	{r4, r5, lr}
 80035da:	b08b      	sub	sp, #44	; 0x2c
 80035dc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80035de:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 80035e2:	9508      	str	r5, [sp, #32]
 80035e4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80035e8:	9507      	str	r5, [sp, #28]
 80035ea:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80035ee:	9506      	str	r5, [sp, #24]
 80035f0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80035f4:	9505      	str	r5, [sp, #20]
 80035f6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80035fa:	9504      	str	r5, [sp, #16]
 80035fc:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8003600:	9503      	str	r5, [sp, #12]
 8003602:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003606:	9502      	str	r5, [sp, #8]
 8003608:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 800360c:	9501      	str	r5, [sp, #4]
 800360e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8003612:	9500      	str	r5, [sp, #0]
 8003614:	f016 fe12 	bl	801a23c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800361a:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800361c:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800361e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003620:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003622:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003624:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003626:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003628:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
 800362a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800362c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800362e:	b00b      	add	sp, #44	; 0x2c
 8003630:	bd30      	pop	{r4, r5, pc}
 8003632:	bf00      	nop
 8003634:	08021c38 	.word	0x08021c38

08003638 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 6, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0, 0);
 8003638:	4770      	bx	lr
	...

0800363c <_Z28getFont_Asap_Regular_20_4bppv>:
{
 800363c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 6, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0, 0);
 800363e:	4d16      	ldr	r5, [pc, #88]	; (8003698 <_Z28getFont_Asap_Regular_20_4bppv+0x5c>)
{
 8003640:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 6, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0, 0);
 8003642:	682c      	ldr	r4, [r5, #0]
 8003644:	f3bf 8f5b 	dmb	ish
 8003648:	f014 0401 	ands.w	r4, r4, #1
 800364c:	d121      	bne.n	8003692 <_Z28getFont_Asap_Regular_20_4bppv+0x56>
 800364e:	4628      	mov	r0, r5
 8003650:	f01a fc94 	bl	801df7c <__cxa_guard_acquire>
 8003654:	b1e8      	cbz	r0, 8003692 <_Z28getFont_Asap_Regular_20_4bppv+0x56>
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <_Z28getFont_Asap_Regular_20_4bppv+0x60>)
 8003658:	2201      	movs	r2, #1
 800365a:	4911      	ldr	r1, [pc, #68]	; (80036a0 <_Z28getFont_Asap_Regular_20_4bppv+0x64>)
 800365c:	9308      	str	r3, [sp, #32]
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <_Z28getFont_Asap_Regular_20_4bppv+0x68>)
 8003660:	4811      	ldr	r0, [pc, #68]	; (80036a8 <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
 8003662:	9405      	str	r4, [sp, #20]
 8003664:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003668:	2304      	movs	r3, #4
 800366a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800366e:	2314      	movs	r3, #20
 8003670:	2206      	movs	r2, #6
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2318      	movs	r3, #24
 8003676:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800367a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800367e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003682:	f7ff ffa9 	bl	80035d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003686:	4809      	ldr	r0, [pc, #36]	; (80036ac <_Z28getFont_Asap_Regular_20_4bppv+0x70>)
 8003688:	f01b fbda 	bl	801ee40 <atexit>
 800368c:	4628      	mov	r0, r5
 800368e:	f01a fc81 	bl	801df94 <__cxa_guard_release>
    return Asap_Regular_20_4bpp;
}
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
 8003694:	b00f      	add	sp, #60	; 0x3c
 8003696:	bd30      	pop	{r4, r5, pc}
 8003698:	20001be4 	.word	0x20001be4
 800369c:	08024614 	.word	0x08024614
 80036a0:	90000160 	.word	0x90000160
 80036a4:	08024618 	.word	0x08024618
 80036a8:	20001be8 	.word	0x20001be8
 80036ac:	08003639 	.word	0x08003639

080036b0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80036b0:	2000      	movs	r0, #0
 80036b2:	4770      	bx	lr

080036b4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80036b4:	2000      	movs	r0, #0
 80036b6:	4770      	bx	lr

080036b8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80036b8:	b40e      	push	{r1, r2, r3}
 80036ba:	b503      	push	{r0, r1, lr}
 80036bc:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80036be:	2100      	movs	r1, #0
{
 80036c0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80036c4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80036c6:	f016 f8df 	bl	8019888 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80036ca:	b002      	add	sp, #8
 80036cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d0:	b003      	add	sp, #12
 80036d2:	4770      	bx	lr

080036d4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80036d4:	b40c      	push	{r2, r3}
 80036d6:	b507      	push	{r0, r1, r2, lr}
 80036d8:	ab04      	add	r3, sp, #16
 80036da:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80036de:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80036e0:	f016 f8d2 	bl	8019888 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80036e4:	b003      	add	sp, #12
 80036e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80036ea:	b002      	add	sp, #8
 80036ec:	4770      	bx	lr
	...

080036f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80036f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80036f2:	b510      	push	{r4, lr}
 80036f4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80036f6:	b373      	cbz	r3, 8003756 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80036f8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80036fa:	b92b      	cbnz	r3, 8003708 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80036fe:	21c5      	movs	r1, #197	; 0xc5
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003702:	4819      	ldr	r0, [pc, #100]	; (8003768 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003704:	f01b fb7e 	bl	801ee04 <__assert_func>
            return buffer[pos];
 8003708:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800370a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800370e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003710:	b30b      	cbz	r3, 8003756 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003712:	f017 fb09 	bl	801ad28 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003716:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003718:	2b01      	cmp	r3, #1
 800371a:	d803      	bhi.n	8003724 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800371e:	21cb      	movs	r1, #203	; 0xcb
 8003720:	4a13      	ldr	r2, [pc, #76]	; (8003770 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003722:	e7ee      	b.n	8003702 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003724:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003726:	f640 103f 	movw	r0, #2367	; 0x93f
 800372a:	1c53      	adds	r3, r2, #1
 800372c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800372e:	2b09      	cmp	r3, #9
 8003730:	4619      	mov	r1, r3
 8003732:	bf88      	it	hi
 8003734:	f1a3 010a 	subhi.w	r1, r3, #10
 8003738:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800373c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800373e:	4281      	cmp	r1, r0
 8003740:	d109      	bne.n	8003756 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003742:	2b0a      	cmp	r3, #10
 8003744:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003748:	bf28      	it	cs
 800374a:	2300      	movcs	r3, #0
            return buffer[pos];
 800374c:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800374e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003752:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003754:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003756:	4620      	mov	r0, r4
}
 8003758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800375c:	f017 b9e6 	b.w	801ab2c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003760:	08021c98 	.word	0x08021c98
 8003764:	08021ca1 	.word	0x08021ca1
 8003768:	08021d4c 	.word	0x08021d4c
 800376c:	08021d96 	.word	0x08021d96
 8003770:	08021da4 	.word	0x08021da4

08003774 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003774:	f017 b9a3 	b.w	801aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003778 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 0:
        touchgfx_fonts[0] = &(getFont_Asap_Regular_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003778:	b508      	push	{r3, lr}
    &(getFont_Asap_Regular_20_4bpp())
 800377a:	f7ff ff5f 	bl	800363c <_Z28getFont_Asap_Regular_20_4bppv>
};
 800377e:	4b01      	ldr	r3, [pc, #4]	; (8003784 <_GLOBAL__sub_I_touchgfx_fonts+0xc>)
 8003780:	6018      	str	r0, [r3, #0]
} // namespace TypedTextDatabase
 8003782:	bd08      	pop	{r3, pc}
 8003784:	20001c14 	.word	0x20001c14

08003788 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8003788:	b510      	push	{r4, lr}
    pointArray = 0;
 800378a:	2400      	movs	r4, #0
 800378c:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800378e:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8003790:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8003792:	601c      	str	r4, [r3, #0]
}
 8003794:	bd10      	pop	{r4, pc}
	...

08003798 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003798:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800379a:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 800379e:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80037a0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80037a4:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037a6:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037a8:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80037aa:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80037ac:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037ae:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80037b0:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80037b2:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80037b4:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80037b6:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80037b8:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037ba:	480b      	ldr	r0, [pc, #44]	; (80037e8 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 80037bc:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037c0:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80037c4:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80037c8:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037ca:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 80037cc:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80037ce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037d2:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037d4:	466a      	mov	r2, sp
 80037d6:	f001 fd79 	bl	80052cc <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 80037da:	3800      	subs	r0, #0
 80037dc:	bf18      	it	ne
 80037de:	2001      	movne	r0, #1
 80037e0:	b015      	add	sp, #84	; 0x54
 80037e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80037e6:	bf00      	nop
 80037e8:	20001c18 	.word	0x20001c18

080037ec <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 80037ec:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037ee:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 80037f2:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4817      	ldr	r0, [pc, #92]	; (8003858 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037fa:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80037fc:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037fe:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003800:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003802:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003804:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003808:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800380a:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800380c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800380e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003812:	f001 fd18 	bl	8005246 <HAL_QSPI_Command>
 8003816:	b9e0      	cbnz	r0, 8003852 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8003818:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 800381a:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800381c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003820:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003822:	480d      	ldr	r0, [pc, #52]	; (8003858 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8003824:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003828:	2310      	movs	r3, #16
 800382a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800382e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003830:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003832:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800383a:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800383c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800383e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003842:	f001 fd43 	bl	80052cc <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8003846:	3800      	subs	r0, #0
 8003848:	bf18      	it	ne
 800384a:	2001      	movne	r0, #1
}
 800384c:	b015      	add	sp, #84	; 0x54
 800384e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003852:	2001      	movs	r0, #1
 8003854:	e7fa      	b.n	800384c <QSPI_WriteEnable.constprop.0+0x60>
 8003856:	bf00      	nop
 8003858:	20001c18 	.word	0x20001c18

0800385c <BSP_QSPI_EnableMemoryMappedMode>:
{
 800385c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800385e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8003862:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003864:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003868:	480e      	ldr	r0, [pc, #56]	; (80038a4 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800386a:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800386c:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800386e:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003870:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003872:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800387c:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800387e:	2300      	movs	r3, #0
 8003880:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003884:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003886:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003888:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800388a:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800388c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003890:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003894:	f001 fd6a 	bl	800536c <HAL_QSPI_MemoryMapped>
}
 8003898:	3800      	subs	r0, #0
 800389a:	bf18      	it	ne
 800389c:	2001      	movne	r0, #1
 800389e:	b011      	add	sp, #68	; 0x44
 80038a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038a4:	20001c18 	.word	0x20001c18

080038a8 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80038a8:	4b45      	ldr	r3, [pc, #276]	; (80039c0 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80038aa:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80038ac:	4845      	ldr	r0, [pc, #276]	; (80039c4 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 80038ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b0:	f042 0202 	orr.w	r2, r2, #2
{
 80038b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
{
 80038b8:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80038ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80038bc:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80038be:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80038c0:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80038c2:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80038c6:	4d40      	ldr	r5, [pc, #256]	; (80039c8 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 80038c8:	9200      	str	r2, [sp, #0]
 80038ca:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	f042 0202 	orr.w	r2, r2, #2
 80038d2:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	f022 0202 	bic.w	r2, r2, #2
 80038da:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 80038dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038de:	f042 0202 	orr.w	r2, r2, #2
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
 80038e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e6:	f002 0202 	and.w	r2, r2, #2
 80038ea:	9201      	str	r2, [sp, #4]
 80038ec:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 80038ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f0:	f042 0202 	orr.w	r2, r2, #2
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
 80038f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f8:	f002 0202 	and.w	r2, r2, #2
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	f042 0208 	orr.w	r2, r2, #8
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
 8003908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390a:	f002 0208 	and.w	r2, r2, #8
 800390e:	9203      	str	r2, [sp, #12]
 8003910:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8003912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003914:	f042 0208 	orr.w	r2, r2, #8
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
 800391a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391c:	f002 0208 	and.w	r2, r2, #8
 8003920:	9204      	str	r2, [sp, #16]
 8003922:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	f042 0210 	orr.w	r2, r2, #16
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
 800392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392e:	f002 0210 	and.w	r2, r2, #16
 8003932:	9205      	str	r2, [sp, #20]
 8003934:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8003936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003938:	f042 0208 	orr.w	r2, r2, #8
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800393e:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	9306      	str	r3, [sp, #24]
 8003948:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003956:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003958:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800395a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800395c:	f000 fc3c 	bl	80041d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003960:	a907      	add	r1, sp, #28
 8003962:	4818      	ldr	r0, [pc, #96]	; (80039c4 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8003964:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003966:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003968:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800396a:	f000 fc35 	bl	80041d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800396e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003972:	a907      	add	r1, sp, #28
 8003974:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003976:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8003978:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800397a:	f000 fc2d 	bl	80041d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800397e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003982:	a907      	add	r1, sp, #28
 8003984:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003986:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003988:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800398a:	f000 fc25 	bl	80041d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800398e:	a907      	add	r1, sp, #28
 8003990:	480e      	ldr	r0, [pc, #56]	; (80039cc <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8003992:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003994:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003996:	f000 fc1f 	bl	80041d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800399a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800399e:	a907      	add	r1, sp, #28
 80039a0:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80039a2:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80039a4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80039a6:	f000 fc17 	bl	80041d8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80039aa:	4632      	mov	r2, r6
 80039ac:	210f      	movs	r1, #15
 80039ae:	205c      	movs	r0, #92	; 0x5c
 80039b0:	f000 f9d8 	bl	8003d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80039b4:	205c      	movs	r0, #92	; 0x5c
 80039b6:	f000 fa07 	bl	8003dc8 <HAL_NVIC_EnableIRQ>
}
 80039ba:	b00d      	add	sp, #52	; 0x34
 80039bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40020400 	.word	0x40020400
 80039c8:	40020c00 	.word	0x40020c00
 80039cc:	40021000 	.word	0x40021000

080039d0 <BSP_QSPI_Init>:
{ 
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 80039d2:	4c49      	ldr	r4, [pc, #292]	; (8003af8 <BSP_QSPI_Init+0x128>)
{ 
 80039d4:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 80039d6:	4b49      	ldr	r3, [pc, #292]	; (8003afc <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80039d8:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 80039da:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80039dc:	f001 fc20 	bl	8005220 <HAL_QSPI_DeInit>
 80039e0:	4605      	mov	r5, r0
 80039e2:	b110      	cbz	r0, 80039ea <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 80039e4:	2001      	movs	r0, #1
}
 80039e6:	b011      	add	sp, #68	; 0x44
 80039e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80039ea:	4601      	mov	r1, r0
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff ff5b 	bl	80038a8 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 80039f2:	2601      	movs	r6, #1
 80039f4:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 80039fa:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80039fe:	2310      	movs	r3, #16
 8003a00:	60e3      	str	r3, [r4, #12]
 8003a02:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003a06:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003a0a:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8003a10:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003a14:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003a18:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003a1c:	f001 fbac 	bl	8005178 <HAL_QSPI_Init>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d1df      	bne.n	80039e4 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a24:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003a28:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8003a2a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a2c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8003a30:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a32:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a34:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a36:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003a38:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a3a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003a3e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a42:	4620      	mov	r0, r4
 8003a44:	f001 fbff 	bl	8005246 <HAL_QSPI_Command>
 8003a48:	b108      	cbz	r0, 8003a4e <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8003a4a:	2004      	movs	r0, #4
 8003a4c:	e7cb      	b.n	80039e6 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003a4e:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a54:	a902      	add	r1, sp, #8
 8003a56:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8003a58:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a5a:	f001 fbf4 	bl	8005246 <HAL_QSPI_Command>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d1f3      	bne.n	8003a4a <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003a62:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a66:	f7ff fe97 	bl	8003798 <QSPI_AutoPollingMemReady.constprop.0>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d1ed      	bne.n	8003a4a <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003a6e:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8003a70:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a78:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003a7a:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003a7c:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a7e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003a82:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a86:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f001 fbdb 	bl	8005246 <HAL_QSPI_Command>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1da      	bne.n	8003a4a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	f10d 0107 	add.w	r1, sp, #7
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f001 fd4b 	bl	8005538 <HAL_QSPI_Receive>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d1d1      	bne.n	8003a4a <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003aa6:	f7ff fea1 	bl	80037ec <QSPI_WriteEnable.constprop.0>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d1cd      	bne.n	8003a4a <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003aae:	2381      	movs	r3, #129	; 0x81
 8003ab0:	22f0      	movs	r2, #240	; 0xf0
 8003ab2:	9302      	str	r3, [sp, #8]
 8003ab4:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003ab8:	210a      	movs	r1, #10
 8003aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003abe:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ac2:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003acc:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003ace:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003ad4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ad8:	f001 fbb5 	bl	8005246 <HAL_QSPI_Command>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d1b4      	bne.n	8003a4a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	f10d 0107 	add.w	r1, sp, #7
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f001 fcc9 	bl	8005480 <HAL_QSPI_Transmit>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	f43f af79 	beq.w	80039e6 <BSP_QSPI_Init+0x16>
 8003af4:	e7a9      	b.n	8003a4a <BSP_QSPI_Init+0x7a>
 8003af6:	bf00      	nop
 8003af8:	20001c18 	.word	0x20001c18
 8003afc:	a0001000 	.word	0xa0001000

08003b00 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b00:	490f      	ldr	r1, [pc, #60]	; (8003b40 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b02:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b04:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <SystemInit+0x44>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003b1a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b26:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <SystemInit+0x48>)
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b32:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b34:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b3a:	608b      	str	r3, [r1, #8]
#endif
}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000ed00 	.word	0xe000ed00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	24003010 	.word	0x24003010

08003b4c <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003b4c:	4770      	bx	lr

08003b4e <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8003b4e:	2000      	movs	r0, #0
 8003b50:	4770      	bx	lr
	...

08003b54 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8003b54:	2300      	movs	r3, #0
{
 8003b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8003b58:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	b90a      	cbnz	r2, 8003b66 <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
{
 8003b66:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003b68:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003b6a:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003b6c:	21a8      	movs	r1, #168	; 0xa8
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7fe f914 	bl	8001d9c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003b74:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003b78:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8003b7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b80:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003b82:	d103      	bne.n	8003b8c <ft5336_ReadID+0x38>
  return (ucReadId);
 8003b84:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003b88:	b003      	add	sp, #12
 8003b8a:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003b8c:	2b51      	cmp	r3, #81	; 0x51
 8003b8e:	d1ec      	bne.n	8003b6a <ft5336_ReadID+0x16>
 8003b90:	e7f8      	b.n	8003b84 <ft5336_ReadID+0x30>
 8003b92:	bf00      	nop
 8003b94:	20001c66 	.word	0x20001c66

08003b98 <ft5336_TS_DetectTouch>:
{
 8003b98:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8003b9a:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8003ba0:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003ba4:	f7fe f8fa 	bl	8001d9c <TS_IO_Read>
 8003ba8:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d901      	bls.n	8003bc4 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8003bc0:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003bc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8003bca:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003bce:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	709a      	strb	r2, [r3, #2]
}
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd10      	pop	{r4, pc}
 8003bd8:	20001c66 	.word	0x20001c66

08003bdc <ft5336_TS_GetXY>:
{
 8003bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003be0:	4c2f      	ldr	r4, [pc, #188]	; (8003ca0 <ft5336_TS_GetXY+0xc4>)
{
 8003be2:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8003be4:	f04f 0800 	mov.w	r8, #0
{
 8003be8:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003bea:	78a3      	ldrb	r3, [r4, #2]
 8003bec:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
 8003bee:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d94d      	bls.n	8003c92 <ft5336_TS_GetXY+0xb6>
    switch(ft5336_handle.currActiveTouchIdx)
 8003bf6:	2b09      	cmp	r3, #9
 8003bf8:	d84e      	bhi.n	8003c98 <ft5336_TS_GetXY+0xbc>
 8003bfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	1d19      	adds	r1, r3, #4
 8003c04:	f103 0b03 	add.w	fp, r3, #3
 8003c08:	f103 0a06 	add.w	sl, r3, #6
 8003c0c:	3305      	adds	r3, #5
 8003c0e:	b2c9      	uxtb	r1, r1
 8003c10:	fa5f fb8b 	uxtb.w	fp, fp
 8003c14:	fa5f fa8a 	uxtb.w	sl, sl
 8003c18:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003c1c:	b2c6      	uxtb	r6, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003c1e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003ca4 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003c22:	4630      	mov	r0, r6
 8003c24:	f7fe f8ba 	bl	8001d9c <TS_IO_Read>
 8003c28:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003c30:	4659      	mov	r1, fp
 8003c32:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003c34:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003c38:	f7fe f8b0 	bl	8001d9c <TS_IO_Read>
 8003c3c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003c40:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003c46:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003c48:	f8b9 2000 	ldrh.w	r2, [r9]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c52:	4313      	orrs	r3, r2
    *X = coord;
 8003c54:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003c56:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003c5a:	f7fe f89f 	bl	8001d9c <TS_IO_Read>
 8003c5e:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003c62:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003c64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003c68:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003c6a:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003c6e:	f7fe f895 	bl	8001d9c <TS_IO_Read>
 8003c72:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c7a:	f8b9 2000 	ldrh.w	r2, [r9]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8003c8a:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003c8c:	78a3      	ldrb	r3, [r4, #2]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	70a3      	strb	r3, [r4, #2]
}
 8003c92:	b003      	add	sp, #12
 8003c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003c98:	46c2      	mov	sl, r8
 8003c9a:	46c3      	mov	fp, r8
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	e7bd      	b.n	8003c1c <ft5336_TS_GetXY+0x40>
 8003ca0:	20001c66 	.word	0x20001c66
 8003ca4:	20001c64 	.word	0x20001c64

08003ca8 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003ca8:	2201      	movs	r2, #1
 8003caa:	21a4      	movs	r1, #164	; 0xa4
 8003cac:	b2c0      	uxtb	r0, r0
 8003cae:	f7fe b85b 	b.w	8001d68 <TS_IO_Write>

08003cb2 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	21a4      	movs	r1, #164	; 0xa4
 8003cb6:	b2c0      	uxtb	r0, r0
 8003cb8:	f7fe b856 	b.w	8001d68 <TS_IO_Write>

08003cbc <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8003cbc:	f7ff bff9 	b.w	8003cb2 <ft5336_TS_DisableIT>

08003cc0 <ft5336_TS_ClearIT>:
 8003cc0:	4770      	bx	lr
	...

08003cc4 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	b90a      	cbnz	r2, 8003cce <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
}
 8003cce:	4770      	bx	lr
 8003cd0:	20001c66 	.word	0x20001c66

08003cd4 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd4:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cd6:	2003      	movs	r0, #3
{
 8003cd8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce2:	f000 f82d 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f7fd fee2 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cec:	f7fd fbfc 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	bd08      	pop	{r3, pc}
 8003cf4:	40023c00 	.word	0x40023c00

08003cf8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003cf8:	4a03      	ldr	r2, [pc, #12]	; (8003d08 <HAL_IncTick+0x10>)
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_IncTick+0x14>)
 8003cfc:	6811      	ldr	r1, [r2, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	440b      	add	r3, r1
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20001c6c 	.word	0x20001c6c
 8003d0c:	20000030 	.word	0x20000030

08003d10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d10:	4b01      	ldr	r3, [pc, #4]	; (8003d18 <HAL_GetTick+0x8>)
 8003d12:	6818      	ldr	r0, [r3, #0]
}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20001c6c 	.word	0x20001c6c

08003d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003d20:	f7ff fff6 	bl	8003d10 <HAL_GetTick>
 8003d24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d26:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003d28:	bf1e      	ittt	ne
 8003d2a:	4b04      	ldrne	r3, [pc, #16]	; (8003d3c <HAL_Delay+0x20>)
 8003d2c:	781b      	ldrbne	r3, [r3, #0]
 8003d2e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d30:	f7ff ffee 	bl	8003d10 <HAL_GetTick>
 8003d34:	1b43      	subs	r3, r0, r5
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	d3fa      	bcc.n	8003d30 <HAL_Delay+0x14>
  {
  }
}
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	20000030 	.word	0x20000030

08003d40 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d40:	4907      	ldr	r1, [pc, #28]	; (8003d60 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d42:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d44:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d4e:	0412      	lsls	r2, r2, #16
 8003d50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003d5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d66:	b530      	push	{r4, r5, lr}
 8003d68:	68dc      	ldr	r4, [r3, #12]
 8003d6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d6e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d72:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	bf28      	it	cs
 8003d78:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d80:	bf8c      	ite	hi
 8003d82:	3c03      	subhi	r4, #3
 8003d84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d86:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8003d8a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d8c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d94:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	fa03 f304 	lsl.w	r3, r3, r4
 8003d9c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003da4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003da6:	db06      	blt.n	8003db6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003dac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003db0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003db4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db6:	f000 000f 	and.w	r0, r0, #15
 8003dba:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <HAL_NVIC_SetPriority+0x60>)
 8003dbc:	5413      	strb	r3, [r2, r0]
 8003dbe:	e7f9      	b.n	8003db4 <HAL_NVIC_SetPriority+0x50>
 8003dc0:	e000ed00 	.word	0xe000ed00
 8003dc4:	e000ed14 	.word	0xe000ed14

08003dc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	db07      	blt.n	8003ddc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dcc:	0941      	lsrs	r1, r0, #5
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f000 001f 	and.w	r0, r0, #31
 8003dd4:	4a02      	ldr	r2, [pc, #8]	; (8003de0 <HAL_NVIC_EnableIRQ+0x18>)
 8003dd6:	4083      	lsls	r3, r0
 8003dd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000e100 	.word	0xe000e100

08003de4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003de4:	2800      	cmp	r0, #0
 8003de6:	db0c      	blt.n	8003e02 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de8:	0943      	lsrs	r3, r0, #5
 8003dea:	2201      	movs	r2, #1
 8003dec:	f000 001f 	and.w	r0, r0, #31
 8003df0:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_NVIC_DisableIRQ+0x20>)
 8003df2:	3320      	adds	r3, #32
 8003df4:	4082      	lsls	r2, r0
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003dfe:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003e02:	4770      	bx	lr
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003e08:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <HAL_MPU_Disable+0x18>)
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_MPU_Enable+0x1c>)
 8003e26:	f040 0001 	orr.w	r0, r0, #1
 8003e2a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e3a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003e3e:	4770      	bx	lr
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003e44:	7843      	ldrb	r3, [r0, #1]
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <HAL_MPU_ConfigRegion+0x54>)
{
 8003e48:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8003e4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8003e4e:	7801      	ldrb	r1, [r0, #0]
 8003e50:	b1e9      	cbz	r1, 8003e8e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003e52:	6843      	ldr	r3, [r0, #4]
 8003e54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e58:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e5a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e5c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e5e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e62:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e64:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e66:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e6a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e6c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e70:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e72:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e76:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e7c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003e82:	7a01      	ldrb	r1, [r0, #8]
 8003e84:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e88:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003e8c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8003e8e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003e92:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8003e96:	e7f9      	b.n	8003e8c <HAL_MPU_ConfigRegion+0x48>
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e9c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	b908      	cbnz	r0, 8003ea6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8003ea2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8003ea4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ea6:	7f43      	ldrb	r3, [r0, #29]
 8003ea8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eac:	b913      	cbnz	r3, 8003eb4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8003eae:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003eb0:	f7fd fb38 	bl	8001524 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003eb8:	7923      	ldrb	r3, [r4, #4]
 8003eba:	b9e3      	cbnz	r3, 8003ef6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <HAL_CRC_Init+0x70>)
 8003ec0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	f022 0218 	bic.w	r2, r2, #24
 8003ec8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003eca:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ecc:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ece:	b9d2      	cbnz	r2, 8003f06 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ed4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8003ed6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	6961      	ldr	r1, [r4, #20]
 8003edc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ee2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ee4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003ef4:	e7d6      	b.n	8003ea4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003ef6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003efa:	4620      	mov	r0, r4
 8003efc:	f000 f808 	bl	8003f10 <HAL_CRCEx_Polynomial_Set>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d0e2      	beq.n	8003eca <HAL_CRC_Init+0x2e>
 8003f04:	e7cd      	b.n	8003ea2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003f06:	6922      	ldr	r2, [r4, #16]
 8003f08:	e7e4      	b.n	8003ed4 <HAL_CRC_Init+0x38>
 8003f0a:	bf00      	nop
 8003f0c:	04c11db7 	.word	0x04c11db7

08003f10 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f10:	231f      	movs	r3, #31
{
 8003f12:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f14:	3b01      	subs	r3, #1
 8003f16:	d31c      	bcc.n	8003f52 <HAL_CRCEx_Polynomial_Set+0x42>
 8003f18:	fa21 f403 	lsr.w	r4, r1, r3
 8003f1c:	07e4      	lsls	r4, r4, #31
 8003f1e:	d5f9      	bpl.n	8003f14 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8003f20:	2a10      	cmp	r2, #16
 8003f22:	d012      	beq.n	8003f4a <HAL_CRCEx_Polynomial_Set+0x3a>
 8003f24:	d804      	bhi.n	8003f30 <HAL_CRCEx_Polynomial_Set+0x20>
 8003f26:	b13a      	cbz	r2, 8003f38 <HAL_CRCEx_Polynomial_Set+0x28>
 8003f28:	2a08      	cmp	r2, #8
 8003f2a:	d010      	beq.n	8003f4e <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8003f2c:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8003f2e:	e00b      	b.n	8003f48 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8003f30:	2a18      	cmp	r2, #24
 8003f32:	d1fb      	bne.n	8003f2c <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8003f34:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f36:	d8f9      	bhi.n	8003f2c <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f38:	6800      	ldr	r0, [r0, #0]
 8003f3a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f3c:	6883      	ldr	r3, [r0, #8]
 8003f3e:	f023 0318 	bic.w	r3, r3, #24
 8003f42:	4313      	orrs	r3, r2
 8003f44:	6083      	str	r3, [r0, #8]
 8003f46:	2000      	movs	r0, #0
}
 8003f48:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	e7f3      	b.n	8003f36 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	e7f1      	b.n	8003f36 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8003f52:	2a00      	cmp	r2, #0
 8003f54:	d1ea      	bne.n	8003f2c <HAL_CRCEx_Polynomial_Set+0x1c>
 8003f56:	e7ef      	b.n	8003f38 <HAL_CRCEx_Polynomial_Set+0x28>

08003f58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f5c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8003f5e:	f7ff fed7 	bl	8003d10 <HAL_GetTick>
 8003f62:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f64:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d006      	beq.n	8003f7a <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6c:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f70:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003f72:	2300      	movs	r3, #0
 8003f74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	f022 0216 	bic.w	r2, r2, #22
 8003f82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f8e:	b90a      	cbnz	r2, 8003f94 <HAL_DMA_Abort+0x3c>
 8003f90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003f92:	b11a      	cbz	r2, 8003f9c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	f022 0208 	bic.w	r2, r2, #8
 8003f9a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f013 0301 	ands.w	r3, r3, #1
 8003fac:	d108      	bne.n	8003fc0 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003fb0:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8003fb2:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb4:	408a      	lsls	r2, r1
 8003fb6:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8003fbe:	e7d8      	b.n	8003f72 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc0:	f7ff fea6 	bl	8003d10 <HAL_GetTick>
 8003fc4:	1b40      	subs	r0, r0, r5
 8003fc6:	2805      	cmp	r0, #5
 8003fc8:	d9ec      	bls.n	8003fa4 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fca:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fcc:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fce:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8003fd4:	e7cd      	b.n	8003f72 <HAL_DMA_Abort+0x1a>

08003fd6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003fd6:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003fd8:	4604      	mov	r4, r0
 8003fda:	b330      	cbz	r0, 800402a <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003fdc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003fe0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fe4:	b91b      	cbnz	r3, 8003fee <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003fe6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003fea:	f7fd fab1 	bl	8001550 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003fee:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ff0:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ff2:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ff4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ff6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ffa:	6813      	ldr	r3, [r2, #0]
 8003ffc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004000:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004002:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004004:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004006:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004008:	f023 0307 	bic.w	r3, r3, #7
 800400c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800400e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004010:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004012:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004014:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800401c:	430b      	orrs	r3, r1
 800401e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004020:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004022:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004024:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004028:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800402a:	2001      	movs	r0, #1
 800402c:	e7fc      	b.n	8004028 <HAL_DMA2D_Init+0x52>

0800402e <HAL_DMA2D_LineEventCallback>:
 800402e:	4770      	bx	lr

08004030 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004030:	4770      	bx	lr

08004032 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004032:	6803      	ldr	r3, [r0, #0]
{
 8004034:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004036:	685e      	ldr	r6, [r3, #4]
{
 8004038:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800403a:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800403c:	07f2      	lsls	r2, r6, #31
 800403e:	d514      	bpl.n	800406a <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004040:	05e9      	lsls	r1, r5, #23
 8004042:	d512      	bpl.n	800406a <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800404c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004054:	2201      	movs	r2, #1
 8004056:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004058:	2304      	movs	r3, #4
 800405a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800405e:	2300      	movs	r3, #0
 8004060:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004064:	6943      	ldr	r3, [r0, #20]
 8004066:	b103      	cbz	r3, 800406a <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004068:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800406a:	06b2      	lsls	r2, r6, #26
 800406c:	d516      	bpl.n	800409c <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800406e:	04ab      	lsls	r3, r5, #18
 8004070:	d514      	bpl.n	800409c <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800407c:	2220      	movs	r2, #32
 800407e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004088:	2304      	movs	r3, #4
 800408a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800408e:	2300      	movs	r3, #0
 8004090:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004094:	6963      	ldr	r3, [r4, #20]
 8004096:	b10b      	cbz	r3, 800409c <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004098:	4620      	mov	r0, r4
 800409a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800409c:	0730      	lsls	r0, r6, #28
 800409e:	d516      	bpl.n	80040ce <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040a0:	0529      	lsls	r1, r5, #20
 80040a2:	d514      	bpl.n	80040ce <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80040ae:	2208      	movs	r2, #8
 80040b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040ba:	2304      	movs	r3, #4
 80040bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040c0:	2300      	movs	r3, #0
 80040c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80040c6:	6963      	ldr	r3, [r4, #20]
 80040c8:	b10b      	cbz	r3, 80040ce <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040ca:	4620      	mov	r0, r4
 80040cc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80040ce:	0772      	lsls	r2, r6, #29
 80040d0:	d50b      	bpl.n	80040ea <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80040d2:	056b      	lsls	r3, r5, #21
 80040d4:	d509      	bpl.n	80040ea <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80040d6:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80040d8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80040e2:	2204      	movs	r2, #4
 80040e4:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80040e6:	f7ff ffa2 	bl	800402e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80040ea:	07b0      	lsls	r0, r6, #30
 80040ec:	d514      	bpl.n	8004118 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80040ee:	05a9      	lsls	r1, r5, #22
 80040f0:	d512      	bpl.n	8004118 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80040fc:	2202      	movs	r2, #2
 80040fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004102:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004104:	2301      	movs	r3, #1
 8004106:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800410a:	2300      	movs	r3, #0
 800410c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	b10b      	cbz	r3, 8004118 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004114:	4620      	mov	r0, r4
 8004116:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004118:	06f2      	lsls	r2, r6, #27
 800411a:	d513      	bpl.n	8004144 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800411c:	04eb      	lsls	r3, r5, #19
 800411e:	d511      	bpl.n	8004144 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004120:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004122:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800412a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800412c:	2210      	movs	r2, #16
 800412e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004132:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004134:	2301      	movs	r3, #1
 8004136:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800413a:	2300      	movs	r3, #0
 800413c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004140:	f7ff ff76 	bl	8004030 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004144:	bd70      	pop	{r4, r5, r6, pc}
	...

08004148 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800414a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800414e:	2b01      	cmp	r3, #1
 8004150:	f04f 0302 	mov.w	r3, #2
 8004154:	d02b      	beq.n	80041ae <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004156:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800415a:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800415c:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004160:	4f1c      	ldr	r7, [pc, #112]	; (80041d4 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004162:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004166:	010e      	lsls	r6, r1, #4
 8004168:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800416a:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800416e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004172:	3c09      	subs	r4, #9
 8004174:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004176:	bf96      	itet	ls
 8004178:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800417c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004180:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004182:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004184:	b9a9      	cbnz	r1, 80041b2 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004186:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004188:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800418a:	ea01 0107 	and.w	r1, r1, r7
 800418e:	ea42 0201 	orr.w	r2, r2, r1
 8004192:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004194:	6982      	ldr	r2, [r0, #24]
 8004196:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004198:	d803      	bhi.n	80041a2 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800419a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800419c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041a8:	2300      	movs	r3, #0
 80041aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80041ae:	4618      	mov	r0, r3

  return HAL_OK;
}
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041b2:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041b4:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041b6:	ea01 0107 	and.w	r1, r1, r7
 80041ba:	ea42 0201 	orr.w	r2, r2, r1
 80041be:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041c0:	eb00 0206 	add.w	r2, r0, r6
 80041c4:	6992      	ldr	r2, [r2, #24]
 80041c6:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041c8:	d8eb      	bhi.n	80041a2 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041ca:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80041ce:	621d      	str	r5, [r3, #32]
 80041d0:	e7e7      	b.n	80041a2 <HAL_DMA2D_ConfigLayer+0x5a>
 80041d2:	bf00      	nop
 80041d4:	00fcfff0 	.word	0x00fcfff0

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041dc:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041de:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004398 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041e2:	4a6b      	ldr	r2, [pc, #428]	; (8004390 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 80041e4:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041e6:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80041e8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ea:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80041ee:	43ac      	bics	r4, r5
 80041f0:	f040 80b4 	bne.w	800435c <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041f4:	684d      	ldr	r5, [r1, #4]
 80041f6:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80041fa:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041fc:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004200:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004204:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004206:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004208:	2f01      	cmp	r7, #1
 800420a:	d834      	bhi.n	8004276 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800420c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800420e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004212:	68cf      	ldr	r7, [r1, #12]
 8004214:	fa07 f708 	lsl.w	r7, r7, r8
 8004218:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800421c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800421e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004220:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004224:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004228:	409f      	lsls	r7, r3
 800422a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800422e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004230:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004232:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004234:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004238:	688f      	ldr	r7, [r1, #8]
 800423a:	fa07 f708 	lsl.w	r7, r7, r8
 800423e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004242:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004244:	d119      	bne.n	800427a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004246:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800424a:	f003 0b07 	and.w	fp, r3, #7
 800424e:	f04f 0e0f 	mov.w	lr, #15
 8004252:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004256:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800425a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800425e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004262:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004266:	690f      	ldr	r7, [r1, #16]
 8004268:	fa07 f70b 	lsl.w	r7, r7, fp
 800426c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004270:	f8ca 7020 	str.w	r7, [sl, #32]
 8004274:	e001      	b.n	800427a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004276:	2c03      	cmp	r4, #3
 8004278:	d1da      	bne.n	8004230 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800427a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800427c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004280:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004284:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004288:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800428c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800428e:	d065      	beq.n	800435c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004290:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004294:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004298:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800429c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80042a0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042a4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80042aa:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80042ae:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80042b2:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80042b6:	9401      	str	r4, [sp, #4]
 80042b8:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042ba:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 80042bc:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042c0:	40bc      	lsls	r4, r7
 80042c2:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042c6:	4c33      	ldr	r4, [pc, #204]	; (8004394 <HAL_GPIO_Init+0x1bc>)
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	d04e      	beq.n	800436a <HAL_GPIO_Init+0x192>
 80042cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042d0:	42a0      	cmp	r0, r4
 80042d2:	d04c      	beq.n	800436e <HAL_GPIO_Init+0x196>
 80042d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042d8:	42a0      	cmp	r0, r4
 80042da:	d04a      	beq.n	8004372 <HAL_GPIO_Init+0x19a>
 80042dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d048      	beq.n	8004376 <HAL_GPIO_Init+0x19e>
 80042e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042e8:	42a0      	cmp	r0, r4
 80042ea:	d046      	beq.n	800437a <HAL_GPIO_Init+0x1a2>
 80042ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042f0:	42a0      	cmp	r0, r4
 80042f2:	d044      	beq.n	800437e <HAL_GPIO_Init+0x1a6>
 80042f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042f8:	42a0      	cmp	r0, r4
 80042fa:	d042      	beq.n	8004382 <HAL_GPIO_Init+0x1aa>
 80042fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004300:	42a0      	cmp	r0, r4
 8004302:	d040      	beq.n	8004386 <HAL_GPIO_Init+0x1ae>
 8004304:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004308:	42a0      	cmp	r0, r4
 800430a:	d03e      	beq.n	800438a <HAL_GPIO_Init+0x1b2>
 800430c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004310:	42a0      	cmp	r0, r4
 8004312:	bf0c      	ite	eq
 8004314:	2409      	moveq	r4, #9
 8004316:	240a      	movne	r4, #10
 8004318:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800431a:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800431c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004320:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004322:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8004326:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004328:	bf54      	ite	pl
 800432a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800432c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004330:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8004332:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004334:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004336:	bf54      	ite	pl
 8004338:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800433a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800433e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8004340:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004342:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004344:	bf54      	ite	pl
 8004346:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004348:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800434c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800434e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004350:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004352:	bf54      	ite	pl
 8004354:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004356:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800435a:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800435c:	3301      	adds	r3, #1
 800435e:	2b10      	cmp	r3, #16
 8004360:	f47f af40 	bne.w	80041e4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004364:	b003      	add	sp, #12
 8004366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800436a:	2400      	movs	r4, #0
 800436c:	e7d4      	b.n	8004318 <HAL_GPIO_Init+0x140>
 800436e:	2401      	movs	r4, #1
 8004370:	e7d2      	b.n	8004318 <HAL_GPIO_Init+0x140>
 8004372:	2402      	movs	r4, #2
 8004374:	e7d0      	b.n	8004318 <HAL_GPIO_Init+0x140>
 8004376:	2403      	movs	r4, #3
 8004378:	e7ce      	b.n	8004318 <HAL_GPIO_Init+0x140>
 800437a:	2404      	movs	r4, #4
 800437c:	e7cc      	b.n	8004318 <HAL_GPIO_Init+0x140>
 800437e:	2405      	movs	r4, #5
 8004380:	e7ca      	b.n	8004318 <HAL_GPIO_Init+0x140>
 8004382:	2406      	movs	r4, #6
 8004384:	e7c8      	b.n	8004318 <HAL_GPIO_Init+0x140>
 8004386:	2407      	movs	r4, #7
 8004388:	e7c6      	b.n	8004318 <HAL_GPIO_Init+0x140>
 800438a:	2408      	movs	r4, #8
 800438c:	e7c4      	b.n	8004318 <HAL_GPIO_Init+0x140>
 800438e:	bf00      	nop
 8004390:	40013c00 	.word	0x40013c00
 8004394:	40020000 	.word	0x40020000
 8004398:	40023800 	.word	0x40023800

0800439c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80043a0:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043a2:	4c49      	ldr	r4, [pc, #292]	; (80044c8 <HAL_GPIO_DeInit+0x12c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043a4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80044d0 <HAL_GPIO_DeInit+0x134>
 80043a8:	f8df a128 	ldr.w	sl, [pc, #296]	; 80044d4 <HAL_GPIO_DeInit+0x138>
 80043ac:	f8df b128 	ldr.w	fp, [pc, #296]	; 80044d8 <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 80043b0:	2301      	movs	r3, #1
 80043b2:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80043b6:	ea3e 0501 	bics.w	r5, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80043ba:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80043be:	d16c      	bne.n	800449a <HAL_GPIO_DeInit+0xfe>
      tmp = SYSCFG->EXTICR[position >> 2];
 80043c0:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043c4:	f002 0c03 	and.w	ip, r2, #3
 80043c8:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043ca:	4b40      	ldr	r3, [pc, #256]	; (80044cc <HAL_GPIO_DeInit+0x130>)
 80043cc:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043d4:	4298      	cmp	r0, r3
 80043d6:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043da:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 80043de:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043e2:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043e6:	d05d      	beq.n	80044a4 <HAL_GPIO_DeInit+0x108>
 80043e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ec:	4298      	cmp	r0, r3
 80043ee:	d05b      	beq.n	80044a8 <HAL_GPIO_DeInit+0x10c>
 80043f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f4:	4298      	cmp	r0, r3
 80043f6:	d059      	beq.n	80044ac <HAL_GPIO_DeInit+0x110>
 80043f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043fc:	4298      	cmp	r0, r3
 80043fe:	d057      	beq.n	80044b0 <HAL_GPIO_DeInit+0x114>
 8004400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004404:	4298      	cmp	r0, r3
 8004406:	d055      	beq.n	80044b4 <HAL_GPIO_DeInit+0x118>
 8004408:	4548      	cmp	r0, r9
 800440a:	d055      	beq.n	80044b8 <HAL_GPIO_DeInit+0x11c>
 800440c:	4550      	cmp	r0, sl
 800440e:	d055      	beq.n	80044bc <HAL_GPIO_DeInit+0x120>
 8004410:	4558      	cmp	r0, fp
 8004412:	d055      	beq.n	80044c0 <HAL_GPIO_DeInit+0x124>
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	4298      	cmp	r0, r3
 800441a:	d053      	beq.n	80044c4 <HAL_GPIO_DeInit+0x128>
 800441c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004420:	4298      	cmp	r0, r3
 8004422:	bf0c      	ite	eq
 8004424:	2309      	moveq	r3, #9
 8004426:	230a      	movne	r3, #10
 8004428:	fa03 f30c 	lsl.w	r3, r3, ip
 800442c:	4543      	cmp	r3, r8
 800442e:	d113      	bne.n	8004458 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	ea23 0307 	bic.w	r3, r3, r7
 8004436:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	ea23 0307 	bic.w	r3, r3, r7
 800443e:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004440:	68e3      	ldr	r3, [r4, #12]
 8004442:	ea23 0307 	bic.w	r3, r3, r7
 8004446:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	ea23 0307 	bic.w	r3, r3, r7
 800444e:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004450:	68ab      	ldr	r3, [r5, #8]
 8004452:	ea23 0306 	bic.w	r3, r3, r6
 8004456:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004458:	0056      	lsls	r6, r2, #1
 800445a:	2303      	movs	r3, #3
 800445c:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800445e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004462:	40b3      	lsls	r3, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004464:	270f      	movs	r7, #15
 8004466:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800446a:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800446e:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004472:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004474:	08d5      	lsrs	r5, r2, #3
 8004476:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800447a:	6a2e      	ldr	r6, [r5, #32]
 800447c:	ea26 0607 	bic.w	r6, r6, r7
 8004480:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004482:	68c5      	ldr	r5, [r0, #12]
 8004484:	ea25 0503 	bic.w	r5, r5, r3
 8004488:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800448a:	6845      	ldr	r5, [r0, #4]
 800448c:	ea25 050e 	bic.w	r5, r5, lr
 8004490:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004492:	6885      	ldr	r5, [r0, #8]
 8004494:	ea25 0303 	bic.w	r3, r5, r3
 8004498:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800449a:	3201      	adds	r2, #1
 800449c:	2a10      	cmp	r2, #16
 800449e:	d187      	bne.n	80043b0 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80044a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80044a4:	2300      	movs	r3, #0
 80044a6:	e7bf      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e7bd      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e7bb      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044b0:	2303      	movs	r3, #3
 80044b2:	e7b9      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044b4:	2304      	movs	r3, #4
 80044b6:	e7b7      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044b8:	2305      	movs	r3, #5
 80044ba:	e7b5      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044bc:	2306      	movs	r3, #6
 80044be:	e7b3      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044c0:	2307      	movs	r3, #7
 80044c2:	e7b1      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044c4:	2308      	movs	r3, #8
 80044c6:	e7af      	b.n	8004428 <HAL_GPIO_DeInit+0x8c>
 80044c8:	40013c00 	.word	0x40013c00
 80044cc:	40020000 	.word	0x40020000
 80044d0:	40021400 	.word	0x40021400
 80044d4:	40021800 	.word	0x40021800
 80044d8:	40021c00 	.word	0x40021c00

080044dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044dc:	6903      	ldr	r3, [r0, #16]
 80044de:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80044e0:	bf14      	ite	ne
 80044e2:	2001      	movne	r0, #1
 80044e4:	2000      	moveq	r0, #0
 80044e6:	4770      	bx	lr

080044e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044e8:	b10a      	cbz	r2, 80044ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044ea:	6181      	str	r1, [r0, #24]
  }
}
 80044ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044ee:	0409      	lsls	r1, r1, #16
 80044f0:	e7fb      	b.n	80044ea <HAL_GPIO_WritePin+0x2>

080044f2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044f2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044f4:	ea01 0203 	and.w	r2, r1, r3
 80044f8:	ea21 0103 	bic.w	r1, r1, r3
 80044fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004500:	6181      	str	r1, [r0, #24]
}
 8004502:	4770      	bx	lr

08004504 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004504:	6803      	ldr	r3, [r0, #0]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	0791      	lsls	r1, r2, #30
 800450a:	d501      	bpl.n	8004510 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800450c:	2200      	movs	r2, #0
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	07d2      	lsls	r2, r2, #31
 8004514:	d403      	bmi.n	800451e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	619a      	str	r2, [r3, #24]
  }
}
 800451e:	4770      	bx	lr

08004520 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004520:	b530      	push	{r4, r5, lr}
 8004522:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004524:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004528:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800452a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800452c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800452e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004534:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004536:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800453a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800453e:	ea20 0002 	bic.w	r0, r0, r2
 8004542:	4303      	orrs	r3, r0
 8004544:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004546:	bd30      	pop	{r4, r5, pc}
 8004548:	03ff63ff 	.word	0x03ff63ff

0800454c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800454c:	6803      	ldr	r3, [r0, #0]
{
 800454e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8004552:	699c      	ldr	r4, [r3, #24]
{
 8004554:	4605      	mov	r5, r0
 8004556:	460f      	mov	r7, r1
 8004558:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800455a:	f014 0410 	ands.w	r4, r4, #16
 800455e:	d06f      	beq.n	8004640 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8004560:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004562:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	0690      	lsls	r0, r2, #26
 800456e:	d461      	bmi.n	8004634 <I2C_IsErrorOccurred+0xe8>
 8004570:	f1b8 0f00 	cmp.w	r8, #0
 8004574:	d035      	beq.n	80045e2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8004576:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800457a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800457c:	682e      	ldr	r6, [r5, #0]
 800457e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004580:	05d9      	lsls	r1, r3, #23
 8004582:	d505      	bpl.n	8004590 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004584:	f44f 7280 	mov.w	r2, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004588:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800458c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800458e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004590:	055a      	lsls	r2, r3, #21
 8004592:	d505      	bpl.n	80045a0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004594:	f44f 6280 	mov.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004598:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800459c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800459e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045a0:	059b      	lsls	r3, r3, #22
 80045a2:	d54f      	bpl.n	8004644 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80045a8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045ac:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80045ae:	4628      	mov	r0, r5
 80045b0:	f7ff ffa8 	bl	8004504 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80045b4:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80045b6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80045b8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80045bc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80045c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80045ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80045cc:	4323      	orrs	r3, r4
 80045ce:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	2320      	movs	r3, #32
 80045d2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80045dc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80045e0:	e032      	b.n	8004648 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80045e2:	1c7a      	adds	r2, r7, #1
 80045e4:	d0c1      	beq.n	800456a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7ff fb93 	bl	8003d10 <HAL_GetTick>
 80045ea:	1b80      	subs	r0, r0, r6
 80045ec:	42b8      	cmp	r0, r7
 80045ee:	d801      	bhi.n	80045f4 <I2C_IsErrorOccurred+0xa8>
 80045f0:	2f00      	cmp	r7, #0
 80045f2:	d1b9      	bne.n	8004568 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80045f8:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045fc:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80045fe:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004600:	0400      	lsls	r0, r0, #16
 8004602:	d50a      	bpl.n	800461a <I2C_IsErrorOccurred+0xce>
 8004604:	0449      	lsls	r1, r1, #17
 8004606:	d408      	bmi.n	800461a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8004608:	2a20      	cmp	r2, #32
 800460a:	d006      	beq.n	800461a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004612:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004614:	f7ff fb7c 	bl	8003d10 <HAL_GetTick>
 8004618:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461a:	682b      	ldr	r3, [r5, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	069b      	lsls	r3, r3, #26
 8004620:	d4a2      	bmi.n	8004568 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004622:	f7ff fb75 	bl	8003d10 <HAL_GetTick>
 8004626:	1b80      	subs	r0, r0, r6
 8004628:	2819      	cmp	r0, #25
 800462a:	d9f6      	bls.n	800461a <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800462c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800462e:	f04f 0801 	mov.w	r8, #1
 8004632:	e799      	b.n	8004568 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8004634:	f1b8 0f00 	cmp.w	r8, #0
 8004638:	d19d      	bne.n	8004576 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800463a:	2220      	movs	r2, #32
 800463c:	61da      	str	r2, [r3, #28]
 800463e:	e79a      	b.n	8004576 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	4620      	mov	r0, r4
 8004642:	e79b      	b.n	800457c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8004644:	2800      	cmp	r0, #0
 8004646:	d1b2      	bne.n	80045ae <I2C_IsErrorOccurred+0x62>
}
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800464c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4604      	mov	r4, r0
 8004650:	460d      	mov	r5, r1
 8004652:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	079b      	lsls	r3, r3, #30
 800465a:	d501      	bpl.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800465c:	2000      	movs	r0, #0
}
 800465e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004660:	4632      	mov	r2, r6
 8004662:	4629      	mov	r1, r5
 8004664:	4620      	mov	r0, r4
 8004666:	f7ff ff71 	bl	800454c <I2C_IsErrorOccurred>
 800466a:	b9a0      	cbnz	r0, 8004696 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800466c:	1c6a      	adds	r2, r5, #1
 800466e:	d0f1      	beq.n	8004654 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004670:	f7ff fb4e 	bl	8003d10 <HAL_GetTick>
 8004674:	1b80      	subs	r0, r0, r6
 8004676:	42a8      	cmp	r0, r5
 8004678:	d801      	bhi.n	800467e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800467a:	2d00      	cmp	r5, #0
 800467c:	d1ea      	bne.n	8004654 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004680:	f043 0320 	orr.w	r3, r3, #32
 8004684:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004686:	2320      	movs	r3, #32
 8004688:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	2300      	movs	r3, #0
 800468e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004692:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004696:	2001      	movs	r0, #1
 8004698:	e7e1      	b.n	800465e <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800469a <I2C_WaitOnFlagUntilTimeout>:
{
 800469a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469e:	9f06      	ldr	r7, [sp, #24]
 80046a0:	4604      	mov	r4, r0
 80046a2:	4688      	mov	r8, r1
 80046a4:	4616      	mov	r6, r2
 80046a6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a8:	6822      	ldr	r2, [r4, #0]
 80046aa:	6993      	ldr	r3, [r2, #24]
 80046ac:	ea38 0303 	bics.w	r3, r8, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	42b3      	cmp	r3, r6
 80046b8:	d001      	beq.n	80046be <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80046ba:	2000      	movs	r0, #0
 80046bc:	e015      	b.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80046be:	1c6b      	adds	r3, r5, #1
 80046c0:	d0f3      	beq.n	80046aa <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7ff fb25 	bl	8003d10 <HAL_GetTick>
 80046c6:	1bc0      	subs	r0, r0, r7
 80046c8:	42a8      	cmp	r0, r5
 80046ca:	d801      	bhi.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x36>
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	d1eb      	bne.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80046d2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d4:	f043 0320 	orr.w	r3, r3, #32
 80046d8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046da:	2320      	movs	r3, #32
 80046dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80046e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80046ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046ee <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80046ee:	b570      	push	{r4, r5, r6, lr}
 80046f0:	4604      	mov	r4, r0
 80046f2:	460d      	mov	r5, r1
 80046f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	d501      	bpl.n	8004702 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80046fe:	2000      	movs	r0, #0
}
 8004700:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004702:	4632      	mov	r2, r6
 8004704:	4629      	mov	r1, r5
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff ff20 	bl	800454c <I2C_IsErrorOccurred>
 800470c:	b990      	cbnz	r0, 8004734 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7ff faff 	bl	8003d10 <HAL_GetTick>
 8004712:	1b80      	subs	r0, r0, r6
 8004714:	42a8      	cmp	r0, r5
 8004716:	d801      	bhi.n	800471c <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004718:	2d00      	cmp	r5, #0
 800471a:	d1ec      	bne.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800471e:	f043 0320 	orr.w	r3, r3, #32
 8004722:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004724:	2320      	movs	r3, #32
 8004726:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	2300      	movs	r3, #0
 800472c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004730:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004734:	2001      	movs	r0, #1
 8004736:	e7e3      	b.n	8004700 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004738 <HAL_I2C_Init>:
{
 8004738:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800473a:	4604      	mov	r4, r0
 800473c:	2800      	cmp	r0, #0
 800473e:	d04a      	beq.n	80047d6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004740:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004744:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004748:	b91b      	cbnz	r3, 8004752 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800474a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800474e:	f7fc ff1f 	bl	8001590 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004752:	2324      	movs	r3, #36	; 0x24
 8004754:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004768:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004770:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004772:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004776:	2901      	cmp	r1, #1
 8004778:	d124      	bne.n	80047c4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800477a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004780:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004782:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004784:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800478c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004794:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004796:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800479a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800479c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800479e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047a2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047a4:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80047c2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047c8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047ca:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047cc:	d1d8      	bne.n	8004780 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	e7d4      	b.n	8004780 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80047d6:	2001      	movs	r0, #1
 80047d8:	e7f3      	b.n	80047c2 <HAL_I2C_Init+0x8a>

080047da <HAL_I2C_DeInit>:
{
 80047da:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80047dc:	4604      	mov	r4, r0
 80047de:	b198      	cbz	r0, 8004808 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80047e0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80047e2:	2324      	movs	r3, #36	; 0x24
 80047e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80047e8:	6813      	ldr	r3, [r2, #0]
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80047f0:	f7fc ff12 	bl	8001618 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f4:	2000      	movs	r0, #0
 80047f6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80047f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80047fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004800:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004806:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004808:	2001      	movs	r0, #1
 800480a:	e7fc      	b.n	8004806 <HAL_I2C_DeInit+0x2c>

0800480c <HAL_I2C_Mem_Write>:
{
 800480c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004812:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004816:	4604      	mov	r4, r0
 8004818:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800481a:	2b20      	cmp	r3, #32
{
 800481c:	4616      	mov	r6, r2
 800481e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004822:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004826:	f040 80c6 	bne.w	80049b6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800482a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800482c:	b113      	cbz	r3, 8004834 <HAL_I2C_Mem_Write+0x28>
 800482e:	f1ba 0f00 	cmp.w	sl, #0
 8004832:	d106      	bne.n	8004842 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004838:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800483a:	2001      	movs	r0, #1
}
 800483c:	b003      	add	sp, #12
 800483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004842:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004846:	2b01      	cmp	r3, #1
 8004848:	f000 80b5 	beq.w	80049b6 <HAL_I2C_Mem_Write+0x1aa>
 800484c:	f04f 0b01 	mov.w	fp, #1
 8004850:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004854:	f7ff fa5c 	bl	8003d10 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004858:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800485a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800485c:	9000      	str	r0, [sp, #0]
 800485e:	465a      	mov	r2, fp
 8004860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004864:	4620      	mov	r0, r4
 8004866:	f7ff ff18 	bl	800469a <I2C_WaitOnFlagUntilTimeout>
 800486a:	2800      	cmp	r0, #0
 800486c:	d1e5      	bne.n	800483a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800486e:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004870:	fa5f f289 	uxtb.w	r2, r9
 8004874:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8004876:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004878:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800487c:	2340      	movs	r3, #64	; 0x40
 800487e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004884:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004886:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004888:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800488a:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800488c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004896:	f7ff fe43 	bl	8004520 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	462a      	mov	r2, r5
 800489c:	4641      	mov	r1, r8
 800489e:	4620      	mov	r0, r4
 80048a0:	f7ff fed4 	bl	800464c <I2C_WaitOnTXISFlagUntilTimeout>
 80048a4:	bb18      	cbnz	r0, 80048ee <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048a6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048aa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ac:	d115      	bne.n	80048da <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ae:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	2200      	movs	r2, #0
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048b6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	4643      	mov	r3, r8
 80048ba:	9500      	str	r5, [sp, #0]
 80048bc:	f7ff feed 	bl	800469a <I2C_WaitOnFlagUntilTimeout>
 80048c0:	b9a8      	cbnz	r0, 80048ee <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2bff      	cmp	r3, #255	; 0xff
 80048c8:	d815      	bhi.n	80048f6 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80048ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80048d2:	b292      	uxth	r2, r2
 80048d4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	e012      	b.n	8004900 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048da:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048dc:	4641      	mov	r1, r8
 80048de:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e2:	462a      	mov	r2, r5
 80048e4:	f7ff feb2 	bl	800464c <I2C_WaitOnTXISFlagUntilTimeout>
 80048e8:	b908      	cbnz	r0, 80048ee <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	e7df      	b.n	80048ae <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80048ee:	2300      	movs	r3, #0
 80048f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80048f4:	e7a1      	b.n	800483a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048f6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048fc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048fe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004900:	4639      	mov	r1, r7
 8004902:	4620      	mov	r0, r4
 8004904:	f7ff fe0c 	bl	8004520 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004908:	462a      	mov	r2, r5
 800490a:	4641      	mov	r1, r8
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fe9d 	bl	800464c <I2C_WaitOnTXISFlagUntilTimeout>
 8004912:	2800      	cmp	r0, #0
 8004914:	d191      	bne.n	800483a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004918:	6822      	ldr	r2, [r4, #0]
 800491a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800491e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004920:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004922:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004924:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004926:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004928:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800492a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800492c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800492e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004930:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004932:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004934:	b29b      	uxth	r3, r3
 8004936:	b1b3      	cbz	r3, 8004966 <HAL_I2C_Mem_Write+0x15a>
 8004938:	b9aa      	cbnz	r2, 8004966 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800493a:	4643      	mov	r3, r8
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	4620      	mov	r0, r4
 8004940:	9500      	str	r5, [sp, #0]
 8004942:	f7ff feaa 	bl	800469a <I2C_WaitOnFlagUntilTimeout>
 8004946:	2800      	cmp	r0, #0
 8004948:	f47f af77 	bne.w	800483a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	2bff      	cmp	r3, #255	; 0xff
 8004952:	d928      	bls.n	80049a6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004954:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800495a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800495c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800495e:	4639      	mov	r1, r7
 8004960:	4620      	mov	r0, r4
 8004962:	f7ff fddd 	bl	8004520 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1cc      	bne.n	8004908 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496e:	462a      	mov	r2, r5
 8004970:	4641      	mov	r1, r8
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff febb 	bl	80046ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8004978:	2800      	cmp	r0, #0
 800497a:	f47f af5e 	bne.w	800483a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	2120      	movs	r1, #32
 8004982:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800498a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800498e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004998:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800499c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80049a4:	e74a      	b.n	800483c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80049a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ac:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80049ae:	b292      	uxth	r2, r2
 80049b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	e7d3      	b.n	800495e <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80049b6:	2002      	movs	r0, #2
 80049b8:	e740      	b.n	800483c <HAL_I2C_Mem_Write+0x30>
 80049ba:	bf00      	nop
 80049bc:	80002000 	.word	0x80002000

080049c0 <HAL_I2C_Mem_Read>:
{
 80049c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80049ca:	4604      	mov	r4, r0
 80049cc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ce:	2b20      	cmp	r3, #32
{
 80049d0:	4616      	mov	r6, r2
 80049d2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80049d6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049da:	f040 80c9 	bne.w	8004b70 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80049de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049e0:	b113      	cbz	r3, 80049e8 <HAL_I2C_Mem_Read+0x28>
 80049e2:	f1ba 0f00 	cmp.w	sl, #0
 80049e6:	d106      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049ec:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80049ee:	2001      	movs	r0, #1
}
 80049f0:	b003      	add	sp, #12
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80049f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	f000 80b8 	beq.w	8004b70 <HAL_I2C_Mem_Read+0x1b0>
 8004a00:	f04f 0b01 	mov.w	fp, #1
 8004a04:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004a08:	f7ff f982 	bl	8003d10 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a0c:	2319      	movs	r3, #25
 8004a0e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004a10:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a12:	465a      	mov	r2, fp
 8004a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7ff fe3e 	bl	800469a <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d1e4      	bne.n	80049ee <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a24:	2222      	movs	r2, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a26:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8004a28:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a2a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a2e:	2240      	movs	r2, #64	; 0x40
 8004a30:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a36:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a38:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004a3a:	6262      	str	r2, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a3c:	4a4d      	ldr	r2, [pc, #308]	; (8004b74 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8004a3e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a42:	9200      	str	r2, [sp, #0]
 8004a44:	fa5f f289 	uxtb.w	r2, r9
 8004a48:	f7ff fd6a 	bl	8004520 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4641      	mov	r1, r8
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff fdfb 	bl	800464c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a56:	bb20      	cbnz	r0, 8004aa2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a58:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a5c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a5e:	d116      	bne.n	8004a8e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a60:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	2200      	movs	r2, #0
 8004a64:	2140      	movs	r1, #64	; 0x40
 8004a66:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a68:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6a:	4643      	mov	r3, r8
 8004a6c:	9500      	str	r5, [sp, #0]
 8004a6e:	f7ff fe14 	bl	800469a <I2C_WaitOnFlagUntilTimeout>
 8004a72:	b9b0      	cbnz	r0, 8004aa2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2bff      	cmp	r3, #255	; 0xff
 8004a7a:	4b3f      	ldr	r3, [pc, #252]	; (8004b78 <HAL_I2C_Mem_Read+0x1b8>)
 8004a7c:	d815      	bhi.n	8004aaa <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004a7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004a86:	b292      	uxth	r2, r2
 8004a88:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	e012      	b.n	8004ab4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a8e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a90:	4641      	mov	r1, r8
 8004a92:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a96:	462a      	mov	r2, r5
 8004a98:	f7ff fdd8 	bl	800464c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a9c:	b908      	cbnz	r0, 8004aa2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	e7de      	b.n	8004a60 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004aa8:	e7a1      	b.n	80049ee <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aaa:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ab2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff fd32 	bl	8004520 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004abc:	4643      	mov	r3, r8
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2104      	movs	r1, #4
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	9500      	str	r5, [sp, #0]
 8004ac6:	f7ff fde8 	bl	800469a <I2C_WaitOnFlagUntilTimeout>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d18f      	bne.n	80049ee <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004ad8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004ada:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004adc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004ade:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004ae0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004ae2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004ae4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004ae6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b1b3      	cbz	r3, 8004b20 <HAL_I2C_Mem_Read+0x160>
 8004af2:	b9aa      	cbnz	r2, 8004b20 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004af4:	4643      	mov	r3, r8
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	4620      	mov	r0, r4
 8004afa:	9500      	str	r5, [sp, #0]
 8004afc:	f7ff fdcd 	bl	800469a <I2C_WaitOnFlagUntilTimeout>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f47f af74 	bne.w	80049ee <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	d928      	bls.n	8004b60 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b14:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b16:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b18:	4639      	mov	r1, r7
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff fd00 	bl	8004520 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004b20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1c9      	bne.n	8004abc <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7ff fdde 	bl	80046ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f47f af5b 	bne.w	80049ee <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	2120      	movs	r1, #32
 8004b3c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004b44:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004b48:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004b56:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b5a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004b5e:	e747      	b.n	80049f0 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004b60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b66:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	e7d3      	b.n	8004b18 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8004b70:	2002      	movs	r0, #2
 8004b72:	e73d      	b.n	80049f0 <HAL_I2C_Mem_Read+0x30>
 8004b74:	80002000 	.word	0x80002000
 8004b78:	80002400 	.word	0x80002400

08004b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b7c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	b2dc      	uxtb	r4, r3
 8004b86:	d11d      	bne.n	8004bc4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b88:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d019      	beq.n	8004bc4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	2324      	movs	r3, #36	; 0x24
 8004b92:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b96:	6803      	ldr	r3, [r0, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4311      	orrs	r1, r2
 8004bac:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004bbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004bc0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004bc2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004bc4:	2002      	movs	r0, #2
 8004bc6:	e7fc      	b.n	8004bc2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004bc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bc8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	b2dc      	uxtb	r4, r3
 8004bd2:	d11c      	bne.n	8004c0e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d018      	beq.n	8004c0e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bdc:	2324      	movs	r3, #36	; 0x24
 8004bde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be2:	6803      	ldr	r3, [r0, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bec:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bf2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bf6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c00:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004c06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004c0a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004c0c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004c0e:	2002      	movs	r0, #2
 8004c10:	e7fc      	b.n	8004c0c <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08004c14 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c14:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c16:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c18:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c1c:	3284      	adds	r2, #132	; 0x84
 8004c1e:	1883      	adds	r3, r0, r2
{
 8004c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c24:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c26:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c2a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c2c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c30:	684c      	ldr	r4, [r1, #4]
 8004c32:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c36:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c3a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c3e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c40:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c42:	68c5      	ldr	r5, [r0, #12]
 8004c44:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8004c48:	443d      	add	r5, r7
 8004c4a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c4e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c50:	68c6      	ldr	r6, [r0, #12]
 8004c52:	68cd      	ldr	r5, [r1, #12]
 8004c54:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004c58:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c5a:	689d      	ldr	r5, [r3, #8]
 8004c5c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8004c60:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c62:	688d      	ldr	r5, [r1, #8]
 8004c64:	68c7      	ldr	r7, [r0, #12]
 8004c66:	3501      	adds	r5, #1
 8004c68:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004c6c:	443d      	add	r5, r7
 8004c6e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c72:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c74:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c76:	691d      	ldr	r5, [r3, #16]
 8004c78:	f025 0507 	bic.w	r5, r5, #7
 8004c7c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c7e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c80:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c82:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c86:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c8a:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c8e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004c92:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004c96:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004c9a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004c9e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ca0:	695d      	ldr	r5, [r3, #20]
 8004ca2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004ca6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ca8:	694d      	ldr	r5, [r1, #20]
 8004caa:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004cac:	69dd      	ldr	r5, [r3, #28]
 8004cae:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8004cb2:	f025 0507 	bic.w	r5, r5, #7
 8004cb6:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004cb8:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004cbc:	433d      	orrs	r5, r7
 8004cbe:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004cc0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004cc2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004cc4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004cc8:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cca:	b1fe      	cbz	r6, 8004d0c <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ccc:	3e01      	subs	r6, #1
 8004cce:	2e06      	cmp	r6, #6
 8004cd0:	d81e      	bhi.n	8004d10 <LTDC_SetConfig+0xfc>
 8004cd2:	4d10      	ldr	r5, [pc, #64]	; (8004d14 <LTDC_SetConfig+0x100>)
 8004cd4:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cd6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004cd8:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cdc:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ce0:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ce2:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ce4:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ce6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ce8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cea:	436e      	muls	r6, r5
 8004cec:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004cf0:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004cf2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004cf4:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8004cf8:	f024 0407 	bic.w	r4, r4, #7
 8004cfc:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cfe:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d00:	5883      	ldr	r3, [r0, r2]
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	5083      	str	r3, [r0, r2]
}
 8004d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004d0c:	2504      	movs	r5, #4
 8004d0e:	e7e2      	b.n	8004cd6 <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d10:	2501      	movs	r5, #1
 8004d12:	e7e0      	b.n	8004cd6 <LTDC_SetConfig+0xc2>
 8004d14:	08021e8e 	.word	0x08021e8e

08004d18 <HAL_LTDC_Init>:
{
 8004d18:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d063      	beq.n	8004de8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d20:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004d24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d28:	b91b      	cbnz	r3, 8004d32 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004d2a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004d2e:	f7fc fc8f 	bl	8001650 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d32:	2302      	movs	r3, #2
 8004d34:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004d40:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d42:	6999      	ldr	r1, [r3, #24]
 8004d44:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004d48:	4302      	orrs	r2, r0
 8004d4a:	68e0      	ldr	r0, [r4, #12]
 8004d4c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d4e:	6920      	ldr	r0, [r4, #16]
 8004d50:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d52:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d54:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d56:	4925      	ldr	r1, [pc, #148]	; (8004dec <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d58:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004d66:	69a0      	ldr	r0, [r4, #24]
 8004d68:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d6a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d6c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	400a      	ands	r2, r1
 8004d72:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004d7a:	6a20      	ldr	r0, [r4, #32]
 8004d7c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d80:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	400a      	ands	r2, r1
 8004d86:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004d8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d90:	4302      	orrs	r2, r0
 8004d92:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d9a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004da2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004da4:	430a      	orrs	r2, r1
 8004da6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004daa:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004dae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004db2:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004db8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004dba:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004dbe:	432a      	orrs	r2, r5
 8004dc0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004dc4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004dc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dce:	f042 0206 	orr.w	r2, r2, #6
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ddc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004dde:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004de2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004de8:	2001      	movs	r0, #1
 8004dea:	e7fc      	b.n	8004de6 <HAL_LTDC_Init+0xce>
 8004dec:	f000f800 	.word	0xf000f800

08004df0 <HAL_LTDC_ErrorCallback>:
 8004df0:	4770      	bx	lr

08004df2 <HAL_LTDC_ReloadEventCallback>:
 8004df2:	4770      	bx	lr

08004df4 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004df4:	6803      	ldr	r3, [r0, #0]
{
 8004df6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004df8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8004dfa:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004dfc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004dfe:	0772      	lsls	r2, r6, #29
 8004e00:	d514      	bpl.n	8004e2c <HAL_LTDC_IRQHandler+0x38>
 8004e02:	0769      	lsls	r1, r5, #29
 8004e04:	d512      	bpl.n	8004e2c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e08:	f022 0204 	bic.w	r2, r2, #4
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004e0e:	2204      	movs	r2, #4
 8004e10:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004e12:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8004e1e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004e20:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004e24:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004e28:	f7ff ffe2 	bl	8004df0 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004e2c:	07b2      	lsls	r2, r6, #30
 8004e2e:	d516      	bpl.n	8004e5e <HAL_LTDC_IRQHandler+0x6a>
 8004e30:	07ab      	lsls	r3, r5, #30
 8004e32:	d514      	bpl.n	8004e5e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004e34:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8004e36:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3a:	f022 0202 	bic.w	r2, r2, #2
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004e40:	2202      	movs	r2, #2
 8004e42:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004e44:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004e4e:	2304      	movs	r3, #4
 8004e50:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004e54:	2300      	movs	r3, #0
 8004e56:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004e5a:	f7ff ffc9 	bl	8004df0 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004e5e:	07f0      	lsls	r0, r6, #31
 8004e60:	d510      	bpl.n	8004e84 <HAL_LTDC_IRQHandler+0x90>
 8004e62:	07e9      	lsls	r1, r5, #31
 8004e64:	d50e      	bpl.n	8004e84 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004e66:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8004e68:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004e72:	2201      	movs	r2, #1
 8004e74:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8004e76:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e78:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004e7c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004e80:	f7fe fa9c 	bl	80033bc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004e84:	0732      	lsls	r2, r6, #28
 8004e86:	d511      	bpl.n	8004eac <HAL_LTDC_IRQHandler+0xb8>
 8004e88:	072b      	lsls	r3, r5, #28
 8004e8a:	d50f      	bpl.n	8004eac <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004e8c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004e8e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e92:	f022 0208 	bic.w	r2, r2, #8
 8004e96:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004e98:	2208      	movs	r2, #8
 8004e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004ea8:	f7ff ffa3 	bl	8004df2 <HAL_LTDC_ReloadEventCallback>
}
 8004eac:	bd70      	pop	{r4, r5, r6, pc}

08004eae <HAL_LTDC_ConfigLayer>:
{
 8004eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004eb2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	460f      	mov	r7, r1
 8004eba:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	f04f 0002 	mov.w	r0, #2
 8004ec2:	d01f      	beq.n	8004f04 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ec4:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8004ec6:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004eca:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ecc:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ed0:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004ed4:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ed8:	3438      	adds	r4, #56	; 0x38
 8004eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee6:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4662      	mov	r2, ip
 8004eec:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004eee:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ef0:	f7ff fe90 	bl	8004c14 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ef4:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004ef6:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ef8:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004efc:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004f00:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f08 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8004f08:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	f04f 0302 	mov.w	r3, #2
 8004f12:	d012      	beq.n	8004f3a <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f14:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f18:	6803      	ldr	r3, [r0, #0]
 8004f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8004f22:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <HAL_LTDC_ProgramLineEvent+0x38>)
 8004f24:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004f34:	2300      	movs	r3, #0
 8004f36:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8004f3a:	4618      	mov	r0, r3
}
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40016800 	.word	0x40016800

08004f44 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_PWREx_EnableOverDrive+0x68>)
{
 8004f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f4a:	4c19      	ldr	r4, [pc, #100]	; (8004fb0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f62:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f64:	f7fe fed4 	bl	8003d10 <HAL_GetTick>
 8004f68:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	03da      	lsls	r2, r3, #15
 8004f6e:	d50c      	bpl.n	8004f8a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f70:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f72:	4d0f      	ldr	r5, [pc, #60]	; (8004fb0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f78:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004f7a:	f7fe fec9 	bl	8003d10 <HAL_GetTick>
 8004f7e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f80:	686b      	ldr	r3, [r5, #4]
 8004f82:	039b      	lsls	r3, r3, #14
 8004f84:	d50a      	bpl.n	8004f9c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004f86:	2000      	movs	r0, #0
 8004f88:	e006      	b.n	8004f98 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f8a:	f7fe fec1 	bl	8003d10 <HAL_GetTick>
 8004f8e:	1b40      	subs	r0, r0, r5
 8004f90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f94:	d9e9      	bls.n	8004f6a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8004f96:	2003      	movs	r0, #3
}
 8004f98:	b003      	add	sp, #12
 8004f9a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f9c:	f7fe feb8 	bl	8003d10 <HAL_GetTick>
 8004fa0:	1b00      	subs	r0, r0, r4
 8004fa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004fa6:	d9eb      	bls.n	8004f80 <HAL_PWREx_EnableOverDrive+0x3c>
 8004fa8:	e7f5      	b.n	8004f96 <HAL_PWREx_EnableOverDrive+0x52>
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40007000 	.word	0x40007000

08004fb4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004fb8:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004fba:	b136      	cbz	r6, 8004fca <QSPI_Config+0x16>
 8004fbc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8004fc0:	d003      	beq.n	8004fca <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004fc2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004fc4:	6804      	ldr	r4, [r0, #0]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004fca:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004fce:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004fd2:	f1ba 0f00 	cmp.w	sl, #0
 8004fd6:	d04c      	beq.n	8005072 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fd8:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004fda:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fdc:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8004fe0:	ea4a 0406 	orr.w	r4, sl, r6
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 8004fea:	ea44 0a02 	orr.w	sl, r4, r2
 8004fee:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004ff2:	f1be 0f00 	cmp.w	lr, #0
 8004ff6:	d024      	beq.n	8005042 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004ff8:	688e      	ldr	r6, [r1, #8]
 8004ffa:	ea4a 040e 	orr.w	r4, sl, lr
 8004ffe:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005000:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005002:	b19f      	cbz	r7, 800502c <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005004:	433b      	orrs	r3, r7
 8005006:	4303      	orrs	r3, r0
 8005008:	68c8      	ldr	r0, [r1, #12]
 800500a:	ea43 0309 	orr.w	r3, r3, r9
 800500e:	ea43 0308 	orr.w	r3, r3, r8
 8005012:	4333      	orrs	r3, r6
 8005014:	4303      	orrs	r3, r0
 8005016:	ea43 030c 	orr.w	r3, r3, ip
 800501a:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800501c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005020:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005022:	d001      	beq.n	8005028 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005024:	684b      	ldr	r3, [r1, #4]
 8005026:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800502c:	4303      	orrs	r3, r0
 800502e:	ea43 0309 	orr.w	r3, r3, r9
 8005032:	ea43 0308 	orr.w	r3, r3, r8
 8005036:	4333      	orrs	r3, r6
 8005038:	ea43 030c 	orr.w	r3, r3, ip
 800503c:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800503e:	616b      	str	r3, [r5, #20]
 8005040:	e7f2      	b.n	8005028 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005042:	b167      	cbz	r7, 800505e <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005044:	433b      	orrs	r3, r7
 8005046:	4303      	orrs	r3, r0
 8005048:	68c8      	ldr	r0, [r1, #12]
 800504a:	ea43 0309 	orr.w	r3, r3, r9
 800504e:	ea43 0308 	orr.w	r3, r3, r8
 8005052:	4303      	orrs	r3, r0
 8005054:	ea43 030c 	orr.w	r3, r3, ip
 8005058:	ea43 030a 	orr.w	r3, r3, sl
 800505c:	e7de      	b.n	800501c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800505e:	4303      	orrs	r3, r0
 8005060:	ea43 0309 	orr.w	r3, r3, r9
 8005064:	ea43 0408 	orr.w	r4, r3, r8
 8005068:	ea44 030c 	orr.w	r3, r4, ip
 800506c:	ea43 030a 	orr.w	r3, r3, sl
 8005070:	e7e5      	b.n	800503e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005072:	f1be 0f00 	cmp.w	lr, #0
 8005076:	d02c      	beq.n	80050d2 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005078:	ea46 050e 	orr.w	r5, r6, lr
 800507c:	688b      	ldr	r3, [r1, #8]
 800507e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005080:	694e      	ldr	r6, [r1, #20]
 8005082:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005084:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005086:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800508a:	04b6      	lsls	r6, r6, #18
 800508c:	690b      	ldr	r3, [r1, #16]
 800508e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005092:	b1a7      	cbz	r7, 80050be <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005094:	433b      	orrs	r3, r7
 8005096:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005098:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800509c:	ea43 0308 	orr.w	r3, r3, r8
 80050a0:	ea43 030e 	orr.w	r3, r3, lr
 80050a4:	ea43 030c 	orr.w	r3, r3, ip
 80050a8:	ea43 0300 	orr.w	r3, r3, r0
 80050ac:	ea43 0306 	orr.w	r3, r3, r6
 80050b0:	ea43 0305 	orr.w	r3, r3, r5
 80050b4:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80050b6:	d0b7      	beq.n	8005028 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80050b8:	684b      	ldr	r3, [r1, #4]
 80050ba:	61a3      	str	r3, [r4, #24]
 80050bc:	e7b4      	b.n	8005028 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050be:	ea43 0308 	orr.w	r3, r3, r8
 80050c2:	ea43 030e 	orr.w	r3, r3, lr
 80050c6:	ea43 030c 	orr.w	r3, r3, ip
 80050ca:	4333      	orrs	r3, r6
 80050cc:	432b      	orrs	r3, r5
 80050ce:	6163      	str	r3, [r4, #20]
 80050d0:	e7aa      	b.n	8005028 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80050d2:	b1d7      	cbz	r7, 800510a <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050d4:	ea46 0307 	orr.w	r3, r6, r7
 80050d8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80050da:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80050dc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050e0:	ea43 0302 	orr.w	r3, r3, r2
 80050e4:	ea43 0304 	orr.w	r3, r3, r4
 80050e8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80050ea:	ea43 0304 	orr.w	r3, r3, r4
 80050ee:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80050f0:	ea43 0304 	orr.w	r3, r3, r4
 80050f4:	68cc      	ldr	r4, [r1, #12]
 80050f6:	ea43 0304 	orr.w	r3, r3, r4
 80050fa:	694c      	ldr	r4, [r1, #20]
 80050fc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005100:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005102:	d091      	beq.n	8005028 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005104:	684b      	ldr	r3, [r1, #4]
 8005106:	6183      	str	r3, [r0, #24]
 8005108:	e78e      	b.n	8005028 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800510a:	2e00      	cmp	r6, #0
 800510c:	d08c      	beq.n	8005028 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800510e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005110:	6800      	ldr	r0, [r0, #0]
 8005112:	4333      	orrs	r3, r6
 8005114:	4313      	orrs	r3, r2
 8005116:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005118:	4313      	orrs	r3, r2
 800511a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800511c:	4313      	orrs	r3, r2
 800511e:	694a      	ldr	r2, [r1, #20]
 8005120:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8005124:	6143      	str	r3, [r0, #20]
}
 8005126:	e77f      	b.n	8005028 <QSPI_Config+0x74>

08005128 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005130:	4604      	mov	r4, r0
 8005132:	460e      	mov	r6, r1
 8005134:	4615      	mov	r5, r2
 8005136:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	6893      	ldr	r3, [r2, #8]
 800513c:	4233      	tst	r3, r6
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	42ab      	cmp	r3, r5
 8005146:	d101      	bne.n	800514c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005148:	2000      	movs	r0, #0
 800514a:	e012      	b.n	8005172 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800514c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005150:	d0f3      	beq.n	800513a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fe fddd 	bl	8003d10 <HAL_GetTick>
 8005156:	1bc0      	subs	r0, r0, r7
 8005158:	4540      	cmp	r0, r8
 800515a:	d802      	bhi.n	8005162 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800515c:	f1b8 0f00 	cmp.w	r8, #0
 8005160:	d1ea      	bne.n	8005138 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005162:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005164:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005166:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800516a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005178 <HAL_QSPI_Init>:
{
 8005178:	b530      	push	{r4, r5, lr}
 800517a:	4604      	mov	r4, r0
 800517c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800517e:	f7fe fdc7 	bl	8003d10 <HAL_GetTick>
 8005182:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005184:	2c00      	cmp	r4, #0
 8005186:	d047      	beq.n	8005218 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005188:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800518c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005190:	b94a      	cbnz	r2, 80051a6 <HAL_QSPI_Init+0x2e>
 8005192:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005194:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005196:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800519a:	f7fc fb07 	bl	80017ac <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	68a1      	ldr	r1, [r4, #8]
 80051aa:	6802      	ldr	r2, [r0, #0]
 80051ac:	3901      	subs	r1, #1
 80051ae:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80051b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80051b6:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80051b8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80051ba:	4620      	mov	r0, r4
 80051bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80051be:	9200      	str	r2, [sp, #0]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f7ff ffb1 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80051c6:	bb10      	cbnz	r0, 800520e <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	69e5      	ldr	r5, [r4, #28]
 80051cc:	68e3      	ldr	r3, [r4, #12]
 80051ce:	6811      	ldr	r1, [r2, #0]
 80051d0:	432b      	orrs	r3, r5
 80051d2:	6a25      	ldr	r5, [r4, #32]
 80051d4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80051d8:	432b      	orrs	r3, r5
 80051da:	6865      	ldr	r5, [r4, #4]
 80051dc:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80051e0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80051e8:	6855      	ldr	r5, [r2, #4]
 80051ea:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80051ee:	430b      	orrs	r3, r1
 80051f0:	6921      	ldr	r1, [r4, #16]
 80051f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80051f6:	4909      	ldr	r1, [pc, #36]	; (800521c <HAL_QSPI_Init+0xa4>)
 80051f8:	4029      	ands	r1, r5
 80051fa:	430b      	orrs	r3, r1
 80051fc:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005206:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005208:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800520a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800520e:	2300      	movs	r3, #0
 8005210:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005214:	b005      	add	sp, #20
 8005216:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005218:	2001      	movs	r0, #1
 800521a:	e7fb      	b.n	8005214 <HAL_QSPI_Init+0x9c>
 800521c:	ffe0f8fe 	.word	0xffe0f8fe

08005220 <HAL_QSPI_DeInit>:
{
 8005220:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005222:	4604      	mov	r4, r0
 8005224:	b168      	cbz	r0, 8005242 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8005226:	6802      	ldr	r2, [r0, #0]
 8005228:	6813      	ldr	r3, [r2, #0]
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005230:	f7fc fb2a 	bl	8001888 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005234:	2000      	movs	r0, #0
 8005236:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005238:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800523c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005240:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005242:	2001      	movs	r0, #1
 8005244:	e7fc      	b.n	8005240 <HAL_QSPI_DeInit+0x20>

08005246 <HAL_QSPI_Command>:
{
 8005246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800524a:	4604      	mov	r4, r0
 800524c:	b085      	sub	sp, #20
 800524e:	4617      	mov	r7, r2
 8005250:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8005252:	f7fe fd5d 	bl	8003d10 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005256:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800525a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800525c:	2a01      	cmp	r2, #1
 800525e:	d033      	beq.n	80052c8 <HAL_QSPI_Command+0x82>
 8005260:	2201      	movs	r2, #1
 8005262:	2602      	movs	r6, #2
 8005264:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005268:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800526c:	2a01      	cmp	r2, #1
 800526e:	fa5f f882 	uxtb.w	r8, r2
 8005272:	d127      	bne.n	80052c4 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005274:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005276:	9003      	str	r0, [sp, #12]
 8005278:	2120      	movs	r1, #32
 800527a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800527c:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800527e:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005280:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005284:	f7ff ff50 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005288:	4605      	mov	r5, r0
 800528a:	b9a0      	cbnz	r0, 80052b6 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800528c:	4602      	mov	r2, r0
 800528e:	4649      	mov	r1, r9
 8005290:	4620      	mov	r0, r4
 8005292:	f7ff fe8f 	bl	8004fb4 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005296:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	b94a      	cbnz	r2, 80052b2 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800529e:	4642      	mov	r2, r8
 80052a0:	4631      	mov	r1, r6
 80052a2:	4620      	mov	r0, r4
 80052a4:	9700      	str	r7, [sp, #0]
 80052a6:	f7ff ff3f 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80052aa:	4605      	mov	r5, r0
 80052ac:	b918      	cbnz	r0, 80052b6 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80052b2:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80052b6:	2300      	movs	r3, #0
 80052b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80052bc:	4628      	mov	r0, r5
 80052be:	b005      	add	sp, #20
 80052c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80052c4:	4635      	mov	r5, r6
 80052c6:	e7f6      	b.n	80052b6 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80052c8:	2502      	movs	r5, #2
 80052ca:	e7f7      	b.n	80052bc <HAL_QSPI_Command+0x76>

080052cc <HAL_QSPI_AutoPolling>:
{
 80052cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80052d0:	4604      	mov	r4, r0
 80052d2:	4615      	mov	r5, r2
 80052d4:	461e      	mov	r6, r3
 80052d6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80052d8:	f7fe fd1a 	bl	8003d10 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80052dc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80052e0:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80052e2:	2a01      	cmp	r2, #1
 80052e4:	d040      	beq.n	8005368 <HAL_QSPI_AutoPolling+0x9c>
 80052e6:	2201      	movs	r2, #1
 80052e8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052ec:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80052f0:	2a01      	cmp	r2, #1
 80052f2:	b2d7      	uxtb	r7, r2
 80052f4:	d136      	bne.n	8005364 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80052f6:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052f8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052fa:	9003      	str	r0, [sp, #12]
 80052fc:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052fe:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005300:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005302:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005306:	2120      	movs	r1, #32
 8005308:	f7ff ff0e 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800530c:	bb20      	cbnz	r0, 8005358 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800530e:	6821      	ldr	r1, [r4, #0]
 8005310:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005312:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005314:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005316:	686a      	ldr	r2, [r5, #4]
 8005318:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800531a:	68aa      	ldr	r2, [r5, #8]
 800531c:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800531e:	680a      	ldr	r2, [r1, #0]
 8005320:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005324:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005326:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005328:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800532c:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800532e:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005330:	68ea      	ldr	r2, [r5, #12]
 8005332:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800533a:	f7ff fe3b 	bl	8004fb4 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	463a      	mov	r2, r7
 8005342:	2108      	movs	r1, #8
 8005344:	4620      	mov	r0, r4
 8005346:	9600      	str	r6, [sp, #0]
 8005348:	f7ff feee 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800534c:	b920      	cbnz	r0, 8005358 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	2208      	movs	r2, #8
 8005352:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005354:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005358:	2300      	movs	r3, #0
 800535a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800535e:	b004      	add	sp, #16
 8005360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8005364:	2002      	movs	r0, #2
 8005366:	e7f7      	b.n	8005358 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005368:	2002      	movs	r0, #2
 800536a:	e7f8      	b.n	800535e <HAL_QSPI_AutoPolling+0x92>

0800536c <HAL_QSPI_MemoryMapped>:
{
 800536c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	4616      	mov	r6, r2
 8005372:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005374:	f7fe fccc 	bl	8003d10 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005378:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800537c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800537e:	2a01      	cmp	r2, #1
 8005380:	d033      	beq.n	80053ea <HAL_QSPI_MemoryMapped+0x7e>
 8005382:	2201      	movs	r2, #1
 8005384:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005388:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800538c:	2a01      	cmp	r2, #1
 800538e:	d12a      	bne.n	80053e6 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005390:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005392:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005394:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005396:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005398:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800539c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800539e:	9100      	str	r1, [sp, #0]
 80053a0:	2120      	movs	r1, #32
 80053a2:	f7ff fec1 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80053a6:	4605      	mov	r5, r0
 80053a8:	b9b8      	cbnz	r0, 80053da <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	6872      	ldr	r2, [r6, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80053b0:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80053b2:	f020 0008 	bic.w	r0, r0, #8
 80053b6:	ea40 0002 	orr.w	r0, r0, r2
 80053ba:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80053bc:	d107      	bne.n	80053ce <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80053be:	6832      	ldr	r2, [r6, #0]
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80053c2:	2210      	movs	r2, #16
 80053c4:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053cc:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80053ce:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80053d2:	4639      	mov	r1, r7
 80053d4:	4620      	mov	r0, r4
 80053d6:	f7ff fded 	bl	8004fb4 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80053da:	2300      	movs	r3, #0
 80053dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80053e0:	4628      	mov	r0, r5
 80053e2:	b003      	add	sp, #12
 80053e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80053e6:	2502      	movs	r5, #2
 80053e8:	e7f7      	b.n	80053da <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80053ea:	2502      	movs	r5, #2
 80053ec:	e7f8      	b.n	80053e0 <HAL_QSPI_MemoryMapped+0x74>

080053ee <HAL_QSPI_Abort>:
{
 80053ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053f0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80053f2:	f7fe fc8d 	bl	8003d10 <HAL_GetTick>
 80053f6:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80053f8:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80053fc:	f010 0002 	ands.w	r0, r0, #2
 8005400:	d03a      	beq.n	8005478 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 8005402:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005404:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 8005406:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800540a:	680a      	ldr	r2, [r1, #0]
 800540c:	f012 0204 	ands.w	r2, r2, #4
 8005410:	d034      	beq.n	800547c <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005412:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005414:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005416:	f022 0204 	bic.w	r2, r2, #4
 800541a:	9303      	str	r3, [sp, #12]
 800541c:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800541e:	f7fe fd9b 	bl	8003f58 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	b118      	cbz	r0, 800542e <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005426:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005428:	f042 0204 	orr.w	r2, r2, #4
 800542c:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	6891      	ldr	r1, [r2, #8]
 8005432:	0689      	lsls	r1, r1, #26
 8005434:	d51d      	bpl.n	8005472 <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005436:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005438:	4620      	mov	r0, r4
 800543a:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800543c:	f041 0102 	orr.w	r1, r1, #2
 8005440:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005442:	2102      	movs	r1, #2
 8005444:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005446:	9200      	str	r2, [sp, #0]
 8005448:	2201      	movs	r2, #1
 800544a:	f7ff fe6d 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	b990      	cbnz	r0, 8005478 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	2102      	movs	r1, #2
 8005456:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005458:	2120      	movs	r1, #32
 800545a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800545c:	9200      	str	r2, [sp, #0]
 800545e:	4602      	mov	r2, r0
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff fe61 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005466:	b938      	cbnz	r0, 8005478 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	6953      	ldr	r3, [r2, #20]
 800546c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005470:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005472:	2301      	movs	r3, #1
 8005474:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005478:	b004      	add	sp, #16
 800547a:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	4610      	mov	r0, r2
 800547e:	e7d6      	b.n	800542e <HAL_QSPI_Abort+0x40>

08005480 <HAL_QSPI_Transmit>:
{
 8005480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005482:	4604      	mov	r4, r0
 8005484:	b085      	sub	sp, #20
 8005486:	4616      	mov	r6, r2
 8005488:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800548a:	f7fe fc41 	bl	8003d10 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800548e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005492:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005494:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8005496:	2a01      	cmp	r2, #1
 8005498:	d04c      	beq.n	8005534 <HAL_QSPI_Transmit+0xb4>
 800549a:	2201      	movs	r2, #1
 800549c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80054a0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80054a4:	2a01      	cmp	r2, #1
 80054a6:	b2d0      	uxtb	r0, r2
 80054a8:	d142      	bne.n	8005530 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054aa:	2200      	movs	r2, #0
 80054ac:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80054ae:	2f00      	cmp	r7, #0
 80054b0:	d039      	beq.n	8005526 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80054b2:	2212      	movs	r2, #18
 80054b4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80054b8:	692a      	ldr	r2, [r5, #16]
 80054ba:	3201      	adds	r2, #1
 80054bc:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80054be:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80054c0:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80054c2:	3201      	adds	r2, #1
 80054c4:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80054c6:	696a      	ldr	r2, [r5, #20]
 80054c8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80054cc:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80054ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054d0:	b9a2      	cbnz	r2, 80054fc <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80054d2:	2201      	movs	r2, #1
 80054d4:	2102      	movs	r1, #2
 80054d6:	4620      	mov	r0, r4
 80054d8:	9600      	str	r6, [sp, #0]
 80054da:	f7ff fe25 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80054de:	b928      	cbnz	r0, 80054ec <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80054e4:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80054e6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80054e8:	f7ff ff81 	bl	80053ee <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80054f2:	2300      	movs	r3, #0
 80054f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054f8:	b005      	add	sp, #20
 80054fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80054fc:	2201      	movs	r2, #1
 80054fe:	2104      	movs	r1, #4
 8005500:	4620      	mov	r0, r4
 8005502:	9600      	str	r6, [sp, #0]
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	f7ff fe0f 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800550a:	2800      	cmp	r0, #0
 800550c:	d1ee      	bne.n	80054ec <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800550e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005510:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005512:	7812      	ldrb	r2, [r2, #0]
 8005514:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005518:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800551a:	3201      	adds	r2, #1
 800551c:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800551e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005520:	3a01      	subs	r2, #1
 8005522:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005524:	e7d3      	b.n	80054ce <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005526:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005528:	f043 0308 	orr.w	r3, r3, #8
 800552c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800552e:	e7e0      	b.n	80054f2 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8005530:	2002      	movs	r0, #2
 8005532:	e7de      	b.n	80054f2 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8005534:	2002      	movs	r0, #2
 8005536:	e7df      	b.n	80054f8 <HAL_QSPI_Transmit+0x78>

08005538 <HAL_QSPI_Receive>:
{
 8005538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	b085      	sub	sp, #20
 800553e:	4616      	mov	r6, r2
 8005540:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005542:	f7fe fbe5 	bl	8003d10 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005546:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005548:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800554a:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800554e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005552:	2a01      	cmp	r2, #1
 8005554:	d050      	beq.n	80055f8 <HAL_QSPI_Receive+0xc0>
 8005556:	2201      	movs	r2, #1
 8005558:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800555c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005560:	2a01      	cmp	r2, #1
 8005562:	b2d0      	uxtb	r0, r2
 8005564:	d146      	bne.n	80055f4 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005566:	2200      	movs	r2, #0
 8005568:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800556a:	2f00      	cmp	r7, #0
 800556c:	d03d      	beq.n	80055ea <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800556e:	2222      	movs	r2, #34	; 0x22
 8005570:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005574:	692a      	ldr	r2, [r5, #16]
 8005576:	3201      	adds	r2, #1
 8005578:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800557a:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800557c:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800557e:	3201      	adds	r2, #1
 8005580:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005582:	6969      	ldr	r1, [r5, #20]
 8005584:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8005588:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800558c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800558e:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8005592:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005594:	b9a2      	cbnz	r2, 80055c0 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005596:	2201      	movs	r2, #1
 8005598:	2102      	movs	r1, #2
 800559a:	4620      	mov	r0, r4
 800559c:	9600      	str	r6, [sp, #0]
 800559e:	f7ff fdc3 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80055a2:	b928      	cbnz	r0, 80055b0 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80055a8:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80055aa:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80055ac:	f7ff ff1f 	bl	80053ee <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80055b6:	2300      	movs	r3, #0
 80055b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80055bc:	b005      	add	sp, #20
 80055be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80055c0:	2201      	movs	r2, #1
 80055c2:	2106      	movs	r1, #6
 80055c4:	4620      	mov	r0, r4
 80055c6:	9600      	str	r6, [sp, #0]
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	f7ff fdad 	bl	8005128 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d1ee      	bne.n	80055b0 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80055d2:	f895 1020 	ldrb.w	r1, [r5, #32]
 80055d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80055d8:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80055da:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80055dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80055de:	3201      	adds	r2, #1
 80055e0:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80055e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055e4:	3a01      	subs	r2, #1
 80055e6:	63a2      	str	r2, [r4, #56]	; 0x38
 80055e8:	e7d3      	b.n	8005592 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80055ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80055ec:	f043 0308 	orr.w	r3, r3, #8
 80055f0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80055f2:	e7e0      	b.n	80055b6 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80055f4:	2002      	movs	r0, #2
 80055f6:	e7de      	b.n	80055b6 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 80055f8:	2002      	movs	r0, #2
 80055fa:	e7df      	b.n	80055bc <HAL_QSPI_Receive+0x84>

080055fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005600:	4604      	mov	r4, r0
 8005602:	b340      	cbz	r0, 8005656 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005604:	6803      	ldr	r3, [r0, #0]
 8005606:	07db      	lsls	r3, r3, #31
 8005608:	d410      	bmi.n	800562c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	079f      	lsls	r7, r3, #30
 800560e:	d461      	bmi.n	80056d4 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	0719      	lsls	r1, r3, #28
 8005614:	f100 80a6 	bmi.w	8005764 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	075a      	lsls	r2, r3, #29
 800561c:	f100 80c7 	bmi.w	80057ae <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005620:	69a2      	ldr	r2, [r4, #24]
 8005622:	2a00      	cmp	r2, #0
 8005624:	f040 8130 	bne.w	8005888 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005628:	2000      	movs	r0, #0
 800562a:	e02c      	b.n	8005686 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800562c:	4b94      	ldr	r3, [pc, #592]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	f002 020c 	and.w	r2, r2, #12
 8005634:	2a04      	cmp	r2, #4
 8005636:	d007      	beq.n	8005648 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	f002 020c 	and.w	r2, r2, #12
 800563e:	2a08      	cmp	r2, #8
 8005640:	d10b      	bne.n	800565a <HAL_RCC_OscConfig+0x5e>
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	025e      	lsls	r6, r3, #9
 8005646:	d508      	bpl.n	800565a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005648:	4b8d      	ldr	r3, [pc, #564]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	039d      	lsls	r5, r3, #14
 800564e:	d5dc      	bpl.n	800560a <HAL_RCC_OscConfig+0xe>
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1d9      	bne.n	800560a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8005656:	2001      	movs	r0, #1
 8005658:	e015      	b.n	8005686 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	4d88      	ldr	r5, [pc, #544]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005662:	d113      	bne.n	800568c <HAL_RCC_OscConfig+0x90>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800566c:	f7fe fb50 	bl	8003d10 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005670:	4e83      	ldr	r6, [pc, #524]	; (8005880 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8005672:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005674:	6833      	ldr	r3, [r6, #0]
 8005676:	0398      	lsls	r0, r3, #14
 8005678:	d4c7      	bmi.n	800560a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800567a:	f7fe fb49 	bl	8003d10 <HAL_GetTick>
 800567e:	1b40      	subs	r0, r0, r5
 8005680:	2864      	cmp	r0, #100	; 0x64
 8005682:	d9f7      	bls.n	8005674 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8005684:	2003      	movs	r0, #3
}
 8005686:	b002      	add	sp, #8
 8005688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568c:	b99b      	cbnz	r3, 80056b6 <HAL_RCC_OscConfig+0xba>
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800569e:	f7fe fb37 	bl	8003d10 <HAL_GetTick>
 80056a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	0399      	lsls	r1, r3, #14
 80056a8:	d5af      	bpl.n	800560a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056aa:	f7fe fb31 	bl	8003d10 <HAL_GetTick>
 80056ae:	1b80      	subs	r0, r0, r6
 80056b0:	2864      	cmp	r0, #100	; 0x64
 80056b2:	d9f7      	bls.n	80056a4 <HAL_RCC_OscConfig+0xa8>
 80056b4:	e7e6      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	d103      	bne.n	80056c6 <HAL_RCC_OscConfig+0xca>
 80056be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	e7ce      	b.n	8005664 <HAL_RCC_OscConfig+0x68>
 80056c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d2:	e7ca      	b.n	800566a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056d4:	4b6a      	ldr	r3, [pc, #424]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	f012 0f0c 	tst.w	r2, #12
 80056dc:	d007      	beq.n	80056ee <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	f002 020c 	and.w	r2, r2, #12
 80056e4:	2a08      	cmp	r2, #8
 80056e6:	d111      	bne.n	800570c <HAL_RCC_OscConfig+0x110>
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	025a      	lsls	r2, r3, #9
 80056ec:	d40e      	bmi.n	800570c <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ee:	4a64      	ldr	r2, [pc, #400]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 80056f0:	6813      	ldr	r3, [r2, #0]
 80056f2:	079b      	lsls	r3, r3, #30
 80056f4:	d502      	bpl.n	80056fc <HAL_RCC_OscConfig+0x100>
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d1ac      	bne.n	8005656 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fc:	6813      	ldr	r3, [r2, #0]
 80056fe:	6921      	ldr	r1, [r4, #16]
 8005700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005704:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005708:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570a:	e781      	b.n	8005610 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800570c:	68e3      	ldr	r3, [r4, #12]
 800570e:	4d5c      	ldr	r5, [pc, #368]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 8005710:	b1bb      	cbz	r3, 8005742 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8005712:	682b      	ldr	r3, [r5, #0]
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800571a:	f7fe faf9 	bl	8003d10 <HAL_GetTick>
 800571e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	079f      	lsls	r7, r3, #30
 8005724:	d507      	bpl.n	8005736 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800572e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	e76c      	b.n	8005610 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005736:	f7fe faeb 	bl	8003d10 <HAL_GetTick>
 800573a:	1b80      	subs	r0, r0, r6
 800573c:	2802      	cmp	r0, #2
 800573e:	d9ef      	bls.n	8005720 <HAL_RCC_OscConfig+0x124>
 8005740:	e7a0      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800574a:	f7fe fae1 	bl	8003d10 <HAL_GetTick>
 800574e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	0798      	lsls	r0, r3, #30
 8005754:	f57f af5c 	bpl.w	8005610 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005758:	f7fe fada 	bl	8003d10 <HAL_GetTick>
 800575c:	1b80      	subs	r0, r0, r6
 800575e:	2802      	cmp	r0, #2
 8005760:	d9f6      	bls.n	8005750 <HAL_RCC_OscConfig+0x154>
 8005762:	e78f      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005764:	6963      	ldr	r3, [r4, #20]
 8005766:	4d46      	ldr	r5, [pc, #280]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 8005768:	b183      	cbz	r3, 800578c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800576a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005772:	f7fe facd 	bl	8003d10 <HAL_GetTick>
 8005776:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005778:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800577a:	079b      	lsls	r3, r3, #30
 800577c:	f53f af4c 	bmi.w	8005618 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005780:	f7fe fac6 	bl	8003d10 <HAL_GetTick>
 8005784:	1b80      	subs	r0, r0, r6
 8005786:	2802      	cmp	r0, #2
 8005788:	d9f6      	bls.n	8005778 <HAL_RCC_OscConfig+0x17c>
 800578a:	e77b      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800578c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005794:	f7fe fabc 	bl	8003d10 <HAL_GetTick>
 8005798:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800579a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800579c:	079f      	lsls	r7, r3, #30
 800579e:	f57f af3b 	bpl.w	8005618 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a2:	f7fe fab5 	bl	8003d10 <HAL_GetTick>
 80057a6:	1b80      	subs	r0, r0, r6
 80057a8:	2802      	cmp	r0, #2
 80057aa:	d9f6      	bls.n	800579a <HAL_RCC_OscConfig+0x19e>
 80057ac:	e76a      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ae:	4b34      	ldr	r3, [pc, #208]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 80057b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b2:	00d0      	lsls	r0, r2, #3
 80057b4:	d427      	bmi.n	8005806 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80057b8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057be:	641a      	str	r2, [r3, #64]	; 0x40
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ca:	4d2e      	ldr	r5, [pc, #184]	; (8005884 <HAL_RCC_OscConfig+0x288>)
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	05d9      	lsls	r1, r3, #23
 80057d0:	d51b      	bpl.n	800580a <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	4d2a      	ldr	r5, [pc, #168]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d127      	bne.n	800582a <HAL_RCC_OscConfig+0x22e>
 80057da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80057e6:	f7fe fa93 	bl	8003d10 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ea:	4e25      	ldr	r6, [pc, #148]	; (8005880 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80057ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ee:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80057f0:	079b      	lsls	r3, r3, #30
 80057f2:	d53f      	bpl.n	8005874 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	f43f af13 	beq.w	8005620 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fa:	4a21      	ldr	r2, [pc, #132]	; (8005880 <HAL_RCC_OscConfig+0x284>)
 80057fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80057fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005802:	6413      	str	r3, [r2, #64]	; 0x40
 8005804:	e70c      	b.n	8005620 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8005806:	2700      	movs	r7, #0
 8005808:	e7df      	b.n	80057ca <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005812:	f7fe fa7d 	bl	8003d10 <HAL_GetTick>
 8005816:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	05da      	lsls	r2, r3, #23
 800581c:	d4d9      	bmi.n	80057d2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581e:	f7fe fa77 	bl	8003d10 <HAL_GetTick>
 8005822:	1b80      	subs	r0, r0, r6
 8005824:	2864      	cmp	r0, #100	; 0x64
 8005826:	d9f7      	bls.n	8005818 <HAL_RCC_OscConfig+0x21c>
 8005828:	e72c      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800582a:	b9ab      	cbnz	r3, 8005858 <HAL_RCC_OscConfig+0x25c>
 800582c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	672b      	str	r3, [r5, #112]	; 0x70
 8005838:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800583a:	f023 0304 	bic.w	r3, r3, #4
 800583e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005840:	f7fe fa66 	bl	8003d10 <HAL_GetTick>
 8005844:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005848:	0798      	lsls	r0, r3, #30
 800584a:	d5d3      	bpl.n	80057f4 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584c:	f7fe fa60 	bl	8003d10 <HAL_GetTick>
 8005850:	1b80      	subs	r0, r0, r6
 8005852:	4540      	cmp	r0, r8
 8005854:	d9f7      	bls.n	8005846 <HAL_RCC_OscConfig+0x24a>
 8005856:	e715      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005858:	2b05      	cmp	r3, #5
 800585a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800585c:	d103      	bne.n	8005866 <HAL_RCC_OscConfig+0x26a>
 800585e:	f043 0304 	orr.w	r3, r3, #4
 8005862:	672b      	str	r3, [r5, #112]	; 0x70
 8005864:	e7b9      	b.n	80057da <HAL_RCC_OscConfig+0x1de>
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	672b      	str	r3, [r5, #112]	; 0x70
 800586c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800586e:	f023 0304 	bic.w	r3, r3, #4
 8005872:	e7b5      	b.n	80057e0 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005874:	f7fe fa4c 	bl	8003d10 <HAL_GetTick>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	4540      	cmp	r0, r8
 800587c:	d9b7      	bls.n	80057ee <HAL_RCC_OscConfig+0x1f2>
 800587e:	e701      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
 8005880:	40023800 	.word	0x40023800
 8005884:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005888:	4d38      	ldr	r5, [pc, #224]	; (800596c <HAL_RCC_OscConfig+0x370>)
 800588a:	68ab      	ldr	r3, [r5, #8]
 800588c:	f003 030c 	and.w	r3, r3, #12
 8005890:	2b08      	cmp	r3, #8
 8005892:	d041      	beq.n	8005918 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8005894:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005896:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800589e:	d12e      	bne.n	80058fe <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80058a0:	f7fe fa36 	bl	8003d10 <HAL_GetTick>
 80058a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	682b      	ldr	r3, [r5, #0]
 80058a8:	0199      	lsls	r1, r3, #6
 80058aa:	d422      	bmi.n	80058f2 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	1e5a      	subs	r2, r3, #1
 80058b2:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80058b6:	430b      	orrs	r3, r1
 80058b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80058c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80058c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80058d6:	f7fe fa1b 	bl	8003d10 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058da:	4d24      	ldr	r5, [pc, #144]	; (800596c <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 80058dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	019a      	lsls	r2, r3, #6
 80058e2:	f53f aea1 	bmi.w	8005628 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fe fa13 	bl	8003d10 <HAL_GetTick>
 80058ea:	1b00      	subs	r0, r0, r4
 80058ec:	2802      	cmp	r0, #2
 80058ee:	d9f6      	bls.n	80058de <HAL_RCC_OscConfig+0x2e2>
 80058f0:	e6c8      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f2:	f7fe fa0d 	bl	8003d10 <HAL_GetTick>
 80058f6:	1b80      	subs	r0, r0, r6
 80058f8:	2802      	cmp	r0, #2
 80058fa:	d9d4      	bls.n	80058a6 <HAL_RCC_OscConfig+0x2aa>
 80058fc:	e6c2      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80058fe:	f7fe fa07 	bl	8003d10 <HAL_GetTick>
 8005902:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	019b      	lsls	r3, r3, #6
 8005908:	f57f ae8e 	bpl.w	8005628 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590c:	f7fe fa00 	bl	8003d10 <HAL_GetTick>
 8005910:	1b00      	subs	r0, r0, r4
 8005912:	2802      	cmp	r0, #2
 8005914:	d9f6      	bls.n	8005904 <HAL_RCC_OscConfig+0x308>
 8005916:	e6b5      	b.n	8005684 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005918:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800591a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800591c:	f43f ae9b 	beq.w	8005656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005924:	69e1      	ldr	r1, [r4, #28]
 8005926:	428a      	cmp	r2, r1
 8005928:	f47f ae95 	bne.w	8005656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800592c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005930:	6a21      	ldr	r1, [r4, #32]
 8005932:	428a      	cmp	r2, r1
 8005934:	f47f ae8f 	bne.w	8005656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005938:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800593c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800593e:	401a      	ands	r2, r3
 8005940:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005944:	f47f ae87 	bne.w	8005656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005948:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800594a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800594e:	0852      	lsrs	r2, r2, #1
 8005950:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005952:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005956:	f47f ae7e 	bne.w	8005656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800595a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800595e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005960:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005964:	f43f ae60 	beq.w	8005628 <HAL_RCC_OscConfig+0x2c>
 8005968:	e675      	b.n	8005656 <HAL_RCC_OscConfig+0x5a>
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800

08005970 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005970:	4913      	ldr	r1, [pc, #76]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005972:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005974:	688b      	ldr	r3, [r1, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b04      	cmp	r3, #4
 800597c:	d01b      	beq.n	80059b6 <HAL_RCC_GetSysClockFreq+0x46>
 800597e:	2b08      	cmp	r3, #8
 8005980:	d11b      	bne.n	80059ba <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005982:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005984:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005986:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005988:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800598c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005990:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005994:	bf1a      	itte	ne
 8005996:	480b      	ldrne	r0, [pc, #44]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x54>)
 8005998:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800599a:	480b      	ldreq	r0, [pc, #44]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x58>)
 800599c:	fba1 0100 	umull	r0, r1, r1, r0
 80059a0:	f7fb f8f4 	bl	8000b8c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x50>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80059ac:	3301      	adds	r3, #1
 80059ae:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80059b0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80059b4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059b6:	4803      	ldr	r0, [pc, #12]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x54>)
 80059b8:	e7fc      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80059ba:	4803      	ldr	r0, [pc, #12]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80059bc:	e7fa      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x44>
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
 80059c4:	017d7840 	.word	0x017d7840
 80059c8:	00f42400 	.word	0x00f42400

080059cc <HAL_RCC_ClockConfig>:
{
 80059cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80059d2:	4604      	mov	r4, r0
 80059d4:	b910      	cbnz	r0, 80059dc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80059d6:	2001      	movs	r0, #1
}
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059dc:	4a45      	ldr	r2, [pc, #276]	; (8005af4 <HAL_RCC_ClockConfig+0x128>)
 80059de:	6813      	ldr	r3, [r2, #0]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d328      	bcc.n	8005a3a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e8:	6821      	ldr	r1, [r4, #0]
 80059ea:	078f      	lsls	r7, r1, #30
 80059ec:	d430      	bmi.n	8005a50 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ee:	07c8      	lsls	r0, r1, #31
 80059f0:	d443      	bmi.n	8005a7a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f2:	4a40      	ldr	r2, [pc, #256]	; (8005af4 <HAL_RCC_ClockConfig+0x128>)
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	42ab      	cmp	r3, r5
 80059fc:	d866      	bhi.n	8005acc <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	0751      	lsls	r1, r2, #29
 8005a02:	d46f      	bmi.n	8005ae4 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a04:	0713      	lsls	r3, r2, #28
 8005a06:	d507      	bpl.n	8005a18 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a08:	4a3b      	ldr	r2, [pc, #236]	; (8005af8 <HAL_RCC_ClockConfig+0x12c>)
 8005a0a:	6921      	ldr	r1, [r4, #16]
 8005a0c:	6893      	ldr	r3, [r2, #8]
 8005a0e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005a12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005a16:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a18:	f7ff ffaa 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8005a1c:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <HAL_RCC_ClockConfig+0x12c>)
 8005a1e:	4a37      	ldr	r2, [pc, #220]	; (8005afc <HAL_RCC_ClockConfig+0x130>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a26:	5cd3      	ldrb	r3, [r2, r3]
 8005a28:	40d8      	lsrs	r0, r3
 8005a2a:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <HAL_RCC_ClockConfig+0x134>)
 8005a2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005a2e:	4b35      	ldr	r3, [pc, #212]	; (8005b04 <HAL_RCC_ClockConfig+0x138>)
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	f7fc f83d 	bl	8001ab0 <HAL_InitTick>
  return HAL_OK;
 8005a36:	2000      	movs	r0, #0
 8005a38:	e7ce      	b.n	80059d8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	6813      	ldr	r3, [r2, #0]
 8005a3c:	f023 030f 	bic.w	r3, r3, #15
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a44:	6813      	ldr	r3, [r2, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	428b      	cmp	r3, r1
 8005a4c:	d1c3      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xa>
 8005a4e:	e7cb      	b.n	80059e8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	f011 0f04 	tst.w	r1, #4
 8005a54:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <HAL_RCC_ClockConfig+0x12c>)
 8005a56:	d003      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005a5e:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a60:	070e      	lsls	r6, r1, #28
 8005a62:	d503      	bpl.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005a6a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68a0      	ldr	r0, [r4, #8]
 8005a70:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005a74:	4302      	orrs	r2, r0
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	e7b9      	b.n	80059ee <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7a:	6861      	ldr	r1, [r4, #4]
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <HAL_RCC_ClockConfig+0x12c>)
 8005a7e:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a80:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a82:	d11b      	bne.n	8005abc <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a84:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a88:	d0a5      	beq.n	80059d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a8a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a90:	4f19      	ldr	r7, [pc, #100]	; (8005af8 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a92:	f022 0203 	bic.w	r2, r2, #3
 8005a96:	430a      	orrs	r2, r1
 8005a98:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005a9a:	f7fe f939 	bl	8003d10 <HAL_GetTick>
 8005a9e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005aac:	d0a1      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aae:	f7fe f92f 	bl	8003d10 <HAL_GetTick>
 8005ab2:	1b80      	subs	r0, r0, r6
 8005ab4:	4540      	cmp	r0, r8
 8005ab6:	d9f3      	bls.n	8005aa0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8005ab8:	2003      	movs	r0, #3
 8005aba:	e78d      	b.n	80059d8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005abc:	2902      	cmp	r1, #2
 8005abe:	d102      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005ac4:	e7e0      	b.n	8005a88 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac6:	f012 0f02 	tst.w	r2, #2
 8005aca:	e7dd      	b.n	8005a88 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005acc:	6813      	ldr	r3, [r2, #0]
 8005ace:	f023 030f 	bic.w	r3, r3, #15
 8005ad2:	432b      	orrs	r3, r5
 8005ad4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	f47f af7a 	bne.w	80059d6 <HAL_RCC_ClockConfig+0xa>
 8005ae2:	e78c      	b.n	80059fe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae4:	4904      	ldr	r1, [pc, #16]	; (8005af8 <HAL_RCC_ClockConfig+0x12c>)
 8005ae6:	68e0      	ldr	r0, [r4, #12]
 8005ae8:	688b      	ldr	r3, [r1, #8]
 8005aea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005aee:	4303      	orrs	r3, r0
 8005af0:	608b      	str	r3, [r1, #8]
 8005af2:	e787      	b.n	8005a04 <HAL_RCC_ClockConfig+0x38>
 8005af4:	40023c00 	.word	0x40023c00
 8005af8:	40023800 	.word	0x40023800
 8005afc:	08021e76 	.word	0x08021e76
 8005b00:	20000004 	.word	0x20000004
 8005b04:	20000034 	.word	0x20000034

08005b08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005b12:	5cd3      	ldrb	r3, [r2, r3]
 8005b14:	4a03      	ldr	r2, [pc, #12]	; (8005b24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005b16:	6810      	ldr	r0, [r2, #0]
}
 8005b18:	40d8      	lsrs	r0, r3
 8005b1a:	4770      	bx	lr
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	08021e86 	.word	0x08021e86
 8005b24:	20000004 	.word	0x20000004

08005b28 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x14>)
 8005b2a:	4a05      	ldr	r2, [pc, #20]	; (8005b40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005b36:	6810      	ldr	r0, [r2, #0]
}
 8005b38:	40d8      	lsrs	r0, r3
 8005b3a:	4770      	bx	lr
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	08021e86 	.word	0x08021e86
 8005b44:	20000004 	.word	0x20000004

08005b48 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b48:	230f      	movs	r3, #15
 8005b4a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_GetClockConfig+0x34>)
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	f002 0203 	and.w	r2, r2, #3
 8005b54:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005b5c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005b64:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	08db      	lsrs	r3, r3, #3
 8005b6a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005b6e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <HAL_RCC_GetClockConfig+0x38>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	600b      	str	r3, [r1, #0]
}
 8005b7a:	4770      	bx	lr
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	40023c00 	.word	0x40023c00

08005b84 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b84:	6803      	ldr	r3, [r0, #0]
{
 8005b86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b8a:	f013 0601 	ands.w	r6, r3, #1
{
 8005b8e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b90:	d00b      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b92:	4aad      	ldr	r2, [pc, #692]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b94:	6891      	ldr	r1, [r2, #8]
 8005b96:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005b9a:	6091      	str	r1, [r2, #8]
 8005b9c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005b9e:	6891      	ldr	r1, [r2, #8]
 8005ba0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ba2:	fab6 f686 	clz	r6, r6
 8005ba6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ba8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005baa:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8005bae:	d012      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bb0:	49a5      	ldr	r1, [pc, #660]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bb2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005bb4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005bb8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bbc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8005bc0:	bf08      	it	eq
 8005bc2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bc4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bc8:	bf16      	itet	ne
 8005bca:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8005bce:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bd0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bd2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005bd6:	02d8      	lsls	r0, r3, #11
 8005bd8:	d510      	bpl.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bda:	489b      	ldr	r0, [pc, #620]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005bde:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005be2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005be6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005bea:	ea42 0201 	orr.w	r2, r2, r1
 8005bee:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005bf2:	f000 8186 	beq.w	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8005bf6:	2900      	cmp	r1, #0
 8005bf8:	bf08      	it	eq
 8005bfa:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8005bfc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005c00:	bf18      	it	ne
 8005c02:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c04:	0699      	lsls	r1, r3, #26
 8005c06:	d532      	bpl.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c08:	4b8f      	ldr	r3, [pc, #572]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c0a:	4f90      	ldr	r7, [pc, #576]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c24:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c26:	f7fe f873 	bl	8003d10 <HAL_GetTick>
 8005c2a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	05da      	lsls	r2, r3, #23
 8005c30:	f140 8169 	bpl.w	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c34:	4f84      	ldr	r7, [pc, #528]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c36:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c3a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005c3e:	f040 816d 	bne.w	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c44:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005c48:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005c4c:	4a7e      	ldr	r2, [pc, #504]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c4e:	f040 818a 	bne.w	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005c52:	6891      	ldr	r1, [r2, #8]
 8005c54:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8005c58:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005c5c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005c60:	4301      	orrs	r1, r0
 8005c62:	6091      	str	r1, [r2, #8]
 8005c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c68:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	06d9      	lsls	r1, r3, #27
 8005c72:	d50c      	bpl.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c74:	4a74      	ldr	r2, [pc, #464]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c76:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005c7a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005c7e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005c82:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005c86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c88:	4301      	orrs	r1, r0
 8005c8a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c8e:	045a      	lsls	r2, r3, #17
 8005c90:	d508      	bpl.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c92:	496d      	ldr	r1, [pc, #436]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c94:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005c96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c9a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005c9e:	4302      	orrs	r2, r0
 8005ca0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ca4:	041f      	lsls	r7, r3, #16
 8005ca6:	d508      	bpl.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ca8:	4967      	ldr	r1, [pc, #412]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005caa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005cac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005cb0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005cb4:	4302      	orrs	r2, r0
 8005cb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cba:	03d8      	lsls	r0, r3, #15
 8005cbc:	d508      	bpl.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cbe:	4962      	ldr	r1, [pc, #392]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cc0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005cc2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005cc6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005cca:	4302      	orrs	r2, r0
 8005ccc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cd0:	0399      	lsls	r1, r3, #14
 8005cd2:	d508      	bpl.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cd4:	495c      	ldr	r1, [pc, #368]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005cd8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005cdc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005ce0:	4302      	orrs	r2, r0
 8005ce2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce6:	065a      	lsls	r2, r3, #25
 8005ce8:	d508      	bpl.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cea:	4957      	ldr	r1, [pc, #348]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cec:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005cee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005cf2:	f022 0203 	bic.w	r2, r2, #3
 8005cf6:	4302      	orrs	r2, r0
 8005cf8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cfc:	061f      	lsls	r7, r3, #24
 8005cfe:	d508      	bpl.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d00:	4951      	ldr	r1, [pc, #324]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d02:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005d04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d08:	f022 020c 	bic.w	r2, r2, #12
 8005d0c:	4302      	orrs	r2, r0
 8005d0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d12:	05d8      	lsls	r0, r3, #23
 8005d14:	d508      	bpl.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d16:	494c      	ldr	r1, [pc, #304]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d18:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005d1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d1e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005d22:	4302      	orrs	r2, r0
 8005d24:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d28:	0599      	lsls	r1, r3, #22
 8005d2a:	d508      	bpl.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d2c:	4946      	ldr	r1, [pc, #280]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005d30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d34:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d38:	4302      	orrs	r2, r0
 8005d3a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d3e:	055a      	lsls	r2, r3, #21
 8005d40:	d508      	bpl.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d42:	4941      	ldr	r1, [pc, #260]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d4e:	4302      	orrs	r2, r0
 8005d50:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d54:	051f      	lsls	r7, r3, #20
 8005d56:	d508      	bpl.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d58:	493b      	ldr	r1, [pc, #236]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d64:	4302      	orrs	r2, r0
 8005d66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d6a:	04d8      	lsls	r0, r3, #19
 8005d6c:	d508      	bpl.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d6e:	4936      	ldr	r1, [pc, #216]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d70:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005d72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d76:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005d7a:	4302      	orrs	r2, r0
 8005d7c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d80:	0499      	lsls	r1, r3, #18
 8005d82:	d508      	bpl.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d84:	4930      	ldr	r1, [pc, #192]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d86:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005d88:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005d8c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d90:	4302      	orrs	r2, r0
 8005d92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d96:	025a      	lsls	r2, r3, #9
 8005d98:	d508      	bpl.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d9a:	492b      	ldr	r1, [pc, #172]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d9c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005d9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005da2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005da6:	4302      	orrs	r2, r0
 8005da8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dac:	029f      	lsls	r7, r3, #10
 8005dae:	d50c      	bpl.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005db0:	4825      	ldr	r0, [pc, #148]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005db2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005db4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8005db8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dbc:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8005dc0:	bf08      	it	eq
 8005dc2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8005dca:	f013 0f08 	tst.w	r3, #8
 8005dce:	bf18      	it	ne
 8005dd0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dd2:	0358      	lsls	r0, r3, #13
 8005dd4:	d508      	bpl.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dd6:	491c      	ldr	r1, [pc, #112]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dd8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005dda:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005dde:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005de2:	4302      	orrs	r2, r0
 8005de4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005de8:	0219      	lsls	r1, r3, #8
 8005dea:	d509      	bpl.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005dec:	4916      	ldr	r1, [pc, #88]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dee:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005df2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005df6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005dfa:	4302      	orrs	r2, r0
 8005dfc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e00:	2e01      	cmp	r6, #1
 8005e02:	f000 80b4 	beq.w	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005e06:	019a      	lsls	r2, r3, #6
 8005e08:	f100 80b1 	bmi.w	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e0c:	2d01      	cmp	r5, #1
 8005e0e:	d176      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e10:	4d0d      	ldr	r5, [pc, #52]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e12:	682b      	ldr	r3, [r5, #0]
 8005e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e18:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1a:	f7fd ff79 	bl	8003d10 <HAL_GetTick>
 8005e1e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	009f      	lsls	r7, r3, #2
 8005e24:	f100 8127 	bmi.w	8006076 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	030e      	lsls	r6, r1, #12
 8005e2c:	d501      	bpl.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8005e2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e30:	b11b      	cbz	r3, 8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005e32:	02cd      	lsls	r5, r1, #11
 8005e34:	d523      	bpl.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e38:	bb0b      	cbnz	r3, 8005e7e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e3a:	4a03      	ldr	r2, [pc, #12]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e40:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8005e44:	e004      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e54:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005e58:	4303      	orrs	r3, r0
 8005e5a:	6960      	ldr	r0, [r4, #20]
 8005e5c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e60:	69a0      	ldr	r0, [r4, #24]
 8005e62:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005e66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e6a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005e6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005e70:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005e74:	3801      	subs	r0, #1
 8005e76:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e7e:	0288      	lsls	r0, r1, #10
 8005e80:	d515      	bpl.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005e82:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e88:	d111      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e8a:	4a82      	ldr	r2, [pc, #520]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005e8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e90:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e94:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005e98:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005e9c:	4303      	orrs	r3, r0
 8005e9e:	6960      	ldr	r0, [r4, #20]
 8005ea0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005ea4:	6a20      	ldr	r0, [r4, #32]
 8005ea6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005eae:	070a      	lsls	r2, r1, #28
 8005eb0:	d519      	bpl.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005eb2:	4a78      	ldr	r2, [pc, #480]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005eb4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eb8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ebc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6961      	ldr	r1, [r4, #20]
 8005ec8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005ecc:	69e1      	ldr	r1, [r4, #28]
 8005ece:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005ed2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ed6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005eda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005edc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ee6:	4c6b      	ldr	r4, [pc, #428]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef0:	f7fd ff0e 	bl	8003d10 <HAL_GetTick>
 8005ef4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	f140 80c3 	bpl.w	8006084 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005efe:	2000      	movs	r0, #0
 8005f00:	e009      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8005f02:	2601      	movs	r6, #1
 8005f04:	e67a      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f06:	f7fd ff03 	bl	8003d10 <HAL_GetTick>
 8005f0a:	eba0 0008 	sub.w	r0, r0, r8
 8005f0e:	2864      	cmp	r0, #100	; 0x64
 8005f10:	f67f ae8c 	bls.w	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8005f14:	2003      	movs	r0, #3
}
 8005f16:	b003      	add	sp, #12
 8005f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005f20:	429a      	cmp	r2, r3
 8005f22:	f43f ae8e 	beq.w	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f32:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f3a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005f3c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f40:	07db      	lsls	r3, r3, #31
 8005f42:	f57f ae7e 	bpl.w	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8005f46:	f7fd fee3 	bl	8003d10 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f4a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005f4e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f52:	0798      	lsls	r0, r3, #30
 8005f54:	f53f ae75 	bmi.w	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f58:	f7fd feda 	bl	8003d10 <HAL_GetTick>
 8005f5c:	eba0 0008 	sub.w	r0, r0, r8
 8005f60:	4548      	cmp	r0, r9
 8005f62:	d9f5      	bls.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005f64:	e7d6      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f66:	6891      	ldr	r1, [r2, #8]
 8005f68:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005f6c:	e679      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8005f6e:	4e49      	ldr	r6, [pc, #292]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f76:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005f78:	f7fd feca 	bl	8003d10 <HAL_GetTick>
 8005f7c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f7e:	6833      	ldr	r3, [r6, #0]
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	d472      	bmi.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	07d7      	lsls	r7, r2, #31
 8005f88:	d512      	bpl.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f8c:	b983      	cbnz	r3, 8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f8e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f92:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f9a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	6861      	ldr	r1, [r4, #4]
 8005fa2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005fa6:	68a1      	ldr	r1, [r4, #8]
 8005fa8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005fac:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fb0:	0316      	lsls	r6, r2, #12
 8005fb2:	d503      	bpl.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x438>
 8005fb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fba:	d005      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005fbc:	02d0      	lsls	r0, r2, #11
 8005fbe:	d51e      	bpl.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fc6:	d11a      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fc8:	4932      	ldr	r1, [pc, #200]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005fca:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fce:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fd6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005fda:	4303      	orrs	r3, r0
 8005fdc:	6860      	ldr	r0, [r4, #4]
 8005fde:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005fe2:	68e0      	ldr	r0, [r4, #12]
 8005fe4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fec:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff2:	f020 001f 	bic.w	r0, r0, #31
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	4303      	orrs	r3, r0
 8005ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ffe:	01d1      	lsls	r1, r2, #7
 8006000:	d511      	bpl.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006002:	4924      	ldr	r1, [pc, #144]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006004:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006008:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800600c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006010:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006014:	4303      	orrs	r3, r0
 8006016:	6860      	ldr	r0, [r4, #4]
 8006018:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800601c:	6920      	ldr	r0, [r4, #16]
 800601e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006026:	0192      	lsls	r2, r2, #6
 8006028:	d50d      	bpl.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	6862      	ldr	r2, [r4, #4]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006034:	68e2      	ldr	r2, [r4, #12]
 8006036:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800603a:	68a2      	ldr	r2, [r4, #8]
 800603c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006042:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006046:	4e13      	ldr	r6, [pc, #76]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800604e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006050:	f7fd fe5e 	bl	8003d10 <HAL_GetTick>
 8006054:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006056:	6833      	ldr	r3, [r6, #0]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	f53f aed7 	bmi.w	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800605e:	f7fd fe57 	bl	8003d10 <HAL_GetTick>
 8006062:	1bc0      	subs	r0, r0, r7
 8006064:	2864      	cmp	r0, #100	; 0x64
 8006066:	d9f6      	bls.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006068:	e754      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800606a:	f7fd fe51 	bl	8003d10 <HAL_GetTick>
 800606e:	1bc0      	subs	r0, r0, r7
 8006070:	2864      	cmp	r0, #100	; 0x64
 8006072:	d984      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006074:	e74e      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006076:	f7fd fe4b 	bl	8003d10 <HAL_GetTick>
 800607a:	1b80      	subs	r0, r0, r6
 800607c:	2864      	cmp	r0, #100	; 0x64
 800607e:	f67f aecf 	bls.w	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8006082:	e747      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006084:	f7fd fe44 	bl	8003d10 <HAL_GetTick>
 8006088:	1b40      	subs	r0, r0, r5
 800608a:	2864      	cmp	r0, #100	; 0x64
 800608c:	f67f af33 	bls.w	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006090:	e740      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800

08006098 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800609c:	4604      	mov	r4, r0
 800609e:	b1c8      	cbz	r0, 80060d4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80060a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80060a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060a8:	b91b      	cbnz	r3, 80060b2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80060aa:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80060ae:	f7fb fc97 	bl	80019e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060b2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80060b4:	1d21      	adds	r1, r4, #4
 80060b6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80060bc:	f000 fc69 	bl	8006992 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80060c0:	6862      	ldr	r2, [r4, #4]
 80060c2:	4629      	mov	r1, r5
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	f000 fc9c 	bl	8006a02 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80060ca:	2301      	movs	r3, #1

  return HAL_OK;
 80060cc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80060ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80060d4:	2001      	movs	r0, #1
 80060d6:	e7fc      	b.n	80060d2 <HAL_SDRAM_Init+0x3a>

080060d8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80060d8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80060da:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80060de:	4605      	mov	r5, r0
 80060e0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80060e2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80060e4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80060e6:	d010      	beq.n	800610a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80060e8:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80060ec:	2c01      	cmp	r4, #1
 80060ee:	d110      	bne.n	8006112 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060f0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80060f2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060f4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80060f8:	f000 fcb9 	bl	8006a6e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060fc:	6833      	ldr	r3, [r6, #0]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d104      	bne.n	800610c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006102:	2305      	movs	r3, #5
 8006104:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006108:	2000      	movs	r0, #0
}
 800610a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800610c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006110:	e7fa      	b.n	8006108 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006112:	2001      	movs	r0, #1
 8006114:	e7f9      	b.n	800610a <HAL_SDRAM_SendCommand+0x32>

08006116 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006116:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006118:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800611c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800611e:	2b02      	cmp	r3, #2
 8006120:	b2d8      	uxtb	r0, r3
 8006122:	d00d      	beq.n	8006140 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006124:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006128:	2b01      	cmp	r3, #1
 800612a:	b2dd      	uxtb	r5, r3
 800612c:	d109      	bne.n	8006142 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800612e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006130:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006132:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006136:	f000 fcac 	bl	8006a92 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800613a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800613c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006140:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006142:	2001      	movs	r0, #1
 8006144:	e7fc      	b.n	8006140 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006146 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006148:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800614c:	2b01      	cmp	r3, #1
 800614e:	d133      	bne.n	80061b8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	2302      	movs	r3, #2
 8006152:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006156:	6803      	ldr	r3, [r0, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006160:	4a16      	ldr	r2, [pc, #88]	; (80061bc <HAL_TIM_Base_Start_IT+0x74>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01a      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x54>
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d017      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x54>
 800616c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x54>
 8006174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006178:	4293      	cmp	r3, r2
 800617a:	d00f      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x54>
 800617c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006180:	4293      	cmp	r3, r2
 8006182:	d00b      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x54>
 8006184:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006188:	4293      	cmp	r3, r2
 800618a:	d007      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x54>
 800618c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x54>
 8006194:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006198:	4293      	cmp	r3, r2
 800619a:	d107      	bne.n	80061ac <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800619c:	6899      	ldr	r1, [r3, #8]
 800619e:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <HAL_TIM_Base_Start_IT+0x78>)
 80061a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	2a06      	cmp	r2, #6
 80061a4:	d006      	beq.n	80061b4 <HAL_TIM_Base_Start_IT+0x6c>
 80061a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80061aa:	d003      	beq.n	80061b4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061b4:	2000      	movs	r0, #0
}
 80061b6:	4770      	bx	lr
    return HAL_ERROR;
 80061b8:	2001      	movs	r0, #1
 80061ba:	4770      	bx	lr
 80061bc:	40010000 	.word	0x40010000
 80061c0:	00010007 	.word	0x00010007

080061c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80061c4:	4770      	bx	lr

080061c6 <HAL_TIM_IC_CaptureCallback>:
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80061c8:	4770      	bx	lr

080061ca <HAL_TIM_TriggerCallback>:
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061cc:	6803      	ldr	r3, [r0, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	0791      	lsls	r1, r2, #30
{
 80061d2:	b510      	push	{r4, lr}
 80061d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061d6:	d50f      	bpl.n	80061f8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	0792      	lsls	r2, r2, #30
 80061dc:	d50c      	bpl.n	80061f8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061de:	f06f 0202 	mvn.w	r2, #2
 80061e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061e4:	2201      	movs	r2, #1
 80061e6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	0799      	lsls	r1, r3, #30
 80061ec:	f000 8085 	beq.w	80062fa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061f0:	f7ff ffe9 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f4:	2300      	movs	r3, #0
 80061f6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	0752      	lsls	r2, r2, #29
 80061fe:	d510      	bpl.n	8006222 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	0750      	lsls	r0, r2, #29
 8006204:	d50d      	bpl.n	8006222 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006206:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800620e:	2202      	movs	r2, #2
 8006210:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006218:	d075      	beq.n	8006306 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	f7ff ffd4 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	2300      	movs	r3, #0
 8006220:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	0711      	lsls	r1, r2, #28
 8006228:	d50f      	bpl.n	800624a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	0712      	lsls	r2, r2, #28
 800622e:	d50c      	bpl.n	800624a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006230:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006234:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006238:	2204      	movs	r2, #4
 800623a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	079b      	lsls	r3, r3, #30
 8006240:	d067      	beq.n	8006312 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006242:	f7ff ffc0 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	2300      	movs	r3, #0
 8006248:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	06d0      	lsls	r0, r2, #27
 8006250:	d510      	bpl.n	8006274 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	06d1      	lsls	r1, r2, #27
 8006256:	d50d      	bpl.n	8006274 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006258:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800625e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006260:	2208      	movs	r2, #8
 8006262:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f413 7f40 	tst.w	r3, #768	; 0x300
 800626a:	d058      	beq.n	800631e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800626c:	f7ff ffab 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006270:	2300      	movs	r3, #0
 8006272:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	07d2      	lsls	r2, r2, #31
 800627a:	d508      	bpl.n	800628e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	07d0      	lsls	r0, r2, #31
 8006280:	d505      	bpl.n	800628e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006282:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006286:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006288:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800628a:	f7fb f921 	bl	80014d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	0611      	lsls	r1, r2, #24
 8006294:	d508      	bpl.n	80062a8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	0612      	lsls	r2, r2, #24
 800629a:	d505      	bpl.n	80062a8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800629c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80062a4:	f000 f8d9 	bl	800645a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	05d0      	lsls	r0, r2, #23
 80062ae:	d508      	bpl.n	80062c2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	0611      	lsls	r1, r2, #24
 80062b4:	d505      	bpl.n	80062c2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80062be:	f000 f8cd 	bl	800645c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	0652      	lsls	r2, r2, #25
 80062c8:	d508      	bpl.n	80062dc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	0650      	lsls	r0, r2, #25
 80062ce:	d505      	bpl.n	80062dc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80062d8:	f7ff ff77 	bl	80061ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	0691      	lsls	r1, r2, #26
 80062e2:	d522      	bpl.n	800632a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	0692      	lsls	r2, r2, #26
 80062e8:	d51f      	bpl.n	800632a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062ea:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80062f6:	f000 b8af 	b.w	8006458 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	f7ff ff63 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fe:	4620      	mov	r0, r4
 8006300:	f7ff ff62 	bl	80061c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8006304:	e776      	b.n	80061f4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	f7ff ff5d 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630a:	4620      	mov	r0, r4
 800630c:	f7ff ff5c 	bl	80061c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8006310:	e785      	b.n	800621e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006312:	f7ff ff57 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006316:	4620      	mov	r0, r4
 8006318:	f7ff ff56 	bl	80061c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800631c:	e793      	b.n	8006246 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631e:	f7ff ff51 	bl	80061c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff ff50 	bl	80061c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8006328:	e7a2      	b.n	8006270 <HAL_TIM_IRQHandler+0xa4>
}
 800632a:	bd10      	pop	{r4, pc}

0800632c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800632c:	4a30      	ldr	r2, [pc, #192]	; (80063f0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800632e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006330:	4290      	cmp	r0, r2
 8006332:	d012      	beq.n	800635a <TIM_Base_SetConfig+0x2e>
 8006334:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006338:	d00f      	beq.n	800635a <TIM_Base_SetConfig+0x2e>
 800633a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800633e:	4290      	cmp	r0, r2
 8006340:	d00b      	beq.n	800635a <TIM_Base_SetConfig+0x2e>
 8006342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006346:	4290      	cmp	r0, r2
 8006348:	d007      	beq.n	800635a <TIM_Base_SetConfig+0x2e>
 800634a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800634e:	4290      	cmp	r0, r2
 8006350:	d003      	beq.n	800635a <TIM_Base_SetConfig+0x2e>
 8006352:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006356:	4290      	cmp	r0, r2
 8006358:	d119      	bne.n	800638e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800635a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006360:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006362:	4a23      	ldr	r2, [pc, #140]	; (80063f0 <TIM_Base_SetConfig+0xc4>)
 8006364:	4290      	cmp	r0, r2
 8006366:	d029      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 8006368:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800636c:	d026      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 800636e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006372:	4290      	cmp	r0, r2
 8006374:	d022      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 8006376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800637a:	4290      	cmp	r0, r2
 800637c:	d01e      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 800637e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006382:	4290      	cmp	r0, r2
 8006384:	d01a      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 8006386:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800638a:	4290      	cmp	r0, r2
 800638c:	d016      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 800638e:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <TIM_Base_SetConfig+0xc8>)
 8006390:	4290      	cmp	r0, r2
 8006392:	d013      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 8006394:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006398:	4290      	cmp	r0, r2
 800639a:	d00f      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 800639c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063a0:	4290      	cmp	r0, r2
 80063a2:	d00b      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 80063a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80063a8:	4290      	cmp	r0, r2
 80063aa:	d007      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 80063ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063b0:	4290      	cmp	r0, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0x90>
 80063b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063b8:	4290      	cmp	r0, r2
 80063ba:	d103      	bne.n	80063c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c0:	68ca      	ldr	r2, [r1, #12]
 80063c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c4:	694a      	ldr	r2, [r1, #20]
 80063c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80063cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ce:	688b      	ldr	r3, [r1, #8]
 80063d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d2:	680b      	ldr	r3, [r1, #0]
 80063d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <TIM_Base_SetConfig+0xc4>)
 80063d8:	4298      	cmp	r0, r3
 80063da:	d003      	beq.n	80063e4 <TIM_Base_SetConfig+0xb8>
 80063dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e0:	4298      	cmp	r0, r3
 80063e2:	d101      	bne.n	80063e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e4:	690b      	ldr	r3, [r1, #16]
 80063e6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e8:	2301      	movs	r3, #1
 80063ea:	6143      	str	r3, [r0, #20]
}
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40014000 	.word	0x40014000

080063f8 <HAL_TIM_Base_Init>:
{
 80063f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80063fa:	4604      	mov	r4, r0
 80063fc:	b350      	cbz	r0, 8006454 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80063fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006402:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006406:	b91b      	cbnz	r3, 8006410 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006408:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800640c:	f7ff fe9b 	bl	8006146 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006412:	6820      	ldr	r0, [r4, #0]
 8006414:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641a:	f7ff ff87 	bl	800632c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800641e:	2301      	movs	r3, #1
  return HAL_OK;
 8006420:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006422:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800642a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800642e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006432:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006436:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800643a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006446:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800644a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800644e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006452:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006454:	2001      	movs	r0, #1
 8006456:	e7fc      	b.n	8006452 <HAL_TIM_Base_Init+0x5a>

08006458 <HAL_TIMEx_CommutCallback>:
 8006458:	4770      	bx	lr

0800645a <HAL_TIMEx_BreakCallback>:
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_Break2Callback>:
 800645c:	4770      	bx	lr
	...

08006460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006464:	69c0      	ldr	r0, [r0, #28]
 8006466:	6921      	ldr	r1, [r4, #16]
 8006468:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800646a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800646c:	430a      	orrs	r2, r1
 800646e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006470:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006472:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006474:	498e      	ldr	r1, [pc, #568]	; (80066b0 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006476:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006478:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800647a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800647c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800647e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006480:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800648c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800648e:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8006490:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006492:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800649a:	4a86      	ldr	r2, [pc, #536]	; (80066b4 <UART_SetConfig+0x254>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d117      	bne.n	80064d0 <UART_SetConfig+0x70>
 80064a0:	4b85      	ldr	r3, [pc, #532]	; (80066b8 <UART_SetConfig+0x258>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	f200 80e2 	bhi.w	8006676 <UART_SetConfig+0x216>
 80064b2:	4a82      	ldr	r2, [pc, #520]	; (80066bc <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80064b8:	5cd3      	ldrb	r3, [r2, r3]
 80064ba:	f040 80b3 	bne.w	8006624 <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d822      	bhi.n	8006508 <UART_SetConfig+0xa8>
 80064c2:	e8df f003 	tbb	[pc, r3]
 80064c6:	db90      	.short	0xdb90
 80064c8:	21d52198 	.word	0x21d52198
 80064cc:	2121      	.short	0x2121
 80064ce:	99          	.byte	0x99
 80064cf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d0:	4a7b      	ldr	r2, [pc, #492]	; (80066c0 <UART_SetConfig+0x260>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d106      	bne.n	80064e4 <UART_SetConfig+0x84>
 80064d6:	4b78      	ldr	r3, [pc, #480]	; (80066b8 <UART_SetConfig+0x258>)
 80064d8:	4a7a      	ldr	r2, [pc, #488]	; (80066c4 <UART_SetConfig+0x264>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f003 030c 	and.w	r3, r3, #12
 80064e2:	e7e7      	b.n	80064b4 <UART_SetConfig+0x54>
 80064e4:	4a78      	ldr	r2, [pc, #480]	; (80066c8 <UART_SetConfig+0x268>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d118      	bne.n	800651c <UART_SetConfig+0xbc>
 80064ea:	4b73      	ldr	r3, [pc, #460]	; (80066b8 <UART_SetConfig+0x258>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	f000 80b3 	beq.w	8006660 <UART_SetConfig+0x200>
 80064fa:	d807      	bhi.n	800650c <UART_SetConfig+0xac>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80c0 	beq.w	8006682 <UART_SetConfig+0x222>
 8006502:	2b10      	cmp	r3, #16
 8006504:	f000 80b1 	beq.w	800666a <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006508:	2001      	movs	r0, #1
 800650a:	e070      	b.n	80065ee <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800650c:	2b30      	cmp	r3, #48	; 0x30
 800650e:	d1fb      	bne.n	8006508 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006510:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006514:	d070      	beq.n	80065f8 <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006516:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800651a:	e0b9      	b.n	8006690 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800651c:	4a6b      	ldr	r2, [pc, #428]	; (80066cc <UART_SetConfig+0x26c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d10f      	bne.n	8006542 <UART_SetConfig+0xe2>
 8006522:	4b65      	ldr	r3, [pc, #404]	; (80066b8 <UART_SetConfig+0x258>)
 8006524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006528:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	f000 8097 	beq.w	8006660 <UART_SetConfig+0x200>
 8006532:	d804      	bhi.n	800653e <UART_SetConfig+0xde>
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80a4 	beq.w	8006682 <UART_SetConfig+0x222>
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	e7e2      	b.n	8006504 <UART_SetConfig+0xa4>
 800653e:	2bc0      	cmp	r3, #192	; 0xc0
 8006540:	e7e5      	b.n	800650e <UART_SetConfig+0xae>
 8006542:	4a63      	ldr	r2, [pc, #396]	; (80066d0 <UART_SetConfig+0x270>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d112      	bne.n	800656e <UART_SetConfig+0x10e>
 8006548:	4b5b      	ldr	r3, [pc, #364]	; (80066b8 <UART_SetConfig+0x258>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006556:	f000 8083 	beq.w	8006660 <UART_SetConfig+0x200>
 800655a:	d805      	bhi.n	8006568 <UART_SetConfig+0x108>
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8090 	beq.w	8006682 <UART_SetConfig+0x222>
 8006562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006566:	e7cd      	b.n	8006504 <UART_SetConfig+0xa4>
 8006568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656c:	e7cf      	b.n	800650e <UART_SetConfig+0xae>
 800656e:	4a59      	ldr	r2, [pc, #356]	; (80066d4 <UART_SetConfig+0x274>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d110      	bne.n	8006596 <UART_SetConfig+0x136>
 8006574:	4b50      	ldr	r3, [pc, #320]	; (80066b8 <UART_SetConfig+0x258>)
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800657e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006582:	d06d      	beq.n	8006660 <UART_SetConfig+0x200>
 8006584:	d804      	bhi.n	8006590 <UART_SetConfig+0x130>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d075      	beq.n	8006676 <UART_SetConfig+0x216>
 800658a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658e:	e7b9      	b.n	8006504 <UART_SetConfig+0xa4>
 8006590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006594:	e7bb      	b.n	800650e <UART_SetConfig+0xae>
 8006596:	4a50      	ldr	r2, [pc, #320]	; (80066d8 <UART_SetConfig+0x278>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d110      	bne.n	80065be <UART_SetConfig+0x15e>
 800659c:	4b46      	ldr	r3, [pc, #280]	; (80066b8 <UART_SetConfig+0x258>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065aa:	d059      	beq.n	8006660 <UART_SetConfig+0x200>
 80065ac:	d804      	bhi.n	80065b8 <UART_SetConfig+0x158>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d067      	beq.n	8006682 <UART_SetConfig+0x222>
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b6:	e7a5      	b.n	8006504 <UART_SetConfig+0xa4>
 80065b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065bc:	e7a7      	b.n	800650e <UART_SetConfig+0xae>
 80065be:	4a47      	ldr	r2, [pc, #284]	; (80066dc <UART_SetConfig+0x27c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d1a1      	bne.n	8006508 <UART_SetConfig+0xa8>
 80065c4:	4b3c      	ldr	r3, [pc, #240]	; (80066b8 <UART_SetConfig+0x258>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d2:	d045      	beq.n	8006660 <UART_SetConfig+0x200>
 80065d4:	d804      	bhi.n	80065e0 <UART_SetConfig+0x180>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d053      	beq.n	8006682 <UART_SetConfig+0x222>
 80065da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065de:	e791      	b.n	8006504 <UART_SetConfig+0xa4>
 80065e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065e4:	e793      	b.n	800650e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e6:	f7ff fa8f 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80065ea:	b928      	cbnz	r0, 80065f8 <UART_SetConfig+0x198>
 80065ec:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80065f0:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 80065f6:	483a      	ldr	r0, [pc, #232]	; (80066e0 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065f8:	6862      	ldr	r2, [r4, #4]
 80065fa:	0853      	lsrs	r3, r2, #1
 80065fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006600:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006604:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006608:	f1a3 0110 	sub.w	r1, r3, #16
 800660c:	4291      	cmp	r1, r2
 800660e:	f63f af7b 	bhi.w	8006508 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006612:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006616:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800661a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800661e:	4313      	orrs	r3, r2
 8006620:	60cb      	str	r3, [r1, #12]
 8006622:	e7e3      	b.n	80065ec <UART_SetConfig+0x18c>
    switch (clocksource)
 8006624:	2b08      	cmp	r3, #8
 8006626:	f63f af6f 	bhi.w	8006508 <UART_SetConfig+0xa8>
 800662a:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <UART_SetConfig+0x1d0>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	08006689 	.word	0x08006689
 8006634:	08006655 	.word	0x08006655
 8006638:	08006667 	.word	0x08006667
 800663c:	08006509 	.word	0x08006509
 8006640:	0800665b 	.word	0x0800665b
 8006644:	08006509 	.word	0x08006509
 8006648:	08006509 	.word	0x08006509
 800664c:	08006509 	.word	0x08006509
 8006650:	08006517 	.word	0x08006517
        pclk = HAL_RCC_GetPCLK2Freq();
 8006654:	f7ff fa68 	bl	8005b28 <HAL_RCC_GetPCLK2Freq>
        break;
 8006658:	e018      	b.n	800668c <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 800665a:	f7ff f989 	bl	8005970 <HAL_RCC_GetSysClockFreq>
        break;
 800665e:	e015      	b.n	800668c <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006660:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006664:	d0c7      	beq.n	80065f6 <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 8006666:	481e      	ldr	r0, [pc, #120]	; (80066e0 <UART_SetConfig+0x280>)
 8006668:	e012      	b.n	8006690 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800666a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800666e:	d1f4      	bne.n	800665a <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8006670:	f7ff f97e 	bl	8005970 <HAL_RCC_GetSysClockFreq>
        break;
 8006674:	e7b9      	b.n	80065ea <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006676:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800667a:	d1eb      	bne.n	8006654 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 800667c:	f7ff fa54 	bl	8005b28 <HAL_RCC_GetPCLK2Freq>
        break;
 8006680:	e7b3      	b.n	80065ea <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006682:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006686:	d0ae      	beq.n	80065e6 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006688:	f7ff fa3e 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800668c:	2800      	cmp	r0, #0
 800668e:	d0ad      	beq.n	80065ec <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006690:	6862      	ldr	r2, [r4, #4]
 8006692:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8006696:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800669a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800669e:	f1a3 0110 	sub.w	r1, r3, #16
 80066a2:	4291      	cmp	r1, r2
 80066a4:	f63f af30 	bhi.w	8006508 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	60d3      	str	r3, [r2, #12]
 80066ac:	e79e      	b.n	80065ec <UART_SetConfig+0x18c>
 80066ae:	bf00      	nop
 80066b0:	efff69f3 	.word	0xefff69f3
 80066b4:	40011000 	.word	0x40011000
 80066b8:	40023800 	.word	0x40023800
 80066bc:	08021e95 	.word	0x08021e95
 80066c0:	40004400 	.word	0x40004400
 80066c4:	08021e98 	.word	0x08021e98
 80066c8:	40004800 	.word	0x40004800
 80066cc:	40004c00 	.word	0x40004c00
 80066d0:	40005000 	.word	0x40005000
 80066d4:	40011400 	.word	0x40011400
 80066d8:	40007800 	.word	0x40007800
 80066dc:	40007c00 	.word	0x40007c00
 80066e0:	00f42400 	.word	0x00f42400

080066e4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80066e6:	07da      	lsls	r2, r3, #31
{
 80066e8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066ea:	d506      	bpl.n	80066fa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ec:	6801      	ldr	r1, [r0, #0]
 80066ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80066f0:	684a      	ldr	r2, [r1, #4]
 80066f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80066f6:	4322      	orrs	r2, r4
 80066f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fa:	079c      	lsls	r4, r3, #30
 80066fc:	d506      	bpl.n	800670c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066fe:	6801      	ldr	r1, [r0, #0]
 8006700:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006702:	684a      	ldr	r2, [r1, #4]
 8006704:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006708:	4322      	orrs	r2, r4
 800670a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800670c:	0759      	lsls	r1, r3, #29
 800670e:	d506      	bpl.n	800671e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006710:	6801      	ldr	r1, [r0, #0]
 8006712:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006714:	684a      	ldr	r2, [r1, #4]
 8006716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800671a:	4322      	orrs	r2, r4
 800671c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800671e:	071a      	lsls	r2, r3, #28
 8006720:	d506      	bpl.n	8006730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006722:	6801      	ldr	r1, [r0, #0]
 8006724:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006726:	684a      	ldr	r2, [r1, #4]
 8006728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800672c:	4322      	orrs	r2, r4
 800672e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006730:	06dc      	lsls	r4, r3, #27
 8006732:	d506      	bpl.n	8006742 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006734:	6801      	ldr	r1, [r0, #0]
 8006736:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006738:	688a      	ldr	r2, [r1, #8]
 800673a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800673e:	4322      	orrs	r2, r4
 8006740:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006742:	0699      	lsls	r1, r3, #26
 8006744:	d506      	bpl.n	8006754 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006746:	6801      	ldr	r1, [r0, #0]
 8006748:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800674a:	688a      	ldr	r2, [r1, #8]
 800674c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006750:	4322      	orrs	r2, r4
 8006752:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006754:	065a      	lsls	r2, r3, #25
 8006756:	d510      	bpl.n	800677a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006758:	6801      	ldr	r1, [r0, #0]
 800675a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800675c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006762:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006766:	ea42 0204 	orr.w	r2, r2, r4
 800676a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800676c:	d105      	bne.n	800677a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800676e:	684a      	ldr	r2, [r1, #4]
 8006770:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006772:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006776:	4322      	orrs	r2, r4
 8006778:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677a:	061b      	lsls	r3, r3, #24
 800677c:	d506      	bpl.n	800678c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800677e:	6802      	ldr	r2, [r0, #0]
 8006780:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006782:	6853      	ldr	r3, [r2, #4]
 8006784:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006788:	430b      	orrs	r3, r1
 800678a:	6053      	str	r3, [r2, #4]
  }
}
 800678c:	bd10      	pop	{r4, pc}

0800678e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006792:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006796:	4604      	mov	r4, r0
 8006798:	460e      	mov	r6, r1
 800679a:	4615      	mov	r5, r2
 800679c:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	69d3      	ldr	r3, [r2, #28]
 80067a2:	ea36 0303 	bics.w	r3, r6, r3
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	d001      	beq.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80067b0:	2000      	movs	r0, #0
 80067b2:	e026      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80067b4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80067b8:	d0f2      	beq.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ba:	f7fd faa9 	bl	8003d10 <HAL_GetTick>
 80067be:	1bc0      	subs	r0, r0, r7
 80067c0:	4540      	cmp	r0, r8
 80067c2:	6820      	ldr	r0, [r4, #0]
 80067c4:	d802      	bhi.n	80067cc <UART_WaitOnFlagUntilTimeout+0x3e>
 80067c6:	f1b8 0f00 	cmp.w	r8, #0
 80067ca:	d11c      	bne.n	8006806 <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	e840 3200 	strex	r2, r3, [r0]
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d1f7      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	f100 0308 	add.w	r3, r0, #8
 80067e0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	f100 0108 	add.w	r1, r0, #8
 80067ec:	e841 3200 	strex	r2, r3, [r1]
 80067f0:	2a00      	cmp	r2, #0
 80067f2:	d1f3      	bne.n	80067dc <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80067f4:	2320      	movs	r3, #32
 80067f6:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80067f8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 80067fc:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80067fe:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006806:	6803      	ldr	r3, [r0, #0]
 8006808:	075a      	lsls	r2, r3, #29
 800680a:	d5c8      	bpl.n	800679e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800680c:	69c3      	ldr	r3, [r0, #28]
 800680e:	051b      	lsls	r3, r3, #20
 8006810:	d5c5      	bpl.n	800679e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006816:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800681c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	e840 3200 	strex	r2, r3, [r0]
 8006824:	2a00      	cmp	r2, #0
 8006826:	d1f7      	bne.n	8006818 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	f100 0308 	add.w	r3, r0, #8
 800682c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006830:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	f100 0108 	add.w	r1, r0, #8
 8006838:	e841 3200 	strex	r2, r3, [r1]
 800683c:	2a00      	cmp	r2, #0
 800683e:	d1f3      	bne.n	8006828 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8006840:	2320      	movs	r3, #32
 8006842:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006844:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006848:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800684c:	e7d6      	b.n	80067fc <UART_WaitOnFlagUntilTimeout+0x6e>

0800684e <HAL_UART_Transmit>:
{
 800684e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006852:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006854:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8006856:	4604      	mov	r4, r0
 8006858:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800685a:	2b20      	cmp	r3, #32
{
 800685c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800685e:	d142      	bne.n	80068e6 <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8006860:	2900      	cmp	r1, #0
 8006862:	d042      	beq.n	80068ea <HAL_UART_Transmit+0x9c>
 8006864:	2a00      	cmp	r2, #0
 8006866:	d040      	beq.n	80068ea <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006868:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686a:	2500      	movs	r5, #0
 800686c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006870:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8006872:	f7fd fa4d 	bl	8003d10 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006876:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8006878:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 800687a:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006882:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006886:	d103      	bne.n	8006890 <HAL_UART_Transmit+0x42>
 8006888:	6922      	ldr	r2, [r4, #16]
 800688a:	b90a      	cbnz	r2, 8006890 <HAL_UART_Transmit+0x42>
 800688c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800688e:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8006890:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006894:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8006898:	b292      	uxth	r2, r2
 800689a:	b93a      	cbnz	r2, 80068ac <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800689c:	2140      	movs	r1, #64	; 0x40
 800689e:	4620      	mov	r0, r4
 80068a0:	f7ff ff75 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 80068a4:	b950      	cbnz	r0, 80068bc <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 80068a6:	2320      	movs	r3, #32
 80068a8:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80068aa:	e008      	b.n	80068be <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ac:	2200      	movs	r2, #0
 80068ae:	2180      	movs	r1, #128	; 0x80
 80068b0:	4620      	mov	r0, r4
 80068b2:	9303      	str	r3, [sp, #12]
 80068b4:	f7ff ff6b 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	b118      	cbz	r0, 80068c4 <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 80068bc:	2003      	movs	r0, #3
}
 80068be:	b004      	add	sp, #16
 80068c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068c4:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80068c6:	b95e      	cbnz	r6, 80068e0 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068c8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80068cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068d0:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80068d2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80068d6:	3a01      	subs	r2, #1
 80068d8:	b292      	uxth	r2, r2
 80068da:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80068de:	e7d7      	b.n	8006890 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068e0:	f816 2b01 	ldrb.w	r2, [r6], #1
 80068e4:	e7f4      	b.n	80068d0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80068e6:	2002      	movs	r0, #2
 80068e8:	e7e9      	b.n	80068be <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7e7      	b.n	80068be <HAL_UART_Transmit+0x70>

080068ee <UART_CheckIdleState>:
{
 80068ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	2500      	movs	r5, #0
{
 80068f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80068f8:	f7fd fa0a 	bl	8003d10 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068fc:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80068fe:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	0712      	lsls	r2, r2, #28
 8006904:	d40a      	bmi.n	800691c <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006908:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800690a:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800690e:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006910:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006916:	6660      	str	r0, [r4, #100]	; 0x64
}
 8006918:	b003      	add	sp, #12
 800691a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006920:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006924:	4620      	mov	r0, r4
 8006926:	9200      	str	r2, [sp, #0]
 8006928:	462a      	mov	r2, r5
 800692a:	f7ff ff30 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 800692e:	2800      	cmp	r0, #0
 8006930:	d0e9      	beq.n	8006906 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006932:	2003      	movs	r0, #3
 8006934:	e7f0      	b.n	8006918 <UART_CheckIdleState+0x2a>

08006936 <HAL_UART_Init>:
{
 8006936:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006938:	4604      	mov	r4, r0
 800693a:	b340      	cbz	r0, 800698e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800693c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800693e:	b91b      	cbnz	r3, 8006948 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8006940:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8006944:	f7fa ffc4 	bl	80018d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006948:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800694a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800694c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800694e:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006958:	f7ff fd82 	bl	8006460 <UART_SetConfig>
 800695c:	2801      	cmp	r0, #1
 800695e:	d016      	beq.n	800698e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006962:	b113      	cbz	r3, 800696a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8006964:	4620      	mov	r0, r4
 8006966:	f7ff febd 	bl	80066e4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800696c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006974:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800697c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
}
 8006984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006988:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800698a:	f7ff bfb0 	b.w	80068ee <UART_CheckIdleState>
}
 800698e:	2001      	movs	r0, #1
 8006990:	bd10      	pop	{r4, pc}

08006992 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006996:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800699a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800699e:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 80069a2:	ea43 0308 	orr.w	r3, r3, r8
 80069a6:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80069aa:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80069ae:	6809      	ldr	r1, [r1, #0]
 80069b0:	b991      	cbnz	r1, 80069d8 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069b2:	ea43 030e 	orr.w	r3, r3, lr
 80069b6:	6801      	ldr	r1, [r0, #0]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80069be:	ea43 030c 	orr.w	r3, r3, ip
 80069c2:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80069c6:	433b      	orrs	r3, r7
 80069c8:	4333      	orrs	r3, r6
 80069ca:	432b      	orrs	r3, r5
 80069cc:	4323      	orrs	r3, r4
 80069ce:	430b      	orrs	r3, r1
 80069d0:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80069d2:	2000      	movs	r0, #0
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069d8:	6801      	ldr	r1, [r0, #0]
 80069da:	ea43 030e 	orr.w	r3, r3, lr
 80069de:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80069e2:	430b      	orrs	r3, r1
 80069e4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80069e6:	ea42 030c 	orr.w	r3, r2, ip
 80069ea:	6841      	ldr	r1, [r0, #4]
 80069ec:	433b      	orrs	r3, r7
 80069ee:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 80069f2:	4333      	orrs	r3, r6
 80069f4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80069f8:	432b      	orrs	r3, r5
 80069fa:	4323      	orrs	r3, r4
 80069fc:	4313      	orrs	r3, r2
 80069fe:	6043      	str	r3, [r0, #4]
 8006a00:	e7e7      	b.n	80069d2 <FMC_SDRAM_Init+0x40>

08006a02 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a02:	68cb      	ldr	r3, [r1, #12]
 8006a04:	f103 3cff 	add.w	ip, r3, #4294967295
 8006a08:	694b      	ldr	r3, [r1, #20]
{
 8006a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	680f      	ldr	r7, [r1, #0]
 8006a10:	684c      	ldr	r4, [r1, #4]
 8006a12:	688e      	ldr	r6, [r1, #8]
 8006a14:	051b      	lsls	r3, r3, #20
 8006a16:	690d      	ldr	r5, [r1, #16]
 8006a18:	3c01      	subs	r4, #1
 8006a1a:	6989      	ldr	r1, [r1, #24]
 8006a1c:	3e01      	subs	r6, #1
 8006a1e:	3d01      	subs	r5, #1
 8006a20:	3f01      	subs	r7, #1
 8006a22:	3901      	subs	r1, #1
 8006a24:	0124      	lsls	r4, r4, #4
 8006a26:	0236      	lsls	r6, r6, #8
 8006a28:	042d      	lsls	r5, r5, #16
 8006a2a:	0609      	lsls	r1, r1, #24
 8006a2c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006a30:	b95a      	cbnz	r2, 8006a4a <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a32:	433b      	orrs	r3, r7
 8006a34:	6882      	ldr	r2, [r0, #8]
 8006a36:	4323      	orrs	r3, r4
 8006a38:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006a3c:	4333      	orrs	r3, r6
 8006a3e:	432b      	orrs	r3, r5
 8006a40:	430b      	orrs	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006a46:	2000      	movs	r0, #0
 8006a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a4a:	6882      	ldr	r2, [r0, #8]
 8006a4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006a50:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006a54:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006a56:	ea44 0306 	orr.w	r3, r4, r6
 8006a5a:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a5c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006a5e:	68c2      	ldr	r2, [r0, #12]
 8006a60:	432b      	orrs	r3, r5
 8006a62:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006a66:	430b      	orrs	r3, r1
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60c3      	str	r3, [r0, #12]
 8006a6c:	e7eb      	b.n	8006a46 <FMC_SDRAM_Timing_Init+0x44>

08006a6e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006a6e:	6902      	ldr	r2, [r0, #16]
{
 8006a70:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006a72:	e9d1 3400 	ldrd	r3, r4, [r1]
 8006a76:	0d92      	lsrs	r2, r2, #22
 8006a78:	4323      	orrs	r3, r4
 8006a7a:	68cc      	ldr	r4, [r1, #12]
 8006a7c:	0592      	lsls	r2, r2, #22
 8006a7e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8006a82:	4313      	orrs	r3, r2
 8006a84:	688a      	ldr	r2, [r1, #8]
 8006a86:	3a01      	subs	r2, #1
 8006a88:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006a8c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006a8e:	2000      	movs	r0, #0
 8006a90:	bd10      	pop	{r4, pc}

08006a92 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006a92:	6943      	ldr	r3, [r0, #20]
 8006a94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006a98:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006a9c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006aa0:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	4770      	bx	lr
	...

08006aa8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aac:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006ab0:	b116      	cbz	r6, 8006ab8 <osMutexNew+0x10>
  hMutex = NULL;
 8006ab2:	2700      	movs	r7, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab8:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ()) {
 8006abc:	b913      	cbnz	r3, 8006ac4 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006abe:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac2:	b11b      	cbz	r3, 8006acc <osMutexNew+0x24>
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <osMutexNew+0x84>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d0f2      	beq.n	8006ab2 <osMutexNew+0xa>
    if (attr != NULL) {
 8006acc:	b324      	cbz	r4, 8006b18 <osMutexNew+0x70>
      type = attr->attr_bits;
 8006ace:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8006ad0:	072b      	lsls	r3, r5, #28
 8006ad2:	d4ee      	bmi.n	8006ab2 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006ad4:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ad8:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006adc:	b199      	cbz	r1, 8006b06 <osMutexNew+0x5e>
 8006ade:	2b4f      	cmp	r3, #79	; 0x4f
 8006ae0:	d9e7      	bls.n	8006ab2 <osMutexNew+0xa>
        if (rmtx != 0U) {
 8006ae2:	b1bd      	cbz	r5, 8006b14 <osMutexNew+0x6c>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006ae4:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006ae6:	f000 fe69 	bl	80077bc <xQueueCreateMutexStatic>
 8006aea:	4607      	mov	r7, r0
      if (hMutex != NULL) {
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d0e0      	beq.n	8006ab2 <osMutexNew+0xa>
          name = attr->name;
 8006af0:	6824      	ldr	r4, [r4, #0]
 8006af2:	462e      	mov	r6, r5
        vQueueAddToRegistry (hMutex, name);
 8006af4:	4621      	mov	r1, r4
 8006af6:	4638      	mov	r0, r7
 8006af8:	f001 f960 	bl	8007dbc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006afc:	2e00      	cmp	r6, #0
 8006afe:	d0d9      	beq.n	8006ab4 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006b00:	f047 0701 	orr.w	r7, r7, #1
  return ((osMutexId_t)hMutex);
 8006b04:	e7d6      	b.n	8006ab4 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1d3      	bne.n	8006ab2 <osMutexNew+0xa>
          if (rmtx != 0U) {
 8006b0a:	b12d      	cbz	r5, 8006b18 <osMutexNew+0x70>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006b0c:	2004      	movs	r0, #4
 8006b0e:	f000 fe8a 	bl	8007826 <xQueueCreateMutex>
 8006b12:	e7ea      	b.n	8006aea <osMutexNew+0x42>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b14:	2001      	movs	r0, #1
 8006b16:	e7e6      	b.n	8006ae6 <osMutexNew+0x3e>
            hMutex = xSemaphoreCreateMutex ();
 8006b18:	2001      	movs	r0, #1
 8006b1a:	f000 fe84 	bl	8007826 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006b1e:	4607      	mov	r7, r0
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d0c6      	beq.n	8006ab2 <osMutexNew+0xa>
        if (attr != NULL) {
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	d0e5      	beq.n	8006af4 <osMutexNew+0x4c>
 8006b28:	2500      	movs	r5, #0
 8006b2a:	e7e1      	b.n	8006af0 <osMutexNew+0x48>
 8006b2c:	20001c70 	.word	0x20001c70

08006b30 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b30:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b32:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b36:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8006b38:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b3c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b3e:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006b42:	b112      	cbz	r2, 8006b4a <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8006b44:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006b48:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b4a:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006b4e:	b912      	cbnz	r2, 8006b56 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b50:	f3ef 8211 	mrs	r2, BASEPRI
 8006b54:	b11a      	cbz	r2, 8006b5e <osMutexAcquire+0x2e>
 8006b56:	4a0d      	ldr	r2, [pc, #52]	; (8006b8c <osMutexAcquire+0x5c>)
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	2a02      	cmp	r2, #2
 8006b5c:	d0f2      	beq.n	8006b44 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8006b5e:	b188      	cbz	r0, 8006b84 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006b60:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006b62:	b163      	cbz	r3, 8006b7e <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006b64:	f001 f8b1 	bl	8007cca <xQueueTakeMutexRecursive>
 8006b68:	2801      	cmp	r0, #1
 8006b6a:	d101      	bne.n	8006b70 <osMutexAcquire+0x40>
  stat = osOK;
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e7eb      	b.n	8006b48 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8006b70:	2c00      	cmp	r4, #0
 8006b72:	bf14      	ite	ne
 8006b74:	f06f 0001 	mvnne.w	r0, #1
 8006b78:	f06f 0002 	mvneq.w	r0, #2
 8006b7c:	e7e4      	b.n	8006b48 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006b7e:	f000 ffd9 	bl	8007b34 <xQueueSemaphoreTake>
 8006b82:	e7f1      	b.n	8006b68 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8006b84:	f06f 0003 	mvn.w	r0, #3
 8006b88:	e7de      	b.n	8006b48 <osMutexAcquire+0x18>
 8006b8a:	bf00      	nop
 8006b8c:	20001c70 	.word	0x20001c70

08006b90 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006b90:	b508      	push	{r3, lr}
 8006b92:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b94:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006b98:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9c:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006ba0:	b112      	cbz	r2, 8006ba8 <osMutexRelease+0x18>
    stat = osErrorISR;
 8006ba2:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006ba6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba8:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006bac:	b912      	cbnz	r2, 8006bb4 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bae:	f3ef 8211 	mrs	r2, BASEPRI
 8006bb2:	b11a      	cbz	r2, 8006bbc <osMutexRelease+0x2c>
 8006bb4:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <osMutexRelease+0x50>)
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	2a02      	cmp	r2, #2
 8006bba:	d0f2      	beq.n	8006ba2 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8006bbc:	b168      	cbz	r0, 8006bda <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8006bbe:	b13b      	cbz	r3, 8006bd0 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006bc0:	f000 fe11 	bl	80077e6 <xQueueGiveMutexRecursive>
 8006bc4:	2801      	cmp	r0, #1
  stat = osOK;
 8006bc6:	bf0c      	ite	eq
 8006bc8:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8006bca:	f06f 0002 	mvnne.w	r0, #2
 8006bce:	e7ea      	b.n	8006ba6 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	f000 fd37 	bl	8007646 <xQueueGenericSend>
 8006bd8:	e7f4      	b.n	8006bc4 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8006bda:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006bde:	e7e2      	b.n	8006ba6 <osMutexRelease+0x16>
 8006be0:	20001c70 	.word	0x20001c70

08006be4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006be6:	460e      	mov	r6, r1
 8006be8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bea:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006bee:	b11b      	cbz	r3, 8006bf8 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8006bf0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	b002      	add	sp, #8
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf8:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006bfc:	b913      	cbnz	r3, 8006c04 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8006c02:	b11b      	cbz	r3, 8006c0c <osSemaphoreNew+0x28>
 8006c04:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <osSemaphoreNew+0xa8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d0f1      	beq.n	8006bf0 <osSemaphoreNew+0xc>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d0ef      	beq.n	8006bf0 <osSemaphoreNew+0xc>
 8006c10:	42b0      	cmp	r0, r6
 8006c12:	d3ed      	bcc.n	8006bf0 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8006c14:	b1ed      	cbz	r5, 8006c52 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c16:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006c1a:	b1c3      	cbz	r3, 8006c4e <osSemaphoreNew+0x6a>
 8006c1c:	2a4f      	cmp	r2, #79	; 0x4f
 8006c1e:	d9e7      	bls.n	8006bf0 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006c20:	2801      	cmp	r0, #1
 8006c22:	d129      	bne.n	8006c78 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006c24:	2203      	movs	r2, #3
 8006c26:	9200      	str	r2, [sp, #0]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	f000 fc86 	bl	800753c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8006c30:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0dc      	beq.n	8006bf0 <osSemaphoreNew+0xc>
 8006c36:	b1ce      	cbz	r6, 8006c6c <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c38:	2300      	movs	r3, #0
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	f000 fd02 	bl	8007646 <xQueueGenericSend>
 8006c42:	2801      	cmp	r0, #1
 8006c44:	d012      	beq.n	8006c6c <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8006c46:	4620      	mov	r0, r4
 8006c48:	f001 f8de 	bl	8007e08 <vQueueDelete>
 8006c4c:	e7d0      	b.n	8006bf0 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	d1ce      	bne.n	8006bf0 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006c52:	2801      	cmp	r0, #1
 8006c54:	d104      	bne.n	8006c60 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8006c56:	2203      	movs	r2, #3
 8006c58:	2100      	movs	r1, #0
 8006c5a:	f000 fc83 	bl	8007564 <xQueueGenericCreate>
 8006c5e:	e7e7      	b.n	8006c30 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c60:	4631      	mov	r1, r6
 8006c62:	f000 fcce 	bl	8007602 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006c66:	4604      	mov	r4, r0
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d0c1      	beq.n	8006bf0 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8006c6c:	b95d      	cbnz	r5, 8006c86 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 f8a3 	bl	8007dbc <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006c76:	e7bc      	b.n	8006bf2 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	f000 fc9b 	bl	80075b6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006c80:	4604      	mov	r4, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d0b4      	beq.n	8006bf0 <osSemaphoreNew+0xc>
          name = attr->name;
 8006c86:	682d      	ldr	r5, [r5, #0]
 8006c88:	e7f1      	b.n	8006c6e <osSemaphoreNew+0x8a>
 8006c8a:	bf00      	nop
 8006c8c:	20001c70 	.word	0x20001c70

08006c90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006c90:	b513      	push	{r0, r1, r4, lr}
 8006c92:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006c94:	b918      	cbnz	r0, 8006c9e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8006c96:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006c9a:	b002      	add	sp, #8
 8006c9c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8006ca2:	b163      	cbz	r3, 8006cbe <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	d1f6      	bne.n	8006c96 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006ca8:	aa01      	add	r2, sp, #4
 8006caa:	4621      	mov	r1, r4
      yield = pdFALSE;
 8006cac:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006cae:	f001 f830 	bl	8007d12 <xQueueReceiveFromISR>
 8006cb2:	2801      	cmp	r0, #1
 8006cb4:	d113      	bne.n	8006cde <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 8006cb6:	9b01      	ldr	r3, [sp, #4]
 8006cb8:	b9a3      	cbnz	r3, 8006ce4 <osSemaphoreAcquire+0x54>
  stat = osOK;
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e7ed      	b.n	8006c9a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cbe:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006cc2:	b913      	cbnz	r3, 8006cca <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc8:	b11b      	cbz	r3, 8006cd2 <osSemaphoreAcquire+0x42>
 8006cca:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <osSemaphoreAcquire+0x70>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d0e8      	beq.n	8006ca4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	f000 ff2e 	bl	8007b34 <xQueueSemaphoreTake>
 8006cd8:	2801      	cmp	r0, #1
 8006cda:	d0ee      	beq.n	8006cba <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8006cdc:	b96c      	cbnz	r4, 8006cfa <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8006cde:	f06f 0002 	mvn.w	r0, #2
 8006ce2:	e7da      	b.n	8006c9a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8006ce4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	e7df      	b.n	8006cba <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 8006cfa:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006cfe:	e7cc      	b.n	8006c9a <osSemaphoreAcquire+0xa>
 8006d00:	20001c70 	.word	0x20001c70

08006d04 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006d04:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006d06:	b370      	cbz	r0, 8006d66 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d08:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006d0c:	b14b      	cbz	r3, 8006d22 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 8006d0e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d10:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006d12:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d14:	f000 fe0d 	bl	8007932 <xQueueGiveFromISR>
 8006d18:	2801      	cmp	r0, #1
 8006d1a:	d014      	beq.n	8006d46 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006d1c:	f06f 0002 	mvn.w	r0, #2
 8006d20:	e014      	b.n	8006d4c <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d22:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006d26:	b913      	cbnz	r3, 8006d2e <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d28:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2c:	b11b      	cbz	r3, 8006d36 <osSemaphoreRelease+0x32>
 8006d2e:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <osSemaphoreRelease+0x68>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d0eb      	beq.n	8006d0e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d36:	2300      	movs	r3, #0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	f000 fc83 	bl	8007646 <xQueueGenericSend>
 8006d40:	2801      	cmp	r0, #1
 8006d42:	d002      	beq.n	8006d4a <osSemaphoreRelease+0x46>
 8006d44:	e7ea      	b.n	8006d1c <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	b913      	cbnz	r3, 8006d50 <osSemaphoreRelease+0x4c>
  stat = osOK;
 8006d4a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006d4c:	b002      	add	sp, #8
 8006d4e:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8006d50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d58:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	e7f1      	b.n	8006d4a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8006d66:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006d6a:	e7ef      	b.n	8006d4c <osSemaphoreRelease+0x48>
 8006d6c:	20001c70 	.word	0x20001c70

08006d70 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d72:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d74:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d78:	b11b      	cbz	r3, 8006d82 <osMessageQueueNew+0x12>
  hQueue = NULL;
 8006d7a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	b002      	add	sp, #8
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d82:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d86:	b913      	cbnz	r3, 8006d8e <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d88:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8c:	b11b      	cbz	r3, 8006d96 <osMessageQueueNew+0x26>
 8006d8e:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <osMessageQueueNew+0x88>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d0f1      	beq.n	8006d7a <osMessageQueueNew+0xa>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d0ef      	beq.n	8006d7a <osMessageQueueNew+0xa>
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	d0ed      	beq.n	8006d7a <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8006d9e:	b1ec      	cbz	r4, 8006ddc <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006da0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8006da4:	b193      	cbz	r3, 8006dcc <osMessageQueueNew+0x5c>
 8006da6:	2a4f      	cmp	r2, #79	; 0x4f
 8006da8:	d9e7      	bls.n	8006d7a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006daa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d0e4      	beq.n	8006d7a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006db0:	fb01 f500 	mul.w	r5, r1, r0
 8006db4:	6966      	ldr	r6, [r4, #20]
 8006db6:	42ae      	cmp	r6, r5
 8006db8:	d3df      	bcc.n	8006d7a <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006dba:	2500      	movs	r5, #0
 8006dbc:	9500      	str	r5, [sp, #0]
 8006dbe:	f000 fbbd 	bl	800753c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d0d8      	beq.n	8006d7a <osMessageQueueNew+0xa>
        name = attr->name;
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	e00f      	b.n	8006dec <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	d1d4      	bne.n	8006d7a <osMessageQueueNew+0xa>
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d1      	bne.n	8006d7a <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006dd6:	6963      	ldr	r3, [r4, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1ce      	bne.n	8006d7a <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f000 fbc1 	bl	8007564 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006de2:	4605      	mov	r5, r0
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d0c8      	beq.n	8006d7a <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8006de8:	2c00      	cmp	r4, #0
 8006dea:	d1ed      	bne.n	8006dc8 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8006dec:	4621      	mov	r1, r4
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 ffe4 	bl	8007dbc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006df4:	e7c2      	b.n	8006d7c <osMessageQueueNew+0xc>
 8006df6:	bf00      	nop
 8006df8:	20001c70 	.word	0x20001c70

08006dfc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006dfc:	b513      	push	{r0, r1, r4, lr}
 8006dfe:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e00:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006e04:	b123      	cbz	r3, 8006e10 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e06:	b9d8      	cbnz	r0, 8006e40 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8006e08:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006e0c:	b002      	add	sp, #8
 8006e0e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e10:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006e14:	b913      	cbnz	r3, 8006e1c <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e16:	f3ef 8311 	mrs	r3, BASEPRI
 8006e1a:	b11b      	cbz	r3, 8006e24 <osMessageQueuePut+0x28>
 8006e1c:	4b17      	ldr	r3, [pc, #92]	; (8006e7c <osMessageQueuePut+0x80>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d0f0      	beq.n	8006e06 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d0ef      	beq.n	8006e08 <osMessageQueuePut+0xc>
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d0ed      	beq.n	8006e08 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4622      	mov	r2, r4
 8006e30:	f000 fc09 	bl	8007646 <xQueueGenericSend>
 8006e34:	2801      	cmp	r0, #1
 8006e36:	d010      	beq.n	8006e5a <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8006e38:	b9e4      	cbnz	r4, 8006e74 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 8006e3a:	f06f 0002 	mvn.w	r0, #2
 8006e3e:	e7e5      	b.n	8006e0c <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e40:	2900      	cmp	r1, #0
 8006e42:	d0e1      	beq.n	8006e08 <osMessageQueuePut+0xc>
 8006e44:	2c00      	cmp	r4, #0
 8006e46:	d1df      	bne.n	8006e08 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006e48:	4623      	mov	r3, r4
 8006e4a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006e4c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006e4e:	f000 fd07 	bl	8007860 <xQueueGenericSendFromISR>
 8006e52:	2801      	cmp	r0, #1
 8006e54:	d1f1      	bne.n	8006e3a <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	b90b      	cbnz	r3, 8006e5e <osMessageQueuePut+0x62>
  stat = osOK;
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e7d6      	b.n	8006e0c <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8006e5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	e7f2      	b.n	8006e5a <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8006e74:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006e78:	e7c8      	b.n	8006e0c <osMessageQueuePut+0x10>
 8006e7a:	bf00      	nop
 8006e7c:	20001c70 	.word	0x20001c70

08006e80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e80:	b513      	push	{r0, r1, r4, lr}
 8006e82:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e84:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006e88:	b123      	cbz	r3, 8006e94 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e8a:	b9d0      	cbnz	r0, 8006ec2 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8006e8c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006e90:	b002      	add	sp, #8
 8006e92:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e94:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006e98:	b913      	cbnz	r3, 8006ea0 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9e:	b11b      	cbz	r3, 8006ea8 <osMessageQueueGet+0x28>
 8006ea0:	4b16      	ldr	r3, [pc, #88]	; (8006efc <osMessageQueueGet+0x7c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d0f0      	beq.n	8006e8a <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d0ef      	beq.n	8006e8c <osMessageQueueGet+0xc>
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d0ed      	beq.n	8006e8c <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	f000 fd9a 	bl	80079ea <xQueueReceive>
 8006eb6:	2801      	cmp	r0, #1
 8006eb8:	d00f      	beq.n	8006eda <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 8006eba:	b9dc      	cbnz	r4, 8006ef4 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8006ebc:	f06f 0002 	mvn.w	r0, #2
 8006ec0:	e7e6      	b.n	8006e90 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ec2:	2900      	cmp	r1, #0
 8006ec4:	d0e2      	beq.n	8006e8c <osMessageQueueGet+0xc>
 8006ec6:	2c00      	cmp	r4, #0
 8006ec8:	d1e0      	bne.n	8006e8c <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006eca:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006ecc:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006ece:	f000 ff20 	bl	8007d12 <xQueueReceiveFromISR>
 8006ed2:	2801      	cmp	r0, #1
 8006ed4:	d1f2      	bne.n	8006ebc <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	b90b      	cbnz	r3, 8006ede <osMessageQueueGet+0x5e>
  stat = osOK;
 8006eda:	2000      	movs	r0, #0
 8006edc:	e7d8      	b.n	8006e90 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8006ede:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	e7f2      	b.n	8006eda <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8006ef4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006ef8:	e7ca      	b.n	8006e90 <osMessageQueueGet+0x10>
 8006efa:	bf00      	nop
 8006efc:	20001c70 	.word	0x20001c70

08006f00 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f00:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <prvInsertBlockIntoFreeList+0x44>)
{
 8006f02:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f04:	461a      	mov	r2, r3
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4283      	cmp	r3, r0
 8006f0a:	d3fb      	bcc.n	8006f04 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f0c:	6854      	ldr	r4, [r2, #4]
 8006f0e:	1911      	adds	r1, r2, r4
 8006f10:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f12:	bf01      	itttt	eq
 8006f14:	6841      	ldreq	r1, [r0, #4]
 8006f16:	4610      	moveq	r0, r2
 8006f18:	1909      	addeq	r1, r1, r4
 8006f1a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1c:	6844      	ldr	r4, [r0, #4]
 8006f1e:	1901      	adds	r1, r0, r4
 8006f20:	428b      	cmp	r3, r1
 8006f22:	d10c      	bne.n	8006f3e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f24:	4908      	ldr	r1, [pc, #32]	; (8006f48 <prvInsertBlockIntoFreeList+0x48>)
 8006f26:	6809      	ldr	r1, [r1, #0]
 8006f28:	428b      	cmp	r3, r1
 8006f2a:	d003      	beq.n	8006f34 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f2c:	6859      	ldr	r1, [r3, #4]
 8006f2e:	4421      	add	r1, r4
 8006f30:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f32:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f34:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f36:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f38:	bf18      	it	ne
 8006f3a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	4619      	mov	r1, r3
 8006f40:	e7f8      	b.n	8006f34 <prvInsertBlockIntoFreeList+0x34>
 8006f42:	bf00      	nop
 8006f44:	2001417c 	.word	0x2001417c
 8006f48:	20001c74 	.word	0x20001c74

08006f4c <pvPortMalloc>:
{
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006f52:	f000 ffbd 	bl	8007ed0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006f56:	4940      	ldr	r1, [pc, #256]	; (8007058 <pvPortMalloc+0x10c>)
 8006f58:	4d40      	ldr	r5, [pc, #256]	; (800705c <pvPortMalloc+0x110>)
 8006f5a:	680b      	ldr	r3, [r1, #0]
 8006f5c:	b9f3      	cbnz	r3, 8006f9c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8006f5e:	4a40      	ldr	r2, [pc, #256]	; (8007060 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8006f60:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f62:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f64:	4e3f      	ldr	r6, [pc, #252]	; (8007064 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f66:	bf1b      	ittet	ne
 8006f68:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f6a:	4b3f      	ldrne	r3, [pc, #252]	; (8007068 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f6c:	4b3f      	ldreq	r3, [pc, #252]	; (800706c <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f6e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006f72:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f74:	bf18      	it	ne
 8006f76:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f78:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f7a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006f7c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f7e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8006f82:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f86:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8006f88:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f8a:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f8e:	4b38      	ldr	r3, [pc, #224]	; (8007070 <pvPortMalloc+0x124>)
 8006f90:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f92:	4b38      	ldr	r3, [pc, #224]	; (8007074 <pvPortMalloc+0x128>)
 8006f94:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f9a:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f9c:	682e      	ldr	r6, [r5, #0]
 8006f9e:	4226      	tst	r6, r4
 8006fa0:	d154      	bne.n	800704c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8006fa2:	2c00      	cmp	r4, #0
 8006fa4:	d043      	beq.n	800702e <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8006fa6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006faa:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fac:	bf1c      	itt	ne
 8006fae:	f023 0307 	bicne.w	r3, r3, #7
 8006fb2:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d049      	beq.n	800704c <pvPortMalloc+0x100>
 8006fb8:	4f2e      	ldr	r7, [pc, #184]	; (8007074 <pvPortMalloc+0x128>)
 8006fba:	683c      	ldr	r4, [r7, #0]
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	d345      	bcc.n	800704c <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <pvPortMalloc+0x118>)
 8006fc2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fc4:	6868      	ldr	r0, [r5, #4]
 8006fc6:	4298      	cmp	r0, r3
 8006fc8:	d204      	bcs.n	8006fd4 <pvPortMalloc+0x88>
 8006fca:	f8d5 c000 	ldr.w	ip, [r5]
 8006fce:	f1bc 0f00 	cmp.w	ip, #0
 8006fd2:	d117      	bne.n	8007004 <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 8006fd4:	6809      	ldr	r1, [r1, #0]
 8006fd6:	42a9      	cmp	r1, r5
 8006fd8:	d038      	beq.n	800704c <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fda:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fdc:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fe0:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fe2:	1ac2      	subs	r2, r0, r3
 8006fe4:	2a10      	cmp	r2, #16
 8006fe6:	d914      	bls.n	8007012 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fe8:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fea:	0741      	lsls	r1, r0, #29
 8006fec:	d00d      	beq.n	800700a <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	b672      	cpsid	i
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	b662      	cpsie	i
 8007002:	e7fe      	b.n	8007002 <pvPortMalloc+0xb6>
 8007004:	462a      	mov	r2, r5
 8007006:	4665      	mov	r5, ip
 8007008:	e7dc      	b.n	8006fc4 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800700a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800700c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800700e:	f7ff ff77 	bl	8006f00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007012:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007014:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007016:	4916      	ldr	r1, [pc, #88]	; (8007070 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007018:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800701a:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800701c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800701e:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007020:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007022:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007024:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007026:	bf38      	it	cc
 8007028:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800702a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800702e:	f000 ffef 	bl	8008010 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007032:	0763      	lsls	r3, r4, #29
 8007034:	d00c      	beq.n	8007050 <pvPortMalloc+0x104>
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	b672      	cpsid	i
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	b662      	cpsie	i
 800704a:	e7fe      	b.n	800704a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800704c:	2400      	movs	r4, #0
 800704e:	e7ee      	b.n	800702e <pvPortMalloc+0xe2>
}
 8007050:	4620      	mov	r0, r4
 8007052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007056:	bf00      	nop
 8007058:	20001c74 	.word	0x20001c74
 800705c:	20014170 	.word	0x20014170
 8007060:	20001c78 	.word	0x20001c78
 8007064:	2001417c 	.word	0x2001417c
 8007068:	20014170 	.word	0x20014170
 800706c:	000124f8 	.word	0x000124f8
 8007070:	20014178 	.word	0x20014178
 8007074:	20014174 	.word	0x20014174

08007078 <vPortFree>:
{
 8007078:	b510      	push	{r4, lr}
	if( pv != NULL )
 800707a:	4604      	mov	r4, r0
 800707c:	2800      	cmp	r0, #0
 800707e:	d032      	beq.n	80070e6 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007080:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <vPortFree+0x70>)
 8007082:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	4213      	tst	r3, r2
 800708a:	d10a      	bne.n	80070a2 <vPortFree+0x2a>
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	b672      	cpsid	i
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	b662      	cpsie	i
 80070a0:	e7fe      	b.n	80070a0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070a2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80070a6:	b151      	cbz	r1, 80070be <vPortFree+0x46>
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	b672      	cpsid	i
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	b662      	cpsie	i
 80070bc:	e7fe      	b.n	80070bc <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070be:	ea23 0302 	bic.w	r3, r3, r2
 80070c2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80070c6:	f000 ff03 	bl	8007ed0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ca:	4a08      	ldr	r2, [pc, #32]	; (80070ec <vPortFree+0x74>)
 80070cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070d0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070d4:	6811      	ldr	r1, [r2, #0]
 80070d6:	440b      	add	r3, r1
 80070d8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070da:	f7ff ff11 	bl	8006f00 <prvInsertBlockIntoFreeList>
}
 80070de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80070e2:	f000 bf95 	b.w	8008010 <xTaskResumeAll>
}
 80070e6:	bd10      	pop	{r4, pc}
 80070e8:	20014170 	.word	0x20014170
 80070ec:	20014174 	.word	0x20014174

080070f0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070f4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070fa:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070fc:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007104:	4770      	bx	lr

08007106 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007106:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007108:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800710a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800710c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007112:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007114:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007116:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007118:	3301      	adds	r3, #1
 800711a:	6003      	str	r3, [r0, #0]
}
 800711c:	4770      	bx	lr

0800711e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800711e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007120:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007122:	1c63      	adds	r3, r4, #1
 8007124:	d10a      	bne.n	800713c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007126:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800712c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800712e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007130:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007132:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007134:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007136:	3301      	adds	r3, #1
 8007138:	6003      	str	r3, [r0, #0]
}
 800713a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800713c:	f100 0208 	add.w	r2, r0, #8
 8007140:	4613      	mov	r3, r2
 8007142:	6852      	ldr	r2, [r2, #4]
 8007144:	6815      	ldr	r5, [r2, #0]
 8007146:	42a5      	cmp	r5, r4
 8007148:	d9fa      	bls.n	8007140 <vListInsert+0x22>
 800714a:	e7ed      	b.n	8007128 <vListInsert+0xa>

0800714c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800714c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800714e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007152:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007154:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007156:	6859      	ldr	r1, [r3, #4]
 8007158:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800715a:	bf08      	it	eq
 800715c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800715e:	2200      	movs	r2, #0
 8007160:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	3a01      	subs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007168:	6818      	ldr	r0, [r3, #0]
}
 800716a:	4770      	bx	lr
 800716c:	0000      	movs	r0, r0
	...

08007170 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <pxCurrentTCBConst2>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	f380 8809 	msr	PSP, r0
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	4770      	bx	lr
 800718c:	f3af 8000 	nop.w

08007190 <pxCurrentTCBConst2>:
 8007190:	200141cc 	.word	0x200141cc

08007194 <vPortEnterCritical>:
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	b672      	cpsid	i
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071a8:	4a0b      	ldr	r2, [pc, #44]	; (80071d8 <vPortEnterCritical+0x44>)
 80071aa:	6813      	ldr	r3, [r2, #0]
 80071ac:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80071b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80071b2:	d110      	bne.n	80071d6 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071b8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	b153      	cbz	r3, 80071d6 <vPortEnterCritical+0x42>
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	b672      	cpsid	i
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	b662      	cpsie	i
 80071d4:	e7fe      	b.n	80071d4 <vPortEnterCritical+0x40>
	}
}
 80071d6:	4770      	bx	lr
 80071d8:	20000038 	.word	0x20000038

080071dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80071dc:	4a09      	ldr	r2, [pc, #36]	; (8007204 <vPortExitCritical+0x28>)
 80071de:	6813      	ldr	r3, [r2, #0]
 80071e0:	b953      	cbnz	r3, 80071f8 <vPortExitCritical+0x1c>
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	b672      	cpsid	i
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	b662      	cpsie	i
 80071f6:	e7fe      	b.n	80071f6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80071f8:	3b01      	subs	r3, #1
 80071fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071fc:	b90b      	cbnz	r3, 8007202 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007202:	4770      	bx	lr
 8007204:	20000038 	.word	0x20000038
	...

08007210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	f01e 0f10 	tst.w	lr, #16
 8007220:	bf08      	it	eq
 8007222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007234:	b672      	cpsid	i
 8007236:	f380 8811 	msr	BASEPRI, r0
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	b662      	cpsie	i
 8007244:	f000 ff66 	bl	8008114 <vTaskSwitchContext>
 8007248:	f04f 0000 	mov.w	r0, #0
 800724c:	f380 8811 	msr	BASEPRI, r0
 8007250:	bc09      	pop	{r0, r3}
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	6808      	ldr	r0, [r1, #0]
 8007256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	f01e 0f10 	tst.w	lr, #16
 800725e:	bf08      	it	eq
 8007260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007264:	f380 8809 	msr	PSP, r0
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop

08007270 <pxCurrentTCBConst>:
 8007270:	200141cc 	.word	0x200141cc

08007274 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007274:	b508      	push	{r3, lr}
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	b672      	cpsid	i
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800728a:	f000 fe29 	bl	8007ee0 <xTaskIncrementTick>
 800728e:	b128      	cbz	r0, 800729c <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007290:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007298:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800729c:	2300      	movs	r3, #0
 800729e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80072a2:	bd08      	pop	{r3, pc}

080072a4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072a4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072a8:	2b0f      	cmp	r3, #15
 80072aa:	d910      	bls.n	80072ce <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ac:	4a13      	ldr	r2, [pc, #76]	; (80072fc <vPortValidateInterruptPriority+0x58>)
 80072ae:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072b0:	4a13      	ldr	r2, [pc, #76]	; (8007300 <vPortValidateInterruptPriority+0x5c>)
 80072b2:	7812      	ldrb	r2, [r2, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d90a      	bls.n	80072ce <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	b672      	cpsid	i
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	b662      	cpsie	i
 80072cc:	e7fe      	b.n	80072cc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072d2:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <vPortValidateInterruptPriority+0x60>)
 80072d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072de:	4293      	cmp	r3, r2
 80072e0:	d90a      	bls.n	80072f8 <vPortValidateInterruptPriority+0x54>
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	b672      	cpsid	i
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	b662      	cpsie	i
 80072f6:	e7fe      	b.n	80072f6 <vPortValidateInterruptPriority+0x52>
	}
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	e000e3f0 	.word	0xe000e3f0
 8007300:	20014184 	.word	0x20014184
 8007304:	20014188 	.word	0x20014188

08007308 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007308:	b510      	push	{r4, lr}
 800730a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800730c:	f7ff ff42 	bl	8007194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007310:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007312:	f7ff ff63 	bl	80071dc <vPortExitCritical>

	return xReturn;
}
 8007316:	fab4 f084 	clz	r0, r4
 800731a:	0940      	lsrs	r0, r0, #5
 800731c:	bd10      	pop	{r4, pc}

0800731e <prvCopyDataToQueue>:
{
 800731e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007320:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007322:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007324:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007326:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007328:	b952      	cbnz	r2, 8007340 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800732a:	6807      	ldr	r7, [r0, #0]
 800732c:	bb47      	cbnz	r7, 8007380 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800732e:	6880      	ldr	r0, [r0, #8]
 8007330:	f001 f844 	bl	80083bc <xTaskPriorityDisinherit>
 8007334:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007336:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007338:	3601      	adds	r6, #1
}
 800733a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800733c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800733e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007340:	b965      	cbnz	r5, 800735c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007342:	6840      	ldr	r0, [r0, #4]
 8007344:	f018 f959 	bl	801f5fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800734c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800734e:	68a2      	ldr	r2, [r4, #8]
 8007350:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007352:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007354:	d3f0      	bcc.n	8007338 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	6063      	str	r3, [r4, #4]
 800735a:	e7ed      	b.n	8007338 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800735c:	68c0      	ldr	r0, [r0, #12]
 800735e:	f018 f94c 	bl	801f5fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007362:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007364:	68e3      	ldr	r3, [r4, #12]
 8007366:	4251      	negs	r1, r2
 8007368:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800736e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007370:	bf3e      	ittt	cc
 8007372:	68a3      	ldrcc	r3, [r4, #8]
 8007374:	185b      	addcc	r3, r3, r1
 8007376:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007378:	2d02      	cmp	r5, #2
 800737a:	d101      	bne.n	8007380 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800737c:	b116      	cbz	r6, 8007384 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800737e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007380:	2500      	movs	r5, #0
 8007382:	e7d9      	b.n	8007338 <prvCopyDataToQueue+0x1a>
 8007384:	4635      	mov	r5, r6
 8007386:	e7d7      	b.n	8007338 <prvCopyDataToQueue+0x1a>

08007388 <prvCopyDataFromQueue>:
{
 8007388:	4603      	mov	r3, r0
 800738a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800738c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800738e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007390:	b162      	cbz	r2, 80073ac <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007392:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007394:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007396:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007398:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800739a:	60dc      	str	r4, [r3, #12]
}
 800739c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073a0:	bf24      	itt	cs
 80073a2:	6819      	ldrcs	r1, [r3, #0]
 80073a4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073a6:	68d9      	ldr	r1, [r3, #12]
 80073a8:	f018 b927 	b.w	801f5fa <memcpy>
}
 80073ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <prvUnlockQueue>:
{
 80073b2:	b570      	push	{r4, r5, r6, lr}
 80073b4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80073b6:	f7ff feed 	bl	8007194 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80073ba:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073be:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80073c2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	dc14      	bgt.n	80073f2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80073c8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ca:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80073ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80073d2:	f7ff ff03 	bl	80071dc <vPortExitCritical>
	taskENTER_CRITICAL();
 80073d6:	f7ff fedd 	bl	8007194 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80073da:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80073de:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	dc12      	bgt.n	800740a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80073e4:	23ff      	movs	r3, #255	; 0xff
 80073e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80073ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80073ee:	f7ff bef5 	b.w	80071dc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0e7      	beq.n	80073c8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 fef1 	bl	80081e0 <xTaskRemoveFromEventList>
 80073fe:	b108      	cbz	r0, 8007404 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007400:	f000 ff80 	bl	8008304 <vTaskMissedYield>
			--cTxLock;
 8007404:	3d01      	subs	r5, #1
 8007406:	b26d      	sxtb	r5, r5
 8007408:	e7dc      	b.n	80073c4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0e9      	beq.n	80073e4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007410:	4630      	mov	r0, r6
 8007412:	f000 fee5 	bl	80081e0 <xTaskRemoveFromEventList>
 8007416:	b108      	cbz	r0, 800741c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007418:	f000 ff74 	bl	8008304 <vTaskMissedYield>
				--cRxLock;
 800741c:	3d01      	subs	r5, #1
 800741e:	b26d      	sxtb	r5, r5
 8007420:	e7de      	b.n	80073e0 <prvUnlockQueue+0x2e>

08007422 <xQueueGenericReset>:
{
 8007422:	b538      	push	{r3, r4, r5, lr}
 8007424:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007426:	4604      	mov	r4, r0
 8007428:	b950      	cbnz	r0, 8007440 <xQueueGenericReset+0x1e>
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	b672      	cpsid	i
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	b662      	cpsie	i
 800743e:	e7fe      	b.n	800743e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007440:	f7ff fea8 	bl	8007194 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800744a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800744c:	434b      	muls	r3, r1
 800744e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007450:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007452:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007454:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007456:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007458:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800745a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800745c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800745e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007466:	b9a5      	cbnz	r5, 8007492 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	b173      	cbz	r3, 800748a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746c:	f104 0010 	add.w	r0, r4, #16
 8007470:	f000 feb6 	bl	80081e0 <xTaskRemoveFromEventList>
 8007474:	b148      	cbz	r0, 800748a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8007476:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800748a:	f7ff fea7 	bl	80071dc <vPortExitCritical>
}
 800748e:	2001      	movs	r0, #1
 8007490:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007492:	f104 0010 	add.w	r0, r4, #16
 8007496:	f7ff fe2b 	bl	80070f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800749a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800749e:	f7ff fe27 	bl	80070f0 <vListInitialise>
 80074a2:	e7f2      	b.n	800748a <xQueueGenericReset+0x68>

080074a4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 80074a4:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 80074a6:	461c      	mov	r4, r3
 80074a8:	b953      	cbnz	r3, 80074c0 <xQueueGenericCreateStatic.part.0+0x1c>
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	b672      	cpsid	i
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	b662      	cpsie	i
 80074be:	e7fe      	b.n	80074be <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074c0:	b15a      	cbz	r2, 80074da <xQueueGenericCreateStatic.part.0+0x36>
 80074c2:	b9b1      	cbnz	r1, 80074f2 <xQueueGenericCreateStatic.part.0+0x4e>
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	b672      	cpsid	i
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	b662      	cpsie	i
 80074d8:	e7fe      	b.n	80074d8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074da:	b151      	cbz	r1, 80074f2 <xQueueGenericCreateStatic.part.0+0x4e>
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	b672      	cpsid	i
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	b662      	cpsie	i
 80074f0:	e7fe      	b.n	80074f0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074f2:	2350      	movs	r3, #80	; 0x50
 80074f4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074f6:	9b01      	ldr	r3, [sp, #4]
 80074f8:	2b50      	cmp	r3, #80	; 0x50
 80074fa:	d00a      	beq.n	8007512 <xQueueGenericCreateStatic.part.0+0x6e>
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	b672      	cpsid	i
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	b662      	cpsie	i
 8007510:	e7fe      	b.n	8007510 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007512:	2900      	cmp	r1, #0
 8007514:	bf08      	it	eq
 8007516:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007518:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800751a:	2301      	movs	r3, #1
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007522:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007526:	4619      	mov	r1, r3
 8007528:	4620      	mov	r0, r4
 800752a:	f7ff ff7a 	bl	8007422 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800752e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8007532:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007534:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007538:	b002      	add	sp, #8
 800753a:	bd10      	pop	{r4, pc}

0800753c <xQueueGenericCreateStatic>:
	{
 800753c:	b410      	push	{r4}
 800753e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007542:	b950      	cbnz	r0, 800755a <xQueueGenericCreateStatic+0x1e>
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	b672      	cpsid	i
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	b662      	cpsie	i
 8007558:	e7fe      	b.n	8007558 <xQueueGenericCreateStatic+0x1c>
 800755a:	9401      	str	r4, [sp, #4]
	}
 800755c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007560:	f7ff bfa0 	b.w	80074a4 <xQueueGenericCreateStatic.part.0>

08007564 <xQueueGenericCreate>:
	{
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	460d      	mov	r5, r1
 8007568:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800756a:	4606      	mov	r6, r0
 800756c:	b950      	cbnz	r0, 8007584 <xQueueGenericCreate+0x20>
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	b672      	cpsid	i
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	b662      	cpsie	i
 8007582:	e7fe      	b.n	8007582 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007584:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007586:	3050      	adds	r0, #80	; 0x50
 8007588:	f7ff fce0 	bl	8006f4c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800758c:	4604      	mov	r4, r0
 800758e:	b170      	cbz	r0, 80075ae <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007596:	b165      	cbz	r5, 80075b2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007598:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800759c:	2101      	movs	r1, #1
 800759e:	4620      	mov	r0, r4
 80075a0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80075a2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075a6:	f7ff ff3c 	bl	8007422 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80075aa:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80075ae:	4620      	mov	r0, r4
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b2:	4603      	mov	r3, r0
 80075b4:	e7f2      	b.n	800759c <xQueueGenericCreate+0x38>

080075b6 <xQueueCreateCountingSemaphoreStatic>:
	{
 80075b6:	b513      	push	{r0, r1, r4, lr}
 80075b8:	4613      	mov	r3, r2
 80075ba:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80075bc:	b950      	cbnz	r0, 80075d4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	b672      	cpsid	i
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	b662      	cpsie	i
 80075d2:	e7fe      	b.n	80075d2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075d4:	4288      	cmp	r0, r1
 80075d6:	d20a      	bcs.n	80075ee <xQueueCreateCountingSemaphoreStatic+0x38>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	b672      	cpsid	i
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	b662      	cpsie	i
 80075ec:	e7fe      	b.n	80075ec <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075ee:	2202      	movs	r2, #2
 80075f0:	9200      	str	r2, [sp, #0]
 80075f2:	2200      	movs	r2, #0
 80075f4:	4611      	mov	r1, r2
 80075f6:	f7ff ffa1 	bl	800753c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80075fa:	b100      	cbz	r0, 80075fe <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075fc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80075fe:	b002      	add	sp, #8
 8007600:	bd10      	pop	{r4, pc}

08007602 <xQueueCreateCountingSemaphore>:
	{
 8007602:	b510      	push	{r4, lr}
 8007604:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007606:	b950      	cbnz	r0, 800761e <xQueueCreateCountingSemaphore+0x1c>
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	b672      	cpsid	i
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	b662      	cpsie	i
 800761c:	e7fe      	b.n	800761c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800761e:	4288      	cmp	r0, r1
 8007620:	d20a      	bcs.n	8007638 <xQueueCreateCountingSemaphore+0x36>
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	b672      	cpsid	i
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	b662      	cpsie	i
 8007636:	e7fe      	b.n	8007636 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007638:	2202      	movs	r2, #2
 800763a:	2100      	movs	r1, #0
 800763c:	f7ff ff92 	bl	8007564 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007640:	b100      	cbz	r0, 8007644 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007642:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007644:	bd10      	pop	{r4, pc}

08007646 <xQueueGenericSend>:
{
 8007646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800764a:	b085      	sub	sp, #20
 800764c:	4688      	mov	r8, r1
 800764e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007650:	4604      	mov	r4, r0
{
 8007652:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007654:	b950      	cbnz	r0, 800766c <xQueueGenericSend+0x26>
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	b672      	cpsid	i
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	b662      	cpsie	i
 800766a:	e7fe      	b.n	800766a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800766c:	b961      	cbnz	r1, 8007688 <xQueueGenericSend+0x42>
 800766e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007670:	b153      	cbz	r3, 8007688 <xQueueGenericSend+0x42>
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	b672      	cpsid	i
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	b662      	cpsie	i
 8007686:	e7fe      	b.n	8007686 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007688:	2f02      	cmp	r7, #2
 800768a:	d10d      	bne.n	80076a8 <xQueueGenericSend+0x62>
 800768c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d00a      	beq.n	80076a8 <xQueueGenericSend+0x62>
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	b672      	cpsid	i
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	b662      	cpsie	i
 80076a6:	e7fe      	b.n	80076a6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076a8:	f000 fe38 	bl	800831c <xTaskGetSchedulerState>
 80076ac:	4606      	mov	r6, r0
 80076ae:	b960      	cbnz	r0, 80076ca <xQueueGenericSend+0x84>
 80076b0:	9b01      	ldr	r3, [sp, #4]
 80076b2:	b15b      	cbz	r3, 80076cc <xQueueGenericSend+0x86>
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	b672      	cpsid	i
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	b662      	cpsie	i
 80076c8:	e7fe      	b.n	80076c8 <xQueueGenericSend+0x82>
 80076ca:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80076cc:	f04f 0900 	mov.w	r9, #0
 80076d0:	e037      	b.n	8007742 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80076d2:	9d01      	ldr	r5, [sp, #4]
 80076d4:	b91d      	cbnz	r5, 80076de <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80076d6:	f7ff fd81 	bl	80071dc <vPortExitCritical>
			return errQUEUE_FULL;
 80076da:	2000      	movs	r0, #0
 80076dc:	e052      	b.n	8007784 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80076de:	b916      	cbnz	r6, 80076e6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076e0:	a802      	add	r0, sp, #8
 80076e2:	f000 fdc3 	bl	800826c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80076e6:	f7ff fd79 	bl	80071dc <vPortExitCritical>
		vTaskSuspendAll();
 80076ea:	f000 fbf1 	bl	8007ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ee:	f7ff fd51 	bl	8007194 <vPortEnterCritical>
 80076f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076f6:	2bff      	cmp	r3, #255	; 0xff
 80076f8:	d101      	bne.n	80076fe <xQueueGenericSend+0xb8>
 80076fa:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80076fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007702:	2bff      	cmp	r3, #255	; 0xff
 8007704:	d101      	bne.n	800770a <xQueueGenericSend+0xc4>
 8007706:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800770a:	f7ff fd67 	bl	80071dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800770e:	a901      	add	r1, sp, #4
 8007710:	a802      	add	r0, sp, #8
 8007712:	f000 fdb7 	bl	8008284 <xTaskCheckForTimeOut>
 8007716:	2800      	cmp	r0, #0
 8007718:	d14a      	bne.n	80077b0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800771a:	f7ff fd3b 	bl	8007194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800771e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007722:	429a      	cmp	r2, r3
 8007724:	d131      	bne.n	800778a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007726:	f7ff fd59 	bl	80071dc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800772a:	9901      	ldr	r1, [sp, #4]
 800772c:	f104 0010 	add.w	r0, r4, #16
 8007730:	f000 fd3a 	bl	80081a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007734:	4620      	mov	r0, r4
 8007736:	f7ff fe3c 	bl	80073b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800773a:	f000 fc69 	bl	8008010 <xTaskResumeAll>
 800773e:	b360      	cbz	r0, 800779a <xQueueGenericSend+0x154>
 8007740:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007742:	f7ff fd27 	bl	8007194 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007746:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007748:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800774a:	429a      	cmp	r2, r3
 800774c:	d301      	bcc.n	8007752 <xQueueGenericSend+0x10c>
 800774e:	2f02      	cmp	r7, #2
 8007750:	d1bf      	bne.n	80076d2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007752:	463a      	mov	r2, r7
 8007754:	4641      	mov	r1, r8
 8007756:	4620      	mov	r0, r4
 8007758:	f7ff fde1 	bl	800731e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800775c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800775e:	b11b      	cbz	r3, 8007768 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007760:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007764:	f000 fd3c 	bl	80081e0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007768:	b148      	cbz	r0, 800777e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800776a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007772:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800777e:	f7ff fd2d 	bl	80071dc <vPortExitCritical>
				return pdPASS;
 8007782:	2001      	movs	r0, #1
}
 8007784:	b005      	add	sp, #20
 8007786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800778a:	f7ff fd27 	bl	80071dc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800778e:	4620      	mov	r0, r4
 8007790:	f7ff fe0f 	bl	80073b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007794:	f000 fc3c 	bl	8008010 <xTaskResumeAll>
 8007798:	e7d2      	b.n	8007740 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800779a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	e7c7      	b.n	8007740 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80077b0:	4620      	mov	r0, r4
 80077b2:	f7ff fdfe 	bl	80073b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077b6:	f000 fc2b 	bl	8008010 <xTaskResumeAll>
 80077ba:	e78e      	b.n	80076da <xQueueGenericSend+0x94>

080077bc <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80077bc:	2200      	movs	r2, #0
	{
 80077be:	460b      	mov	r3, r1
 80077c0:	b513      	push	{r0, r1, r4, lr}
 80077c2:	4611      	mov	r1, r2
 80077c4:	9000      	str	r0, [sp, #0]
 80077c6:	2001      	movs	r0, #1
 80077c8:	f7ff fe6c 	bl	80074a4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 80077cc:	4604      	mov	r4, r0
 80077ce:	b138      	cbz	r0, 80077e0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077d0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077d2:	461a      	mov	r2, r3
 80077d4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077d6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80077d8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80077da:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077dc:	f7ff ff33 	bl	8007646 <xQueueGenericSend>
	}
 80077e0:	4620      	mov	r0, r4
 80077e2:	b002      	add	sp, #8
 80077e4:	bd10      	pop	{r4, pc}

080077e6 <xQueueGiveMutexRecursive>:
	{
 80077e6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80077e8:	4604      	mov	r4, r0
 80077ea:	b950      	cbnz	r0, 8007802 <xQueueGiveMutexRecursive+0x1c>
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	b672      	cpsid	i
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	b662      	cpsie	i
 8007800:	e7fe      	b.n	8007800 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007802:	6885      	ldr	r5, [r0, #8]
 8007804:	f000 fd84 	bl	8008310 <xTaskGetCurrentTaskHandle>
 8007808:	4285      	cmp	r5, r0
 800780a:	d10a      	bne.n	8007822 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800780c:	68e3      	ldr	r3, [r4, #12]
 800780e:	3b01      	subs	r3, #1
 8007810:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007812:	b923      	cbnz	r3, 800781e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007814:	461a      	mov	r2, r3
 8007816:	4619      	mov	r1, r3
 8007818:	4620      	mov	r0, r4
 800781a:	f7ff ff14 	bl	8007646 <xQueueGenericSend>
			xReturn = pdPASS;
 800781e:	2001      	movs	r0, #1
		return xReturn;
 8007820:	e000      	b.n	8007824 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8007822:	2000      	movs	r0, #0
	}
 8007824:	bd38      	pop	{r3, r4, r5, pc}

08007826 <xQueueCreateMutex>:
	{
 8007826:	b570      	push	{r4, r5, r6, lr}
 8007828:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800782a:	2050      	movs	r0, #80	; 0x50
 800782c:	f7ff fb8e 	bl	8006f4c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007830:	4604      	mov	r4, r0
 8007832:	b198      	cbz	r0, 800785c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007834:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8007836:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007838:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800783a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800783e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007842:	f7ff fdee 	bl	8007422 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007846:	462b      	mov	r3, r5
 8007848:	462a      	mov	r2, r5
 800784a:	4629      	mov	r1, r5
 800784c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800784e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007852:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007854:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007856:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007858:	f7ff fef5 	bl	8007646 <xQueueGenericSend>
	}
 800785c:	4620      	mov	r0, r4
 800785e:	bd70      	pop	{r4, r5, r6, pc}

08007860 <xQueueGenericSendFromISR>:
{
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	4689      	mov	r9, r1
 8007866:	4690      	mov	r8, r2
 8007868:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800786a:	4604      	mov	r4, r0
 800786c:	b950      	cbnz	r0, 8007884 <xQueueGenericSendFromISR+0x24>
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	b672      	cpsid	i
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	b662      	cpsie	i
 8007882:	e7fe      	b.n	8007882 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007884:	b961      	cbnz	r1, 80078a0 <xQueueGenericSendFromISR+0x40>
 8007886:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007888:	b153      	cbz	r3, 80078a0 <xQueueGenericSendFromISR+0x40>
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	b672      	cpsid	i
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	b662      	cpsie	i
 800789e:	e7fe      	b.n	800789e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078a0:	2f02      	cmp	r7, #2
 80078a2:	d10d      	bne.n	80078c0 <xQueueGenericSendFromISR+0x60>
 80078a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d00a      	beq.n	80078c0 <xQueueGenericSendFromISR+0x60>
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	b672      	cpsid	i
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	b662      	cpsie	i
 80078be:	e7fe      	b.n	80078be <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078c0:	f7ff fcf0 	bl	80072a4 <vPortValidateInterruptPriority>
	__asm volatile
 80078c4:	f3ef 8611 	mrs	r6, BASEPRI
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	b672      	cpsid	i
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80078de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d301      	bcc.n	80078e8 <xQueueGenericSendFromISR+0x88>
 80078e4:	2f02      	cmp	r7, #2
 80078e6:	d122      	bne.n	800792e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80078e8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ec:	463a      	mov	r2, r7
 80078ee:	4649      	mov	r1, r9
 80078f0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80078f2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f4:	f7ff fd13 	bl	800731e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80078f8:	1c6b      	adds	r3, r5, #1
 80078fa:	d113      	bne.n	8007924 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078fe:	b90b      	cbnz	r3, 8007904 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8007900:	2001      	movs	r0, #1
 8007902:	e00b      	b.n	800791c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007904:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007908:	f000 fc6a 	bl	80081e0 <xTaskRemoveFromEventList>
 800790c:	2800      	cmp	r0, #0
 800790e:	d0f7      	beq.n	8007900 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8007910:	f1b8 0f00 	cmp.w	r8, #0
 8007914:	d0f4      	beq.n	8007900 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007916:	2001      	movs	r0, #1
 8007918:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800791c:	f386 8811 	msr	BASEPRI, r6
}
 8007920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007924:	3501      	adds	r5, #1
 8007926:	b26d      	sxtb	r5, r5
 8007928:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800792c:	e7e8      	b.n	8007900 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800792e:	2000      	movs	r0, #0
 8007930:	e7f4      	b.n	800791c <xQueueGenericSendFromISR+0xbc>

08007932 <xQueueGiveFromISR>:
{
 8007932:	b570      	push	{r4, r5, r6, lr}
 8007934:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007936:	4604      	mov	r4, r0
 8007938:	b950      	cbnz	r0, 8007950 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	b672      	cpsid	i
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	b662      	cpsie	i
 800794e:	e7fe      	b.n	800794e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007950:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007952:	b153      	cbz	r3, 800796a <xQueueGiveFromISR+0x38>
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	b672      	cpsid	i
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	b662      	cpsie	i
 8007968:	e7fe      	b.n	8007968 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800796a:	6803      	ldr	r3, [r0, #0]
 800796c:	b963      	cbnz	r3, 8007988 <xQueueGiveFromISR+0x56>
 800796e:	6883      	ldr	r3, [r0, #8]
 8007970:	b153      	cbz	r3, 8007988 <xQueueGiveFromISR+0x56>
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	b672      	cpsid	i
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	b662      	cpsie	i
 8007986:	e7fe      	b.n	8007986 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007988:	f7ff fc8c 	bl	80072a4 <vPortValidateInterruptPriority>
	__asm volatile
 800798c:	f3ef 8611 	mrs	r6, BASEPRI
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	b672      	cpsid	i
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80079a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d91c      	bls.n	80079e6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80079ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079b0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80079b2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80079b4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079b6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80079b8:	d110      	bne.n	80079dc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079bc:	b90b      	cbnz	r3, 80079c2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80079be:	2001      	movs	r0, #1
 80079c0:	e009      	b.n	80079d6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079c6:	f000 fc0b 	bl	80081e0 <xTaskRemoveFromEventList>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d0f7      	beq.n	80079be <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80079ce:	2d00      	cmp	r5, #0
 80079d0:	d0f5      	beq.n	80079be <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079d2:	2001      	movs	r0, #1
 80079d4:	6028      	str	r0, [r5, #0]
	__asm volatile
 80079d6:	f386 8811 	msr	BASEPRI, r6
}
 80079da:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079dc:	3301      	adds	r3, #1
 80079de:	b25b      	sxtb	r3, r3
 80079e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079e4:	e7eb      	b.n	80079be <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80079e6:	2000      	movs	r0, #0
 80079e8:	e7f5      	b.n	80079d6 <xQueueGiveFromISR+0xa4>

080079ea <xQueueReceive>:
{
 80079ea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80079ee:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80079f0:	4604      	mov	r4, r0
{
 80079f2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80079f4:	b950      	cbnz	r0, 8007a0c <xQueueReceive+0x22>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	b672      	cpsid	i
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	b662      	cpsie	i
 8007a0a:	e7fe      	b.n	8007a0a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a0c:	b961      	cbnz	r1, 8007a28 <xQueueReceive+0x3e>
 8007a0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a10:	b153      	cbz	r3, 8007a28 <xQueueReceive+0x3e>
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	b672      	cpsid	i
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	b662      	cpsie	i
 8007a26:	e7fe      	b.n	8007a26 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a28:	f000 fc78 	bl	800831c <xTaskGetSchedulerState>
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	b960      	cbnz	r0, 8007a4a <xQueueReceive+0x60>
 8007a30:	9b01      	ldr	r3, [sp, #4]
 8007a32:	b15b      	cbz	r3, 8007a4c <xQueueReceive+0x62>
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	b672      	cpsid	i
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	b662      	cpsie	i
 8007a48:	e7fe      	b.n	8007a48 <xQueueReceive+0x5e>
 8007a4a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007a4c:	f04f 0800 	mov.w	r8, #0
 8007a50:	e03d      	b.n	8007ace <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a52:	9d01      	ldr	r5, [sp, #4]
 8007a54:	b91d      	cbnz	r5, 8007a5e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8007a56:	f7ff fbc1 	bl	80071dc <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e056      	b.n	8007b0c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8007a5e:	b916      	cbnz	r6, 8007a66 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a60:	a802      	add	r0, sp, #8
 8007a62:	f000 fc03 	bl	800826c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007a66:	f7ff fbb9 	bl	80071dc <vPortExitCritical>
		vTaskSuspendAll();
 8007a6a:	f000 fa31 	bl	8007ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a6e:	f7ff fb91 	bl	8007194 <vPortEnterCritical>
 8007a72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a76:	2bff      	cmp	r3, #255	; 0xff
 8007a78:	d101      	bne.n	8007a7e <xQueueReceive+0x94>
 8007a7a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007a7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a82:	2bff      	cmp	r3, #255	; 0xff
 8007a84:	d101      	bne.n	8007a8a <xQueueReceive+0xa0>
 8007a86:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8007a8a:	f7ff fba7 	bl	80071dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a8e:	a901      	add	r1, sp, #4
 8007a90:	a802      	add	r0, sp, #8
 8007a92:	f000 fbf7 	bl	8008284 <xTaskCheckForTimeOut>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d141      	bne.n	8007b1e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7ff fc34 	bl	8007308 <prvIsQueueEmpty>
 8007aa0:	b3b8      	cbz	r0, 8007b12 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007aa2:	9901      	ldr	r1, [sp, #4]
 8007aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007aa8:	f000 fb7e 	bl	80081a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007aac:	4620      	mov	r0, r4
 8007aae:	f7ff fc80 	bl	80073b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ab2:	f000 faad 	bl	8008010 <xTaskResumeAll>
 8007ab6:	b948      	cbnz	r0, 8007acc <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8007ab8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007ace:	f7ff fb61 	bl	8007194 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	d0bc      	beq.n	8007a52 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ad8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ada:	4639      	mov	r1, r7
 8007adc:	4620      	mov	r0, r4
 8007ade:	f7ff fc53 	bl	8007388 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ae2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b173      	cbz	r3, 8007b06 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae8:	f104 0010 	add.w	r0, r4, #16
 8007aec:	f000 fb78 	bl	80081e0 <xTaskRemoveFromEventList>
 8007af0:	b148      	cbz	r0, 8007b06 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8007af2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007b06:	f7ff fb69 	bl	80071dc <vPortExitCritical>
				return pdPASS;
 8007b0a:	2001      	movs	r0, #1
}
 8007b0c:	b004      	add	sp, #16
 8007b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff fc4d 	bl	80073b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b18:	f000 fa7a 	bl	8008010 <xTaskResumeAll>
 8007b1c:	e7d6      	b.n	8007acc <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff fc47 	bl	80073b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b24:	f000 fa74 	bl	8008010 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff fbed 	bl	8007308 <prvIsQueueEmpty>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0cc      	beq.n	8007acc <xQueueReceive+0xe2>
 8007b32:	e792      	b.n	8007a5a <xQueueReceive+0x70>

08007b34 <xQueueSemaphoreTake>:
{
 8007b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b36:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007b38:	4604      	mov	r4, r0
{
 8007b3a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007b3c:	b950      	cbnz	r0, 8007b54 <xQueueSemaphoreTake+0x20>
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	b672      	cpsid	i
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	b662      	cpsie	i
 8007b52:	e7fe      	b.n	8007b52 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b54:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007b56:	b155      	cbz	r5, 8007b6e <xQueueSemaphoreTake+0x3a>
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	b672      	cpsid	i
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	b662      	cpsie	i
 8007b6c:	e7fe      	b.n	8007b6c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b6e:	f000 fbd5 	bl	800831c <xTaskGetSchedulerState>
 8007b72:	4606      	mov	r6, r0
 8007b74:	b960      	cbnz	r0, 8007b90 <xQueueSemaphoreTake+0x5c>
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	b16b      	cbz	r3, 8007b96 <xQueueSemaphoreTake+0x62>
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	b672      	cpsid	i
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	b662      	cpsie	i
 8007b8e:	e7fe      	b.n	8007b8e <xQueueSemaphoreTake+0x5a>
 8007b90:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007b92:	2700      	movs	r7, #0
 8007b94:	e055      	b.n	8007c42 <xQueueSemaphoreTake+0x10e>
 8007b96:	4605      	mov	r5, r0
 8007b98:	e7fb      	b.n	8007b92 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	b973      	cbnz	r3, 8007bbc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b9e:	b155      	cbz	r5, 8007bb6 <xQueueSemaphoreTake+0x82>
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	b672      	cpsid	i
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	b662      	cpsie	i
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8007bb6:	f7ff fb11 	bl	80071dc <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007bba:	e062      	b.n	8007c82 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 8007bbc:	b916      	cbnz	r6, 8007bc4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bbe:	a802      	add	r0, sp, #8
 8007bc0:	f000 fb54 	bl	800826c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007bc4:	f7ff fb0a 	bl	80071dc <vPortExitCritical>
		vTaskSuspendAll();
 8007bc8:	f000 f982 	bl	8007ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bcc:	f7ff fae2 	bl	8007194 <vPortEnterCritical>
 8007bd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007bd4:	2bff      	cmp	r3, #255	; 0xff
 8007bd6:	d101      	bne.n	8007bdc <xQueueSemaphoreTake+0xa8>
 8007bd8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8007bdc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007be0:	2bff      	cmp	r3, #255	; 0xff
 8007be2:	d101      	bne.n	8007be8 <xQueueSemaphoreTake+0xb4>
 8007be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007be8:	f7ff faf8 	bl	80071dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bec:	a901      	add	r1, sp, #4
 8007bee:	a802      	add	r0, sp, #8
 8007bf0:	f000 fb48 	bl	8008284 <xTaskCheckForTimeOut>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d14d      	bne.n	8007c94 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f7ff fb85 	bl	8007308 <prvIsQueueEmpty>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d042      	beq.n	8007c88 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	b93b      	cbnz	r3, 8007c16 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8007c06:	f7ff fac5 	bl	8007194 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c0a:	68a0      	ldr	r0, [r4, #8]
 8007c0c:	f000 fb96 	bl	800833c <xTaskPriorityInherit>
 8007c10:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007c12:	f7ff fae3 	bl	80071dc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c16:	9901      	ldr	r1, [sp, #4]
 8007c18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c1c:	f000 fac4 	bl	80081a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff fbc6 	bl	80073b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c26:	f000 f9f3 	bl	8008010 <xTaskResumeAll>
 8007c2a:	b948      	cbnz	r0, 8007c40 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8007c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007c42:	f7ff faa7 	bl	8007194 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0a6      	beq.n	8007b9a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	b913      	cbnz	r3, 8007c5a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c54:	f000 fc50 	bl	80084f8 <pvTaskIncrementMutexHeldCount>
 8007c58:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	b173      	cbz	r3, 8007c7c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c5e:	f104 0010 	add.w	r0, r4, #16
 8007c62:	f000 fabd 	bl	80081e0 <xTaskRemoveFromEventList>
 8007c66:	b148      	cbz	r0, 8007c7c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8007c68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8007c7c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8007c7e:	f7ff faad 	bl	80071dc <vPortExitCritical>
}
 8007c82:	4628      	mov	r0, r5
 8007c84:	b005      	add	sp, #20
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f7ff fb92 	bl	80073b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c8e:	f000 f9bf 	bl	8008010 <xTaskResumeAll>
 8007c92:	e7d5      	b.n	8007c40 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7ff fb8c 	bl	80073b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c9a:	f000 f9b9 	bl	8008010 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff fb32 	bl	8007308 <prvIsQueueEmpty>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d0cb      	beq.n	8007c40 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	d0ea      	beq.n	8007c82 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 8007cac:	f7ff fa72 	bl	8007194 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cb2:	b119      	cbz	r1, 8007cbc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007cb6:	6819      	ldr	r1, [r3, #0]
 8007cb8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cbc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8007cbe:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cc0:	f000 fbc4 	bl	800844c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007cc4:	f7ff fa8a 	bl	80071dc <vPortExitCritical>
 8007cc8:	e7db      	b.n	8007c82 <xQueueSemaphoreTake+0x14e>

08007cca <xQueueTakeMutexRecursive>:
	{
 8007cca:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8007ccc:	4604      	mov	r4, r0
 8007cce:	b950      	cbnz	r0, 8007ce6 <xQueueTakeMutexRecursive+0x1c>
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	b672      	cpsid	i
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	b662      	cpsie	i
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007ce6:	6885      	ldr	r5, [r0, #8]
 8007ce8:	9101      	str	r1, [sp, #4]
 8007cea:	f000 fb11 	bl	8008310 <xTaskGetCurrentTaskHandle>
 8007cee:	4285      	cmp	r5, r0
 8007cf0:	9901      	ldr	r1, [sp, #4]
 8007cf2:	d105      	bne.n	8007d00 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007cf4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8007cf6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	60e3      	str	r3, [r4, #12]
	}
 8007cfc:	b003      	add	sp, #12
 8007cfe:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff ff17 	bl	8007b34 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d0f8      	beq.n	8007cfc <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8007d10:	e7f4      	b.n	8007cfc <xQueueTakeMutexRecursive+0x32>

08007d12 <xQueueReceiveFromISR>:
{
 8007d12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d16:	4689      	mov	r9, r1
 8007d18:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	b950      	cbnz	r0, 8007d34 <xQueueReceiveFromISR+0x22>
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	b672      	cpsid	i
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	b662      	cpsie	i
 8007d32:	e7fe      	b.n	8007d32 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d34:	b961      	cbnz	r1, 8007d50 <xQueueReceiveFromISR+0x3e>
 8007d36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007d38:	b153      	cbz	r3, 8007d50 <xQueueReceiveFromISR+0x3e>
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	b672      	cpsid	i
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	b662      	cpsie	i
 8007d4e:	e7fe      	b.n	8007d4e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d50:	f7ff faa8 	bl	80072a4 <vPortValidateInterruptPriority>
	__asm volatile
 8007d54:	f3ef 8711 	mrs	r7, BASEPRI
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	b672      	cpsid	i
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d6c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d6e:	b31c      	cbz	r4, 8007db8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d70:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d74:	4649      	mov	r1, r9
 8007d76:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d78:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d7a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d7c:	f7ff fb04 	bl	8007388 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d80:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007d82:	1c73      	adds	r3, r6, #1
 8007d84:	d113      	bne.n	8007dae <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d86:	692b      	ldr	r3, [r5, #16]
 8007d88:	b90b      	cbnz	r3, 8007d8e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8007d8a:	2001      	movs	r0, #1
 8007d8c:	e00b      	b.n	8007da6 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d8e:	f105 0010 	add.w	r0, r5, #16
 8007d92:	f000 fa25 	bl	80081e0 <xTaskRemoveFromEventList>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0f7      	beq.n	8007d8a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8007d9a:	f1b8 0f00 	cmp.w	r8, #0
 8007d9e:	d0f4      	beq.n	8007d8a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007da0:	2001      	movs	r0, #1
 8007da2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007da6:	f387 8811 	msr	BASEPRI, r7
}
 8007daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dae:	3601      	adds	r6, #1
 8007db0:	b276      	sxtb	r6, r6
 8007db2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8007db6:	e7e8      	b.n	8007d8a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8007db8:	4620      	mov	r0, r4
 8007dba:	e7f4      	b.n	8007da6 <xQueueReceiveFromISR+0x94>

08007dbc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dbc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dbe:	4a07      	ldr	r2, [pc, #28]	; (8007ddc <vQueueAddToRegistry+0x20>)
	{
 8007dc0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dc2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8007dc6:	b92c      	cbnz	r4, 8007dd4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007dc8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007dcc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007dd0:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007dd2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d1f3      	bne.n	8007dc2 <vQueueAddToRegistry+0x6>
 8007dda:	e7fa      	b.n	8007dd2 <vQueueAddToRegistry+0x16>
 8007ddc:	2001418c 	.word	0x2001418c

08007de0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007de2:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <vQueueUnregisterQueue+0x24>)
	{
 8007de4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007de6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007dea:	684c      	ldr	r4, [r1, #4]
 8007dec:	4284      	cmp	r4, r0
 8007dee:	d104      	bne.n	8007dfa <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007df0:	2000      	movs	r0, #0
 8007df2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007df6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007df8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d1f2      	bne.n	8007de6 <vQueueUnregisterQueue+0x6>
 8007e00:	e7fa      	b.n	8007df8 <vQueueUnregisterQueue+0x18>
 8007e02:	bf00      	nop
 8007e04:	2001418c 	.word	0x2001418c

08007e08 <vQueueDelete>:
{
 8007e08:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	b950      	cbnz	r0, 8007e24 <vQueueDelete+0x1c>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	b672      	cpsid	i
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	b662      	cpsie	i
 8007e22:	e7fe      	b.n	8007e22 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8007e24:	f7ff ffdc 	bl	8007de0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007e2c:	b923      	cbnz	r3, 8007e38 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8007e2e:	4620      	mov	r0, r4
}
 8007e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007e34:	f7ff b920 	b.w	8007078 <vPortFree>
}
 8007e38:	bd10      	pop	{r4, pc}
	...

08007e3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e3e:	4b15      	ldr	r3, [pc, #84]	; (8007e94 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8007e40:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e42:	4d15      	ldr	r5, [pc, #84]	; (8007e98 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8007e44:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007e46:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e48:	6828      	ldr	r0, [r5, #0]
 8007e4a:	3004      	adds	r0, #4
 8007e4c:	f7ff f97e 	bl	800714c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e50:	1c73      	adds	r3, r6, #1
 8007e52:	d107      	bne.n	8007e64 <prvAddCurrentTaskToDelayedList+0x28>
 8007e54:	b137      	cbz	r7, 8007e64 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e56:	6829      	ldr	r1, [r5, #0]
 8007e58:	4810      	ldr	r0, [pc, #64]	; (8007e9c <prvAddCurrentTaskToDelayedList+0x60>)
 8007e5a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e60:	f7ff b951 	b.w	8007106 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e64:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e6a:	d307      	bcc.n	8007e7c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <prvAddCurrentTaskToDelayedList+0x64>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	6829      	ldr	r1, [r5, #0]
}
 8007e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e76:	3104      	adds	r1, #4
 8007e78:	f7ff b951 	b.w	800711e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <prvAddCurrentTaskToDelayedList+0x68>)
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	6829      	ldr	r1, [r5, #0]
 8007e82:	3104      	adds	r1, #4
 8007e84:	f7ff f94b 	bl	800711e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e88:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	42a2      	cmp	r2, r4
 8007e8e:	d900      	bls.n	8007e92 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8007e90:	601c      	str	r4, [r3, #0]
}
 8007e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e94:	2001467c 	.word	0x2001467c
 8007e98:	200141cc 	.word	0x200141cc
 8007e9c:	20014668 	.word	0x20014668
 8007ea0:	200141d4 	.word	0x200141d4
 8007ea4:	200141d0 	.word	0x200141d0
 8007ea8:	20014648 	.word	0x20014648

08007eac <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eac:	4a06      	ldr	r2, [pc, #24]	; (8007ec8 <prvResetNextTaskUnblockTime+0x1c>)
 8007eae:	6813      	ldr	r3, [r2, #0]
 8007eb0:	6819      	ldr	r1, [r3, #0]
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvResetNextTaskUnblockTime+0x20>)
 8007eb4:	b919      	cbnz	r1, 8007ebe <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007eb6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eba:	601a      	str	r2, [r3, #0]
}
 8007ebc:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ec2:	68d2      	ldr	r2, [r2, #12]
 8007ec4:	6852      	ldr	r2, [r2, #4]
 8007ec6:	e7f8      	b.n	8007eba <prvResetNextTaskUnblockTime+0xe>
 8007ec8:	200141d0 	.word	0x200141d0
 8007ecc:	20014648 	.word	0x20014648

08007ed0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007ed0:	4a02      	ldr	r2, [pc, #8]	; (8007edc <vTaskSuspendAll+0xc>)
 8007ed2:	6813      	ldr	r3, [r2, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	20014640 	.word	0x20014640

08007ee0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee0:	4b40      	ldr	r3, [pc, #256]	; (8007fe4 <xTaskIncrementTick+0x104>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
{
 8007ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d174      	bne.n	8007fd6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007eec:	4b3e      	ldr	r3, [pc, #248]	; (8007fe8 <xTaskIncrementTick+0x108>)
 8007eee:	681d      	ldr	r5, [r3, #0]
 8007ef0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007ef2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ef4:	b9cd      	cbnz	r5, 8007f2a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007ef6:	4b3d      	ldr	r3, [pc, #244]	; (8007fec <xTaskIncrementTick+0x10c>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	b152      	cbz	r2, 8007f14 <xTaskIncrementTick+0x34>
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	b672      	cpsid	i
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	b662      	cpsie	i
 8007f12:	e7fe      	b.n	8007f12 <xTaskIncrementTick+0x32>
 8007f14:	4a36      	ldr	r2, [pc, #216]	; (8007ff0 <xTaskIncrementTick+0x110>)
 8007f16:	6819      	ldr	r1, [r3, #0]
 8007f18:	6810      	ldr	r0, [r2, #0]
 8007f1a:	6018      	str	r0, [r3, #0]
 8007f1c:	6011      	str	r1, [r2, #0]
 8007f1e:	4a35      	ldr	r2, [pc, #212]	; (8007ff4 <xTaskIncrementTick+0x114>)
 8007f20:	6813      	ldr	r3, [r2, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	f7ff ffc1 	bl	8007eac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f2a:	4e33      	ldr	r6, [pc, #204]	; (8007ff8 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8007f2c:	2400      	movs	r4, #0
 8007f2e:	4f33      	ldr	r7, [pc, #204]	; (8007ffc <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f30:	6833      	ldr	r3, [r6, #0]
 8007f32:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008008 <xTaskIncrementTick+0x128>
 8007f36:	42ab      	cmp	r3, r5
 8007f38:	d911      	bls.n	8007f5e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3e:	2214      	movs	r2, #20
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	4353      	muls	r3, r2
 8007f44:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	bf28      	it	cs
 8007f4a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8007f4c:	4b2c      	ldr	r3, [pc, #176]	; (8008000 <xTaskIncrementTick+0x120>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8007f50:	2b00      	cmp	r3, #0
}
 8007f52:	bf0c      	ite	eq
 8007f54:	4620      	moveq	r0, r4
 8007f56:	2001      	movne	r0, #1
 8007f58:	b003      	add	sp, #12
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f5e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007fec <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8007f62:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800800c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f66:	f8d9 3000 	ldr.w	r3, [r9]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	b91b      	cbnz	r3, 8007f76 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f72:	6033      	str	r3, [r6, #0]
					break;
 8007f74:	e7e1      	b.n	8007f3a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f76:	f8d9 3000 	ldr.w	r3, [r9]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f80:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8007f84:	4295      	cmp	r5, r2
 8007f86:	d201      	bcs.n	8007f8c <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8007f88:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f8a:	e7d6      	b.n	8007f3a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f8c:	f10b 0104 	add.w	r1, fp, #4
 8007f90:	4608      	mov	r0, r1
 8007f92:	9101      	str	r1, [sp, #4]
 8007f94:	f7ff f8da 	bl	800714c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f98:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8007f9c:	9901      	ldr	r1, [sp, #4]
 8007f9e:	b122      	cbz	r2, 8007faa <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fa0:	f10b 0018 	add.w	r0, fp, #24
 8007fa4:	f7ff f8d2 	bl	800714c <uxListRemove>
 8007fa8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8007faa:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8007fae:	f8da 2000 	ldr.w	r2, [sl]
 8007fb2:	4290      	cmp	r0, r2
 8007fb4:	d901      	bls.n	8007fba <xTaskIncrementTick+0xda>
 8007fb6:	f8ca 0000 	str.w	r0, [sl]
 8007fba:	2314      	movs	r3, #20
 8007fbc:	fb03 7000 	mla	r0, r3, r0, r7
 8007fc0:	f7ff f8a1 	bl	8007106 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fc4:	f8d8 1000 	ldr.w	r1, [r8]
 8007fc8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8007fcc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	bf28      	it	cs
 8007fd2:	2401      	movcs	r4, #1
 8007fd4:	e7c7      	b.n	8007f66 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8007fd6:	4a0b      	ldr	r2, [pc, #44]	; (8008004 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8007fd8:	2400      	movs	r4, #0
		++uxPendedTicks;
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	e7b4      	b.n	8007f4c <xTaskIncrementTick+0x6c>
 8007fe2:	bf00      	nop
 8007fe4:	20014640 	.word	0x20014640
 8007fe8:	2001467c 	.word	0x2001467c
 8007fec:	200141d0 	.word	0x200141d0
 8007ff0:	200141d4 	.word	0x200141d4
 8007ff4:	2001464c 	.word	0x2001464c
 8007ff8:	20014648 	.word	0x20014648
 8007ffc:	200141d8 	.word	0x200141d8
 8008000:	20014680 	.word	0x20014680
 8008004:	2001463c 	.word	0x2001463c
 8008008:	200141cc 	.word	0x200141cc
 800800c:	20014644 	.word	0x20014644

08008010 <xTaskResumeAll>:
{
 8008010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8008012:	4c32      	ldr	r4, [pc, #200]	; (80080dc <xTaskResumeAll+0xcc>)
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	b953      	cbnz	r3, 800802e <xTaskResumeAll+0x1e>
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	b672      	cpsid	i
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	b662      	cpsie	i
 800802c:	e7fe      	b.n	800802c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800802e:	f7ff f8b1 	bl	8007194 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	3b01      	subs	r3, #1
 8008036:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008038:	6824      	ldr	r4, [r4, #0]
 800803a:	b12c      	cbz	r4, 8008048 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800803c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800803e:	f7ff f8cd 	bl	80071dc <vPortExitCritical>
}
 8008042:	4620      	mov	r0, r4
 8008044:	b003      	add	sp, #12
 8008046:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008048:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <xTaskResumeAll+0xd0>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0f5      	beq.n	800803c <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008050:	4d24      	ldr	r5, [pc, #144]	; (80080e4 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008052:	4e25      	ldr	r6, [pc, #148]	; (80080e8 <xTaskResumeAll+0xd8>)
 8008054:	4f25      	ldr	r7, [pc, #148]	; (80080ec <xTaskResumeAll+0xdc>)
 8008056:	e01e      	b.n	8008096 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008058:	68eb      	ldr	r3, [r5, #12]
 800805a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800805c:	f104 0018 	add.w	r0, r4, #24
 8008060:	f7ff f874 	bl	800714c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008064:	1d21      	adds	r1, r4, #4
 8008066:	4608      	mov	r0, r1
 8008068:	9101      	str	r1, [sp, #4]
 800806a:	f7ff f86f 	bl	800714c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800806e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008070:	6832      	ldr	r2, [r6, #0]
 8008072:	9901      	ldr	r1, [sp, #4]
 8008074:	4293      	cmp	r3, r2
 8008076:	d900      	bls.n	800807a <xTaskResumeAll+0x6a>
 8008078:	6033      	str	r3, [r6, #0]
 800807a:	2014      	movs	r0, #20
 800807c:	fb00 7003 	mla	r0, r0, r3, r7
 8008080:	f7ff f841 	bl	8007106 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008084:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <xTaskResumeAll+0xe0>)
 8008086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	429a      	cmp	r2, r3
 800808e:	d302      	bcc.n	8008096 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 8008090:	4b18      	ldr	r3, [pc, #96]	; (80080f4 <xTaskResumeAll+0xe4>)
 8008092:	2201      	movs	r2, #1
 8008094:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008096:	682b      	ldr	r3, [r5, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1dd      	bne.n	8008058 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800809c:	b10c      	cbz	r4, 80080a2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800809e:	f7ff ff05 	bl	8007eac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080a2:	4d15      	ldr	r5, [pc, #84]	; (80080f8 <xTaskResumeAll+0xe8>)
 80080a4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080a6:	b144      	cbz	r4, 80080ba <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 80080a8:	4e12      	ldr	r6, [pc, #72]	; (80080f4 <xTaskResumeAll+0xe4>)
 80080aa:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80080ac:	f7ff ff18 	bl	8007ee0 <xTaskIncrementTick>
 80080b0:	b100      	cbz	r0, 80080b4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80080b2:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80080b4:	3c01      	subs	r4, #1
 80080b6:	d1f9      	bne.n	80080ac <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 80080b8:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80080ba:	4b0e      	ldr	r3, [pc, #56]	; (80080f4 <xTaskResumeAll+0xe4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0bc      	beq.n	800803c <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 80080c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80080d6:	2401      	movs	r4, #1
 80080d8:	e7b1      	b.n	800803e <xTaskResumeAll+0x2e>
 80080da:	bf00      	nop
 80080dc:	20014640 	.word	0x20014640
 80080e0:	20014638 	.word	0x20014638
 80080e4:	20014650 	.word	0x20014650
 80080e8:	20014644 	.word	0x20014644
 80080ec:	200141d8 	.word	0x200141d8
 80080f0:	200141cc 	.word	0x200141cc
 80080f4:	20014680 	.word	0x20014680
 80080f8:	2001463c 	.word	0x2001463c

080080fc <xTaskCallApplicationTaskHook>:
	{
 80080fc:	4603      	mov	r3, r0
 80080fe:	4608      	mov	r0, r1
		if( xTask == NULL )
 8008100:	b90b      	cbnz	r3, 8008106 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8008102:	4b03      	ldr	r3, [pc, #12]	; (8008110 <xTaskCallApplicationTaskHook+0x14>)
 8008104:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8008106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008108:	b103      	cbz	r3, 800810c <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800810a:	4718      	bx	r3
	}
 800810c:	4618      	mov	r0, r3
 800810e:	4770      	bx	lr
 8008110:	200141cc 	.word	0x200141cc

08008114 <vTaskSwitchContext>:
{
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008116:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <vTaskSwitchContext+0x7c>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <vTaskSwitchContext+0x80>)
 800811c:	b112      	cbz	r2, 8008124 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800811e:	2201      	movs	r2, #1
 8008120:	601a      	str	r2, [r3, #0]
}
 8008122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8008124:	4c1c      	ldr	r4, [pc, #112]	; (8008198 <vTaskSwitchContext+0x84>)
 8008126:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008128:	4e1c      	ldr	r6, [pc, #112]	; (800819c <vTaskSwitchContext+0x88>)
 800812a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800812c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	f7ff ffe4 	bl	80080fc <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008134:	6832      	ldr	r2, [r6, #0]
 8008136:	491a      	ldr	r1, [pc, #104]	; (80081a0 <vTaskSwitchContext+0x8c>)
 8008138:	fb07 f302 	mul.w	r3, r7, r2
 800813c:	58cd      	ldr	r5, [r1, r3]
 800813e:	18c8      	adds	r0, r1, r3
 8008140:	b1c5      	cbz	r5, 8008174 <vTaskSwitchContext+0x60>
 8008142:	6845      	ldr	r5, [r0, #4]
 8008144:	3308      	adds	r3, #8
 8008146:	686d      	ldr	r5, [r5, #4]
 8008148:	440b      	add	r3, r1
 800814a:	429d      	cmp	r5, r3
 800814c:	6045      	str	r5, [r0, #4]
 800814e:	bf04      	itt	eq
 8008150:	686b      	ldreq	r3, [r5, #4]
 8008152:	6043      	streq	r3, [r0, #4]
 8008154:	2314      	movs	r3, #20
 8008156:	fb03 1102 	mla	r1, r3, r2, r1
 800815a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800815c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	f7ff ffc9 	bl	80080fc <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	4a0d      	ldr	r2, [pc, #52]	; (80081a4 <vTaskSwitchContext+0x90>)
 800816e:	3358      	adds	r3, #88	; 0x58
 8008170:	6013      	str	r3, [r2, #0]
}
 8008172:	e7d6      	b.n	8008122 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008174:	b952      	cbnz	r2, 800818c <vTaskSwitchContext+0x78>
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	b672      	cpsid	i
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	b662      	cpsie	i
 800818a:	e7fe      	b.n	800818a <vTaskSwitchContext+0x76>
 800818c:	3a01      	subs	r2, #1
 800818e:	e7d3      	b.n	8008138 <vTaskSwitchContext+0x24>
 8008190:	20014640 	.word	0x20014640
 8008194:	20014680 	.word	0x20014680
 8008198:	200141cc 	.word	0x200141cc
 800819c:	20014644 	.word	0x20014644
 80081a0:	200141d8 	.word	0x200141d8
 80081a4:	20000098 	.word	0x20000098

080081a8 <vTaskPlaceOnEventList>:
{
 80081a8:	b510      	push	{r4, lr}
 80081aa:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80081ac:	b950      	cbnz	r0, 80081c4 <vTaskPlaceOnEventList+0x1c>
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	b672      	cpsid	i
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	b662      	cpsie	i
 80081c2:	e7fe      	b.n	80081c2 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <vTaskPlaceOnEventList+0x34>)
 80081c6:	6819      	ldr	r1, [r3, #0]
 80081c8:	3118      	adds	r1, #24
 80081ca:	f7fe ffa8 	bl	800711e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081ce:	4620      	mov	r0, r4
 80081d0:	2101      	movs	r1, #1
}
 80081d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081d6:	f7ff be31 	b.w	8007e3c <prvAddCurrentTaskToDelayedList>
 80081da:	bf00      	nop
 80081dc:	200141cc 	.word	0x200141cc

080081e0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e0:	68c3      	ldr	r3, [r0, #12]
{
 80081e2:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80081e6:	b954      	cbnz	r4, 80081fe <xTaskRemoveFromEventList+0x1e>
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	b672      	cpsid	i
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	b662      	cpsie	i
 80081fc:	e7fe      	b.n	80081fc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081fe:	f104 0118 	add.w	r1, r4, #24
 8008202:	4608      	mov	r0, r1
 8008204:	9101      	str	r1, [sp, #4]
 8008206:	f7fe ffa1 	bl	800714c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820a:	4b12      	ldr	r3, [pc, #72]	; (8008254 <xTaskRemoveFromEventList+0x74>)
 800820c:	9901      	ldr	r1, [sp, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	b9e3      	cbnz	r3, 800824c <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008212:	1d21      	adds	r1, r4, #4
 8008214:	4608      	mov	r0, r1
 8008216:	9101      	str	r1, [sp, #4]
 8008218:	f7fe ff98 	bl	800714c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800821c:	4a0e      	ldr	r2, [pc, #56]	; (8008258 <xTaskRemoveFromEventList+0x78>)
 800821e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008220:	6810      	ldr	r0, [r2, #0]
 8008222:	9901      	ldr	r1, [sp, #4]
 8008224:	4283      	cmp	r3, r0
 8008226:	d900      	bls.n	800822a <xTaskRemoveFromEventList+0x4a>
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	4a0c      	ldr	r2, [pc, #48]	; (800825c <xTaskRemoveFromEventList+0x7c>)
 800822c:	2014      	movs	r0, #20
 800822e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008232:	f7fe ff68 	bl	8007106 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <xTaskRemoveFromEventList+0x80>)
 8008238:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	429a      	cmp	r2, r3
 8008240:	d906      	bls.n	8008250 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8008242:	2001      	movs	r0, #1
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <xTaskRemoveFromEventList+0x84>)
 8008246:	6018      	str	r0, [r3, #0]
}
 8008248:	b002      	add	sp, #8
 800824a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800824c:	4806      	ldr	r0, [pc, #24]	; (8008268 <xTaskRemoveFromEventList+0x88>)
 800824e:	e7f0      	b.n	8008232 <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 8008250:	2000      	movs	r0, #0
	return xReturn;
 8008252:	e7f9      	b.n	8008248 <xTaskRemoveFromEventList+0x68>
 8008254:	20014640 	.word	0x20014640
 8008258:	20014644 	.word	0x20014644
 800825c:	200141d8 	.word	0x200141d8
 8008260:	200141cc 	.word	0x200141cc
 8008264:	20014680 	.word	0x20014680
 8008268:	20014650 	.word	0x20014650

0800826c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <vTaskInternalSetTimeOutState+0x10>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <vTaskInternalSetTimeOutState+0x14>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6043      	str	r3, [r0, #4]
}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	2001464c 	.word	0x2001464c
 8008280:	2001467c 	.word	0x2001467c

08008284 <xTaskCheckForTimeOut>:
{
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008288:	4605      	mov	r5, r0
 800828a:	b950      	cbnz	r0, 80082a2 <xTaskCheckForTimeOut+0x1e>
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	b672      	cpsid	i
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	b662      	cpsie	i
 80082a0:	e7fe      	b.n	80082a0 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80082a2:	b951      	cbnz	r1, 80082ba <xTaskCheckForTimeOut+0x36>
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	b672      	cpsid	i
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	b662      	cpsie	i
 80082b8:	e7fe      	b.n	80082b8 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 80082ba:	f7fe ff6b 	bl	8007194 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <xTaskCheckForTimeOut+0x78>)
 80082c0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	d010      	beq.n	80082ea <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082c8:	480d      	ldr	r0, [pc, #52]	; (8008300 <xTaskCheckForTimeOut+0x7c>)
 80082ca:	682e      	ldr	r6, [r5, #0]
 80082cc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082ce:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082d0:	4286      	cmp	r6, r0
 80082d2:	d001      	beq.n	80082d8 <xTaskCheckForTimeOut+0x54>
 80082d4:	428a      	cmp	r2, r1
 80082d6:	d90f      	bls.n	80082f8 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082d8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082da:	4283      	cmp	r3, r0
 80082dc:	d90a      	bls.n	80082f4 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 80082de:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082e0:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80082e2:	4413      	add	r3, r2
 80082e4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082e6:	f7ff ffc1 	bl	800826c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80082ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80082ec:	f7fe ff76 	bl	80071dc <vPortExitCritical>
}
 80082f0:	4620      	mov	r0, r4
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80082f8:	2401      	movs	r4, #1
 80082fa:	e7f7      	b.n	80082ec <xTaskCheckForTimeOut+0x68>
 80082fc:	2001467c 	.word	0x2001467c
 8008300:	2001464c 	.word	0x2001464c

08008304 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008304:	4b01      	ldr	r3, [pc, #4]	; (800830c <vTaskMissedYield+0x8>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	4770      	bx	lr
 800830c:	20014680 	.word	0x20014680

08008310 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008310:	4b01      	ldr	r3, [pc, #4]	; (8008318 <xTaskGetCurrentTaskHandle+0x8>)
 8008312:	6818      	ldr	r0, [r3, #0]
	}
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	200141cc 	.word	0x200141cc

0800831c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <xTaskGetSchedulerState+0x18>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	b133      	cbz	r3, 8008330 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <xTaskGetSchedulerState+0x1c>)
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	fab0 f080 	clz	r0, r0
 800832a:	0940      	lsrs	r0, r0, #5
 800832c:	0040      	lsls	r0, r0, #1
 800832e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008330:	2001      	movs	r0, #1
	}
 8008332:	4770      	bx	lr
 8008334:	20014664 	.word	0x20014664
 8008338:	20014640 	.word	0x20014640

0800833c <xTaskPriorityInherit>:
	{
 800833c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800833e:	4604      	mov	r4, r0
 8008340:	b340      	cbz	r0, 8008394 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008342:	4d1b      	ldr	r5, [pc, #108]	; (80083b0 <xTaskPriorityInherit+0x74>)
 8008344:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008346:	682a      	ldr	r2, [r5, #0]
 8008348:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800834a:	4293      	cmp	r3, r2
 800834c:	d228      	bcs.n	80083a0 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800834e:	6982      	ldr	r2, [r0, #24]
 8008350:	2a00      	cmp	r2, #0
 8008352:	db04      	blt.n	800835e <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008354:	682a      	ldr	r2, [r5, #0]
 8008356:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008358:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800835c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800835e:	2214      	movs	r2, #20
 8008360:	4e14      	ldr	r6, [pc, #80]	; (80083b4 <xTaskPriorityInherit+0x78>)
 8008362:	fb02 6303 	mla	r3, r2, r3, r6
 8008366:	6962      	ldr	r2, [r4, #20]
 8008368:	429a      	cmp	r2, r3
 800836a:	d115      	bne.n	8008398 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800836c:	1d21      	adds	r1, r4, #4
 800836e:	4608      	mov	r0, r1
 8008370:	9101      	str	r1, [sp, #4]
 8008372:	f7fe feeb 	bl	800714c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008376:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008378:	4a0f      	ldr	r2, [pc, #60]	; (80083b8 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800837c:	6810      	ldr	r0, [r2, #0]
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008382:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008384:	d900      	bls.n	8008388 <xTaskPriorityInherit+0x4c>
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	2014      	movs	r0, #20
 800838a:	fb00 6003 	mla	r0, r0, r3, r6
 800838e:	f7fe feba 	bl	8007106 <vListInsertEnd>
				xReturn = pdTRUE;
 8008392:	2001      	movs	r0, #1
	}
 8008394:	b002      	add	sp, #8
 8008396:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800839e:	e7f8      	b.n	8008392 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	4298      	cmp	r0, r3
 80083a8:	bf2c      	ite	cs
 80083aa:	2000      	movcs	r0, #0
 80083ac:	2001      	movcc	r0, #1
 80083ae:	e7f1      	b.n	8008394 <xTaskPriorityInherit+0x58>
 80083b0:	200141cc 	.word	0x200141cc
 80083b4:	200141d8 	.word	0x200141d8
 80083b8:	20014644 	.word	0x20014644

080083bc <xTaskPriorityDisinherit>:
	{
 80083bc:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 80083be:	b910      	cbnz	r0, 80083c6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80083c0:	2000      	movs	r0, #0
	}
 80083c2:	b002      	add	sp, #8
 80083c4:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80083c6:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <xTaskPriorityDisinherit+0x84>)
 80083c8:	681c      	ldr	r4, [r3, #0]
 80083ca:	4284      	cmp	r4, r0
 80083cc:	d00a      	beq.n	80083e4 <xTaskPriorityDisinherit+0x28>
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	b672      	cpsid	i
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	b662      	cpsie	i
 80083e2:	e7fe      	b.n	80083e2 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80083e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80083e6:	b953      	cbnz	r3, 80083fe <xTaskPriorityDisinherit+0x42>
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	b672      	cpsid	i
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	b662      	cpsie	i
 80083fc:	e7fe      	b.n	80083fc <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8008400:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008402:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008404:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008406:	4291      	cmp	r1, r2
 8008408:	d0da      	beq.n	80083c0 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1d8      	bne.n	80083c0 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800840e:	1d21      	adds	r1, r4, #4
 8008410:	4608      	mov	r0, r1
 8008412:	9101      	str	r1, [sp, #4]
 8008414:	f7fe fe9a 	bl	800714c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008418:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800841a:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800841c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008420:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008422:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008424:	4a07      	ldr	r2, [pc, #28]	; (8008444 <xTaskPriorityDisinherit+0x88>)
 8008426:	6810      	ldr	r0, [r2, #0]
 8008428:	4283      	cmp	r3, r0
 800842a:	d900      	bls.n	800842e <xTaskPriorityDisinherit+0x72>
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	4a06      	ldr	r2, [pc, #24]	; (8008448 <xTaskPriorityDisinherit+0x8c>)
 8008430:	2014      	movs	r0, #20
 8008432:	fb00 2003 	mla	r0, r0, r3, r2
 8008436:	f7fe fe66 	bl	8007106 <vListInsertEnd>
					xReturn = pdTRUE;
 800843a:	2001      	movs	r0, #1
		return xReturn;
 800843c:	e7c1      	b.n	80083c2 <xTaskPriorityDisinherit+0x6>
 800843e:	bf00      	nop
 8008440:	200141cc 	.word	0x200141cc
 8008444:	20014644 	.word	0x20014644
 8008448:	200141d8 	.word	0x200141d8

0800844c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800844c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800844e:	4604      	mov	r4, r0
 8008450:	2800      	cmp	r0, #0
 8008452:	d048      	beq.n	80084e6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 8008454:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008456:	b952      	cbnz	r2, 800846e <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	e7fe      	b.n	800846c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800846e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008470:	4299      	cmp	r1, r3
 8008472:	bf38      	it	cc
 8008474:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008476:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008478:	428b      	cmp	r3, r1
 800847a:	d034      	beq.n	80084e6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800847c:	2a01      	cmp	r2, #1
 800847e:	d132      	bne.n	80084e6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8008480:	4a1a      	ldr	r2, [pc, #104]	; (80084ec <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	4282      	cmp	r2, r0
 8008486:	d10a      	bne.n	800849e <vTaskPriorityDisinheritAfterTimeout+0x52>
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	b672      	cpsid	i
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	b662      	cpsie	i
 800849c:	e7fe      	b.n	800849c <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800849e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084a0:	4d13      	ldr	r5, [pc, #76]	; (80084f0 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084a2:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084a4:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 80084a8:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084aa:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ae:	bfa8      	it	ge
 80084b0:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084b4:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084b6:	bfa8      	it	ge
 80084b8:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d113      	bne.n	80084e6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084be:	1d01      	adds	r1, r0, #4
 80084c0:	4608      	mov	r0, r1
 80084c2:	9101      	str	r1, [sp, #4]
 80084c4:	f7fe fe42 	bl	800714c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80084c8:	4a0a      	ldr	r2, [pc, #40]	; (80084f4 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80084ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084cc:	6810      	ldr	r0, [r2, #0]
 80084ce:	9901      	ldr	r1, [sp, #4]
 80084d0:	4283      	cmp	r3, r0
 80084d2:	d900      	bls.n	80084d6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	2014      	movs	r0, #20
 80084d8:	fb00 5003 	mla	r0, r0, r3, r5
	}
 80084dc:	b003      	add	sp, #12
 80084de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80084e2:	f7fe be10 	b.w	8007106 <vListInsertEnd>
	}
 80084e6:	b003      	add	sp, #12
 80084e8:	bd30      	pop	{r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	200141cc 	.word	0x200141cc
 80084f0:	200141d8 	.word	0x200141d8
 80084f4:	20014644 	.word	0x20014644

080084f8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <pvTaskIncrementMutexHeldCount+0x14>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	b11a      	cbz	r2, 8008506 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80084fe:	6819      	ldr	r1, [r3, #0]
 8008500:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008502:	3201      	adds	r2, #1
 8008504:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8008506:	6818      	ldr	r0, [r3, #0]
	}
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	200141cc 	.word	0x200141cc

08008510 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8008510:	6843      	ldr	r3, [r0, #4]
{
 8008512:	b510      	push	{r4, lr}
 8008514:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 8008516:	b14b      	cbz	r3, 800852c <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2101      	movs	r1, #1
 800851c:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	b12b      	cbz	r3, 800852e <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8008522:	23c8      	movs	r3, #200	; 0xc8
 8008524:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 800852c:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 800852e:	2364      	movs	r3, #100	; 0x64
 8008530:	6163      	str	r3, [r4, #20]
 8008532:	e7fb      	b.n	800852c <jpeg_abort+0x1c>

08008534 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8008534:	6843      	ldr	r3, [r0, #4]
{
 8008536:	b510      	push	{r4, lr}
 8008538:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 800853a:	b10b      	cbz	r3, 8008540 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 800853c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853e:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8008540:	2300      	movs	r3, #0
 8008542:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8008544:	6163      	str	r3, [r4, #20]
}
 8008546:	bd10      	pop	{r4, pc}

08008548 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8008548:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800854a:	6843      	ldr	r3, [r0, #4]
 800854c:	2284      	movs	r2, #132	; 0x84
 800854e:	2100      	movs	r1, #0
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8008554:	2200      	movs	r2, #0
 8008556:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 800855a:	bd08      	pop	{r3, pc}

0800855c <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 800855c:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800855e:	6843      	ldr	r3, [r0, #4]
 8008560:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008564:	2100      	movs	r1, #0
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800856a:	2200      	movs	r2, #0
 800856c:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8008570:	bd08      	pop	{r3, pc}

08008572 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8008572:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8008574:	2950      	cmp	r1, #80	; 0x50
{
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	4604      	mov	r4, r0
 800857a:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800857c:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 800857e:	d007      	beq.n	8008590 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8008580:	6803      	ldr	r3, [r0, #0]
 8008582:	260d      	movs	r6, #13
 8008584:	2250      	movs	r2, #80	; 0x50
 8008586:	61d9      	str	r1, [r3, #28]
 8008588:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8008590:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8008594:	d009      	beq.n	80085aa <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	2116      	movs	r1, #22
 800859a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800859e:	4620      	mov	r0, r4
 80085a0:	61dd      	str	r5, [r3, #28]
 80085a2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 80085aa:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80085ae:	2100      	movs	r1, #0
 80085b0:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 80085b2:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 80085b4:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 80085b6:	f016 ff3f 	bl	801f438 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 80085ba:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 80085bc:	4620      	mov	r0, r4
    cinfo->err = err;
 80085be:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 80085c0:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 80085c2:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 80085c4:	f00b fe44 	bl	8014250 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 80085c8:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 80085ca:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 80085cc:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 80085ce:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80085d0:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80085d4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80085d8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80085dc:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80085e0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80085e4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80085e8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80085ec:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 80085f0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 80085f4:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80085f8:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 80085fc:	f005 f88c 	bl	800d718 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8008600:	4620      	mov	r0, r4
 8008602:	f003 fd91 	bl	800c128 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8008606:	23c8      	movs	r3, #200	; 0xc8
 8008608:	6163      	str	r3, [r4, #20]
}
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 800860c:	f7ff bf92 	b.w	8008534 <jpeg_destroy>

08008610 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8008610:	6942      	ldr	r2, [r0, #20]
 8008612:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 8008616:	b570      	push	{r4, r5, r6, lr}
 8008618:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800861a:	2b0a      	cmp	r3, #10
 800861c:	f200 809f 	bhi.w	800875e <jpeg_consume_input+0x14e>
 8008620:	e8df f003 	tbb	[pc, r3]
 8008624:	97a51006 	.word	0x97a51006
 8008628:	97979797 	.word	0x97979797
 800862c:	9d97      	.short	0x9d97
 800862e:	97          	.byte	0x97
 800862f:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8008630:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8008638:	69a3      	ldr	r3, [r4, #24]
 800863a:	4620      	mov	r0, r4
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8008640:	23c9      	movs	r3, #201	; 0xc9
 8008642:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8008644:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8008648:	4620      	mov	r0, r4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800864e:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8008650:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8008652:	d12a      	bne.n	80086aa <jpeg_consume_input+0x9a>
  switch (cinfo->num_components) {
 8008654:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008656:	2d03      	cmp	r5, #3
 8008658:	d029      	beq.n	80086ae <jpeg_consume_input+0x9e>
 800865a:	2d04      	cmp	r5, #4
 800865c:	d05f      	beq.n	800871e <jpeg_consume_input+0x10e>
 800865e:	2d01      	cmp	r5, #1
 8008660:	d173      	bne.n	800874a <jpeg_consume_input+0x13a>
    break;
 8008662:	4603      	mov	r3, r0
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8008664:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_GRAYSCALE;
 8008668:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->output_gamma = 1.0;
 800866c:	2200      	movs	r2, #0
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800866e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->dither_mode = JDITHER_FS;
 8008672:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8008674:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8008678:	4b3e      	ldr	r3, [pc, #248]	; (8008774 <jpeg_consume_input+0x164>)
  cinfo->dither_mode = JDITHER_FS;
 800867a:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 800867e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8008682:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8008684:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8008686:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800868a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 800868e:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8008690:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8008692:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8008696:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8008698:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 800869c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 80086a0:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 80086a4:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 80086a6:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 80086a8:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 80086aa:	4630      	mov	r0, r6
 80086ac:	bd70      	pop	{r4, r5, r6, pc}
    if (cinfo->saw_JFIF_marker) {
 80086ae:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80086b2:	b983      	cbnz	r3, 80086d6 <jpeg_consume_input+0xc6>
    } else if (cinfo->saw_Adobe_marker) {
 80086b4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80086b8:	b18b      	cbz	r3, 80086de <jpeg_consume_input+0xce>
      switch (cinfo->Adobe_transform) {
 80086ba:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 80086be:	b362      	cbz	r2, 800871a <jpeg_consume_input+0x10a>
 80086c0:	2a01      	cmp	r2, #1
 80086c2:	d008      	beq.n	80086d6 <jpeg_consume_input+0xc6>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	2174      	movs	r1, #116	; 0x74
 80086c8:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 80086ca:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f04f 31ff 	mov.w	r1, #4294967295
 80086d4:	4798      	blx	r3
    break;
 80086d6:	2302      	movs	r3, #2
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
 80086d8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    break;
 80086dc:	e7c4      	b.n	8008668 <jpeg_consume_input+0x58>
      int cid0 = cinfo->comp_info[0].component_id;
 80086de:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80086e2:	6819      	ldr	r1, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 80086e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 80086e6:	2901      	cmp	r1, #1
      int cid2 = cinfo->comp_info[2].component_id;
 80086e8:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 80086ec:	d10f      	bne.n	800870e <jpeg_consume_input+0xfe>
 80086ee:	2a02      	cmp	r2, #2
 80086f0:	d101      	bne.n	80086f6 <jpeg_consume_input+0xe6>
 80086f2:	2d03      	cmp	r5, #3
 80086f4:	d0ef      	beq.n	80086d6 <jpeg_consume_input+0xc6>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	4620      	mov	r0, r4
 80086fa:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80086fe:	2271      	movs	r2, #113	; 0x71
 8008700:	621d      	str	r5, [r3, #32]
 8008702:	2101      	movs	r1, #1
 8008704:	2503      	movs	r5, #3
 8008706:	615a      	str	r2, [r3, #20]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800870c:	e7e3      	b.n	80086d6 <jpeg_consume_input+0xc6>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800870e:	2952      	cmp	r1, #82	; 0x52
 8008710:	d1f1      	bne.n	80086f6 <jpeg_consume_input+0xe6>
 8008712:	2a47      	cmp	r2, #71	; 0x47
 8008714:	d1ef      	bne.n	80086f6 <jpeg_consume_input+0xe6>
 8008716:	2d42      	cmp	r5, #66	; 0x42
 8008718:	d1ed      	bne.n	80086f6 <jpeg_consume_input+0xe6>
 800871a:	2502      	movs	r5, #2
 800871c:	e7db      	b.n	80086d6 <jpeg_consume_input+0xc6>
    if (cinfo->saw_Adobe_marker) {
 800871e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8008722:	b173      	cbz	r3, 8008742 <jpeg_consume_input+0x132>
      switch (cinfo->Adobe_transform) {
 8008724:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8008728:	b15a      	cbz	r2, 8008742 <jpeg_consume_input+0x132>
 800872a:	2a02      	cmp	r2, #2
 800872c:	d008      	beq.n	8008740 <jpeg_consume_input+0x130>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	2174      	movs	r1, #116	; 0x74
 8008732:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8008734:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f04f 31ff 	mov.w	r1, #4294967295
 800873e:	4798      	blx	r3
	break;
 8008740:	2505      	movs	r5, #5
    break;
 8008742:	2304      	movs	r3, #4
	cinfo->jpeg_color_space = JCS_CMYK;
 8008744:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    break;
 8008748:	e78e      	b.n	8008668 <jpeg_consume_input+0x58>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800874a:	2300      	movs	r3, #0
 800874c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    break;
 8008750:	e78a      	b.n	8008668 <jpeg_consume_input+0x58>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8008752:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8008756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800875e:	6803      	ldr	r3, [r0, #0]
 8008760:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8008762:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008764:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4798      	blx	r3
 800876c:	e79d      	b.n	80086aa <jpeg_consume_input+0x9a>
  switch (cinfo->global_state) {
 800876e:	2601      	movs	r6, #1
  return retcode;
 8008770:	e79b      	b.n	80086aa <jpeg_consume_input+0x9a>
 8008772:	bf00      	nop
 8008774:	3ff00000 	.word	0x3ff00000

08008778 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8008778:	6942      	ldr	r2, [r0, #20]
 800877a:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 800877e:	2b01      	cmp	r3, #1
{
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8008786:	d905      	bls.n	8008794 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008788:	6803      	ldr	r3, [r0, #0]
 800878a:	2115      	movs	r1, #21
 800878c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8008794:	4620      	mov	r0, r4
 8008796:	f7ff ff3b 	bl	8008610 <jpeg_consume_input>
  switch (retcode) {
 800879a:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800879c:	4605      	mov	r5, r0
  switch (retcode) {
 800879e:	d00b      	beq.n	80087b8 <jpeg_read_header+0x40>
 80087a0:	2802      	cmp	r0, #2
 80087a2:	d109      	bne.n	80087b8 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 80087a4:	b12e      	cbz	r6, 80087b2 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	2235      	movs	r2, #53	; 0x35
 80087aa:	4620      	mov	r0, r4
 80087ac:	615a      	str	r2, [r3, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 80087b2:	4620      	mov	r0, r4
 80087b4:	f7ff feac 	bl	8008510 <jpeg_abort>
}
 80087b8:	4628      	mov	r0, r5
 80087ba:	bd70      	pop	{r4, r5, r6, pc}

080087bc <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 80087bc:	6943      	ldr	r3, [r0, #20]
 80087be:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 80087c2:	2a01      	cmp	r2, #1
{
 80087c4:	b510      	push	{r4, lr}
 80087c6:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 80087c8:	d81f      	bhi.n	800880a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 80087ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80087cc:	bb0a      	cbnz	r2, 8008812 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 80087ce:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80087d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d204      	bcs.n	80087e2 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 80087d8:	6803      	ldr	r3, [r0, #0]
 80087da:	2245      	movs	r2, #69	; 0x45
 80087dc:	615a      	str	r2, [r3, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 80087e2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80087e6:	4620      	mov	r0, r4
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 80087ec:	23d2      	movs	r3, #210	; 0xd2
 80087ee:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 80087f0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80087f4:	695a      	ldr	r2, [r3, #20]
 80087f6:	b1a2      	cbz	r2, 8008822 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 80087f8:	69a3      	ldr	r3, [r4, #24]
 80087fa:	4620      	mov	r0, r4
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff fe85 	bl	8008510 <jpeg_abort>
  return TRUE;
 8008806:	2001      	movs	r0, #1
 8008808:	e010      	b.n	800882c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800880a:	2bcf      	cmp	r3, #207	; 0xcf
 800880c:	d0ee      	beq.n	80087ec <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800880e:	2bd2      	cmp	r3, #210	; 0xd2
 8008810:	d0ee      	beq.n	80087f0 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008812:	6822      	ldr	r2, [r4, #0]
 8008814:	2115      	movs	r1, #21
 8008816:	4620      	mov	r0, r4
 8008818:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800881c:	6813      	ldr	r3, [r2, #0]
 800881e:	4798      	blx	r3
 8008820:	e7e6      	b.n	80087f0 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4620      	mov	r0, r4
 8008826:	4798      	blx	r3
 8008828:	2800      	cmp	r0, #0
 800882a:	d1e1      	bne.n	80087f0 <jpeg_finish_decompress+0x34>
}
 800882c:	bd10      	pop	{r4, pc}

0800882e <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800882e:	6943      	ldr	r3, [r0, #20]
 8008830:	2bcc      	cmp	r3, #204	; 0xcc
{
 8008832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008836:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8008838:	d008      	beq.n	800884c <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800883a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8008848:	23cc      	movs	r3, #204	; 0xcc
 800884a:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800884c:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8008850:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8008852:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	b9f3      	cbnz	r3, 8008898 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800885a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 800885c:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800885e:	2b00      	cmp	r3, #0
 8008860:	bf14      	ite	ne
 8008862:	23ce      	movne	r3, #206	; 0xce
 8008864:	23cd      	moveq	r3, #205	; 0xcd
 8008866:	6163      	str	r3, [r4, #20]
}
 8008868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 800886c:	68a3      	ldr	r3, [r4, #8]
 800886e:	b123      	cbz	r3, 800887a <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8008870:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8008872:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800887a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800887e:	462a      	mov	r2, r5
 8008880:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8008882:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8008886:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800888a:	2300      	movs	r3, #0
 800888c:	4619      	mov	r1, r3
 800888e:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8008890:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008894:	42bb      	cmp	r3, r7
 8008896:	d011      	beq.n	80088bc <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8008898:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800889c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800889e:	4291      	cmp	r1, r2
 80088a0:	d3e4      	bcc.n	800886c <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 80088a2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80088a6:	4620      	mov	r0, r4
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80088ac:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80088b0:	4620      	mov	r0, r4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80088b6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80088ba:	e7ca      	b.n	8008852 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 80088bc:	2000      	movs	r0, #0
 80088be:	e7d3      	b.n	8008868 <output_pass_setup+0x3a>

080088c0 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 80088c0:	6943      	ldr	r3, [r0, #20]
 80088c2:	2bca      	cmp	r3, #202	; 0xca
{
 80088c4:	b510      	push	{r4, lr}
 80088c6:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 80088c8:	d109      	bne.n	80088de <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 80088ca:	f005 f8cf 	bl	800da6c <jinit_master_decompress>
    if (cinfo->buffered_image) {
 80088ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088d0:	b11b      	cbz	r3, 80088da <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 80088d2:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 80088d4:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 80088d6:	6163      	str	r3, [r4, #20]
}
 80088d8:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 80088da:	23cb      	movs	r3, #203	; 0xcb
 80088dc:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 80088de:	6962      	ldr	r2, [r4, #20]
 80088e0:	2acb      	cmp	r2, #203	; 0xcb
 80088e2:	d12c      	bne.n	800893e <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 80088e4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	b1fb      	cbz	r3, 800892c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 80088ec:	68a3      	ldr	r3, [r4, #8]
 80088ee:	b113      	cbz	r3, 80088f6 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4620      	mov	r0, r4
 80088f4:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80088f6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80088fa:	4620      	mov	r0, r4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8008900:	2800      	cmp	r0, #0
 8008902:	d0e9      	beq.n	80088d8 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8008904:	2802      	cmp	r0, #2
 8008906:	d011      	beq.n	800892c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8008908:	68a3      	ldr	r3, [r4, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ee      	beq.n	80088ec <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 800890e:	f020 0002 	bic.w	r0, r0, #2
 8008912:	2801      	cmp	r0, #1
 8008914:	d1ea      	bne.n	80088ec <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	6899      	ldr	r1, [r3, #8]
 800891a:	3201      	adds	r2, #1
 800891c:	428a      	cmp	r2, r1
 800891e:	605a      	str	r2, [r3, #4]
 8008920:	dbe4      	blt.n	80088ec <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8008922:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8008926:	440a      	add	r2, r1
 8008928:	609a      	str	r2, [r3, #8]
 800892a:	e7df      	b.n	80088ec <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800892c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008930:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8008934:	4620      	mov	r0, r4
}
 8008936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800893a:	f7ff bf78 	b.w	800882e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800893e:	2acc      	cmp	r2, #204	; 0xcc
 8008940:	d0f8      	beq.n	8008934 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	2115      	movs	r1, #21
 8008946:	4620      	mov	r0, r4
 8008948:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4798      	blx	r3
 8008950:	e7f0      	b.n	8008934 <jpeg_start_decompress+0x74>

08008952 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8008952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008954:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8008956:	6942      	ldr	r2, [r0, #20]
{
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 800895c:	2acd      	cmp	r2, #205	; 0xcd
 800895e:	d005      	beq.n	800896c <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008960:	6803      	ldr	r3, [r0, #0]
 8008962:	2115      	movs	r1, #21
 8008964:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 800896c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008970:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008972:	429a      	cmp	r2, r3
 8008974:	d30a      	bcc.n	800898c <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	227e      	movs	r2, #126	; 0x7e
 800897a:	4620      	mov	r0, r4
 800897c:	f04f 31ff 	mov.w	r1, #4294967295
 8008980:	615a      	str	r2, [r3, #20]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4798      	blx	r3
    return 0;
 8008986:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8008988:	b003      	add	sp, #12
 800898a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 800898c:	68a0      	ldr	r0, [r4, #8]
 800898e:	b120      	cbz	r0, 800899a <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8008990:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8008994:	6803      	ldr	r3, [r0, #0]
 8008996:	4620      	mov	r0, r4
 8008998:	4798      	blx	r3
  row_ctr = 0;
 800899a:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800899c:	4620      	mov	r0, r4
 800899e:	aa01      	add	r2, sp, #4
 80089a0:	4629      	mov	r1, r5
  row_ctr = 0;
 80089a2:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 80089a4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80089a8:	685f      	ldr	r7, [r3, #4]
 80089aa:	4633      	mov	r3, r6
 80089ac:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 80089ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80089b2:	9801      	ldr	r0, [sp, #4]
 80089b4:	4403      	add	r3, r0
 80089b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 80089ba:	e7e5      	b.n	8008988 <jpeg_read_scanlines+0x36>

080089bc <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 80089bc:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 80089be:	6984      	ldr	r4, [r0, #24]
{
 80089c0:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 80089c2:	6863      	ldr	r3, [r4, #4]
 80089c4:	b943      	cbnz	r3, 80089d8 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 80089c6:	68e3      	ldr	r3, [r4, #12]
 80089c8:	4798      	blx	r3
 80089ca:	b928      	cbnz	r0, 80089d8 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	2219      	movs	r2, #25
 80089d0:	4628      	mov	r0, r5
 80089d2:	615a      	str	r2, [r3, #20]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4798      	blx	r3
  src->bytes_in_buffer--;
 80089d8:	6863      	ldr	r3, [r4, #4]
 80089da:	3b01      	subs	r3, #1
 80089dc:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	6022      	str	r2, [r4, #0]
}
 80089e4:	7818      	ldrb	r0, [r3, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}

080089e8 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	4680      	mov	r8, r0
 80089ee:	460d      	mov	r5, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 80089f0:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 80089f4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 80089f8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
  while (e->a < 0x8000L) {
 80089fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008a00:	db1c      	blt.n	8008a3c <arith_decode+0x54>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8008a02:	7828      	ldrb	r0, [r5, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8008a04:	4929      	ldr	r1, [pc, #164]	; (8008aac <arith_decode+0xc4>)
 8008a06:	f000 067f 	and.w	r6, r0, #127	; 0x7f

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 8008a0a:	68a7      	ldr	r7, [r4, #8]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8008a0c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
  temp = e->a - qe;
 8008a10:	eba2 4221 	sub.w	r2, r2, r1, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8008a14:	ea4f 2c21 	mov.w	ip, r1, asr #8
  temp <<= e->ct;
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8008a1c:	140e      	asrs	r6, r1, #16
  e->a = temp;
 8008a1e:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 8008a20:	429f      	cmp	r7, r3
 8008a22:	db34      	blt.n	8008a8e <arith_decode+0xa6>
    e->c -= temp;
 8008a24:	1aff      	subs	r7, r7, r3
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8008a26:	4296      	cmp	r6, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8008a28:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
      e->a = qe;
 8008a2c:	60e6      	str	r6, [r4, #12]
    e->c -= temp;
 8008a2e:	60a7      	str	r7, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8008a30:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 8008a32:	dd34      	ble.n	8008a9e <arith_decode+0xb6>
    /* Conditional MPS (more probable symbol) exchange */
    if (e->a < qe) {
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
      sv ^= 0x80;		/* Exchange LPS/MPS */
    } else {
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8008a34:	ea83 030c 	eor.w	r3, r3, ip
 8008a38:	702b      	strb	r3, [r5, #0]
 8008a3a:	e034      	b.n	8008aa6 <arith_decode+0xbe>
    if (--e->ct < 0) {
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	da1a      	bge.n	8008a7a <arith_decode+0x92>
      if (cinfo->unread_marker)
 8008a44:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 8008a48:	b96b      	cbnz	r3, 8008a66 <arith_decode+0x7e>
	data = get_byte(cinfo);	/* read next input byte */
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	f7ff ffb6 	bl	80089bc <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8008a50:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8008a52:	4606      	mov	r6, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8008a54:	d108      	bne.n	8008a68 <arith_decode+0x80>
	  do data = get_byte(cinfo);
 8008a56:	4640      	mov	r0, r8
 8008a58:	f7ff ffb0 	bl	80089bc <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8008a5c:	28ff      	cmp	r0, #255	; 0xff
 8008a5e:	d0fa      	beq.n	8008a56 <arith_decode+0x6e>
	  if (data == 0)
 8008a60:	b110      	cbz	r0, 8008a68 <arith_decode+0x80>
	    cinfo->unread_marker = data;
 8008a62:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 8008a66:	2600      	movs	r6, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 8008a68:	68a3      	ldr	r3, [r4, #8]
 8008a6a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8008a74:	60a6      	str	r6, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8008a76:	d404      	bmi.n	8008a82 <arith_decode+0x9a>
 8008a78:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	60e3      	str	r3, [r4, #12]
 8008a80:	e7ba      	b.n	80089f8 <arith_decode+0x10>
	if (++e->ct == 0)
 8008a82:	3309      	adds	r3, #9
 8008a84:	6123      	str	r3, [r4, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f7      	bne.n	8008a7a <arith_decode+0x92>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8008a8a:	60e7      	str	r7, [r4, #12]
 8008a8c:	e7f5      	b.n	8008a7a <arith_decode+0x92>
  } else if (e->a < 0x8000L) {
 8008a8e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008a92:	da08      	bge.n	8008aa6 <arith_decode+0xbe>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8008a94:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 8008a98:	4296      	cmp	r6, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8008a9a:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 8008a9c:	ddca      	ble.n	8008a34 <arith_decode+0x4c>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8008a9e:	404b      	eors	r3, r1
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8008aa0:	f080 0080 	eor.w	r0, r0, #128	; 0x80
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8008aa4:	702b      	strb	r3, [r5, #0]
    }
  }

  return sv >> 7;
}
 8008aa6:	09c0      	lsrs	r0, r0, #7
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	08021ea8 	.word	0x08021ea8

08008ab0 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8008ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8008ab4:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8008ab8:	f500 71a8 	add.w	r1, r0, #336	; 0x150
{
 8008abc:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8008abe:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8008ac2:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 8008ac6:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8088 	beq.w	8008bde <start_pass+0x12e>
    if (cinfo->Ss == 0) {
 8008ace:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8008ad2:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 8008ad6:	b95a      	cbnz	r2, 8008af0 <start_pass+0x40>
      if (cinfo->Se != 0)
 8008ad8:	b1a1      	cbz	r1, 8008b04 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	2611      	movs	r6, #17
 8008ade:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8008ae2:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8008ae6:	6258      	str	r0, [r3, #36]	; 0x24
 8008ae8:	4620      	mov	r0, r4
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4798      	blx	r3
 8008aee:	e00f      	b.n	8008b10 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8008af0:	428a      	cmp	r2, r1
 8008af2:	dcf2      	bgt.n	8008ada <start_pass+0x2a>
 8008af4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008af8:	428b      	cmp	r3, r1
 8008afa:	dbee      	blt.n	8008ada <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 8008afc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d1ea      	bne.n	8008ada <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 8008b04:	b117      	cbz	r7, 8008b0c <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 8008b06:	1e7b      	subs	r3, r7, #1
 8008b08:	4283      	cmp	r3, r0
 8008b0a:	d1e6      	bne.n	8008ada <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8008b0c:	280d      	cmp	r0, #13
 8008b0e:	dce4      	bgt.n	8008ada <start_pass+0x2a>
 8008b10:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 8008b14:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8008b18:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008b1c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8008b20:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008b24:	454b      	cmp	r3, r9
 8008b26:	dc1f      	bgt.n	8008b68 <start_pass+0xb8>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8008b28:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d153      	bne.n	8008bd8 <start_pass+0x128>
      if (cinfo->Ss == 0)
 8008b30:	4b63      	ldr	r3, [pc, #396]	; (8008cc0 <start_pass+0x210>)
 8008b32:	4964      	ldr	r1, [pc, #400]	; (8008cc4 <start_pass+0x214>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	bf08      	it	eq
 8008b38:	460b      	moveq	r3, r1
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	f105 0914 	add.w	r9, r5, #20
 8008b42:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8008b44:	46c2      	mov	sl, r8
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8008b46:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008b48:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008b4c:	4543      	cmp	r3, r8
 8008b4e:	dc5f      	bgt.n	8008c10 <start_pass+0x160>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 8008b50:	2300      	movs	r3, #0
  entropy->a = 0;
 8008b52:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8008b56:	f06f 030f 	mvn.w	r3, #15
 8008b5a:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8008b5c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008b60:	636b      	str	r3, [r5, #52]	; 0x34
}
 8008b62:	b003      	add	sp, #12
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8008b68:	f85a 3f04 	ldr.w	r3, [sl, #4]!
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8008b6c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8008b70:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8008b72:	0230      	lsls	r0, r6, #8
 8008b74:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8008b78:	b162      	cbz	r2, 8008b94 <start_pass+0xe4>
 8008b7a:	580a      	ldr	r2, [r1, r0]
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	da09      	bge.n	8008b94 <start_pass+0xe4>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8008b80:	6822      	ldr	r2, [r4, #0]
 8008b82:	2300      	movs	r3, #0
 8008b84:	f04f 31ff 	mov.w	r1, #4294967295
 8008b88:	4620      	mov	r0, r4
 8008b8a:	61d3      	str	r3, [r2, #28]
 8008b8c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8008b90:	6852      	ldr	r2, [r2, #4]
 8008b92:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8008b94:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8008b98:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8008b9c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8008ba0:	42ba      	cmp	r2, r7
 8008ba2:	da02      	bge.n	8008baa <start_pass+0xfa>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008ba4:	f109 0901 	add.w	r9, r9, #1
 8008ba8:	e7b8      	b.n	8008b1c <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8008baa:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 8008bae:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8008bb2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 8008bb6:	4291      	cmp	r1, r2
 8008bb8:	d008      	beq.n	8008bcc <start_pass+0x11c>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	61d7      	str	r7, [r2, #28]
 8008bc4:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8008bc8:	6852      	ldr	r2, [r2, #4]
 8008bca:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 8008bcc:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8008bd0:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 8008bd2:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8008bd6:	e7e1      	b.n	8008b9c <start_pass+0xec>
      if (cinfo->Ss == 0)
 8008bd8:	4b3b      	ldr	r3, [pc, #236]	; (8008cc8 <start_pass+0x218>)
 8008bda:	493c      	ldr	r1, [pc, #240]	; (8008ccc <start_pass+0x21c>)
 8008bdc:	e7aa      	b.n	8008b34 <start_pass+0x84>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8008bde:	b96a      	cbnz	r2, 8008bfc <start_pass+0x14c>
 8008be0:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8008be4:	b953      	cbnz	r3, 8008bfc <start_pass+0x14c>
 8008be6:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8008bea:	b93b      	cbnz	r3, 8008bfc <start_pass+0x14c>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8008bec:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8008bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8008bf2:	dc0b      	bgt.n	8008c0c <start_pass+0x15c>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8008bf4:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d007      	beq.n	8008c0c <start_pass+0x15c>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	227d      	movs	r2, #125	; 0x7d
 8008c00:	f04f 31ff 	mov.w	r1, #4294967295
 8008c04:	4620      	mov	r0, r4
 8008c06:	615a      	str	r2, [r3, #20]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	4798      	blx	r3
      if (cinfo->Ss == 0)
 8008c0c:	4b30      	ldr	r3, [pc, #192]	; (8008cd0 <start_pass+0x220>)
 8008c0e:	e794      	b.n	8008b3a <start_pass+0x8a>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8008c10:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8008c14:	f856 bf04 	ldr.w	fp, [r6, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8008c18:	b133      	cbz	r3, 8008c28 <start_pass+0x178>
 8008c1a:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8008c1e:	bb43      	cbnz	r3, 8008c72 <start_pass+0x1c2>
 8008c20:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d13a      	bne.n	8008c9e <start_pass+0x1ee>
      tbl = compptr->dc_tbl_no;
 8008c28:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8008c2c:	2f0f      	cmp	r7, #15
 8008c2e:	d906      	bls.n	8008c3e <start_pass+0x18e>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	2232      	movs	r2, #50	; 0x32
 8008c34:	4620      	mov	r0, r4
 8008c36:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8008c3e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	b933      	cbnz	r3, 8008c54 <start_pass+0x1a4>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	2240      	movs	r2, #64	; 0x40
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4798      	blx	r3
 8008c52:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8008c54:	2240      	movs	r2, #64	; 0x40
 8008c56:	2100      	movs	r1, #0
 8008c58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c5a:	f016 fbed 	bl	801f438 <memset>
      entropy->last_dc_val[ci] = 0;
 8008c5e:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8008c62:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8008c66:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008c6a:	b9eb      	cbnz	r3, 8008ca8 <start_pass+0x1f8>
 8008c6c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008c70:	b1ab      	cbz	r3, 8008c9e <start_pass+0x1ee>
      tbl = compptr->ac_tbl_no;
 8008c72:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8008c76:	2f0f      	cmp	r7, #15
 8008c78:	d819      	bhi.n	8008cae <start_pass+0x1fe>
      if (entropy->ac_stats[tbl] == NULL)
 8008c7a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8008c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c80:	b93b      	cbnz	r3, 8008c92 <start_pass+0x1e2>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8008c82:	6863      	ldr	r3, [r4, #4]
 8008c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c88:	2101      	movs	r1, #1
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4798      	blx	r3
 8008c90:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8008c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c96:	2100      	movs	r1, #0
 8008c98:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008c9a:	f016 fbcd 	bl	801f438 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008c9e:	f108 0801 	add.w	r8, r8, #1
 8008ca2:	f109 0904 	add.w	r9, r9, #4
 8008ca6:	e74f      	b.n	8008b48 <start_pass+0x98>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8008ca8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8008cac:	e7e0      	b.n	8008c70 <start_pass+0x1c0>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	2232      	movs	r2, #50	; 0x32
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4798      	blx	r3
 8008cbc:	e7dd      	b.n	8008c7a <start_pass+0x1ca>
 8008cbe:	bf00      	nop
 8008cc0:	08009141 	.word	0x08009141
 8008cc4:	08009275 	.word	0x08009275
 8008cc8:	08008fc9 	.word	0x08008fc9
 8008ccc:	080090ef 	.word	0x080090ef
 8008cd0:	08008d77 	.word	0x08008d77

08008cd4 <process_restart>:
{
 8008cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8008cd8:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8008cdc:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	4798      	blx	r3
 8008ce2:	b928      	cbnz	r0, 8008cf0 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	2219      	movs	r2, #25
 8008ce8:	4620      	mov	r0, r4
 8008cea:	615a      	str	r2, [r3, #20]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4798      	blx	r3
{
 8008cf0:	2600      	movs	r6, #0
 8008cf2:	f105 0714 	add.w	r7, r5, #20
 8008cf6:	f504 78a8 	add.w	r8, r4, #336	; 0x150
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8008cfa:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008cfc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008d00:	42b3      	cmp	r3, r6
 8008d02:	dc0a      	bgt.n	8008d1a <process_restart+0x46>
  entropy->c = 0;
 8008d04:	2300      	movs	r3, #0
  entropy->a = 0;
 8008d06:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8008d0a:	f06f 030f 	mvn.w	r3, #15
 8008d0e:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8008d10:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008d14:	636b      	str	r3, [r5, #52]	; 0x34
}
 8008d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8008d1a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8008d1e:	f858 af04 	ldr.w	sl, [r8, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8008d22:	b12b      	cbz	r3, 8008d30 <process_restart+0x5c>
 8008d24:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8008d28:	b9ab      	cbnz	r3, 8008d56 <process_restart+0x82>
 8008d2a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8008d2e:	b9e3      	cbnz	r3, 8008d6a <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8008d30:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008d34:	2240      	movs	r2, #64	; 0x40
 8008d36:	2100      	movs	r1, #0
 8008d38:	330e      	adds	r3, #14
 8008d3a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008d3e:	f016 fb7b 	bl	801f438 <memset>
      entropy->last_dc_val[ci] = 0;
 8008d42:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 8008d46:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8008d4a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008d4e:	b97b      	cbnz	r3, 8008d70 <process_restart+0x9c>
 8008d50:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008d54:	b14b      	cbz	r3, 8008d6a <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8008d56:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d5e:	2100      	movs	r1, #0
 8008d60:	331e      	adds	r3, #30
 8008d62:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008d66:	f016 fb67 	bl	801f438 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008d6a:	3601      	adds	r6, #1
 8008d6c:	3704      	adds	r7, #4
 8008d6e:	e7c5      	b.n	8008cfc <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8008d70:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8008d74:	e7ee      	b.n	8008d54 <process_restart+0x80>

08008d76 <decode_mcu>:
{
 8008d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8008d7a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8008d7e:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8008d80:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8008d84:	ed2d 8b02 	vpush	{d8}
 8008d88:	b087      	sub	sp, #28
 8008d8a:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 8008d8c:	b133      	cbz	r3, 8008d9c <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 8008d8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008d90:	b90b      	cbnz	r3, 8008d96 <decode_mcu+0x20>
      process_restart(cinfo);
 8008d92:	f7ff ff9f 	bl	8008cd4 <process_restart>
    entropy->restarts_to_go--;
 8008d96:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8008d9c:	692b      	ldr	r3, [r5, #16]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	f000 80aa 	beq.w	8008ef8 <decode_mcu+0x182>
  natural_order = cinfo->natural_order;
 8008da4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008da8:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 8008daa:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008dac:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 8008db0:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8008db2:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 8008db6:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008dba:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8008dbe:	42bb      	cmp	r3, r7
 8008dc0:	f340 809a 	ble.w	8008ef8 <decode_mcu+0x182>
    block = MCU_data[blkn];
 8008dc4:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 8008dc6:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8008dc8:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 8008dca:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8008dce:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8008dd0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8008dd4:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 8008dd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008dda:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8008dde:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8008de2:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 8008de6:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 8008de8:	6952      	ldr	r2, [r2, #20]
 8008dea:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8008dee:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8008df0:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 8008df4:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 8008df6:	4631      	mov	r1, r6
 8008df8:	f7ff fdf6 	bl	80089e8 <arith_decode>
 8008dfc:	bb68      	cbnz	r0, 8008e5a <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 8008dfe:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8008e02:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008e06:	9a00      	ldr	r2, [sp, #0]
 8008e08:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 8008e0a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80c3 	beq.w	8008f9a <decode_mcu+0x224>
    tbl = compptr->ac_tbl_no;
 8008e14:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 8008e16:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 8008e18:	699b      	ldr	r3, [r3, #24]
    k = 0;
 8008e1a:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008e1e:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 8008e22:	f8db 1078 	ldr.w	r1, [fp, #120]	; 0x78
 8008e26:	eb06 0246 	add.w	r2, r6, r6, lsl #1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8008e2a:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8008e2c:	eb01 0902 	add.w	r9, r1, r2
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7ff fdd9 	bl	80089e8 <arith_decode>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	f040 80af 	bne.w	8008f9a <decode_mcu+0x224>
	if (arith_decode(cinfo, st + 1)) break;
 8008e3c:	f109 0101 	add.w	r1, r9, #1
 8008e40:	4620      	mov	r0, r4
	k++;
 8008e42:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 8008e44:	f7ff fdd0 	bl	80089e8 <arith_decode>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d16d      	bne.n	8008f28 <decode_mcu+0x1b2>
	if (k >= cinfo->lim_Se) {
 8008e4c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 8008e50:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 8008e54:	42b2      	cmp	r2, r6
 8008e56:	dcf1      	bgt.n	8008e3c <decode_mcu+0xc6>
 8008e58:	e043      	b.n	8008ee2 <decode_mcu+0x16c>
      sign = arith_decode(cinfo, st + 1);
 8008e5a:	1c71      	adds	r1, r6, #1
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f7ff fdc3 	bl	80089e8 <arith_decode>
      st += 2; st += sign;
 8008e62:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8008e64:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008e66:	4620      	mov	r0, r4
      st += 2; st += sign;
 8008e68:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008e6c:	4651      	mov	r1, sl
 8008e6e:	f7ff fdbb 	bl	80089e8 <arith_decode>
 8008e72:	4606      	mov	r6, r0
 8008e74:	b140      	cbz	r0, 8008e88 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8008e76:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8008e7a:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 8008e7e:	4651      	mov	r1, sl
 8008e80:	4620      	mov	r0, r4
 8008e82:	f7ff fdb1 	bl	80089e8 <arith_decode>
 8008e86:	bb40      	cbnz	r0, 8008eda <decode_mcu+0x164>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	4423      	add	r3, r4
 8008e8c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8008e90:	4699      	mov	r9, r3
 8008e92:	2301      	movs	r3, #1
 8008e94:	fa03 f202 	lsl.w	r2, r3, r2
 8008e98:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 8008e9c:	db35      	blt.n	8008f0a <decode_mcu+0x194>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8008e9e:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8008ea2:	fa03 f202 	lsl.w	r2, r3, r2
 8008ea6:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8008eaa:	bfcc      	ite	gt
 8008eac:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8008eb0:	f108 0201 	addle.w	r2, r8, #1
 8008eb4:	0092      	lsls	r2, r2, #2
      st += 14;
 8008eb6:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 8008eba:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8008ebc:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 8008ec0:	1076      	asrs	r6, r6, #1
 8008ec2:	d124      	bne.n	8008f0e <decode_mcu+0x198>
      v += 1; if (sign) v = -v;
 8008ec4:	f1b8 0f00 	cmp.w	r8, #0
 8008ec8:	d12b      	bne.n	8008f22 <decode_mcu+0x1ac>
 8008eca:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 8008ece:	f8db 2014 	ldr.w	r2, [fp, #20]
 8008ed2:	444a      	add	r2, r9
 8008ed4:	f8cb 2014 	str.w	r2, [fp, #20]
 8008ed8:	e793      	b.n	8008e02 <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 8008eda:	0076      	lsls	r6, r6, #1
 8008edc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8008ee0:	d110      	bne.n	8008f04 <decode_mcu+0x18e>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	2275      	movs	r2, #117	; 0x75
 8008ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8008eea:	4620      	mov	r0, r4
 8008eec:	615a      	str	r2, [r3, #20]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8008ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef6:	612b      	str	r3, [r5, #16]
}
 8008ef8:	2001      	movs	r0, #1
 8008efa:	b007      	add	sp, #28
 8008efc:	ecbd 8b02 	vpop	{d8}
 8008f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8008f04:	f10a 0a01 	add.w	sl, sl, #1
 8008f08:	e7b9      	b.n	8008e7e <decode_mcu+0x108>
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	e7d3      	b.n	8008eb6 <decode_mcu+0x140>
	if (arith_decode(cinfo, st)) v |= m;
 8008f0e:	4620      	mov	r0, r4
 8008f10:	9102      	str	r1, [sp, #8]
 8008f12:	f7ff fd69 	bl	80089e8 <arith_decode>
 8008f16:	9902      	ldr	r1, [sp, #8]
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0d1      	beq.n	8008ec0 <decode_mcu+0x14a>
 8008f1c:	ea49 0906 	orr.w	r9, r9, r6
 8008f20:	e7ce      	b.n	8008ec0 <decode_mcu+0x14a>
      v += 1; if (sign) v = -v;
 8008f22:	ea6f 0909 	mvn.w	r9, r9
 8008f26:	e7d2      	b.n	8008ece <decode_mcu+0x158>
      st += 2;
 8008f28:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8008f2c:	ee18 1a10 	vmov	r1, s16
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7ff fd59 	bl	80089e8 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008f36:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8008f38:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f7ff fd54 	bl	80089e8 <arith_decode>
 8008f40:	4680      	mov	r8, r0
 8008f42:	b1a8      	cbz	r0, 8008f70 <decode_mcu+0x1fa>
	if (arith_decode(cinfo, st)) {
 8008f44:	4649      	mov	r1, r9
 8008f46:	4620      	mov	r0, r4
 8008f48:	f7ff fd4e 	bl	80089e8 <arith_decode>
 8008f4c:	b180      	cbz	r0, 8008f70 <decode_mcu+0x1fa>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008f4e:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 8008f52:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 8008f56:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008f5a:	42b1      	cmp	r1, r6
 8008f5c:	bfac      	ite	ge
 8008f5e:	21bd      	movge	r1, #189	; 0xbd
 8008f60:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 8008f62:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 8008f66:	4649      	mov	r1, r9
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7ff fd3d 	bl	80089e8 <arith_decode>
 8008f6e:	b9b0      	cbnz	r0, 8008f9e <decode_mcu+0x228>
      st += 14;
 8008f70:	f109 010e 	add.w	r1, r9, #14
      v = m;
 8008f74:	46c1      	mov	r9, r8
      while (m >>= 1)
 8008f76:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f7a:	d118      	bne.n	8008fae <decode_mcu+0x238>
      v += 1; if (sign) v = -v;
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	bb03      	cbnz	r3, 8008fc2 <decode_mcu+0x24c>
 8008f80:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 8008f84:	9b04      	ldr	r3, [sp, #16]
 8008f86:	9900      	ldr	r1, [sp, #0]
 8008f88:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008f8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 8008f90:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008f94:	42b3      	cmp	r3, r6
 8008f96:	f73f af44 	bgt.w	8008e22 <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008f9a:	3701      	adds	r7, #1
 8008f9c:	e70d      	b.n	8008dba <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 8008f9e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008fa2:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 8008fa6:	d09c      	beq.n	8008ee2 <decode_mcu+0x16c>
	    st += 1;
 8008fa8:	f109 0901 	add.w	r9, r9, #1
 8008fac:	e7db      	b.n	8008f66 <decode_mcu+0x1f0>
	if (arith_decode(cinfo, st)) v |= m;
 8008fae:	4620      	mov	r0, r4
 8008fb0:	9102      	str	r1, [sp, #8]
 8008fb2:	f7ff fd19 	bl	80089e8 <arith_decode>
 8008fb6:	9902      	ldr	r1, [sp, #8]
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d0dc      	beq.n	8008f76 <decode_mcu+0x200>
 8008fbc:	ea49 0908 	orr.w	r9, r9, r8
 8008fc0:	e7d9      	b.n	8008f76 <decode_mcu+0x200>
      v += 1; if (sign) v = -v;
 8008fc2:	ea6f 0209 	mvn.w	r2, r9
 8008fc6:	e7dd      	b.n	8008f84 <decode_mcu+0x20e>

08008fc8 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 8008fc8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8008fd4:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8008fd8:	ed2d 8b02 	vpush	{d8}
 8008fdc:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 8008fde:	b133      	cbz	r3, 8008fee <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 8008fe0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008fe2:	b90b      	cbnz	r3, 8008fe8 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 8008fe4:	f7ff fe76 	bl	8008cd4 <process_restart>
    entropy->restarts_to_go--;
 8008fe8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008fea:	3b01      	subs	r3, #1
 8008fec:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8008fee:	6933      	ldr	r3, [r6, #16]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	d076      	beq.n	80090e2 <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8008ff4:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8008ff8:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8008ffa:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 8008ffe:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009002:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009004:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 8009008:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800900c:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800900e:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009012:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009016:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009018:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800901a:	2f00      	cmp	r7, #0
 800901c:	dc37      	bgt.n	800908e <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800901e:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009022:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009026:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 8009028:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800902c:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009030:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8009034:	42ab      	cmp	r3, r5
 8009036:	db54      	blt.n	80090e2 <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009038:	1e6b      	subs	r3, r5, #1
 800903a:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800903c:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800903e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009042:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009046:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800904a:	dd05      	ble.n	8009058 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800904c:	4651      	mov	r1, sl
 800904e:	4620      	mov	r0, r4
 8009050:	f7ff fcca 	bl	80089e8 <arith_decode>
 8009054:	2800      	cmp	r0, #0
 8009056:	d144      	bne.n	80090e2 <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 8009058:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800905c:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800905e:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 8009062:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8009066:	b1d1      	cbz	r1, 800909e <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 8009068:	f10a 0102 	add.w	r1, sl, #2
 800906c:	4620      	mov	r0, r4
 800906e:	f7ff fcbb 	bl	80089e8 <arith_decode>
 8009072:	2800      	cmp	r0, #0
 8009074:	d0dc      	beq.n	8009030 <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 8009076:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800907a:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800907e:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 8009080:	bfb4      	ite	lt
 8009082:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 8009084:	9a01      	ldrge	r2, [sp, #4]
 8009086:	4413      	add	r3, r2
 8009088:	f8a8 3000 	strh.w	r3, [r8]
 800908c:	e7d0      	b.n	8009030 <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800908e:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009092:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1c1      	bne.n	800901e <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800909a:	3f01      	subs	r7, #1
 800909c:	e7bd      	b.n	800901a <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800909e:	f10a 0101 	add.w	r1, sl, #1
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7ff fca0 	bl	80089e8 <arith_decode>
 80090a8:	b150      	cbz	r0, 80090c0 <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 80090aa:	ee18 1a10 	vmov	r1, s16
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7ff fc9a 	bl	80089e8 <arith_decode>
	  *thiscoef = m1;
 80090b4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80090b8:	2800      	cmp	r0, #0
 80090ba:	bf18      	it	ne
 80090bc:	4613      	movne	r3, r2
 80090be:	e7e3      	b.n	8009088 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 80090c0:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 80090c4:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 80090c8:	42aa      	cmp	r2, r5
 80090ca:	dac5      	bge.n	8009058 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	2275      	movs	r2, #117	; 0x75
 80090d0:	f04f 31ff 	mov.w	r1, #4294967295
 80090d4:	4620      	mov	r0, r4
 80090d6:	615a      	str	r2, [r3, #20]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 80090dc:	f04f 33ff 	mov.w	r3, #4294967295
 80090e0:	6133      	str	r3, [r6, #16]
}
 80090e2:	2001      	movs	r0, #1
 80090e4:	b005      	add	sp, #20
 80090e6:	ecbd 8b02 	vpop	{d8}
 80090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090ee <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 80090ee:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 80090f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f6:	4604      	mov	r4, r0
 80090f8:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80090fa:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 80090fe:	b133      	cbz	r3, 800910e <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 8009100:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009102:	b90b      	cbnz	r3, 8009108 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 8009104:	f7ff fde6 	bl	8008cd4 <process_restart>
    entropy->restarts_to_go--;
 8009108:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800910a:	3b01      	subs	r3, #1
 800910c:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800910e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8009112:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 8009114:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009116:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009118:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800911a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800911e:	42ab      	cmp	r3, r5
 8009120:	dc02      	bgt.n	8009128 <decode_mcu_DC_refine+0x3a>
}
 8009122:	2001      	movs	r0, #1
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 8009128:	4631      	mov	r1, r6
 800912a:	4620      	mov	r0, r4
 800912c:	f7ff fc5c 	bl	80089e8 <arith_decode>
 8009130:	b120      	cbz	r0, 800913c <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 8009132:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8009136:	8813      	ldrh	r3, [r2, #0]
 8009138:	433b      	orrs	r3, r7
 800913a:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800913c:	3501      	adds	r5, #1
 800913e:	e7ec      	b.n	800911a <decode_mcu_DC_refine+0x2c>

08009140 <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 8009140:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	b087      	sub	sp, #28
 800914c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800914e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8009152:	b133      	cbz	r3, 8009162 <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8009154:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009156:	b90b      	cbnz	r3, 800915c <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 8009158:	f7ff fdbc 	bl	8008cd4 <process_restart>
    entropy->restarts_to_go--;
 800915c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800915e:	3b01      	subs	r3, #1
 8009160:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009162:	6933      	ldr	r3, [r6, #16]
 8009164:	3301      	adds	r3, #1
 8009166:	d01d      	beq.n	80091a4 <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 8009168:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800916a:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800916e:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 8009172:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009174:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009178:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 8009182:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009184:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8009188:	42ab      	cmp	r3, r5
 800918a:	db0b      	blt.n	80091a4 <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800918c:	1e6b      	subs	r3, r5, #1
 800918e:	f8d9 1078 	ldr.w	r1, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8009192:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009198:	eb01 0803 	add.w	r8, r1, r3
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800919c:	4641      	mov	r1, r8
 800919e:	f7ff fc23 	bl	80089e8 <arith_decode>
 80091a2:	b1b0      	cbz	r0, 80091d2 <decode_mcu_AC_first+0x92>
}
 80091a4:	2001      	movs	r0, #1
 80091a6:	b007      	add	sp, #28
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 80091ac:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 80091ae:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 80091b2:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 80091b6:	42aa      	cmp	r2, r5
 80091b8:	da0b      	bge.n	80091d2 <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	2275      	movs	r2, #117	; 0x75
 80091be:	f04f 31ff 	mov.w	r1, #4294967295
 80091c2:	4620      	mov	r0, r4
 80091c4:	615a      	str	r2, [r3, #20]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 80091ca:	f04f 33ff 	mov.w	r3, #4294967295
 80091ce:	6133      	str	r3, [r6, #16]
	    return TRUE;
 80091d0:	e7e8      	b.n	80091a4 <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 80091d2:	f108 0101 	add.w	r1, r8, #1
 80091d6:	4620      	mov	r0, r4
 80091d8:	f7ff fc06 	bl	80089e8 <arith_decode>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d0e5      	beq.n	80091ac <decode_mcu_AC_first+0x6c>
    st += 2;
 80091e0:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 80091e4:	4659      	mov	r1, fp
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7ff fbfe 	bl	80089e8 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 80091ec:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 80091ee:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7ff fbf9 	bl	80089e8 <arith_decode>
 80091f6:	4607      	mov	r7, r0
 80091f8:	b1b0      	cbz	r0, 8009228 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 80091fa:	4641      	mov	r1, r8
 80091fc:	4620      	mov	r0, r4
 80091fe:	f7ff fbf3 	bl	80089e8 <arith_decode>
 8009202:	b188      	cbz	r0, 8009228 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009204:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 8009206:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 8009208:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800920c:	18e1      	adds	r1, r4, r3
 800920e:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 8009212:	42a9      	cmp	r1, r5
 8009214:	bfac      	ite	ge
 8009216:	21bd      	movge	r1, #189	; 0xbd
 8009218:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800921a:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800921e:	4641      	mov	r1, r8
 8009220:	4620      	mov	r0, r4
 8009222:	f7ff fbe1 	bl	80089e8 <arith_decode>
 8009226:	b988      	cbnz	r0, 800924c <decode_mcu_AC_first+0x10c>
    st += 14;
 8009228:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800922c:	463a      	mov	r2, r7
    while (m >>= 1)
 800922e:	107f      	asrs	r7, r7, #1
 8009230:	d113      	bne.n	800925a <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	b9e3      	cbnz	r3, 8009270 <decode_mcu_AC_first+0x130>
 8009236:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8009238:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800923c:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009240:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8009242:	408a      	lsls	r2, r1
 8009244:	9902      	ldr	r1, [sp, #8]
 8009246:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800924a:	e79b      	b.n	8009184 <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800924c:	007f      	lsls	r7, r7, #1
 800924e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8009252:	d0b2      	beq.n	80091ba <decode_mcu_AC_first+0x7a>
	  st += 1;
 8009254:	f108 0801 	add.w	r8, r8, #1
 8009258:	e7e1      	b.n	800921e <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800925a:	4620      	mov	r0, r4
 800925c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009260:	f7ff fbc2 	bl	80089e8 <arith_decode>
 8009264:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009268:	2800      	cmp	r0, #0
 800926a:	d0e0      	beq.n	800922e <decode_mcu_AC_first+0xee>
 800926c:	433a      	orrs	r2, r7
 800926e:	e7de      	b.n	800922e <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 8009270:	43d2      	mvns	r2, r2
 8009272:	e7e1      	b.n	8009238 <decode_mcu_AC_first+0xf8>

08009274 <decode_mcu_DC_first>:
{
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8009278:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800927c:	b085      	sub	sp, #20
 800927e:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009280:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8009284:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 8009286:	b133      	cbz	r3, 8009296 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8009288:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800928a:	b90b      	cbnz	r3, 8009290 <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800928c:	f7ff fd22 	bl	8008cd4 <process_restart>
    entropy->restarts_to_go--;
 8009290:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009292:	3b01      	subs	r3, #1
 8009294:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009296:	6933      	ldr	r3, [r6, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	d07b      	beq.n	8009394 <decode_mcu_DC_first+0x120>
 800929c:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80092a0:	f04f 0900 	mov.w	r9, #0
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 80092aa:	454b      	cmp	r3, r9
 80092ac:	dd72      	ble.n	8009394 <decode_mcu_DC_first+0x120>
    block = MCU_data[blkn];
 80092ae:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 80092b0:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 80092b2:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 80092b4:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80092b8:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 80092ba:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80092be:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 80092c0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80092c4:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 80092c8:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 80092cc:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 80092d0:	6952      	ldr	r2, [r2, #20]
 80092d2:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 80092d6:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 80092d8:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 80092dc:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 80092de:	4629      	mov	r1, r5
 80092e0:	f7ff fb82 	bl	80089e8 <arith_decode>
 80092e4:	b958      	cbnz	r0, 80092fe <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 80092e6:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 80092ea:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80092ee:	f109 0901 	add.w	r9, r9, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 80092f2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80092f6:	4093      	lsls	r3, r2
 80092f8:	9a02      	ldr	r2, [sp, #8]
 80092fa:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80092fc:	e7d3      	b.n	80092a6 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 80092fe:	1c69      	adds	r1, r5, #1
 8009300:	4620      	mov	r0, r4
 8009302:	f7ff fb71 	bl	80089e8 <arith_decode>
      st += 2; st += sign;
 8009306:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8009308:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800930a:	4620      	mov	r0, r4
      st += 2; st += sign;
 800930c:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009310:	4659      	mov	r1, fp
 8009312:	f7ff fb69 	bl	80089e8 <arith_decode>
 8009316:	4605      	mov	r5, r0
 8009318:	b140      	cbz	r0, 800932c <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800931a:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 800931e:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 8009322:	4659      	mov	r1, fp
 8009324:	4620      	mov	r0, r4
 8009326:	f7ff fb5f 	bl	80089e8 <arith_decode>
 800932a:	bb20      	cbnz	r0, 8009376 <decode_mcu_DC_first+0x102>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800932c:	9b00      	ldr	r3, [sp, #0]
 800932e:	4423      	add	r3, r4
 8009330:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009334:	4698      	mov	r8, r3
 8009336:	2301      	movs	r3, #1
 8009338:	fa03 f202 	lsl.w	r2, r3, r2
 800933c:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 8009340:	db2f      	blt.n	80093a2 <decode_mcu_DC_first+0x12e>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009342:	f898 20f8 	ldrb.w	r2, [r8, #248]	; 0xf8
 8009346:	fa03 f202 	lsl.w	r2, r3, r2
 800934a:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800934e:	bfcc      	ite	gt
 8009350:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009352:	1c7a      	addle	r2, r7, #1
 8009354:	0092      	lsls	r2, r2, #2
      st += 14;
 8009356:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800935a:	46a8      	mov	r8, r5
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800935c:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
      while (m >>= 1)
 8009360:	106d      	asrs	r5, r5, #1
 8009362:	d120      	bne.n	80093a6 <decode_mcu_DC_first+0x132>
      v += 1; if (sign) v = -v;
 8009364:	bb4f      	cbnz	r7, 80093ba <decode_mcu_DC_first+0x146>
 8009366:	f108 0801 	add.w	r8, r8, #1
      entropy->last_dc_val[ci] += v;
 800936a:	f8da 2014 	ldr.w	r2, [sl, #20]
 800936e:	4442      	add	r2, r8
 8009370:	f8ca 2014 	str.w	r2, [sl, #20]
 8009374:	e7b9      	b.n	80092ea <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 8009376:	006d      	lsls	r5, r5, #1
 8009378:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800937c:	d10e      	bne.n	800939c <decode_mcu_DC_first+0x128>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	2275      	movs	r2, #117	; 0x75
 8009382:	f04f 31ff 	mov.w	r1, #4294967295
 8009386:	4620      	mov	r0, r4
 8009388:	615a      	str	r2, [r3, #20]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800938e:	f04f 33ff 	mov.w	r3, #4294967295
 8009392:	6133      	str	r3, [r6, #16]
}
 8009394:	2001      	movs	r0, #1
 8009396:	b005      	add	sp, #20
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800939c:	f10b 0b01 	add.w	fp, fp, #1
 80093a0:	e7bf      	b.n	8009322 <decode_mcu_DC_first+0xae>
 80093a2:	2200      	movs	r2, #0
 80093a4:	e7d7      	b.n	8009356 <decode_mcu_DC_first+0xe2>
	if (arith_decode(cinfo, st)) v |= m;
 80093a6:	4620      	mov	r0, r4
 80093a8:	9100      	str	r1, [sp, #0]
 80093aa:	f7ff fb1d 	bl	80089e8 <arith_decode>
 80093ae:	9900      	ldr	r1, [sp, #0]
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0d5      	beq.n	8009360 <decode_mcu_DC_first+0xec>
 80093b4:	ea48 0805 	orr.w	r8, r8, r5
 80093b8:	e7d2      	b.n	8009360 <decode_mcu_DC_first+0xec>
      v += 1; if (sign) v = -v;
 80093ba:	ea6f 0808 	mvn.w	r8, r8
 80093be:	e7d4      	b.n	800936a <decode_mcu_DC_first+0xf6>

080093c0 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80093c0:	6843      	ldr	r3, [r0, #4]
 80093c2:	22bc      	movs	r2, #188	; 0xbc
 80093c4:	2101      	movs	r1, #1
 80093c6:	681b      	ldr	r3, [r3, #0]
{
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80093cc:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80093d0:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 80093d2:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 80093d6:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 80093d8:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 80093dc:	2100      	movs	r1, #0
 80093de:	f016 f82b 	bl	801f438 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 80093e2:	2371      	movs	r3, #113	; 0x71
 80093e4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 80093e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80093ec:	b17b      	cbz	r3, 800940e <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80093ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80093f0:	2101      	movs	r1, #1
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	4620      	mov	r0, r4
 80093f6:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80093f8:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4798      	blx	r3
 80093fe:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 8009400:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009406:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800940a:	42ab      	cmp	r3, r5
 800940c:	dc00      	bgt.n	8009410 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800940e:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 8009410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009414:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009416:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 8009418:	f016 f80e 	bl	801f438 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800941c:	e7f2      	b.n	8009404 <jinit_arith_decoder+0x44>
 800941e:	bf00      	nop
 8009420:	08008ab1 	.word	0x08008ab1

08009424 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 8009424:	4770      	bx	lr
	...

08009428 <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 8009428:	6803      	ldr	r3, [r0, #0]
 800942a:	227b      	movs	r2, #123	; 0x7b
 800942c:	f04f 31ff 	mov.w	r1, #4294967295
{
 8009430:	b510      	push	{r4, lr}
 8009432:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 8009434:	615a      	str	r2, [r3, #20]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800943a:	69a3      	ldr	r3, [r4, #24]
 800943c:	4a02      	ldr	r2, [pc, #8]	; (8009448 <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800943e:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 8009440:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 8009442:	2202      	movs	r2, #2
 8009444:	605a      	str	r2, [r3, #4]
}
 8009446:	bd10      	pop	{r4, pc}
 8009448:	08022070 	.word	0x08022070

0800944c <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800944c:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800944e:	1e0c      	subs	r4, r1, #0
{
 8009450:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 8009452:	dd08      	ble.n	8009466 <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 8009454:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 8009456:	686b      	ldr	r3, [r5, #4]
 8009458:	42a3      	cmp	r3, r4
 800945a:	db05      	blt.n	8009468 <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800945c:	682a      	ldr	r2, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800945e:	1b1b      	subs	r3, r3, r4
    src->next_input_byte += (size_t) num_bytes;
 8009460:	4422      	add	r2, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 8009462:	606b      	str	r3, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 8009464:	602a      	str	r2, [r5, #0]
  }
}
 8009466:	bd70      	pop	{r4, r5, r6, pc}
      num_bytes -= (long) src->bytes_in_buffer;
 8009468:	1ae4      	subs	r4, r4, r3
      (void) (*src->fill_input_buffer) (cinfo);
 800946a:	4630      	mov	r0, r6
 800946c:	68eb      	ldr	r3, [r5, #12]
 800946e:	4798      	blx	r3
 8009470:	e7f1      	b.n	8009456 <skip_input_data+0xa>

08009472 <term_source>:
 8009472:	4770      	bx	lr

08009474 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4604      	mov	r4, r0
 8009478:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800947a:	460d      	mov	r5, r1
 800947c:	b101      	cbz	r1, 8009480 <jpeg_mem_src+0xc>
 800947e:	b92a      	cbnz	r2, 800948c <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	222b      	movs	r2, #43	; 0x2b
 8009484:	4620      	mov	r0, r4
 8009486:	615a      	str	r2, [r3, #20]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800948c:	69a1      	ldr	r1, [r4, #24]
 800948e:	b929      	cbnz	r1, 800949c <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	221c      	movs	r2, #28
 8009494:	4620      	mov	r0, r4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800949a:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800949c:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800949e:	4a06      	ldr	r2, [pc, #24]	; (80094b8 <jpeg_mem_src+0x44>)
 80094a0:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 80094a2:	4a06      	ldr	r2, [pc, #24]	; (80094bc <jpeg_mem_src+0x48>)
 80094a4:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 80094a6:	4a06      	ldr	r2, [pc, #24]	; (80094c0 <jpeg_mem_src+0x4c>)
 80094a8:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 80094aa:	4a06      	ldr	r2, [pc, #24]	; (80094c4 <jpeg_mem_src+0x50>)
 80094ac:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 80094ae:	4a06      	ldr	r2, [pc, #24]	; (80094c8 <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 80094b0:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 80094b4:	619a      	str	r2, [r3, #24]
}
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	08009425 	.word	0x08009425
 80094bc:	08009429 	.word	0x08009429
 80094c0:	0800944d 	.word	0x0800944d
 80094c4:	0800d679 	.word	0x0800d679
 80094c8:	08009473 	.word	0x08009473

080094cc <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 80094cc:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80094d0:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 80094d4:	2a01      	cmp	r2, #1
 80094d6:	dc0f      	bgt.n	80094f8 <start_iMCU_row+0x2c>
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 80094d8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 80094dc:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 80094e0:	3a01      	subs	r2, #1
 80094e2:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 80094e6:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 80094e8:	bf34      	ite	cc
 80094ea:	68ca      	ldrcc	r2, [r1, #12]
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 80094ec:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
    coef->MCU_rows_per_iMCU_row = 1;
 80094ee:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 80094f0:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 80094f2:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 80094f6:	4770      	bx	lr
 80094f8:	2201      	movs	r2, #1
 80094fa:	e7f8      	b.n	80094ee <start_iMCU_row+0x22>

080094fc <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 8009502:	f7ff bfe3 	b.w	80094cc <start_iMCU_row>

08009506 <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 8009506:	2000      	movs	r0, #0
 8009508:	4770      	bx	lr

0800950a <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800950a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950e:	f500 7ba8 	add.w	fp, r0, #336	; 0x150
 8009512:	b08f      	sub	sp, #60	; 0x3c
 8009514:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009516:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800951a:	465f      	mov	r7, fp
 800951c:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800951e:	f04f 0801 	mov.w	r8, #1
 8009522:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009526:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800952a:	42b3      	cmp	r3, r6
 800952c:	dc13      	bgt.n	8009556 <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800952e:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8009530:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009534:	69eb      	ldr	r3, [r5, #28]
 8009536:	42b3      	cmp	r3, r6
 8009538:	dc22      	bgt.n	8009580 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800953a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800953e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009542:	3301      	adds	r3, #1
 8009544:	4293      	cmp	r3, r2
 8009546:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800954a:	d271      	bcs.n	8009630 <consume_data+0x126>
    start_iMCU_row(cinfo);
 800954c:	4620      	mov	r0, r4
 800954e:	f7ff ffbd 	bl	80094cc <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 8009552:	2003      	movs	r0, #3
 8009554:	e044      	b.n	80095e0 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 8009556:	f857 1f04 	ldr.w	r1, [r7, #4]!
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800955a:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800955c:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800955e:	6849      	ldr	r1, [r1, #4]
 8009560:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009564:	3112      	adds	r1, #18
 8009566:	f8cd 8000 	str.w	r8, [sp]
 800956a:	435a      	muls	r2, r3
 800956c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8009570:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8009574:	4620      	mov	r0, r4
 8009576:	47d0      	blx	sl
 8009578:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800957c:	3601      	adds	r6, #1
 800957e:	e7d2      	b.n	8009526 <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8009580:	00b3      	lsls	r3, r6, #2
 8009582:	696f      	ldr	r7, [r5, #20]
 8009584:	9308      	str	r3, [sp, #32]
 8009586:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800958a:	42bb      	cmp	r3, r7
 800958c:	f04f 0300 	mov.w	r3, #0
 8009590:	d94b      	bls.n	800962a <consume_data+0x120>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009592:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 8009596:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 8009598:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800959a:	9206      	str	r2, [sp, #24]
 800959c:	e013      	b.n	80095c6 <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800959e:	f85a 2f04 	ldr.w	r2, [sl, #4]!
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80095a2:	f04f 0c00 	mov.w	ip, #0
 80095a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095aa:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 80095ae:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 80095b0:	fb07 f20e 	mul.w	r2, r7, lr
 80095b4:	01d2      	lsls	r2, r2, #7
 80095b6:	9204      	str	r2, [sp, #16]
 80095b8:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 80095bc:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80095be:	9a05      	ldr	r2, [sp, #20]
 80095c0:	4562      	cmp	r2, ip
 80095c2:	dc10      	bgt.n	80095e6 <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80095c4:	3301      	adds	r3, #1
 80095c6:	9a06      	ldr	r2, [sp, #24]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	dce8      	bgt.n	800959e <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 80095cc:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 80095d0:	f105 0120 	add.w	r1, r5, #32
 80095d4:	4620      	mov	r0, r4
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	4798      	blx	r3
 80095da:	bb20      	cbnz	r0, 8009626 <consume_data+0x11c>
	coef->MCU_ctr = MCU_col_num;
 80095dc:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 80095e0:	b00f      	add	sp, #60	; 0x3c
 80095e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 80095e6:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 80095ea:	9904      	ldr	r1, [sp, #16]
 80095ec:	f852 2008 	ldr.w	r2, [r2, r8]
 80095f0:	440a      	add	r2, r1
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80095f2:	2100      	movs	r1, #0
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 80095f4:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80095f6:	9a03      	ldr	r2, [sp, #12]
 80095f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80095fc:	3207      	adds	r2, #7
 80095fe:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8009602:	9807      	ldr	r0, [sp, #28]
 8009604:	458e      	cmp	lr, r1
 8009606:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 800960a:	dc08      	bgt.n	800961e <consume_data+0x114>
 800960c:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800960e:	f10c 0c01 	add.w	ip, ip, #1
 8009612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009614:	f108 0804 	add.w	r8, r8, #4
 8009618:	4411      	add	r1, r2
 800961a:	9103      	str	r1, [sp, #12]
 800961c:	e7cf      	b.n	80095be <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800961e:	3101      	adds	r1, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 8009620:	f842 0f04 	str.w	r0, [r2, #4]!
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8009624:	e7ed      	b.n	8009602 <consume_data+0xf8>
	 MCU_col_num++) {
 8009626:	3701      	adds	r7, #1
 8009628:	e7ad      	b.n	8009586 <consume_data+0x7c>
       yoffset++) {
 800962a:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800962c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800962e:	e781      	b.n	8009534 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8009630:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009634:	4620      	mov	r0, r4
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800963a:	2004      	movs	r0, #4
 800963c:	e7d0      	b.n	80095e0 <consume_data+0xd6>

0800963e <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800963e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009642:	4604      	mov	r4, r0
 8009644:	b089      	sub	sp, #36	; 0x24
 8009646:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009648:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800964c:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8009650:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009654:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009658:	429a      	cmp	r2, r3
 800965a:	db1d      	blt.n	8009698 <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800965c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8009660:	d103      	bne.n	800966a <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 8009662:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009666:	429a      	cmp	r2, r3
 8009668:	d916      	bls.n	8009698 <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800966a:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800966c:	2600      	movs	r6, #0
 800966e:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8009672:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 8009674:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009678:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800967c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009680:	42b3      	cmp	r3, r6
 8009682:	dc13      	bgt.n	80096ac <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 8009684:	1c50      	adds	r0, r2, #1
 8009686:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800968a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800968e:	4298      	cmp	r0, r3
 8009690:	bf2c      	ite	cs
 8009692:	2004      	movcs	r0, #4
 8009694:	2003      	movcc	r0, #3
 8009696:	e006      	b.n	80096a6 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 8009698:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800969c:	4620      	mov	r0, r4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4798      	blx	r3
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1d4      	bne.n	8009650 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 80096a6:	b009      	add	sp, #36	; 0x24
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 80096ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80096ae:	b913      	cbnz	r3, 80096b6 <decompress_data+0x78>
       ci++, compptr++) {
 80096b0:	3601      	adds	r6, #1
 80096b2:	3558      	adds	r5, #88	; 0x58
 80096b4:	e7e1      	b.n	800967a <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 80096b6:	6861      	ldr	r1, [r4, #4]
 80096b8:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 80096ba:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 80096bc:	9000      	str	r0, [sp, #0]
 80096be:	4620      	mov	r0, r4
 80096c0:	6a0f      	ldr	r7, [r1, #32]
 80096c2:	435a      	muls	r2, r3
 80096c4:	9906      	ldr	r1, [sp, #24]
 80096c6:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80096ca:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 80096cc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80096d0:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 80096d2:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	68eb      	ldr	r3, [r5, #12]
 80096d8:	d221      	bcs.n	800971e <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 80096da:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 80096dc:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 80096e0:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 80096e2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 80096ea:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 80096ee:	9202      	str	r2, [sp, #8]
 80096f0:	9a02      	ldr	r2, [sp, #8]
 80096f2:	4552      	cmp	r2, sl
 80096f4:	dadc      	bge.n	80096b0 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 80096f6:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 80096f8:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 80096fc:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 80096fe:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 8009700:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009704:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8009706:	69e9      	ldr	r1, [r5, #28]
 8009708:	9a05      	ldr	r2, [sp, #20]
 800970a:	4541      	cmp	r1, r8
 800970c:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 8009710:	d80f      	bhi.n	8009732 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 8009712:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009714:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 8009718:	9a02      	ldr	r2, [sp, #8]
 800971a:	3201      	adds	r2, #1
 800971c:	e7e7      	b.n	80096ee <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800971e:	6a2a      	ldr	r2, [r5, #32]
 8009720:	fbb2 f1f3 	udiv	r1, r2, r3
 8009724:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8009728:	f1ba 0f00 	cmp.w	sl, #0
 800972c:	bf08      	it	eq
 800972e:	469a      	moveq	sl, r3
 8009730:	e7d4      	b.n	80096dc <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 8009732:	f8cd 9000 	str.w	r9, [sp]
 8009736:	4629      	mov	r1, r5
 8009738:	9307      	str	r3, [sp, #28]
 800973a:	4620      	mov	r0, r4
 800973c:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800973e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8009740:	f108 0801 	add.w	r8, r8, #1
 8009744:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 8009746:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8009748:	e7dd      	b.n	8009706 <decompress_data+0xc8>
	...

0800974c <start_output_pass>:
{
 800974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009750:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 8009754:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 8009756:	692b      	ldr	r3, [r5, #16]
 8009758:	b323      	cbz	r3, 80097a4 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800975a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800975c:	2b00      	cmp	r3, #0
 800975e:	d04b      	beq.n	80097f8 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 8009760:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d047      	beq.n	80097f8 <start_output_pass+0xac>
 8009768:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d043      	beq.n	80097f8 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 8009770:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009772:	b93b      	cbnz	r3, 8009784 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009774:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009776:	2118      	movs	r1, #24
 8009778:	6843      	ldr	r3, [r0, #4]
 800977a:	434a      	muls	r2, r1
 800977c:	2101      	movs	r1, #1
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 8009782:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009784:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 8009786:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800978a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800978e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 8009792:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009794:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009796:	fb0e c703 	mla	r7, lr, r3, ip
 800979a:	4293      	cmp	r3, r2
 800979c:	db07      	blt.n	80097ae <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800979e:	b359      	cbz	r1, 80097f8 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 80097a0:	4b16      	ldr	r3, [pc, #88]	; (80097fc <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 80097a2:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 80097aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 80097ae:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80097b0:	b312      	cbz	r2, 80097f8 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 80097b2:	8816      	ldrh	r6, [r2, #0]
 80097b4:	b306      	cbz	r6, 80097f8 <start_output_pass+0xac>
 80097b6:	8856      	ldrh	r6, [r2, #2]
 80097b8:	b1f6      	cbz	r6, 80097f8 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 80097ba:	8a16      	ldrh	r6, [r2, #16]
 80097bc:	b1e6      	cbz	r6, 80097f8 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 80097be:	8c16      	ldrh	r6, [r2, #32]
 80097c0:	b1d6      	cbz	r6, 80097f8 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 80097c2:	8a56      	ldrh	r6, [r2, #18]
 80097c4:	b1c6      	cbz	r6, 80097f8 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 80097c6:	8892      	ldrh	r2, [r2, #4]
 80097c8:	b1b2      	cbz	r2, 80097f8 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 80097ca:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 80097ce:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 80097d0:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 80097d2:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	db0e      	blt.n	80097f8 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 80097da:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 80097dc:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 80097e0:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 80097e2:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 80097e6:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 80097ea:	bf18      	it	ne
 80097ec:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 80097ee:	2a06      	cmp	r2, #6
 80097f0:	d1f4      	bne.n	80097dc <start_output_pass+0x90>
       ci++, compptr++) {
 80097f2:	3301      	adds	r3, #1
 80097f4:	3058      	adds	r0, #88	; 0x58
 80097f6:	e7cd      	b.n	8009794 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 80097f8:	4b01      	ldr	r3, [pc, #4]	; (8009800 <start_output_pass+0xb4>)
 80097fa:	e7d2      	b.n	80097a2 <start_output_pass+0x56>
 80097fc:	08009987 	.word	0x08009987
 8009800:	0800963f 	.word	0x0800963f

08009804 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8009804:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800980c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800980e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 8009812:	4604      	mov	r4, r0
 8009814:	ed2d 8b02 	vpush	{d8}
 8009818:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800981a:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800981c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 8009820:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8009822:	3b01      	subs	r3, #1
 8009824:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009826:	69ab      	ldr	r3, [r5, #24]
 8009828:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800982a:	f105 0320 	add.w	r3, r5, #32
 800982e:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009832:	69eb      	ldr	r3, [r5, #28]
 8009834:	9a03      	ldr	r2, [sp, #12]
 8009836:	4293      	cmp	r3, r2
 8009838:	dc13      	bgt.n	8009862 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800983a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800983e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 8009842:	3301      	adds	r3, #1
 8009844:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 8009848:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800984c:	3301      	adds	r3, #1
 800984e:	4293      	cmp	r3, r2
 8009850:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8009854:	f080 8090 	bcs.w	8009978 <decompress_onepass+0x174>
    start_iMCU_row(cinfo);
 8009858:	4620      	mov	r0, r4
 800985a:	f7ff fe37 	bl	80094cc <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800985e:	2003      	movs	r0, #3
 8009860:	e02a      	b.n	80098b8 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 8009862:	696f      	ldr	r7, [r5, #20]
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	429f      	cmp	r7, r3
 8009868:	d905      	bls.n	8009876 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	3301      	adds	r3, #1
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	e7dd      	b.n	8009832 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 8009876:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800987a:	b133      	cbz	r3, 800988a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800987c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 8009880:	2100      	movs	r1, #0
 8009882:	6a28      	ldr	r0, [r5, #32]
 8009884:	01d2      	lsls	r2, r2, #7
 8009886:	f015 fdd7 	bl	801f438 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800988a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800988e:	ee18 1a10 	vmov	r1, s16
 8009892:	4620      	mov	r0, r4
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	4798      	blx	r3
 8009898:	b158      	cbz	r0, 80098b2 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800989a:	f04f 0b00 	mov.w	fp, #0
 800989e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
      blkn = 0;			/* index of current DCT block within MCU */
 80098a2:	46da      	mov	sl, fp
 80098a4:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80098a6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80098aa:	455b      	cmp	r3, fp
 80098ac:	dc09      	bgt.n	80098c2 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 80098ae:	3701      	adds	r7, #1
 80098b0:	e7d8      	b.n	8009864 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 80098b2:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 80098b4:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 80098b8:	b00f      	add	sp, #60	; 0x3c
 80098ba:	ecbd 8b02 	vpop	{d8}
 80098be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 80098c2:	9b05      	ldr	r3, [sp, #20]
 80098c4:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80098c8:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 80098ca:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80098cc:	b923      	cbnz	r3, 80098d8 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 80098ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098d0:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80098d2:	f10b 0b01 	add.w	fp, fp, #1
 80098d6:	e7e6      	b.n	80098a6 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 80098d8:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80098da:	f04f 0900 	mov.w	r9, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 80098de:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 80098e2:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 80098e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 80098ec:	9b08      	ldr	r3, [sp, #32]
 80098ee:	429f      	cmp	r7, r3
 80098f0:	bf34      	ite	cc
 80098f2:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 80098f4:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 80098f6:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 80098f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80098fa:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 80098fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80098fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009902:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 8009906:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8009908:	437a      	muls	r2, r7
 800990a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800990c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800990e:	454a      	cmp	r2, r9
 8009910:	dddf      	ble.n	80098d2 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 8009912:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009916:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009918:	4282      	cmp	r2, r0
 800991a:	d304      	bcc.n	8009926 <decompress_onepass+0x122>
 800991c:	9a03      	ldr	r2, [sp, #12]
 800991e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8009920:	444a      	add	r2, r9
 8009922:	4290      	cmp	r0, r2
 8009924:	dd0d      	ble.n	8009942 <decompress_onepass+0x13e>
 8009926:	f10a 4880 	add.w	r8, sl, #1073741824	; 0x40000000
 800992a:	f108 0807 	add.w	r8, r8, #7
 800992e:	eb05 0288 	add.w	r2, r5, r8, lsl #2
{
 8009932:	f04f 0800 	mov.w	r8, #0
 8009936:	9207      	str	r2, [sp, #28]
 8009938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800993a:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800993c:	9a06      	ldr	r2, [sp, #24]
 800993e:	4590      	cmp	r8, r2
 8009940:	db07      	blt.n	8009952 <decompress_onepass+0x14e>
	  blkn += compptr->MCU_width;
 8009942:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009944:	f109 0901 	add.w	r9, r9, #1
	  blkn += compptr->MCU_width;
 8009948:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800994a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800994c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009950:	e7dc      	b.n	800990c <decompress_onepass+0x108>
	      (*inverse_DCT) (cinfo, compptr,
 8009952:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8009954:	f108 0801 	add.w	r8, r8, #1
	      (*inverse_DCT) (cinfo, compptr,
 8009958:	9a04      	ldr	r2, [sp, #16]
 800995a:	930d      	str	r3, [sp, #52]	; 0x34
 800995c:	9200      	str	r2, [sp, #0]
 800995e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009962:	910c      	str	r1, [sp, #48]	; 0x30
 8009964:	9007      	str	r0, [sp, #28]
 8009966:	4620      	mov	r0, r4
 8009968:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800996a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800996c:	9b04      	ldr	r3, [sp, #16]
 800996e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8009970:	4413      	add	r3, r2
 8009972:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8009974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009976:	e7e1      	b.n	800993c <decompress_onepass+0x138>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8009978:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800997c:	4620      	mov	r0, r4
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 8009982:	2004      	movs	r0, #4
 8009984:	e798      	b.n	80098b8 <decompress_onepass+0xb4>

08009986 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8009986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800998a:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800998e:	b0c5      	sub	sp, #276	; 0x114
 8009990:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8009992:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 8009996:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009998:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800999a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800999e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80099a2:	428b      	cmp	r3, r1
 80099a4:	dc03      	bgt.n	80099ae <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 80099a6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 80099aa:	6950      	ldr	r0, [r2, #20]
 80099ac:	b1a8      	cbz	r0, 80099da <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80099ae:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80099b0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80099b4:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80099b6:	2300      	movs	r3, #0
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099bc:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 80099be:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80099c2:	428b      	cmp	r3, r1
 80099c4:	dc1e      	bgt.n	8009a04 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 80099c6:	1c50      	adds	r0, r2, #1
 80099c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80099cc:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 80099d0:	4298      	cmp	r0, r3
 80099d2:	bf2c      	ite	cs
 80099d4:	2004      	movcs	r0, #4
 80099d6:	2003      	movcc	r0, #3
 80099d8:	e011      	b.n	80099fe <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 80099da:	428b      	cmp	r3, r1
 80099dc:	d10a      	bne.n	80099f4 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 80099de:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 80099e2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80099e6:	2900      	cmp	r1, #0
 80099e8:	bf08      	it	eq
 80099ea:	3301      	addeq	r3, #1
 80099ec:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80099f0:	4299      	cmp	r1, r3
 80099f2:	d8dc      	bhi.n	80099ae <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 80099f4:	6813      	ldr	r3, [r2, #0]
 80099f6:	4620      	mov	r0, r4
 80099f8:	4798      	blx	r3
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d1cd      	bne.n	800999a <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 80099fe:	b045      	add	sp, #276	; 0x114
 8009a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 8009a04:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a06:	b923      	cbnz	r3, 8009a12 <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 8009a08:	9b03      	ldr	r3, [sp, #12]
 8009a0a:	3558      	adds	r5, #88	; 0x58
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	9303      	str	r3, [sp, #12]
 8009a10:	e7d3      	b.n	80099ba <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 8009a12:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 8009a14:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 8009a16:	4293      	cmp	r3, r2
 8009a18:	f240 815a 	bls.w	8009cd0 <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 8009a1c:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 8009a1e:	4681      	mov	r9, r0
      last_row = FALSE;
 8009a20:	2100      	movs	r1, #0
      last_row = TRUE;
 8009a22:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 8009a24:	6861      	ldr	r1, [r4, #4]
 8009a26:	9e03      	ldr	r6, [sp, #12]
 8009a28:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8009a2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a2e:	3148      	adds	r1, #72	; 0x48
 8009a30:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	f000 8159 	beq.w	8009cec <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 8009a3a:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 8009a3c:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 8009a3e:	4403      	add	r3, r0
 8009a40:	4342      	muls	r2, r0
 8009a42:	4620      	mov	r0, r4
 8009a44:	9600      	str	r6, [sp, #0]
 8009a46:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 8009a48:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 8009a4a:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 8009a4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 8009a50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a52:	2218      	movs	r2, #24
 8009a54:	9903      	ldr	r1, [sp, #12]
 8009a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 8009a58:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 8009a5a:	fb02 3301 	mla	r3, r2, r1, r3
 8009a5e:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 8009a60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 8009a62:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 8009a64:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 8009a68:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 8009a6c:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 8009a6e:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 8009a70:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 8009a72:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 8009a74:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8009a78:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 8009a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a82:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009a86:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 8009a88:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 8009a8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a8e:	ea4f 230e 	mov.w	r3, lr, lsl #8
 8009a92:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 8009a94:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 8009a98:	9315      	str	r3, [sp, #84]	; 0x54
 8009a9a:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8009a9e:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 8009aa0:	01f3      	lsls	r3, r6, #7
 8009aa2:	9317      	str	r3, [sp, #92]	; 0x5c
 8009aa4:	0233      	lsls	r3, r6, #8
 8009aa6:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 8009aa8:	01cb      	lsls	r3, r1, #7
 8009aaa:	9319      	str	r3, [sp, #100]	; 0x64
 8009aac:	020b      	lsls	r3, r1, #8
 8009aae:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 8009ab0:	01d3      	lsls	r3, r2, #7
 8009ab2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ab4:	0213      	lsls	r3, r2, #8
 8009ab6:	931c      	str	r3, [sp, #112]	; 0x70
 8009ab8:	1f03      	subs	r3, r0, #4
 8009aba:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 8009abc:	2300      	movs	r3, #0
 8009abe:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 8009ac0:	f109 33ff 	add.w	r3, r9, #4294967295
 8009ac4:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 8009ac6:	9b04      	ldr	r3, [sp, #16]
 8009ac8:	454b      	cmp	r3, r9
 8009aca:	da9d      	bge.n	8009a08 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 8009acc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ace:	f853 8f04 	ldr.w	r8, [r3, #4]!
 8009ad2:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 8009ad4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ad6:	b11b      	cbz	r3, 8009ae0 <decompress_smooth_data+0x15a>
 8009ad8:	9b04      	ldr	r3, [sp, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 810c 	beq.w	8009cf8 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 8009ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ae2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009ae6:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 8009ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aea:	b123      	cbz	r3, 8009af6 <decompress_smooth_data+0x170>
 8009aec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009aee:	9a04      	ldr	r2, [sp, #16]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	f000 8104 	beq.w	8009cfe <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 8009af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8009afc:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 8009afe:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 8009b00:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8009b02:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 8009b06:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8009b08:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 8009b0a:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 8009b0e:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 8009b10:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 8009b12:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 8009b14:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8009b16:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 8009b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 8009b1e:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 8009b20:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 8009b22:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 8009b26:	2201      	movs	r2, #1
 8009b28:	a924      	add	r1, sp, #144	; 0x90
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b2e:	f00b fdc6 	bl	80156be <jcopy_block_row>
	if (block_num < last_block_column) {
 8009b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b36:	4293      	cmp	r3, r2
 8009b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b3a:	f240 80ea 	bls.w	8009d12 <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 8009b3e:	9a07      	ldr	r2, [sp, #28]
 8009b40:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 8009b44:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 8009b46:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 8009b4a:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 8009b4c:	9a08      	ldr	r2, [sp, #32]
 8009b4e:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 8009b52:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 8009b54:	9a05      	ldr	r2, [sp, #20]
 8009b56:	6851      	ldr	r1, [r2, #4]
 8009b58:	b1c1      	cbz	r1, 8009b8c <decompress_smooth_data+0x206>
 8009b5a:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8009b5e:	b9aa      	cbnz	r2, 8009b8c <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 8009b60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b62:	1a3a      	subs	r2, r7, r0
 8009b64:	9806      	ldr	r0, [sp, #24]
 8009b66:	4342      	muls	r2, r0
	  if (num >= 0) {
 8009b68:	2024      	movs	r0, #36	; 0x24
 8009b6a:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 8009b6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 8009b6e:	f100 80d7 	bmi.w	8009d20 <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 8009b72:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009b74:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 8009b76:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009b78:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009b7c:	dd04      	ble.n	8009b88 <decompress_smooth_data+0x202>
 8009b7e:	fa06 f101 	lsl.w	r1, r6, r1
 8009b82:	4291      	cmp	r1, r2
 8009b84:	dc00      	bgt.n	8009b88 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 8009b86:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 8009b88:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 8009b8c:	9a05      	ldr	r2, [sp, #20]
 8009b8e:	6891      	ldr	r1, [r2, #8]
 8009b90:	b1c9      	cbz	r1, 8009bc6 <decompress_smooth_data+0x240>
 8009b92:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8009b96:	b9b2      	cbnz	r2, 8009bc6 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 8009b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b9a:	9806      	ldr	r0, [sp, #24]
 8009b9c:	ebab 0202 	sub.w	r2, fp, r2
 8009ba0:	4342      	muls	r2, r0
	  if (num >= 0) {
 8009ba2:	2024      	movs	r0, #36	; 0x24
 8009ba4:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 8009ba6:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 8009ba8:	f100 80c8 	bmi.w	8009d3c <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 8009bac:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009bae:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 8009bb0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009bb2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009bb6:	dd04      	ble.n	8009bc2 <decompress_smooth_data+0x23c>
 8009bb8:	fa06 f101 	lsl.w	r1, r6, r1
 8009bbc:	4291      	cmp	r1, r2
 8009bbe:	dc00      	bgt.n	8009bc2 <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 8009bc0:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 8009bc2:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 8009bc6:	9a05      	ldr	r2, [sp, #20]
 8009bc8:	68d1      	ldr	r1, [r2, #12]
 8009bca:	b1d1      	cbz	r1, 8009c02 <decompress_smooth_data+0x27c>
 8009bcc:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 8009bd0:	b9ba      	cbnz	r2, 8009c02 <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 8009bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd4:	9806      	ldr	r0, [sp, #24]
 8009bd6:	445a      	add	r2, fp
 8009bd8:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 8009bdc:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 8009bde:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 8009be0:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 8009be4:	f100 80b8 	bmi.w	8009d58 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 8009be8:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009bea:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 8009bec:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009bee:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009bf2:	dd04      	ble.n	8009bfe <decompress_smooth_data+0x278>
 8009bf4:	fa06 f101 	lsl.w	r1, r6, r1
 8009bf8:	4291      	cmp	r1, r2
 8009bfa:	dc00      	bgt.n	8009bfe <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 8009bfc:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 8009bfe:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 8009c02:	9a05      	ldr	r2, [sp, #20]
 8009c04:	6912      	ldr	r2, [r2, #16]
 8009c06:	b1e2      	cbz	r2, 8009c42 <decompress_smooth_data+0x2bc>
 8009c08:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 8009c0c:	b9c9      	cbnz	r1, 8009c42 <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 8009c0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c12:	1a09      	subs	r1, r1, r0
 8009c14:	1acb      	subs	r3, r1, r3
 8009c16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c18:	440b      	add	r3, r1
 8009c1a:	9906      	ldr	r1, [sp, #24]
 8009c1c:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 8009c1e:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 8009c20:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 8009c24:	f100 80a6 	bmi.w	8009d74 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 8009c28:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009c2a:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 8009c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c2e:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009c32:	dd04      	ble.n	8009c3e <decompress_smooth_data+0x2b8>
 8009c34:	fa06 f202 	lsl.w	r2, r6, r2
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	dc00      	bgt.n	8009c3e <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 8009c3c:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 8009c3e:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 8009c42:	9b05      	ldr	r3, [sp, #20]
 8009c44:	695a      	ldr	r2, [r3, #20]
 8009c46:	b1da      	cbz	r2, 8009c80 <decompress_smooth_data+0x2fa>
 8009c48:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8009c4c:	b9c3      	cbnz	r3, 8009c80 <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 8009c4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c50:	463b      	mov	r3, r7
 8009c52:	440b      	add	r3, r1
 8009c54:	9906      	ldr	r1, [sp, #24]
 8009c56:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 8009c5a:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 8009c5c:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 8009c5e:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 8009c62:	f100 8095 	bmi.w	8009d90 <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 8009c66:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009c68:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 8009c6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c6c:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009c70:	dd04      	ble.n	8009c7c <decompress_smooth_data+0x2f6>
 8009c72:	fa06 f202 	lsl.w	r2, r6, r2
 8009c76:	429a      	cmp	r2, r3
 8009c78:	dc00      	bgt.n	8009c7c <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 8009c7a:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 8009c7c:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 8009c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c82:	aa24      	add	r2, sp, #144	; 0x90
 8009c84:	4629      	mov	r1, r5
 8009c86:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 8009c8e:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 8009c92:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 8009c94:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 8009c96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c98:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 8009c9a:	3380      	adds	r3, #128	; 0x80
 8009c9c:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8009ca0:	9307      	str	r3, [sp, #28]
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	3380      	adds	r3, #128	; 0x80
 8009ca6:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 8009ca8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009caa:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 8009cac:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 8009cae:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 8009cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	930c      	str	r3, [sp, #48]	; 0x30
 8009cb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cba:	428a      	cmp	r2, r1
 8009cbc:	d222      	bcs.n	8009d04 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 8009cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009cc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cc6:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 8009cc8:	9b04      	ldr	r3, [sp, #16]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	e6fa      	b.n	8009ac6 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8009cd0:	6a2b      	ldr	r3, [r5, #32]
 8009cd2:	fbb3 f1f0 	udiv	r1, r3, r0
 8009cd6:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8009cda:	f1b9 0f00 	cmp.w	r9, #0
 8009cde:	d103      	bne.n	8009ce8 <decompress_smooth_data+0x362>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4681      	mov	r9, r0
      last_row = TRUE;
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	e69c      	b.n	8009a22 <decompress_smooth_data+0x9c>
 8009ce8:	464b      	mov	r3, r9
 8009cea:	e7fb      	b.n	8009ce4 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 8009cec:	4620      	mov	r0, r4
 8009cee:	9200      	str	r2, [sp, #0]
 8009cf0:	47c0      	blx	r8
      first_row = TRUE;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	931d      	str	r3, [sp, #116]	; 0x74
 8009cf6:	e6ab      	b.n	8009a50 <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 8009cf8:	f8cd 801c 	str.w	r8, [sp, #28]
 8009cfc:	e6f4      	b.n	8009ae8 <decompress_smooth_data+0x162>
 8009cfe:	f8cd 8020 	str.w	r8, [sp, #32]
 8009d02:	e6fb      	b.n	8009afc <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 8009d04:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 8009d06:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 8009d0a:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 8009d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d10:	e709      	b.n	8009b26 <decompress_smooth_data+0x1a0>
 8009d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d14:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009d18:	9211      	str	r2, [sp, #68]	; 0x44
 8009d1a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8009d1e:	e719      	b.n	8009b54 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 8009d20:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 8009d22:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 8009d24:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009d26:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009d2a:	dd05      	ble.n	8009d38 <decompress_smooth_data+0x3b2>
 8009d2c:	fa06 f101 	lsl.w	r1, r6, r1
 8009d30:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 8009d32:	bfd8      	it	le
 8009d34:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 8009d38:	4252      	negs	r2, r2
 8009d3a:	e725      	b.n	8009b88 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 8009d3c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 8009d3e:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 8009d40:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009d42:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009d46:	dd05      	ble.n	8009d54 <decompress_smooth_data+0x3ce>
 8009d48:	fa06 f101 	lsl.w	r1, r6, r1
 8009d4c:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 8009d4e:	bfd8      	it	le
 8009d50:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 8009d54:	4252      	negs	r2, r2
 8009d56:	e734      	b.n	8009bc2 <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 8009d58:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 8009d5a:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 8009d5c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009d5e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009d62:	dd05      	ble.n	8009d70 <decompress_smooth_data+0x3ea>
 8009d64:	fa06 f101 	lsl.w	r1, r6, r1
 8009d68:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 8009d6a:	bfd8      	it	le
 8009d6c:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 8009d70:	4252      	negs	r2, r2
 8009d72:	e744      	b.n	8009bfe <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 8009d74:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 8009d76:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 8009d78:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d7a:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009d7e:	dd05      	ble.n	8009d8c <decompress_smooth_data+0x406>
 8009d80:	fa06 f202 	lsl.w	r2, r6, r2
 8009d84:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 8009d86:	bfd8      	it	le
 8009d88:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 8009d8c:	425b      	negs	r3, r3
 8009d8e:	e756      	b.n	8009c3e <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 8009d90:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 8009d92:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 8009d94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d96:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009d9a:	dd05      	ble.n	8009da8 <decompress_smooth_data+0x422>
 8009d9c:	fa06 f202 	lsl.w	r2, r6, r2
 8009da0:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 8009da2:	bfd8      	it	le
 8009da4:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 8009da8:	425b      	negs	r3, r3
 8009daa:	e767      	b.n	8009c7c <decompress_smooth_data+0x2f6>

08009dac <jinit_d_coef_controller>:
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 8009dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009db0:	6843      	ldr	r3, [r0, #4]
{
 8009db2:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009db4:	2274      	movs	r2, #116	; 0x74
 8009db6:	2101      	movs	r1, #1
 8009db8:	681b      	ldr	r3, [r3, #0]
{
 8009dba:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009dbc:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 8009dbe:	4b2c      	ldr	r3, [pc, #176]	; (8009e70 <jinit_d_coef_controller+0xc4>)
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 8009dc0:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 8009dc4:	2700      	movs	r7, #0
  coef->pub.start_input_pass = start_input_pass;
 8009dc6:	6003      	str	r3, [r0, #0]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009dc8:	4604      	mov	r4, r0
  coef->pub.start_output_pass = start_output_pass;
 8009dca:	4b2a      	ldr	r3, [pc, #168]	; (8009e74 <jinit_d_coef_controller+0xc8>)
 8009dcc:	f100 0844 	add.w	r8, r0, #68	; 0x44
  coef->coef_bits_latch = NULL;
 8009dd0:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 8009dd2:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 8009dd4:	b386      	cbz	r6, 8009e38 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009dd6:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 8009dda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ddc:	42bb      	cmp	r3, r7
 8009dde:	dc09      	bgt.n	8009df4 <jinit_d_coef_controller+0x48>
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 8009de0:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8009de4:	4924      	ldr	r1, [pc, #144]	; (8009e78 <jinit_d_coef_controller+0xcc>)
 8009de6:	4a25      	ldr	r2, [pc, #148]	; (8009e7c <jinit_d_coef_controller+0xd0>)
    coef->pub.consume_data = consume_data;
 8009de8:	6061      	str	r1, [r4, #4]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 8009dea:	e9c4 2303 	strd	r2, r3, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 8009dee:	b004      	add	sp, #16
 8009df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cinfo->progressive_mode)
 8009df4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 8009df8:	f8d6 900c 	ldr.w	r9, [r6, #12]
      if (cinfo->progressive_mode)
 8009dfc:	b10b      	cbz	r3, 8009e02 <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 8009dfe:	eb09 0949 	add.w	r9, r9, r9, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8009e02:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 8009e04:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009e06:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 8009e08:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009e0a:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8009e0e:	f8d3 a014 	ldr.w	sl, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009e12:	f00b fc3a 	bl	801568a <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8009e16:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009e1a:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8009e1c:	f856 0c38 	ldr.w	r0, [r6, #-56]
 8009e20:	f00b fc33 	bl	801568a <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8009e24:	2201      	movs	r2, #1
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	e9cd 0900 	strd	r0, r9, [sp]
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47d0      	blx	sl
 8009e32:	f848 0f04 	str.w	r0, [r8, #4]!
	 ci++, compptr++) {
 8009e36:	e7d0      	b.n	8009dda <jinit_d_coef_controller+0x2e>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009e38:	686b      	ldr	r3, [r5, #4]
 8009e3a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8009e3e:	2101      	movs	r1, #1
 8009e40:	4628      	mov	r0, r5
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 8009e46:	f104 031c 	add.w	r3, r4, #28
 8009e4a:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 8009e4c:	f843 2f04 	str.w	r2, [r3, #4]!
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 8009e50:	4543      	cmp	r3, r8
 8009e52:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8009e56:	d1f9      	bne.n	8009e4c <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 8009e58:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 8009e5c:	b919      	cbnz	r1, 8009e66 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 8009e5e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8009e62:	f015 fae9 	bl	801f438 <memset>
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 8009e66:	4906      	ldr	r1, [pc, #24]	; (8009e80 <jinit_d_coef_controller+0xd4>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4a06      	ldr	r2, [pc, #24]	; (8009e84 <jinit_d_coef_controller+0xd8>)
 8009e6c:	e7bc      	b.n	8009de8 <jinit_d_coef_controller+0x3c>
 8009e6e:	bf00      	nop
 8009e70:	080094fd 	.word	0x080094fd
 8009e74:	0800974d 	.word	0x0800974d
 8009e78:	0800950b 	.word	0x0800950b
 8009e7c:	0800963f 	.word	0x0800963f
 8009e80:	08009507 	.word	0x08009507
 8009e84:	08009805 	.word	0x08009805

08009e88 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009e88:	6843      	ldr	r3, [r0, #4]
 8009e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e8e:	2101      	movs	r1, #1
 8009e90:	681b      	ldr	r3, [r3, #0]
{
 8009e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e96:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8009e98:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009e9c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ea2:	6863      	ldr	r3, [r4, #4]
 8009ea4:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 8009ea6:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009eae:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 8009eb0:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2101      	movs	r1, #1
 8009eba:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8009ebc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8009f3c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009ec0:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009ec2:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 8009ec4:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8009ed0:	4f17      	ldr	r7, [pc, #92]	; (8009f30 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009ed2:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8009ed4:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 8009ed6:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8009ed8:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8009eda:	f8df e064 	ldr.w	lr, [pc, #100]	; 8009f40 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8009ede:	4915      	ldr	r1, [pc, #84]	; (8009f34 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 8009ee0:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8009ee4:	4d14      	ldr	r5, [pc, #80]	; (8009f38 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8009ee6:	fb08 e203 	mla	r2, r8, r3, lr
 8009eea:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 8009eec:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8009ef0:	fb07 f203 	mul.w	r2, r7, r3
 8009ef4:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8009ef8:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 8009efc:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 8009efe:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8009f02:	fb05 f203 	mul.w	r2, r5, r3
 8009f06:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8009f0a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 8009f0e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8009f12:	fb01 f203 	mul.w	r2, r1, r3
 8009f16:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 8009f1a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 8009f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8009f22:	3301      	adds	r3, #1
 8009f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f28:	d1dd      	bne.n	8009ee6 <build_ycc_rgb_table+0x5e>
  }
}
 8009f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2e:	bf00      	nop
 8009f30:	0001c5a2 	.word	0x0001c5a2
 8009f34:	ffffa7e6 	.word	0xffffa7e6
 8009f38:	ffff492e 	.word	0xffff492e
 8009f3c:	000166e9 	.word	0x000166e9
 8009f40:	ff4d0b80 	.word	0xff4d0b80

08009f44 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 8009f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8009f48:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 8009f4c:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8009f4e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8009f50:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8009f54:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8009f58:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8009f5c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 8009f5e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 8009f60:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 8009f62:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 8009f66:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8009f68:	6920      	ldr	r0, [r4, #16]
 8009f6a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8009f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f6e:	3a01      	subs	r2, #1
 8009f70:	9210      	str	r2, [sp, #64]	; 0x40
 8009f72:	d502      	bpl.n	8009f7a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 8009f74:	b007      	add	sp, #28
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 8009f7a:	9a05      	ldr	r2, [sp, #20]
 8009f7c:	680c      	ldr	r4, [r1, #0]
 8009f7e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 8009f80:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f84:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 8009f88:	684c      	ldr	r4, [r1, #4]
 8009f8a:	5964      	ldr	r4, [r4, r5]
 8009f8c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 8009f90:	688c      	ldr	r4, [r1, #8]
 8009f92:	5967      	ldr	r7, [r4, r5]
 8009f94:	9c01      	ldr	r4, [sp, #4]
 8009f96:	3f01      	subs	r7, #1
 8009f98:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 8009f9c:	45d0      	cmp	r8, sl
 8009f9e:	f100 0003 	add.w	r0, r0, #3
 8009fa2:	d0e3      	beq.n	8009f6c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009fa4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 8009fa8:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009fac:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 8009fae:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009fb2:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 8009fb6:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009fb8:	fa0f fb8b 	sxth.w	fp, fp
 8009fbc:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009fbe:	5d65      	ldrb	r5, [r4, r5]
 8009fc0:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009fc4:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 8009fc8:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 8009fcc:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 8009fce:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009fd0:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 8009fd2:	5d65      	ldrb	r5, [r4, r5]
 8009fd4:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 8009fd8:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 8009fdc:	5d64      	ldrb	r4, [r4, r5]
 8009fde:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 8009fe2:	e7db      	b.n	8009f9c <ycc_rgb_convert+0x58>

08009fe4 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 8009fe8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 8009fec:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 8009ff0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 8009ff2:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8009ff4:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 8009ff6:	3d01      	subs	r5, #1
 8009ff8:	d501      	bpl.n	8009ffe <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 8009ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 8009ffe:	189c      	adds	r4, r3, r2
 800a000:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800a002:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800a006:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800a00a:	6848      	ldr	r0, [r1, #4]
 800a00c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800a010:	6888      	ldr	r0, [r1, #8]
 800a012:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800a016:	2000      	movs	r0, #0
 800a018:	42b8      	cmp	r0, r7
 800a01a:	d0ec      	beq.n	8009ff6 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800a01c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800a020:	f81c b000 	ldrb.w	fp, [ip, r0]
 800a024:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a028:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800a02c:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800a030:	4454      	add	r4, sl
 800a032:	f818 a000 	ldrb.w	sl, [r8, r0]
 800a036:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800a03a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800a03e:	4454      	add	r4, sl
		 >> SCALEBITS);
 800a040:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800a042:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800a046:	3001      	adds	r0, #1
 800a048:	e7e6      	b.n	800a018 <rgb_gray_convert+0x34>

0800a04a <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800a04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a04e:	9d06      	ldr	r5, [sp, #24]
 800a050:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800a054:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800a056:	3d01      	subs	r5, #1
 800a058:	d501      	bpl.n	800a05e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800a05e:	1898      	adds	r0, r3, r2
 800a060:	680c      	ldr	r4, [r1, #0]
 800a062:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800a064:	684c      	ldr	r4, [r1, #4]
 800a066:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800a06a:	688c      	ldr	r4, [r1, #8]
 800a06c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800a070:	2000      	movs	r0, #0
 800a072:	f853 4b04 	ldr.w	r4, [r3], #4
 800a076:	42b0      	cmp	r0, r6
 800a078:	f104 0403 	add.w	r4, r4, #3
 800a07c:	d0eb      	beq.n	800a056 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800a07e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800a082:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800a086:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800a08a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800a08e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800a092:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800a094:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800a098:	e7ed      	b.n	800a076 <rgb_convert+0x2c>

0800a09a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800a09a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a09e:	9e07      	ldr	r6, [sp, #28]
 800a0a0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800a0a4:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800a0a6:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800a0aa:	3e01      	subs	r6, #1
 800a0ac:	d418      	bmi.n	800a0e0 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800a0ae:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	e00a      	b.n	800a0cc <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800a0b6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800a0ba:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800a0be:	681c      	ldr	r4, [r3, #0]
 800a0c0:	eb05 080e 	add.w	r8, r5, lr
 800a0c4:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800a0c6:	4545      	cmp	r5, r8
 800a0c8:	d104      	bne.n	800a0d4 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	42b8      	cmp	r0, r7
 800a0ce:	dbf2      	blt.n	800a0b6 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	e7ea      	b.n	800a0aa <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800a0d4:	f815 9b01 	ldrb.w	r9, [r5], #1
 800a0d8:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800a0dc:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800a0de:	e7f2      	b.n	800a0c6 <null_convert+0x2c>
  }
}
 800a0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a0e4 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800a0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e6:	9d05      	ldr	r5, [sp, #20]
 800a0e8:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800a0ec:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800a0ee:	3d01      	subs	r5, #1
 800a0f0:	d500      	bpl.n	800a0f4 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800a0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800a0f4:	6808      	ldr	r0, [r1, #0]
 800a0f6:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800a0f8:	f853 0b04 	ldr.w	r0, [r3], #4
 800a0fc:	58a4      	ldr	r4, [r4, r2]
 800a0fe:	eb04 0c07 	add.w	ip, r4, r7
 800a102:	4564      	cmp	r4, ip
 800a104:	f100 0003 	add.w	r0, r0, #3
 800a108:	d0f1      	beq.n	800a0ee <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800a10a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800a10e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800a112:	f800 6c02 	strb.w	r6, [r0, #-2]
 800a116:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800a11a:	e7f2      	b.n	800a102 <gray_rgb_convert+0x1e>

0800a11c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800a120:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800a124:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800a126:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800a128:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800a12c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800a130:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800a134:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800a136:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800a13a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800a13c:	6920      	ldr	r0, [r4, #16]
 800a13e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800a140:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a142:	3a01      	subs	r2, #1
 800a144:	9210      	str	r2, [sp, #64]	; 0x40
 800a146:	d502      	bpl.n	800a14e <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800a148:	b007      	add	sp, #28
 800a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800a14e:	eb03 0008 	add.w	r0, r3, r8
 800a152:	680a      	ldr	r2, [r1, #0]
 800a154:	f853 5b04 	ldr.w	r5, [r3], #4
 800a158:	5812      	ldr	r2, [r2, r0]
 800a15a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800a15c:	684a      	ldr	r2, [r1, #4]
 800a15e:	5812      	ldr	r2, [r2, r0]
 800a160:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800a162:	688a      	ldr	r2, [r1, #8]
 800a164:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800a168:	68ca      	ldr	r2, [r1, #12]
 800a16a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800a16e:	2200      	movs	r2, #0
 800a170:	9800      	ldr	r0, [sp, #0]
 800a172:	3504      	adds	r5, #4
 800a174:	4282      	cmp	r2, r0
 800a176:	d0e3      	beq.n	800a140 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800a178:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800a17c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800a17e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800a180:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800a184:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800a186:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800a18a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800a18e:	4404      	add	r4, r0
 800a190:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800a194:	5d34      	ldrb	r4, [r6, r4]
 800a196:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800a19a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800a19e:	9405      	str	r4, [sp, #20]
 800a1a0:	9c02      	ldr	r4, [sp, #8]
 800a1a2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800a1a6:	9c05      	ldr	r4, [sp, #20]
 800a1a8:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800a1aa:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800a1ae:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800a1b2:	5d34      	ldrb	r4, [r6, r4]
 800a1b4:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800a1b8:	9c01      	ldr	r4, [sp, #4]
 800a1ba:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800a1be:	4420      	add	r0, r4
 800a1c0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a1c4:	5c30      	ldrb	r0, [r6, r0]
 800a1c6:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800a1ca:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800a1ce:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800a1d0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800a1d4:	e7cc      	b.n	800a170 <ycck_cmyk_convert+0x54>

0800a1d6 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800a1d6:	4770      	bx	lr

0800a1d8 <grayscale_convert>:
{
 800a1d8:	b513      	push	{r0, r1, r4, lr}
 800a1da:	460c      	mov	r4, r1
 800a1dc:	4611      	mov	r1, r2
 800a1de:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800a1e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a1e2:	6820      	ldr	r0, [r4, #0]
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f00b fa55 	bl	801569a <jcopy_sample_rows>
}
 800a1f0:	b002      	add	sp, #8
 800a1f2:	bd10      	pop	{r4, pc}

0800a1f4 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a1f4:	6843      	ldr	r3, [r0, #4]
 800a1f6:	221c      	movs	r2, #28
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	681b      	ldr	r3, [r3, #0]
{
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a200:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800a202:	4b4a      	ldr	r3, [pc, #296]	; (800a32c <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a204:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800a206:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800a20a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800a20c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a210:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a212:	2b03      	cmp	r3, #3
 800a214:	d821      	bhi.n	800a25a <jinit_color_deconverter+0x66>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d82d      	bhi.n	800a276 <jinit_color_deconverter+0x82>
 800a21a:	d023      	beq.n	800a264 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800a21c:	2a00      	cmp	r2, #0
 800a21e:	dd23      	ble.n	800a268 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800a220:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800a224:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800a228:	2902      	cmp	r1, #2
 800a22a:	d055      	beq.n	800a2d8 <jinit_color_deconverter+0xe4>
 800a22c:	2904      	cmp	r1, #4
 800a22e:	d066      	beq.n	800a2fe <jinit_color_deconverter+0x10a>
 800a230:	2901      	cmp	r1, #1
 800a232:	d16d      	bne.n	800a310 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800a234:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800a238:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800a23a:	2a01      	cmp	r2, #1
 800a23c:	d124      	bne.n	800a288 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800a23e:	4b3c      	ldr	r3, [pc, #240]	; (800a330 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800a240:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a242:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800a244:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a246:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800a248:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a24a:	4299      	cmp	r1, r3
 800a24c:	dc15      	bgt.n	800a27a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800a24e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a250:	2b00      	cmp	r3, #0
 800a252:	d169      	bne.n	800a328 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800a254:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a256:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800a258:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800a25a:	3b04      	subs	r3, #4
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d8dd      	bhi.n	800a21c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800a260:	2a04      	cmp	r2, #4
 800a262:	e000      	b.n	800a266 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800a264:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800a266:	d0db      	beq.n	800a220 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	220b      	movs	r2, #11
 800a26c:	4620      	mov	r0, r4
 800a26e:	615a      	str	r2, [r3, #20]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4798      	blx	r3
 800a274:	e7d4      	b.n	800a220 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800a276:	2a03      	cmp	r2, #3
 800a278:	e7f5      	b.n	800a266 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800a27a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800a27e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a282:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800a284:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a286:	e7e0      	b.n	800a24a <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d146      	bne.n	800a31a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800a28c:	4b29      	ldr	r3, [pc, #164]	; (800a334 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a28e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a292:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800a294:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800a298:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a29a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800a29c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a2a4:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800a2a6:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a2a8:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800a2ac:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800a2ae:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800a2b2:	fb06 f203 	mul.w	r2, r6, r3
 800a2b6:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800a2ba:	fb05 f203 	mul.w	r2, r5, r3
 800a2be:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a2c2:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a2c6:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a2c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a2cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a2d0:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a2d4:	d1ed      	bne.n	800a2b2 <jinit_color_deconverter+0xbe>
 800a2d6:	e7ba      	b.n	800a24e <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800a2d8:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800a2da:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800a2dc:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800a2de:	d105      	bne.n	800a2ec <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800a2e0:	4b15      	ldr	r3, [pc, #84]	; (800a338 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800a2e2:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800a2e4:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800a2e6:	f7ff fdcf 	bl	8009e88 <build_ycc_rgb_table>
 800a2ea:	e7b0      	b.n	800a24e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d102      	bne.n	800a2f6 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800a2f0:	4b12      	ldr	r3, [pc, #72]	; (800a33c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800a2f2:	606b      	str	r3, [r5, #4]
 800a2f4:	e7ab      	b.n	800a24e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d10f      	bne.n	800a31a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800a2fa:	4b11      	ldr	r3, [pc, #68]	; (800a340 <jinit_color_deconverter+0x14c>)
 800a2fc:	e7f9      	b.n	800a2f2 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800a2fe:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800a300:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800a302:	d101      	bne.n	800a308 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800a304:	4b0f      	ldr	r3, [pc, #60]	; (800a344 <jinit_color_deconverter+0x150>)
 800a306:	e7ec      	b.n	800a2e2 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d106      	bne.n	800a31a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800a30c:	4b0e      	ldr	r3, [pc, #56]	; (800a348 <jinit_color_deconverter+0x154>)
 800a30e:	e7f0      	b.n	800a2f2 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800a310:	4299      	cmp	r1, r3
 800a312:	d102      	bne.n	800a31a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800a314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a316:	67a3      	str	r3, [r4, #120]	; 0x78
 800a318:	e7f8      	b.n	800a30c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	221c      	movs	r2, #28
 800a31e:	4620      	mov	r0, r4
 800a320:	615a      	str	r2, [r3, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4798      	blx	r3
 800a326:	e792      	b.n	800a24e <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800a328:	2301      	movs	r3, #1
 800a32a:	e794      	b.n	800a256 <jinit_color_deconverter+0x62>
 800a32c:	0800a1d7 	.word	0x0800a1d7
 800a330:	0800a1d9 	.word	0x0800a1d9
 800a334:	08009fe5 	.word	0x08009fe5
 800a338:	08009f45 	.word	0x08009f45
 800a33c:	0800a0e5 	.word	0x0800a0e5
 800a340:	0800a04b 	.word	0x0800a04b
 800a344:	0800a11d 	.word	0x0800a11d
 800a348:	0800a09b 	.word	0x0800a09b

0800a34c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800a350:	2500      	movs	r5, #0
{
 800a352:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a354:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800a358:	f8d0 81d4 	ldr.w	r8, [r0, #468]	; 0x1d4
  int method = 0;
 800a35c:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a35e:	46ab      	mov	fp, r5
{
 800a360:	ed2d 8b04 	vpush	{d8-d9}
 800a364:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	455b      	cmp	r3, fp
 800a36a:	dc04      	bgt.n	800a376 <start_pass+0x2a>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800a36c:	b007      	add	sp, #28
 800a36e:	ecbd 8b04 	vpop	{d8-d9}
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a376:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800a37a:	f240 700e 	movw	r0, #1806	; 0x70e
 800a37e:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800a382:	4283      	cmp	r3, r0
 800a384:	f000 80d9 	beq.w	800a53a <start_pass+0x1ee>
 800a388:	dc5a      	bgt.n	800a440 <start_pass+0xf4>
 800a38a:	f240 4004 	movw	r0, #1028	; 0x404
 800a38e:	4283      	cmp	r3, r0
 800a390:	f000 80d6 	beq.w	800a540 <start_pass+0x1f4>
 800a394:	dc2f      	bgt.n	800a3f6 <start_pass+0xaa>
 800a396:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800a39a:	f000 80d3 	beq.w	800a544 <start_pass+0x1f8>
 800a39e:	dc1a      	bgt.n	800a3d6 <start_pass+0x8a>
 800a3a0:	f240 2001 	movw	r0, #513	; 0x201
 800a3a4:	4283      	cmp	r3, r0
 800a3a6:	f000 80cf 	beq.w	800a548 <start_pass+0x1fc>
 800a3aa:	dc0e      	bgt.n	800a3ca <start_pass+0x7e>
 800a3ac:	f240 1001 	movw	r0, #257	; 0x101
 800a3b0:	4283      	cmp	r3, r0
 800a3b2:	f000 80cb 	beq.w	800a54c <start_pass+0x200>
 800a3b6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800a3ba:	f000 80c9 	beq.w	800a550 <start_pass+0x204>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2007      	movs	r0, #7
 800a3c2:	61da      	str	r2, [r3, #28]
 800a3c4:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800a3c8:	e0b3      	b.n	800a532 <start_pass+0x1e6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a3ca:	f240 2002 	movw	r0, #514	; 0x202
 800a3ce:	4283      	cmp	r3, r0
 800a3d0:	d1f5      	bne.n	800a3be <start_pass+0x72>
 800a3d2:	4d9e      	ldr	r5, [pc, #632]	; (800a64c <start_pass+0x300>)
 800a3d4:	e0b2      	b.n	800a53c <start_pass+0x1f0>
 800a3d6:	f240 3006 	movw	r0, #774	; 0x306
 800a3da:	4283      	cmp	r3, r0
 800a3dc:	f000 80ba 	beq.w	800a554 <start_pass+0x208>
 800a3e0:	f240 4002 	movw	r0, #1026	; 0x402
 800a3e4:	4283      	cmp	r3, r0
 800a3e6:	f000 80b7 	beq.w	800a558 <start_pass+0x20c>
 800a3ea:	f240 3003 	movw	r0, #771	; 0x303
 800a3ee:	4283      	cmp	r3, r0
 800a3f0:	d1e5      	bne.n	800a3be <start_pass+0x72>
      method_ptr = jpeg_idct_3x3;
 800a3f2:	4d97      	ldr	r5, [pc, #604]	; (800a650 <start_pass+0x304>)
 800a3f4:	e0a2      	b.n	800a53c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a3f6:	f240 6003 	movw	r0, #1539	; 0x603
 800a3fa:	4283      	cmp	r3, r0
 800a3fc:	f000 80ae 	beq.w	800a55c <start_pass+0x210>
 800a400:	dc0e      	bgt.n	800a420 <start_pass+0xd4>
 800a402:	f240 5005 	movw	r0, #1285	; 0x505
 800a406:	4283      	cmp	r3, r0
 800a408:	f000 80aa 	beq.w	800a560 <start_pass+0x214>
 800a40c:	f240 500a 	movw	r0, #1290	; 0x50a
 800a410:	4283      	cmp	r3, r0
 800a412:	f000 80a7 	beq.w	800a564 <start_pass+0x218>
 800a416:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800a41a:	d1d0      	bne.n	800a3be <start_pass+0x72>
      method_ptr = jpeg_idct_4x8;
 800a41c:	4d8d      	ldr	r5, [pc, #564]	; (800a654 <start_pass+0x308>)
 800a41e:	e08d      	b.n	800a53c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a420:	f240 600c 	movw	r0, #1548	; 0x60c
 800a424:	4283      	cmp	r3, r0
 800a426:	f000 809f 	beq.w	800a568 <start_pass+0x21c>
 800a42a:	f240 7007 	movw	r0, #1799	; 0x707
 800a42e:	4283      	cmp	r3, r0
 800a430:	f000 809c 	beq.w	800a56c <start_pass+0x220>
 800a434:	f240 6006 	movw	r0, #1542	; 0x606
 800a438:	4283      	cmp	r3, r0
 800a43a:	d1c0      	bne.n	800a3be <start_pass+0x72>
      method_ptr = jpeg_idct_6x6;
 800a43c:	4d86      	ldr	r5, [pc, #536]	; (800a658 <start_pass+0x30c>)
 800a43e:	e07d      	b.n	800a53c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a440:	f640 4006 	movw	r0, #3078	; 0xc06
 800a444:	4283      	cmp	r3, r0
 800a446:	f000 8093 	beq.w	800a570 <start_pass+0x224>
 800a44a:	dc21      	bgt.n	800a490 <start_pass+0x144>
 800a44c:	f640 1009 	movw	r0, #2313	; 0x909
 800a450:	4283      	cmp	r3, r0
 800a452:	f000 808f 	beq.w	800a574 <start_pass+0x228>
 800a456:	dc0d      	bgt.n	800a474 <start_pass+0x128>
 800a458:	f640 0008 	movw	r0, #2056	; 0x808
 800a45c:	4283      	cmp	r3, r0
 800a45e:	d039      	beq.n	800a4d4 <start_pass+0x188>
 800a460:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800a464:	f000 8088 	beq.w	800a578 <start_pass+0x22c>
 800a468:	f640 0004 	movw	r0, #2052	; 0x804
 800a46c:	4283      	cmp	r3, r0
 800a46e:	d1a6      	bne.n	800a3be <start_pass+0x72>
      method_ptr = jpeg_idct_8x4;
 800a470:	4d7a      	ldr	r5, [pc, #488]	; (800a65c <start_pass+0x310>)
 800a472:	e063      	b.n	800a53c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a474:	f640 200a 	movw	r0, #2570	; 0xa0a
 800a478:	4283      	cmp	r3, r0
 800a47a:	d07f      	beq.n	800a57c <start_pass+0x230>
 800a47c:	f640 300b 	movw	r0, #2827	; 0xb0b
 800a480:	4283      	cmp	r3, r0
 800a482:	d07d      	beq.n	800a580 <start_pass+0x234>
 800a484:	f640 2005 	movw	r0, #2565	; 0xa05
 800a488:	4283      	cmp	r3, r0
 800a48a:	d198      	bne.n	800a3be <start_pass+0x72>
      method_ptr = jpeg_idct_10x5;
 800a48c:	4d74      	ldr	r5, [pc, #464]	; (800a660 <start_pass+0x314>)
 800a48e:	e055      	b.n	800a53c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a490:	f640 600e 	movw	r0, #3598	; 0xe0e
 800a494:	4283      	cmp	r3, r0
 800a496:	d075      	beq.n	800a584 <start_pass+0x238>
 800a498:	dc0d      	bgt.n	800a4b6 <start_pass+0x16a>
 800a49a:	f640 500d 	movw	r0, #3341	; 0xd0d
 800a49e:	4283      	cmp	r3, r0
 800a4a0:	d072      	beq.n	800a588 <start_pass+0x23c>
 800a4a2:	f640 6007 	movw	r0, #3591	; 0xe07
 800a4a6:	4283      	cmp	r3, r0
 800a4a8:	d070      	beq.n	800a58c <start_pass+0x240>
 800a4aa:	f640 400c 	movw	r0, #3084	; 0xc0c
 800a4ae:	4283      	cmp	r3, r0
 800a4b0:	d185      	bne.n	800a3be <start_pass+0x72>
      method_ptr = jpeg_idct_12x12;
 800a4b2:	4d6c      	ldr	r5, [pc, #432]	; (800a664 <start_pass+0x318>)
 800a4b4:	e042      	b.n	800a53c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a4b6:	f241 0008 	movw	r0, #4104	; 0x1008
 800a4ba:	4283      	cmp	r3, r0
 800a4bc:	d068      	beq.n	800a590 <start_pass+0x244>
 800a4be:	f241 0010 	movw	r0, #4112	; 0x1010
 800a4c2:	4283      	cmp	r3, r0
 800a4c4:	d066      	beq.n	800a594 <start_pass+0x248>
 800a4c6:	f640 700f 	movw	r0, #3855	; 0xf0f
 800a4ca:	4283      	cmp	r3, r0
 800a4cc:	f47f af77 	bne.w	800a3be <start_pass+0x72>
      method_ptr = jpeg_idct_15x15;
 800a4d0:	4d65      	ldr	r5, [pc, #404]	; (800a668 <start_pass+0x31c>)
 800a4d2:	e033      	b.n	800a53c <start_pass+0x1f0>
      switch (cinfo->dct_method) {
 800a4d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d827      	bhi.n	800a52c <start_pass+0x1e0>
 800a4dc:	461c      	mov	r4, r3
 800a4de:	4b63      	ldr	r3, [pc, #396]	; (800a66c <start_pass+0x320>)
 800a4e0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800a4e4:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800a4e8:	f848 5f04 	str.w	r5, [r8, #4]!
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800a4ec:	b1cb      	cbz	r3, 800a522 <start_pass+0x1d6>
 800a4ee:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800a4f2:	42a3      	cmp	r3, r4
 800a4f4:	d015      	beq.n	800a522 <start_pass+0x1d6>
    qtbl = compptr->quant_table;
 800a4f6:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800a4fa:	b196      	cbz	r6, 800a522 <start_pass+0x1d6>
    switch (method) {
 800a4fc:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800a4fe:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
    switch (method) {
 800a502:	d049      	beq.n	800a598 <start_pass+0x24c>
 800a504:	2c02      	cmp	r4, #2
 800a506:	d05a      	beq.n	800a5be <start_pass+0x272>
 800a508:	2c00      	cmp	r4, #0
 800a50a:	f040 8098 	bne.w	800a63e <start_pass+0x2f2>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800a50e:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800a512:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800a514:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800a518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800a51c:	3301      	adds	r3, #1
 800a51e:	2b40      	cmp	r3, #64	; 0x40
 800a520:	d1f8      	bne.n	800a514 <start_pass+0x1c8>
       ci++, compptr++) {
 800a522:	f10b 0b01 	add.w	fp, fp, #1
 800a526:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800a52a:	e71c      	b.n	800a366 <start_pass+0x1a>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2231      	movs	r2, #49	; 0x31
 800a530:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4638      	mov	r0, r7
 800a536:	4798      	blx	r3
      break;
 800a538:	e7d4      	b.n	800a4e4 <start_pass+0x198>
      method_ptr = jpeg_idct_7x14;
 800a53a:	4d4d      	ldr	r5, [pc, #308]	; (800a670 <start_pass+0x324>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800a53c:	2400      	movs	r4, #0
 800a53e:	e7d1      	b.n	800a4e4 <start_pass+0x198>
      method_ptr = jpeg_idct_4x4;
 800a540:	4d4c      	ldr	r5, [pc, #304]	; (800a674 <start_pass+0x328>)
 800a542:	e7fb      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_2x4;
 800a544:	4d4c      	ldr	r5, [pc, #304]	; (800a678 <start_pass+0x32c>)
 800a546:	e7f9      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_2x1;
 800a548:	4d4c      	ldr	r5, [pc, #304]	; (800a67c <start_pass+0x330>)
 800a54a:	e7f7      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_1x1;
 800a54c:	4d4c      	ldr	r5, [pc, #304]	; (800a680 <start_pass+0x334>)
 800a54e:	e7f5      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_1x2;
 800a550:	4d4c      	ldr	r5, [pc, #304]	; (800a684 <start_pass+0x338>)
 800a552:	e7f3      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_3x6;
 800a554:	4d4c      	ldr	r5, [pc, #304]	; (800a688 <start_pass+0x33c>)
 800a556:	e7f1      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_4x2;
 800a558:	4d4c      	ldr	r5, [pc, #304]	; (800a68c <start_pass+0x340>)
 800a55a:	e7ef      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_6x3;
 800a55c:	4d4c      	ldr	r5, [pc, #304]	; (800a690 <start_pass+0x344>)
 800a55e:	e7ed      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_5x5;
 800a560:	4d4c      	ldr	r5, [pc, #304]	; (800a694 <start_pass+0x348>)
 800a562:	e7eb      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_5x10;
 800a564:	4d4c      	ldr	r5, [pc, #304]	; (800a698 <start_pass+0x34c>)
 800a566:	e7e9      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_6x12;
 800a568:	4d4c      	ldr	r5, [pc, #304]	; (800a69c <start_pass+0x350>)
 800a56a:	e7e7      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_7x7;
 800a56c:	4d4c      	ldr	r5, [pc, #304]	; (800a6a0 <start_pass+0x354>)
 800a56e:	e7e5      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_12x6;
 800a570:	4d4c      	ldr	r5, [pc, #304]	; (800a6a4 <start_pass+0x358>)
 800a572:	e7e3      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_9x9;
 800a574:	4d4c      	ldr	r5, [pc, #304]	; (800a6a8 <start_pass+0x35c>)
 800a576:	e7e1      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_8x16;
 800a578:	4d4c      	ldr	r5, [pc, #304]	; (800a6ac <start_pass+0x360>)
 800a57a:	e7df      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_10x10;
 800a57c:	4d4c      	ldr	r5, [pc, #304]	; (800a6b0 <start_pass+0x364>)
 800a57e:	e7dd      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_11x11;
 800a580:	4d4c      	ldr	r5, [pc, #304]	; (800a6b4 <start_pass+0x368>)
 800a582:	e7db      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_14x14;
 800a584:	4d4c      	ldr	r5, [pc, #304]	; (800a6b8 <start_pass+0x36c>)
 800a586:	e7d9      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_13x13;
 800a588:	4d4c      	ldr	r5, [pc, #304]	; (800a6bc <start_pass+0x370>)
 800a58a:	e7d7      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_14x7;
 800a58c:	4d4c      	ldr	r5, [pc, #304]	; (800a6c0 <start_pass+0x374>)
 800a58e:	e7d5      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_16x8;
 800a590:	4d4c      	ldr	r5, [pc, #304]	; (800a6c4 <start_pass+0x378>)
 800a592:	e7d3      	b.n	800a53c <start_pass+0x1f0>
      method_ptr = jpeg_idct_16x16;
 800a594:	4d4c      	ldr	r5, [pc, #304]	; (800a6c8 <start_pass+0x37c>)
 800a596:	e7d1      	b.n	800a53c <start_pass+0x1f0>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800a598:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800a59c:	2200      	movs	r2, #0
 800a59e:	494b      	ldr	r1, [pc, #300]	; (800a6cc <start_pass+0x380>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800a5a0:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800a5a4:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800a5a8:	fb0c f303 	mul.w	r3, ip, r3
 800a5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b0:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800a5b2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800a5b6:	3201      	adds	r2, #1
 800a5b8:	2a40      	cmp	r2, #64	; 0x40
 800a5ba:	d1f1      	bne.n	800a5a0 <start_pass+0x254>
 800a5bc:	e7b1      	b.n	800a522 <start_pass+0x1d6>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800a5be:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800a5c2:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800a5c6:	9304      	str	r3, [sp, #16]
 800a5c8:	4b41      	ldr	r3, [pc, #260]	; (800a6d0 <start_pass+0x384>)
 800a5ca:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	ecb3 7b02 	vldmia	r3!, {d7}
 800a5d2:	9303      	str	r3, [sp, #12]
 800a5d4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5d8:	eef0 8a67 	vmov.f32	s17, s15
 800a5dc:	9b04      	ldr	r3, [sp, #16]
 800a5de:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	4b3a      	ldr	r3, [pc, #232]	; (800a6d0 <start_pass+0x384>)
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	f106 0310 	add.w	r3, r6, #16
 800a5ec:	9305      	str	r3, [sp, #20]
 800a5ee:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800a5f0:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800a5f4:	ecb3 7b02 	vldmia	r3!, {d7}
 800a5f8:	eeb0 9a47 	vmov.f32	s18, s14
 800a5fc:	eef0 9a67 	vmov.f32	s19, s15
 800a600:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800a602:	f7f5 ff97 	bl	8000534 <__aeabi_ui2d>
 800a606:	ec53 2b18 	vmov	r2, r3, d8
 800a60a:	f7f6 f80d 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800a60e:	ec53 2b19 	vmov	r2, r3, d9
 800a612:	f7f6 f809 	bl	8000628 <__aeabi_dmul>
 800a616:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a61a:	2200      	movs	r2, #0
 800a61c:	f7f6 f804 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800a620:	f7f6 fa14 	bl	8000a4c <__aeabi_d2f>
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	f843 0b04 	str.w	r0, [r3], #4
 800a62a:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800a62c:	9b05      	ldr	r3, [sp, #20]
 800a62e:	429e      	cmp	r6, r3
 800a630:	d1dd      	bne.n	800a5ee <start_pass+0x2a2>
	    i++;
 800a632:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800a636:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800a63a:	d1c7      	bne.n	800a5cc <start_pass+0x280>
 800a63c:	e771      	b.n	800a522 <start_pass+0x1d6>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2231      	movs	r2, #49	; 0x31
 800a642:	4638      	mov	r0, r7
 800a644:	615a      	str	r2, [r3, #20]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4798      	blx	r3
      break;
 800a64a:	e76a      	b.n	800a522 <start_pass+0x1d6>
 800a64c:	0800f7a9 	.word	0x0800f7a9
 800a650:	0800f6b5 	.word	0x0800f6b5
 800a654:	080135dd 	.word	0x080135dd
 800a658:	0800f259 	.word	0x0800f259
 800a65c:	08012559 	.word	0x08012559
 800a660:	08012309 	.word	0x08012309
 800a664:	0801020d 	.word	0x0801020d
 800a668:	08010eb9 	.word	0x08010eb9
 800a66c:	08022074 	.word	0x08022074
 800a670:	08012d7d 	.word	0x08012d7d
 800a674:	0800f589 	.word	0x0800f589
 800a678:	08013945 	.word	0x08013945
 800a67c:	0801296d 	.word	0x0801296d
 800a680:	0800f825 	.word	0x0800f825
 800a684:	08013a1d 	.word	0x08013a1d
 800a688:	080137f5 	.word	0x080137f5
 800a68c:	080128a1 	.word	0x080128a1
 800a690:	08012745 	.word	0x08012745
 800a694:	0800f409 	.word	0x0800f409
 800a698:	080133a5 	.word	0x080133a5
 800a69c:	080130ed 	.word	0x080130ed
 800a6a0:	0800efc5 	.word	0x0800efc5
 800a6a4:	08012051 	.word	0x08012051
 800a6a8:	0800f849 	.word	0x0800f849
 800a6ac:	080129a5 	.word	0x080129a5
 800a6b0:	0800fb0d 	.word	0x0800fb0d
 800a6b4:	0800fe11 	.word	0x0800fe11
 800a6b8:	08010a71 	.word	0x08010a71
 800a6bc:	080105d9 	.word	0x080105d9
 800a6c0:	08011cc5 	.word	0x08011cc5
 800a6c4:	0801188d 	.word	0x0801188d
 800a6c8:	0801134d 	.word	0x0801134d
 800a6cc:	080220c0 	.word	0x080220c0
 800a6d0:	08022080 	.word	0x08022080

0800a6d4 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a6d6:	6843      	ldr	r3, [r0, #4]
{
 800a6d8:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a6da:	2254      	movs	r2, #84	; 0x54
 800a6dc:	2101      	movs	r1, #1
 800a6de:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a6e0:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a6e2:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <jinit_inverse_dct+0x50>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a6e6:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a6e8:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800a6ec:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800a6f0:	f844 3b28 	str.w	r3, [r4], #40
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a6f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6f6:	42b3      	cmp	r3, r6
 800a6f8:	dc00      	bgt.n	800a6fc <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a6fc:	686b      	ldr	r3, [r5, #4]
 800a6fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a702:	2101      	movs	r1, #1
 800a704:	4628      	mov	r0, r5
 800a706:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800a708:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a70a:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800a70c:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800a710:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800a712:	2100      	movs	r1, #0
 800a714:	f014 fe90 	bl	801f438 <memset>
    idct->cur_method[ci] = -1;
 800a718:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800a71c:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800a71e:	f844 3f04 	str.w	r3, [r4, #4]!
       ci++, compptr++) {
 800a722:	e7e7      	b.n	800a6f4 <jinit_inverse_dct+0x20>
 800a724:	0800a34d 	.word	0x0800a34d

0800a728 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800a728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800a72c:	6905      	ldr	r5, [r0, #16]
{
 800a72e:	4607      	mov	r7, r0
 800a730:	4688      	mov	r8, r1
 800a732:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800a734:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800a738:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800a73a:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800a73e:	f1bb 0f00 	cmp.w	fp, #0
 800a742:	d042      	beq.n	800a7ca <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800a744:	454e      	cmp	r6, r9
 800a746:	da42      	bge.n	800a7ce <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800a748:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	b95b      	cbnz	r3, 800a768 <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	2278      	movs	r2, #120	; 0x78
 800a754:	f04f 31ff 	mov.w	r1, #4294967295
 800a758:	4628      	mov	r0, r5
 800a75a:	615a      	str	r2, [r3, #20]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800a760:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800a764:	2201      	movs	r2, #1
 800a766:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800a768:	f1c6 0619 	rsb	r6, r6, #25
 800a76c:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800a770:	2619      	movs	r6, #25
 800a772:	e02c      	b.n	800a7ce <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800a774:	f1ba 0f00 	cmp.w	sl, #0
 800a778:	d107      	bne.n	800a78a <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800a77a:	69ab      	ldr	r3, [r5, #24]
 800a77c:	4628      	mov	r0, r5
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	4798      	blx	r3
 800a782:	b350      	cbz	r0, 800a7da <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800a784:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800a786:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800a78a:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800a78e:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800a792:	2aff      	cmp	r2, #255	; 0xff
 800a794:	d116      	bne.n	800a7c4 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800a796:	f1ba 0f00 	cmp.w	sl, #0
 800a79a:	d109      	bne.n	800a7b0 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800a79c:	69ab      	ldr	r3, [r5, #24]
 800a79e:	4628      	mov	r0, r5
 800a7a0:	9201      	str	r2, [sp, #4]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	4798      	blx	r3
 800a7a6:	b1c0      	cbz	r0, 800a7da <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800a7a8:	69ab      	ldr	r3, [r5, #24]
 800a7aa:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800a7ac:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800a7b0:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800a7b4:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800a7b8:	2bff      	cmp	r3, #255	; 0xff
 800a7ba:	d0ec      	beq.n	800a796 <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800a7bc:	b113      	cbz	r3, 800a7c4 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800a7be:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800a7c2:	e7bf      	b.n	800a744 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800a7c4:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800a7c8:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800a7ca:	2e18      	cmp	r6, #24
 800a7cc:	ddd2      	ble.n	800a774 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800a7ce:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800a7d2:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800a7d6:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800a7da:	4658      	mov	r0, fp
 800a7dc:	b003      	add	sp, #12
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a7e4 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	9d06      	ldr	r5, [sp, #24]
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	468c      	mov	ip, r1
 800a7ec:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800a7ee:	4295      	cmp	r5, r2
{
 800a7f0:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800a7f2:	dd08      	ble.n	800a806 <jpeg_huff_decode+0x22>
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	f7ff ff97 	bl	800a728 <jpeg_fill_bit_buffer>
 800a7fa:	b910      	cbnz	r0, 800a802 <jpeg_huff_decode+0x1e>
 800a7fc:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800a800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800a802:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800a806:	1b62      	subs	r2, r4, r5
 800a808:	4b1b      	ldr	r3, [pc, #108]	; (800a878 <jpeg_huff_decode+0x94>)
 800a80a:	fa4c f002 	asr.w	r0, ip, r2
 800a80e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a812:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800a814:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800a818:	4283      	cmp	r3, r0
 800a81a:	db0d      	blt.n	800a838 <jpeg_huff_decode+0x54>
  if (l > 16) {
 800a81c:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800a81e:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800a822:	dd1f      	ble.n	800a864 <jpeg_huff_decode+0x80>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800a824:	6930      	ldr	r0, [r6, #16]
 800a826:	2279      	movs	r2, #121	; 0x79
 800a828:	f04f 31ff 	mov.w	r1, #4294967295
 800a82c:	6803      	ldr	r3, [r0, #0]
 800a82e:	615a      	str	r2, [r3, #20]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800a834:	2000      	movs	r0, #0
 800a836:	e7e3      	b.n	800a800 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800a838:	2a00      	cmp	r2, #0
    code <<= 1;
 800a83a:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800a83e:	dc08      	bgt.n	800a852 <jpeg_huff_decode+0x6e>
 800a840:	2301      	movs	r3, #1
 800a842:	4661      	mov	r1, ip
 800a844:	4630      	mov	r0, r6
 800a846:	f7ff ff6f 	bl	800a728 <jpeg_fill_bit_buffer>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d0d6      	beq.n	800a7fc <jpeg_huff_decode+0x18>
 800a84e:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800a852:	3a01      	subs	r2, #1
    l++;
 800a854:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800a856:	fa4c f302 	asr.w	r3, ip, r2
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	ea43 0004 	orr.w	r0, r3, r4
    l++;
 800a862:	e7d7      	b.n	800a814 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800a864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a868:	3512      	adds	r5, #18
 800a86a:	4403      	add	r3, r0
 800a86c:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800a870:	4413      	add	r3, r2
 800a872:	7c58      	ldrb	r0, [r3, #17]
 800a874:	e7c4      	b.n	800a800 <jpeg_huff_decode+0x1c>
 800a876:	bf00      	nop
 800a878:	08022140 	.word	0x08022140

0800a87c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800a87c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800a87e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800a882:	2600      	movs	r6, #0
{
 800a884:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800a886:	68eb      	ldr	r3, [r5, #12]
 800a888:	6991      	ldr	r1, [r2, #24]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	bfb8      	it	lt
 800a88e:	3307      	addlt	r3, #7
 800a890:	eb01 01e3 	add.w	r1, r1, r3, asr #3

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a894:	6893      	ldr	r3, [r2, #8]
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800a896:	6191      	str	r1, [r2, #24]
  entropy->bitstate.bits_left = 0;
 800a898:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a89a:	4798      	blx	r3
 800a89c:	b190      	cbz	r0, 800a8c4 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800a89e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	f105 0014 	add.w	r0, r5, #20
 800a8a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800a8ac:	0092      	lsls	r2, r2, #2
 800a8ae:	f014 fdc3 	bl	801f438 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800a8b2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800a8b6:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800a8b8:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800a8ba:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800a8be:	b903      	cbnz	r3, 800a8c2 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800a8c0:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800a8c2:	2001      	movs	r0, #1
}
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8c8 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800a8cc:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800a8d0:	b091      	sub	sp, #68	; 0x44
 800a8d2:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a8d4:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800a8d8:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a8da:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800a8de:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800a8e0:	b933      	cbnz	r3, 800a8f0 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800a8e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8e4:	b17e      	cbz	r6, 800a906 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800a8e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800a8e8:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800a8ee:	e007      	b.n	800a900 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800a8f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f5      	bne.n	800a8e2 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800a8f6:	f7ff ffc1 	bl	800a87c <process_restart>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d1f1      	bne.n	800a8e2 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800a8fe:	2000      	movs	r0, #0
}
 800a900:	b011      	add	sp, #68	; 0x44
 800a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a906:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800a908:	f104 0810 	add.w	r8, r4, #16
 800a90c:	af0b      	add	r7, sp, #44	; 0x2c
 800a90e:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	f104 0b10 	add.w	fp, r4, #16
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	9206      	str	r2, [sp, #24]
 800a91c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800a91e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800aa38 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a922:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800a924:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a928:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800a92c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a92e:	f8d8 3000 	ldr.w	r3, [r8]
 800a932:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a934:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800a938:	42b3      	cmp	r3, r6
 800a93a:	dc0d      	bgt.n	800a958 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a93c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800a93e:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a940:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800a942:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	9a07      	ldr	r2, [sp, #28]
 800a948:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800a94a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a94c:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800a950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a952:	6833      	ldr	r3, [r6, #0]
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	e7c6      	b.n	800a8e6 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800a958:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800a95a:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800a95e:	f859 7f04 	ldr.w	r7, [r9, #4]!
      block = MCU_data[blkn];
 800a962:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a966:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800a968:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800a96c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a976:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800a97a:	dc0c      	bgt.n	800a996 <decode_mcu_DC_first+0xce>
 800a97c:	2300      	movs	r3, #0
 800a97e:	4662      	mov	r2, ip
 800a980:	4671      	mov	r1, lr
 800a982:	a806      	add	r0, sp, #24
 800a984:	f7ff fed0 	bl	800a728 <jpeg_fill_bit_buffer>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d0b8      	beq.n	800a8fe <decode_mcu_DC_first+0x36>
 800a98c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800a990:	f1bc 0f07 	cmp.w	ip, #7
 800a994:	dd3e      	ble.n	800aa14 <decode_mcu_DC_first+0x14c>
 800a996:	f1ac 0308 	sub.w	r3, ip, #8
 800a99a:	fa4e f303 	asr.w	r3, lr, r3
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a9a4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a9a8:	2a00      	cmp	r2, #0
 800a9aa:	d042      	beq.n	800aa32 <decode_mcu_DC_first+0x16a>
 800a9ac:	4443      	add	r3, r8
 800a9ae:	ebac 0c02 	sub.w	ip, ip, r2
 800a9b2:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800a9b6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ba:	d01b      	beq.n	800a9f4 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800a9bc:	45e0      	cmp	r8, ip
 800a9be:	dd09      	ble.n	800a9d4 <decode_mcu_DC_first+0x10c>
 800a9c0:	4643      	mov	r3, r8
 800a9c2:	4662      	mov	r2, ip
 800a9c4:	4671      	mov	r1, lr
 800a9c6:	a806      	add	r0, sp, #24
 800a9c8:	f7ff feae 	bl	800a728 <jpeg_fill_bit_buffer>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d096      	beq.n	800a8fe <decode_mcu_DC_first+0x36>
 800a9d0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800a9d4:	ebac 0c08 	sub.w	ip, ip, r8
 800a9d8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800a9dc:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800a9e0:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800a9e4:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800a9e8:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800a9ea:	4299      	cmp	r1, r3
 800a9ec:	bfac      	ite	ge
 800a9ee:	eba3 0802 	subge.w	r8, r3, r2
 800a9f2:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800a9f4:	ab10      	add	r3, sp, #64	; 0x40
      (*block)[0] = (JCOEF) (s << Al);
 800a9f6:	9a03      	ldr	r2, [sp, #12]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a9f8:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800a9fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9fe:	f857 3c10 	ldr.w	r3, [r7, #-16]
 800aa02:	4443      	add	r3, r8
      (*block)[0] = (JCOEF) (s << Al);
 800aa04:	fa03 f802 	lsl.w	r8, r3, r2
      state.last_dc_val[ci] = s;
 800aa08:	f847 3c10 	str.w	r3, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800aa12:	e78f      	b.n	800a934 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800aa14:	2301      	movs	r3, #1
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	4662      	mov	r2, ip
 800aa1a:	4643      	mov	r3, r8
 800aa1c:	4671      	mov	r1, lr
 800aa1e:	a806      	add	r0, sp, #24
 800aa20:	f7ff fee0 	bl	800a7e4 <jpeg_huff_decode>
 800aa24:	f1b0 0800 	subs.w	r8, r0, #0
 800aa28:	f6ff af69 	blt.w	800a8fe <decode_mcu_DC_first+0x36>
 800aa2c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800aa30:	e7c1      	b.n	800a9b6 <decode_mcu_DC_first+0xee>
 800aa32:	2309      	movs	r3, #9
 800aa34:	e7ef      	b.n	800aa16 <decode_mcu_DC_first+0x14e>
 800aa36:	bf00      	nop
 800aa38:	08022140 	.word	0x08022140

0800aa3c <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800aa3c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	4607      	mov	r7, r0
 800aa46:	b08d      	sub	sp, #52	; 0x34
 800aa48:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800aa4a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800aa4e:	b933      	cbnz	r3, 800aa5e <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800aa50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa52:	b17b      	cbz	r3, 800aa74 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800aa54:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800aa56:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800aa5c:	e007      	b.n	800aa6e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800aa5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1f5      	bne.n	800aa50 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800aa64:	f7ff ff0a 	bl	800a87c <process_restart>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d1f1      	bne.n	800aa50 <decode_mcu_AC_first+0x14>
	return FALSE;
 800aa6c:	2000      	movs	r0, #0
}
 800aa6e:	b00d      	add	sp, #52	; 0x34
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800aa74:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800aa78:	692e      	ldr	r6, [r5, #16]
    Se = cinfo->Se;
 800aa7a:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800aa7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    natural_order = cinfo->natural_order;
 800aa80:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Al = cinfo->Al;
 800aa84:	9304      	str	r3, [sp, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800aa86:	b116      	cbz	r6, 800aa8e <decode_mcu_AC_first+0x52>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800aa88:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800aa8a:	612e      	str	r6, [r5, #16]
 800aa8c:	e7e2      	b.n	800aa54 <decode_mcu_AC_first+0x18>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aa8e:	69bb      	ldr	r3, [r7, #24]
      tbl = entropy->ac_derived_tbl;
 800aa90:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	9207      	str	r2, [sp, #28]
 800aa9a:	9308      	str	r3, [sp, #32]
      for (k = cinfo->Ss; k <= Se; k++) {
 800aa9c:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      block = MCU_data[0];
 800aaa0:	6823      	ldr	r3, [r4, #0]
	  r = GET_BITS(s);
 800aaa2:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800ab98 <decode_mcu_AC_first+0x15c>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aaa6:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800aaa8:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aaaa:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800aaae:	9b03      	ldr	r3, [sp, #12]
 800aab0:	4598      	cmp	r8, r3
 800aab2:	dc69      	bgt.n	800ab88 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800aab4:	2a07      	cmp	r2, #7
 800aab6:	dc09      	bgt.n	800aacc <decode_mcu_AC_first+0x90>
 800aab8:	2300      	movs	r3, #0
 800aaba:	a807      	add	r0, sp, #28
 800aabc:	f7ff fe34 	bl	800a728 <jpeg_fill_bit_buffer>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0d3      	beq.n	800aa6c <decode_mcu_AC_first+0x30>
 800aac4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800aac8:	2a07      	cmp	r2, #7
 800aaca:	dd33      	ble.n	800ab34 <decode_mcu_AC_first+0xf8>
 800aacc:	f1a2 0308 	sub.w	r3, r2, #8
 800aad0:	fa41 f303 	asr.w	r3, r1, r3
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800aada:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800aade:	b3a0      	cbz	r0, 800ab4a <decode_mcu_AC_first+0x10e>
 800aae0:	444b      	add	r3, r9
 800aae2:	1a12      	subs	r2, r2, r0
 800aae4:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800aae8:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800aaec:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800aaf0:	d02d      	beq.n	800ab4e <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800aaf2:	42a2      	cmp	r2, r4
	  k += r;
 800aaf4:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800aaf6:	da07      	bge.n	800ab08 <decode_mcu_AC_first+0xcc>
 800aaf8:	4623      	mov	r3, r4
 800aafa:	a807      	add	r0, sp, #28
 800aafc:	f7ff fe14 	bl	800a728 <jpeg_fill_bit_buffer>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d0b3      	beq.n	800aa6c <decode_mcu_AC_first+0x30>
 800ab04:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800ab08:	1b12      	subs	r2, r2, r4
 800ab0a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800ab0e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800ab10:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800ab14:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800ab18:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800ab1a:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800ab1c:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800ab1e:	bfa8      	it	ge
 800ab20:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800ab22:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800ab26:	40a3      	lsls	r3, r4
 800ab28:	9c05      	ldr	r4, [sp, #20]
 800ab2a:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800ab2e:	f108 0801 	add.w	r8, r8, #1
 800ab32:	e7bc      	b.n	800aaae <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800ab34:	2301      	movs	r3, #1
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	a807      	add	r0, sp, #28
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	f7ff fe52 	bl	800a7e4 <jpeg_huff_decode>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	db93      	blt.n	800aa6c <decode_mcu_AC_first+0x30>
 800ab44:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800ab48:	e7ce      	b.n	800aae8 <decode_mcu_AC_first+0xac>
 800ab4a:	2309      	movs	r3, #9
 800ab4c:	e7f3      	b.n	800ab36 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800ab4e:	2b0f      	cmp	r3, #15
 800ab50:	d102      	bne.n	800ab58 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800ab52:	f108 080f 	add.w	r8, r8, #15
 800ab56:	e7ea      	b.n	800ab2e <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800ab58:	2601      	movs	r6, #1
 800ab5a:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800ab5c:	b19b      	cbz	r3, 800ab86 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	da09      	bge.n	800ab76 <decode_mcu_AC_first+0x13a>
 800ab62:	a807      	add	r0, sp, #28
 800ab64:	9303      	str	r3, [sp, #12]
 800ab66:	f7ff fddf 	bl	800a728 <jpeg_fill_bit_buffer>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	f43f af7e 	beq.w	800aa6c <decode_mcu_AC_first+0x30>
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800ab76:	1ad2      	subs	r2, r2, r3
 800ab78:	4807      	ldr	r0, [pc, #28]	; (800ab98 <decode_mcu_AC_first+0x15c>)
 800ab7a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ab7e:	fa41 f302 	asr.w	r3, r1, r2
 800ab82:	4003      	ands	r3, r0
	      EOBRUN += r;
 800ab84:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800ab86:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	9807      	ldr	r0, [sp, #28]
 800ab8c:	6018      	str	r0, [r3, #0]
 800ab8e:	9808      	ldr	r0, [sp, #32]
 800ab90:	6058      	str	r0, [r3, #4]
 800ab92:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800ab96:	e778      	b.n	800aa8a <decode_mcu_AC_first+0x4e>
 800ab98:	08022140 	.word	0x08022140

0800ab9c <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800ab9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800aba0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800aba4:	2701      	movs	r7, #1
{   
 800aba6:	b087      	sub	sp, #28
 800aba8:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800abaa:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800abac:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800abb0:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800abb2:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800abb6:	b9c3      	cbnz	r3, 800abea <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800abb8:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800abba:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800abbc:	9405      	str	r4, [sp, #20]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	9201      	str	r2, [sp, #4]
 800abc4:	9302      	str	r3, [sp, #8]
 800abc6:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800abca:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800abce:	42b3      	cmp	r3, r6
 800abd0:	dc16      	bgt.n	800ac00 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800abd2:	69a3      	ldr	r3, [r4, #24]
 800abd4:	9801      	ldr	r0, [sp, #4]
 800abd6:	6018      	str	r0, [r3, #0]
 800abd8:	9802      	ldr	r0, [sp, #8]
 800abda:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800abdc:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800abde:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800abe0:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800abe2:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800abe6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800abe8:	e007      	b.n	800abfa <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800abea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e3      	bne.n	800abb8 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800abf0:	f7ff fe44 	bl	800a87c <process_restart>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1df      	bne.n	800abb8 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800abf8:	2000      	movs	r0, #0
}
 800abfa:	b007      	add	sp, #28
 800abfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800ac00:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800ac02:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800ac06:	dc07      	bgt.n	800ac18 <decode_mcu_DC_refine+0x7c>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	a801      	add	r0, sp, #4
 800ac0c:	f7ff fd8c 	bl	800a728 <jpeg_fill_bit_buffer>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d0f1      	beq.n	800abf8 <decode_mcu_DC_refine+0x5c>
 800ac14:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800ac18:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ac1a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800ac1c:	fa41 f302 	asr.w	r3, r1, r2
 800ac20:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800ac22:	bf42      	ittt	mi
 800ac24:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800ac28:	433b      	orrmi	r3, r7
 800ac2a:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ac2e:	e7cc      	b.n	800abca <decode_mcu_DC_refine+0x2e>

0800ac30 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800ac30:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	4605      	mov	r5, r0
 800ac3a:	b0d1      	sub	sp, #324	; 0x144
 800ac3c:	460e      	mov	r6, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ac3e:	f8d0 71d0 	ldr.w	r7, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800ac42:	b94b      	cbnz	r3, 800ac58 <decode_mcu_AC_refine+0x28>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800ac44:	f8d7 a024 	ldr.w	sl, [r7, #36]	; 0x24
 800ac48:	f1ba 0f00 	cmp.w	sl, #0
 800ac4c:	d00f      	beq.n	800ac6e <decode_mcu_AC_refine+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28

  return TRUE;
 800ac50:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800ac52:	3b01      	subs	r3, #1
 800ac54:	62bb      	str	r3, [r7, #40]	; 0x28
  return TRUE;
 800ac56:	e007      	b.n	800ac68 <decode_mcu_AC_refine+0x38>
    if (entropy->restarts_to_go == 0)
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1f2      	bne.n	800ac44 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800ac5e:	f7ff fe0d 	bl	800a87c <process_restart>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d1ee      	bne.n	800ac44 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800ac66:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800ac68:	b051      	add	sp, #324	; 0x144
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800ac6e:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800ac72:	2201      	movs	r2, #1
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800ac74:	f8d7 b010 	ldr.w	fp, [r7, #16]
    Se = cinfo->Se;
 800ac78:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800ac7a:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
    block = MCU_data[0];
 800ac7e:	f8d6 8000 	ldr.w	r8, [r6]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800ac82:	409a      	lsls	r2, r3
    k = cinfo->Ss;
 800ac84:	f8d5 6198 	ldr.w	r6, [r5, #408]	; 0x198
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ac88:	950f      	str	r5, [sp, #60]	; 0x3c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800ac8a:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800ac8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac90:	fa02 f303 	lsl.w	r3, r2, r3
 800ac94:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800ac96:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
 800ac9a:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ac9c:	69ab      	ldr	r3, [r5, #24]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	920b      	str	r2, [sp, #44]	; 0x2c
 800aca4:	930c      	str	r3, [sp, #48]	; 0x30
    tbl = entropy->ac_derived_tbl;
 800aca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aca8:	e9d7 4202 	ldrd	r4, r2, [r7, #8]
    tbl = entropy->ac_derived_tbl;
 800acac:	9309      	str	r3, [sp, #36]	; 0x24
    if (EOBRUN == 0) {
 800acae:	f1bb 0f00 	cmp.w	fp, #0
 800acb2:	f000 80c3 	beq.w	800ae3c <decode_mcu_AC_refine+0x20c>
      for (; k <= Se; k++) {
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	429e      	cmp	r6, r3
 800acba:	f340 80cd 	ble.w	800ae58 <decode_mcu_AC_refine+0x228>
      EOBRUN--;
 800acbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acc2:	e0bf      	b.n	800ae44 <decode_mcu_AC_refine+0x214>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800acc4:	2a07      	cmp	r2, #7
 800acc6:	dc0a      	bgt.n	800acde <decode_mcu_AC_refine+0xae>
 800acc8:	2300      	movs	r3, #0
 800acca:	4621      	mov	r1, r4
 800accc:	a80b      	add	r0, sp, #44	; 0x2c
 800acce:	f7ff fd2b 	bl	800a728 <jpeg_fill_bit_buffer>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d06e      	beq.n	800adb4 <decode_mcu_AC_refine+0x184>
 800acd6:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
 800acda:	2a07      	cmp	r2, #7
 800acdc:	dd61      	ble.n	800ada2 <decode_mcu_AC_refine+0x172>
 800acde:	f1a2 0308 	sub.w	r3, r2, #8
 800ace2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace4:	fa44 f303 	asr.w	r3, r4, r3
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800acee:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800acf2:	2900      	cmp	r1, #0
 800acf4:	d06b      	beq.n	800adce <decode_mcu_AC_refine+0x19e>
 800acf6:	4403      	add	r3, r0
 800acf8:	1a52      	subs	r2, r2, r1
 800acfa:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800acfe:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800ad02:	ea4f 1920 	mov.w	r9, r0, asr #4
	if (s) {
 800ad06:	9304      	str	r3, [sp, #16]
 800ad08:	d066      	beq.n	800add8 <decode_mcu_AC_refine+0x1a8>
	  if (s != 1)		/* size of new coef should always be 1 */
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d009      	beq.n	800ad22 <decode_mcu_AC_refine+0xf2>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	2179      	movs	r1, #121	; 0x79
 800ad12:	4628      	mov	r0, r5
 800ad14:	9204      	str	r2, [sp, #16]
 800ad16:	6159      	str	r1, [r3, #20]
 800ad18:	f04f 31ff 	mov.w	r1, #4294967295
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	4798      	blx	r3
 800ad20:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ad22:	2a00      	cmp	r2, #0
 800ad24:	dc08      	bgt.n	800ad38 <decode_mcu_AC_refine+0x108>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4621      	mov	r1, r4
 800ad2a:	a80b      	add	r0, sp, #44	; 0x2c
 800ad2c:	f7ff fcfc 	bl	800a728 <jpeg_fill_bit_buffer>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d03f      	beq.n	800adb4 <decode_mcu_AC_refine+0x184>
 800ad34:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1))
 800ad38:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800ad3a:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800ad3c:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800ad40:	f013 0f01 	tst.w	r3, #1
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	bf08      	it	eq
 800ad48:	460b      	moveq	r3, r1
 800ad4a:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800ad4c:	9b08      	ldr	r3, [sp, #32]
 800ad4e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800ad52:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800ad54:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d05e      	beq.n	800ae1a <decode_mcu_AC_refine+0x1ea>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ad5c:	2a00      	cmp	r2, #0
 800ad5e:	dc07      	bgt.n	800ad70 <decode_mcu_AC_refine+0x140>
 800ad60:	2301      	movs	r3, #1
 800ad62:	4621      	mov	r1, r4
 800ad64:	a80b      	add	r0, sp, #44	; 0x2c
 800ad66:	f7ff fcdf 	bl	800a728 <jpeg_fill_bit_buffer>
 800ad6a:	b318      	cbz	r0, 800adb4 <decode_mcu_AC_refine+0x184>
 800ad6c:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	    if (GET_BITS(1)) {
 800ad70:	3a01      	subs	r2, #1
 800ad72:	fa44 f302 	asr.w	r3, r4, r2
 800ad76:	07d9      	lsls	r1, r3, #31
 800ad78:	d50e      	bpl.n	800ad98 <decode_mcu_AC_refine+0x168>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800ad7a:	9b05      	ldr	r3, [sp, #20]
 800ad7c:	f938 1013 	ldrsh.w	r1, [r8, r3, lsl #1]
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	4219      	tst	r1, r3
 800ad84:	d108      	bne.n	800ad98 <decode_mcu_AC_refine+0x168>
		if (*thiscoef >= 0)
 800ad86:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800ad88:	b28b      	uxth	r3, r1
 800ad8a:	bfac      	ite	ge
 800ad8c:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800ad8e:	9907      	ldrlt	r1, [sp, #28]
 800ad90:	440b      	add	r3, r1
 800ad92:	9905      	ldr	r1, [sp, #20]
 800ad94:	f828 3011 	strh.w	r3, [r8, r1, lsl #1]
	  k++;
 800ad98:	3601      	adds	r6, #1
	} while (k <= Se);
 800ad9a:	9b06      	ldr	r3, [sp, #24]
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	dad5      	bge.n	800ad4c <decode_mcu_AC_refine+0x11c>
 800ada0:	e03e      	b.n	800ae20 <decode_mcu_AC_refine+0x1f0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800ada2:	2301      	movs	r3, #1
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	4621      	mov	r1, r4
 800ada8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adaa:	a80b      	add	r0, sp, #44	; 0x2c
 800adac:	f7ff fd1a 	bl	800a7e4 <jpeg_huff_decode>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	da0e      	bge.n	800add2 <decode_mcu_AC_refine+0x1a2>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800adb4:	ab10      	add	r3, sp, #64	; 0x40
 800adb6:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800adb8:	f1ba 0f00 	cmp.w	sl, #0
 800adbc:	f43f af53 	beq.w	800ac66 <decode_mcu_AC_refine+0x36>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800adc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adc4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800adc8:	f828 2011 	strh.w	r2, [r8, r1, lsl #1]
 800adcc:	e7f4      	b.n	800adb8 <decode_mcu_AC_refine+0x188>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800adce:	2309      	movs	r3, #9
 800add0:	e7e8      	b.n	800ada4 <decode_mcu_AC_refine+0x174>
 800add2:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
 800add6:	e792      	b.n	800acfe <decode_mcu_AC_refine+0xce>
	  if (r != 15) {
 800add8:	f1b9 0f0f 	cmp.w	r9, #15
 800addc:	d0b6      	beq.n	800ad4c <decode_mcu_AC_refine+0x11c>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800adde:	2301      	movs	r3, #1
 800ade0:	fa03 fb09 	lsl.w	fp, r3, r9
	    if (r) {
 800ade4:	f1b9 0f00 	cmp.w	r9, #0
 800ade8:	d013      	beq.n	800ae12 <decode_mcu_AC_refine+0x1e2>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800adea:	454a      	cmp	r2, r9
 800adec:	da08      	bge.n	800ae00 <decode_mcu_AC_refine+0x1d0>
 800adee:	464b      	mov	r3, r9
 800adf0:	4621      	mov	r1, r4
 800adf2:	a80b      	add	r0, sp, #44	; 0x2c
 800adf4:	f7ff fc98 	bl	800a728 <jpeg_fill_bit_buffer>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d0db      	beq.n	800adb4 <decode_mcu_AC_refine+0x184>
 800adfc:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800ae00:	4b28      	ldr	r3, [pc, #160]	; (800aea4 <decode_mcu_AC_refine+0x274>)
 800ae02:	eba2 0209 	sub.w	r2, r2, r9
 800ae06:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 800ae0a:	fa44 f302 	asr.w	r3, r4, r2
 800ae0e:	400b      	ands	r3, r1
	      EOBRUN += r;
 800ae10:	449b      	add	fp, r3
    if (EOBRUN > 0) {
 800ae12:	f1bb 0f00 	cmp.w	fp, #0
 800ae16:	d015      	beq.n	800ae44 <decode_mcu_AC_refine+0x214>
 800ae18:	e74d      	b.n	800acb6 <decode_mcu_AC_refine+0x86>
	    if (--r < 0)
 800ae1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae1e:	d2bb      	bcs.n	800ad98 <decode_mcu_AC_refine+0x168>
	if (s) {
 800ae20:	9b04      	ldr	r3, [sp, #16]
 800ae22:	b153      	cbz	r3, 800ae3a <decode_mcu_AC_refine+0x20a>
	  int pos = natural_order[k];
 800ae24:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800ae26:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800ae28:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800ae2c:	f828 1013 	strh.w	r1, [r8, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800ae30:	a910      	add	r1, sp, #64	; 0x40
 800ae32:	f841 302a 	str.w	r3, [r1, sl, lsl #2]
 800ae36:	f10a 0a01 	add.w	sl, sl, #1
      for (; k <= Se; k++) {
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	9b06      	ldr	r3, [sp, #24]
 800ae3e:	429e      	cmp	r6, r3
 800ae40:	f77f af40 	ble.w	800acc4 <decode_mcu_AC_refine+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ae44:	69ab      	ldr	r3, [r5, #24]
 800ae46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae48:	6019      	str	r1, [r3, #0]
 800ae4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae4c:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800ae4e:	f8c7 b010 	str.w	fp, [r7, #16]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ae52:	e9c7 4202 	strd	r4, r2, [r7, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800ae56:	e6fa      	b.n	800ac4e <decode_mcu_AC_refine+0x1e>
	thiscoef = *block + natural_order[k];
 800ae58:	9b08      	ldr	r3, [sp, #32]
 800ae5a:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
	if (*thiscoef != 0) {
 800ae5e:	f938 3019 	ldrsh.w	r3, [r8, r9, lsl #1]
 800ae62:	b1e3      	cbz	r3, 800ae9e <decode_mcu_AC_refine+0x26e>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ae64:	2a00      	cmp	r2, #0
 800ae66:	dc08      	bgt.n	800ae7a <decode_mcu_AC_refine+0x24a>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	a80b      	add	r0, sp, #44	; 0x2c
 800ae6e:	f7ff fc5b 	bl	800a728 <jpeg_fill_bit_buffer>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d09e      	beq.n	800adb4 <decode_mcu_AC_refine+0x184>
 800ae76:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800ae7a:	3a01      	subs	r2, #1
 800ae7c:	fa44 f302 	asr.w	r3, r4, r2
 800ae80:	07db      	lsls	r3, r3, #31
 800ae82:	d50c      	bpl.n	800ae9e <decode_mcu_AC_refine+0x26e>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800ae84:	f938 1019 	ldrsh.w	r1, [r8, r9, lsl #1]
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	4219      	tst	r1, r3
 800ae8c:	d107      	bne.n	800ae9e <decode_mcu_AC_refine+0x26e>
	      if (*thiscoef >= 0)
 800ae8e:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800ae90:	b28b      	uxth	r3, r1
 800ae92:	bfac      	ite	ge
 800ae94:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800ae96:	9907      	ldrlt	r1, [sp, #28]
 800ae98:	440b      	add	r3, r1
 800ae9a:	f828 3019 	strh.w	r3, [r8, r9, lsl #1]
      for (; k <= Se; k++) {
 800ae9e:	3601      	adds	r6, #1
 800aea0:	e709      	b.n	800acb6 <decode_mcu_AC_refine+0x86>
 800aea2:	bf00      	nop
 800aea4:	08022140 	.word	0x08022140

0800aea8 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800aeac:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800aeb0:	b093      	sub	sp, #76	; 0x4c
 800aeb2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800aeb4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800aeb8:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800aeba:	b933      	cbnz	r3, 800aeca <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800aebc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800aebe:	b17f      	cbz	r7, 800aee0 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800aec0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800aec2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800aec4:	3b01      	subs	r3, #1
 800aec6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800aec8:	e007      	b.n	800aeda <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800aeca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1f5      	bne.n	800aebc <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800aed0:	f7ff fcd4 	bl	800a87c <process_restart>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d1f1      	bne.n	800aebc <decode_mcu_sub+0x14>
	return FALSE;
 800aed8:	2000      	movs	r0, #0
}
 800aeda:	b013      	add	sp, #76	; 0x4c
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800aee0:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800aee4:	f105 0810 	add.w	r8, r5, #16
 800aee8:	ac0d      	add	r4, sp, #52	; 0x34
 800aeea:	f105 095c 	add.w	r9, r5, #92	; 0x5c
    natural_order = cinfo->natural_order;
 800aeee:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800aef0:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800aef4:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800b194 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800aef8:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aefa:	69b3      	ldr	r3, [r6, #24]
 800aefc:	960c      	str	r6, [sp, #48]	; 0x30
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	9208      	str	r2, [sp, #32]
 800af04:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800af06:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800af0a:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800af0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af10:	f8d8 3000 	ldr.w	r3, [r8]
 800af14:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800af16:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800af1a:	42bb      	cmp	r3, r7
 800af1c:	dc0e      	bgt.n	800af3c <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800af1e:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800af20:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800af22:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800af24:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af2c:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800af2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800af30:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800af34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af36:	6833      	ldr	r3, [r6, #0]
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	e7c1      	b.n	800aec0 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800af3c:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800af3e:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800af42:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800af46:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800af4a:	dc0c      	bgt.n	800af66 <decode_mcu_sub+0xbe>
 800af4c:	2300      	movs	r3, #0
 800af4e:	4662      	mov	r2, ip
 800af50:	4671      	mov	r1, lr
 800af52:	a808      	add	r0, sp, #32
 800af54:	f7ff fbe8 	bl	800a728 <jpeg_fill_bit_buffer>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d0bd      	beq.n	800aed8 <decode_mcu_sub+0x30>
 800af5c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800af60:	f1bc 0f07 	cmp.w	ip, #7
 800af64:	dd4a      	ble.n	800affc <decode_mcu_sub+0x154>
 800af66:	f1ac 0308 	sub.w	r3, ip, #8
 800af6a:	fa4e f303 	asr.w	r3, lr, r3
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800af74:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af78:	2a00      	cmp	r2, #0
 800af7a:	d04d      	beq.n	800b018 <decode_mcu_sub+0x170>
 800af7c:	4423      	add	r3, r4
 800af7e:	ebac 0c02 	sub.w	ip, ip, r2
 800af82:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800af86:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800af8a:	f8d9 8028 	ldr.w	r8, [r9, #40]	; 0x28
      coef_limit = entropy->coef_limit[blkn];
 800af8e:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 80a0 	beq.w	800b0d6 <decode_mcu_sub+0x22e>
	if (s) {
 800af96:	b1cc      	cbz	r4, 800afcc <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800af98:	45a4      	cmp	ip, r4
 800af9a:	da09      	bge.n	800afb0 <decode_mcu_sub+0x108>
 800af9c:	4623      	mov	r3, r4
 800af9e:	4662      	mov	r2, ip
 800afa0:	4671      	mov	r1, lr
 800afa2:	a808      	add	r0, sp, #32
 800afa4:	f7ff fbc0 	bl	800a728 <jpeg_fill_bit_buffer>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d095      	beq.n	800aed8 <decode_mcu_sub+0x30>
 800afac:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800afb0:	ebac 0c04 	sub.w	ip, ip, r4
 800afb4:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800afb8:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800afba:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800afbe:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800afc2:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800afc4:	4299      	cmp	r1, r3
 800afc6:	bfac      	ite	ge
 800afc8:	1a9c      	subge	r4, r3, r2
 800afca:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800afcc:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800afd0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800afd4:	ab12      	add	r3, sp, #72	; 0x48
 800afd6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800afda:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800afde:	4423      	add	r3, r4
      k = 1;
 800afe0:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800afe2:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800afe6:	f8ab 3000 	strh.w	r3, [fp]
	for (; k < coef_limit; k++) {
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	429c      	cmp	r4, r3
 800afee:	db15      	blt.n	800b01c <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800aff0:	9b05      	ldr	r3, [sp, #20]
 800aff2:	429c      	cmp	r4, r3
 800aff4:	f340 8081 	ble.w	800b0fa <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800aff8:	3701      	adds	r7, #1
 800affa:	e78c      	b.n	800af16 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800affc:	2301      	movs	r3, #1
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	4662      	mov	r2, ip
 800b002:	4623      	mov	r3, r4
 800b004:	4671      	mov	r1, lr
 800b006:	a808      	add	r0, sp, #32
 800b008:	f7ff fbec 	bl	800a7e4 <jpeg_huff_decode>
 800b00c:	1e04      	subs	r4, r0, #0
 800b00e:	f6ff af63 	blt.w	800aed8 <decode_mcu_sub+0x30>
 800b012:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800b016:	e7b6      	b.n	800af86 <decode_mcu_sub+0xde>
 800b018:	2309      	movs	r3, #9
 800b01a:	e7f0      	b.n	800affe <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b01c:	f1bc 0f07 	cmp.w	ip, #7
 800b020:	dc0d      	bgt.n	800b03e <decode_mcu_sub+0x196>
 800b022:	2300      	movs	r3, #0
 800b024:	4662      	mov	r2, ip
 800b026:	4671      	mov	r1, lr
 800b028:	a808      	add	r0, sp, #32
 800b02a:	f7ff fb7d 	bl	800a728 <jpeg_fill_bit_buffer>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f43f af52 	beq.w	800aed8 <decode_mcu_sub+0x30>
 800b034:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800b038:	f1bc 0f07 	cmp.w	ip, #7
 800b03c:	dd37      	ble.n	800b0ae <decode_mcu_sub+0x206>
 800b03e:	f1ac 0308 	sub.w	r3, ip, #8
 800b042:	fa4e f303 	asr.w	r3, lr, r3
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b04c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b050:	2a00      	cmp	r2, #0
 800b052:	d03a      	beq.n	800b0ca <decode_mcu_sub+0x222>
 800b054:	4443      	add	r3, r8
 800b056:	ebac 0c02 	sub.w	ip, ip, r2
 800b05a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800b05e:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800b062:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800b066:	d032      	beq.n	800b0ce <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b068:	459c      	cmp	ip, r3
	    k += r;
 800b06a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b06c:	da0b      	bge.n	800b086 <decode_mcu_sub+0x1de>
 800b06e:	4662      	mov	r2, ip
 800b070:	4671      	mov	r1, lr
 800b072:	a808      	add	r0, sp, #32
 800b074:	9307      	str	r3, [sp, #28]
 800b076:	f7ff fb57 	bl	800a728 <jpeg_fill_bit_buffer>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f43f af2c 	beq.w	800aed8 <decode_mcu_sub+0x30>
 800b080:	9b07      	ldr	r3, [sp, #28]
 800b082:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800b086:	ebac 0c03 	sub.w	ip, ip, r3
 800b08a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800b08e:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800b090:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800b094:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800b098:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800b09a:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800b09c:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800b09e:	bfa8      	it	ge
 800b0a0:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800b0a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b0a6:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800b0aa:	3401      	adds	r4, #1
 800b0ac:	e79d      	b.n	800afea <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	4662      	mov	r2, ip
 800b0b4:	4643      	mov	r3, r8
 800b0b6:	4671      	mov	r1, lr
 800b0b8:	a808      	add	r0, sp, #32
 800b0ba:	f7ff fb93 	bl	800a7e4 <jpeg_huff_decode>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f6ff af0a 	blt.w	800aed8 <decode_mcu_sub+0x30>
 800b0c4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800b0c8:	e7c9      	b.n	800b05e <decode_mcu_sub+0x1b6>
 800b0ca:	2309      	movs	r3, #9
 800b0cc:	e7f0      	b.n	800b0b0 <decode_mcu_sub+0x208>
	    if (r != 15)
 800b0ce:	2a0f      	cmp	r2, #15
 800b0d0:	d192      	bne.n	800aff8 <decode_mcu_sub+0x150>
	    k += 15;
 800b0d2:	340f      	adds	r4, #15
 800b0d4:	e7e9      	b.n	800b0aa <decode_mcu_sub+0x202>
	if (s) {
 800b0d6:	b174      	cbz	r4, 800b0f6 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b0d8:	45a4      	cmp	ip, r4
 800b0da:	da0a      	bge.n	800b0f2 <decode_mcu_sub+0x24a>
 800b0dc:	4623      	mov	r3, r4
 800b0de:	4662      	mov	r2, ip
 800b0e0:	4671      	mov	r1, lr
 800b0e2:	a808      	add	r0, sp, #32
 800b0e4:	f7ff fb20 	bl	800a728 <jpeg_fill_bit_buffer>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f43f aef5 	beq.w	800aed8 <decode_mcu_sub+0x30>
 800b0ee:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800b0f2:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800b0f6:	2401      	movs	r4, #1
 800b0f8:	e77a      	b.n	800aff0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800b0fa:	f1bc 0f07 	cmp.w	ip, #7
 800b0fe:	dc0d      	bgt.n	800b11c <decode_mcu_sub+0x274>
 800b100:	2300      	movs	r3, #0
 800b102:	4662      	mov	r2, ip
 800b104:	4671      	mov	r1, lr
 800b106:	a808      	add	r0, sp, #32
 800b108:	f7ff fb0e 	bl	800a728 <jpeg_fill_bit_buffer>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f43f aee3 	beq.w	800aed8 <decode_mcu_sub+0x30>
 800b112:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800b116:	f1bc 0f07 	cmp.w	ip, #7
 800b11a:	dd25      	ble.n	800b168 <decode_mcu_sub+0x2c0>
 800b11c:	f1ac 0308 	sub.w	r3, ip, #8
 800b120:	fa4e f303 	asr.w	r3, lr, r3
 800b124:	b2db      	uxtb	r3, r3
 800b126:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b12a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b12e:	b34a      	cbz	r2, 800b184 <decode_mcu_sub+0x2dc>
 800b130:	4443      	add	r3, r8
 800b132:	ebac 0c02 	sub.w	ip, ip, r2
 800b136:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b13a:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800b13e:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800b142:	d021      	beq.n	800b188 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b144:	45dc      	cmp	ip, fp
	  k += r;
 800b146:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b148:	da0a      	bge.n	800b160 <decode_mcu_sub+0x2b8>
 800b14a:	465b      	mov	r3, fp
 800b14c:	4662      	mov	r2, ip
 800b14e:	4671      	mov	r1, lr
 800b150:	a808      	add	r0, sp, #32
 800b152:	f7ff fae9 	bl	800a728 <jpeg_fill_bit_buffer>
 800b156:	2800      	cmp	r0, #0
 800b158:	f43f aebe 	beq.w	800aed8 <decode_mcu_sub+0x30>
 800b15c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800b160:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800b164:	3401      	adds	r4, #1
 800b166:	e743      	b.n	800aff0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800b168:	2301      	movs	r3, #1
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	4662      	mov	r2, ip
 800b16e:	4643      	mov	r3, r8
 800b170:	4671      	mov	r1, lr
 800b172:	a808      	add	r0, sp, #32
 800b174:	f7ff fb36 	bl	800a7e4 <jpeg_huff_decode>
 800b178:	2800      	cmp	r0, #0
 800b17a:	f6ff aead 	blt.w	800aed8 <decode_mcu_sub+0x30>
 800b17e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800b182:	e7da      	b.n	800b13a <decode_mcu_sub+0x292>
 800b184:	2309      	movs	r3, #9
 800b186:	e7f0      	b.n	800b16a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800b188:	2b0f      	cmp	r3, #15
 800b18a:	f47f af35 	bne.w	800aff8 <decode_mcu_sub+0x150>
	  k += 15;
 800b18e:	340f      	adds	r4, #15
 800b190:	e7e8      	b.n	800b164 <decode_mcu_sub+0x2bc>
 800b192:	bf00      	nop
 800b194:	08022140 	.word	0x08022140

0800b198 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b19c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800b1a0:	b091      	sub	sp, #68	; 0x44
 800b1a2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b1a4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800b1a8:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800b1aa:	b933      	cbnz	r3, 800b1ba <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b1ac:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800b1ae:	b17f      	cbz	r7, 800b1d0 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b1b0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800b1b2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800b1b8:	e007      	b.n	800b1ca <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800b1ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1f5      	bne.n	800b1ac <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800b1c0:	f7ff fb5c 	bl	800a87c <process_restart>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1f1      	bne.n	800b1ac <decode_mcu+0x14>
	return FALSE;
 800b1c8:	2000      	movs	r0, #0
}
 800b1ca:	b011      	add	sp, #68	; 0x44
 800b1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b1d0:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800b1d2:	f105 0810 	add.w	r8, r5, #16
 800b1d6:	ac0b      	add	r4, sp, #44	; 0x2c
 800b1d8:	f105 095c 	add.w	r9, r5, #92	; 0x5c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	9206      	str	r2, [sp, #24]
 800b1e2:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800b1e4:	f8df a290 	ldr.w	sl, [pc, #656]	; 800b478 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b1e8:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800b1ea:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b1ee:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800b1f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1f8:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b1fa:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800b1fe:	42bb      	cmp	r3, r7
 800b200:	dc0e      	bgt.n	800b220 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b202:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b204:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b206:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b208:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	9a07      	ldr	r2, [sp, #28]
 800b210:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800b212:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b214:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800b218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b21a:	6833      	ldr	r3, [r6, #0]
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	e7c7      	b.n	800b1b0 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800b220:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b222:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800b226:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800b22a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b22e:	dc0c      	bgt.n	800b24a <decode_mcu+0xb2>
 800b230:	2300      	movs	r3, #0
 800b232:	4662      	mov	r2, ip
 800b234:	4671      	mov	r1, lr
 800b236:	a806      	add	r0, sp, #24
 800b238:	f7ff fa76 	bl	800a728 <jpeg_fill_bit_buffer>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d0c3      	beq.n	800b1c8 <decode_mcu+0x30>
 800b240:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b244:	f1bc 0f07 	cmp.w	ip, #7
 800b248:	dd49      	ble.n	800b2de <decode_mcu+0x146>
 800b24a:	f1ac 0308 	sub.w	r3, ip, #8
 800b24e:	fa4e f303 	asr.w	r3, lr, r3
 800b252:	b2db      	uxtb	r3, r3
 800b254:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b258:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	d04c      	beq.n	800b2fa <decode_mcu+0x162>
 800b260:	4423      	add	r3, r4
 800b262:	ebac 0c02 	sub.w	ip, ip, r2
 800b266:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800b26a:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800b26e:	f8d9 8028 	ldr.w	r8, [r9, #40]	; 0x28
      coef_limit = entropy->coef_limit[blkn];
 800b272:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 809f 	beq.w	800b3b8 <decode_mcu+0x220>
	if (s) {
 800b27a:	b1cc      	cbz	r4, 800b2b0 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b27c:	45a4      	cmp	ip, r4
 800b27e:	da09      	bge.n	800b294 <decode_mcu+0xfc>
 800b280:	4623      	mov	r3, r4
 800b282:	4662      	mov	r2, ip
 800b284:	4671      	mov	r1, lr
 800b286:	a806      	add	r0, sp, #24
 800b288:	f7ff fa4e 	bl	800a728 <jpeg_fill_bit_buffer>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d09b      	beq.n	800b1c8 <decode_mcu+0x30>
 800b290:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800b294:	ebac 0c04 	sub.w	ip, ip, r4
 800b298:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800b29c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800b29e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800b2a2:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800b2a6:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	bfac      	ite	ge
 800b2ac:	1a9c      	subge	r4, r3, r2
 800b2ae:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800b2b0:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800b2b4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800b2b8:	ab10      	add	r3, sp, #64	; 0x40
 800b2ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b2be:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800b2c2:	4423      	add	r3, r4
      k = 1;
 800b2c4:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800b2c6:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800b2ca:	f8ab 3000 	strh.w	r3, [fp]
	for (; k < coef_limit; k++) {
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	db14      	blt.n	800b2fe <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800b2d4:	2c3f      	cmp	r4, #63	; 0x3f
 800b2d6:	f340 8081 	ble.w	800b3dc <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b2da:	3701      	adds	r7, #1
 800b2dc:	e78d      	b.n	800b1fa <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b2de:	2301      	movs	r3, #1
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	4662      	mov	r2, ip
 800b2e4:	4623      	mov	r3, r4
 800b2e6:	4671      	mov	r1, lr
 800b2e8:	a806      	add	r0, sp, #24
 800b2ea:	f7ff fa7b 	bl	800a7e4 <jpeg_huff_decode>
 800b2ee:	1e04      	subs	r4, r0, #0
 800b2f0:	f6ff af6a 	blt.w	800b1c8 <decode_mcu+0x30>
 800b2f4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b2f8:	e7b7      	b.n	800b26a <decode_mcu+0xd2>
 800b2fa:	2309      	movs	r3, #9
 800b2fc:	e7f0      	b.n	800b2e0 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b2fe:	f1bc 0f07 	cmp.w	ip, #7
 800b302:	dc0d      	bgt.n	800b320 <decode_mcu+0x188>
 800b304:	2300      	movs	r3, #0
 800b306:	4662      	mov	r2, ip
 800b308:	4671      	mov	r1, lr
 800b30a:	a806      	add	r0, sp, #24
 800b30c:	f7ff fa0c 	bl	800a728 <jpeg_fill_bit_buffer>
 800b310:	2800      	cmp	r0, #0
 800b312:	f43f af59 	beq.w	800b1c8 <decode_mcu+0x30>
 800b316:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b31a:	f1bc 0f07 	cmp.w	ip, #7
 800b31e:	dd37      	ble.n	800b390 <decode_mcu+0x1f8>
 800b320:	f1ac 0308 	sub.w	r3, ip, #8
 800b324:	fa4e f303 	asr.w	r3, lr, r3
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b32e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b332:	2a00      	cmp	r2, #0
 800b334:	d03a      	beq.n	800b3ac <decode_mcu+0x214>
 800b336:	4443      	add	r3, r8
 800b338:	ebac 0c02 	sub.w	ip, ip, r2
 800b33c:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800b340:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800b344:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800b348:	d032      	beq.n	800b3b0 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b34a:	459c      	cmp	ip, r3
	    k += r;
 800b34c:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b34e:	da0b      	bge.n	800b368 <decode_mcu+0x1d0>
 800b350:	4662      	mov	r2, ip
 800b352:	4671      	mov	r1, lr
 800b354:	a806      	add	r0, sp, #24
 800b356:	9305      	str	r3, [sp, #20]
 800b358:	f7ff f9e6 	bl	800a728 <jpeg_fill_bit_buffer>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f43f af33 	beq.w	800b1c8 <decode_mcu+0x30>
 800b362:	9b05      	ldr	r3, [sp, #20]
 800b364:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800b368:	ebac 0c03 	sub.w	ip, ip, r3
 800b36c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800b370:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800b372:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800b376:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800b37a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800b37c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800b37e:	4b3d      	ldr	r3, [pc, #244]	; (800b474 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800b380:	bfa8      	it	ge
 800b382:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800b384:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b388:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800b38c:	3401      	adds	r4, #1
 800b38e:	e79e      	b.n	800b2ce <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b390:	2301      	movs	r3, #1
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	4662      	mov	r2, ip
 800b396:	4643      	mov	r3, r8
 800b398:	4671      	mov	r1, lr
 800b39a:	a806      	add	r0, sp, #24
 800b39c:	f7ff fa22 	bl	800a7e4 <jpeg_huff_decode>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	f6ff af11 	blt.w	800b1c8 <decode_mcu+0x30>
 800b3a6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b3aa:	e7c9      	b.n	800b340 <decode_mcu+0x1a8>
 800b3ac:	2309      	movs	r3, #9
 800b3ae:	e7f0      	b.n	800b392 <decode_mcu+0x1fa>
	    if (r != 15)
 800b3b0:	2a0f      	cmp	r2, #15
 800b3b2:	d192      	bne.n	800b2da <decode_mcu+0x142>
	    k += 15;
 800b3b4:	340f      	adds	r4, #15
 800b3b6:	e7e9      	b.n	800b38c <decode_mcu+0x1f4>
	if (s) {
 800b3b8:	b174      	cbz	r4, 800b3d8 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b3ba:	45a4      	cmp	ip, r4
 800b3bc:	da0a      	bge.n	800b3d4 <decode_mcu+0x23c>
 800b3be:	4623      	mov	r3, r4
 800b3c0:	4662      	mov	r2, ip
 800b3c2:	4671      	mov	r1, lr
 800b3c4:	a806      	add	r0, sp, #24
 800b3c6:	f7ff f9af 	bl	800a728 <jpeg_fill_bit_buffer>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	f43f aefc 	beq.w	800b1c8 <decode_mcu+0x30>
 800b3d0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800b3d4:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800b3d8:	2401      	movs	r4, #1
 800b3da:	e77b      	b.n	800b2d4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800b3dc:	f1bc 0f07 	cmp.w	ip, #7
 800b3e0:	dc0d      	bgt.n	800b3fe <decode_mcu+0x266>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	4662      	mov	r2, ip
 800b3e6:	4671      	mov	r1, lr
 800b3e8:	a806      	add	r0, sp, #24
 800b3ea:	f7ff f99d 	bl	800a728 <jpeg_fill_bit_buffer>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	f43f aeea 	beq.w	800b1c8 <decode_mcu+0x30>
 800b3f4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b3f8:	f1bc 0f07 	cmp.w	ip, #7
 800b3fc:	dd25      	ble.n	800b44a <decode_mcu+0x2b2>
 800b3fe:	f1ac 0308 	sub.w	r3, ip, #8
 800b402:	fa4e f303 	asr.w	r3, lr, r3
 800b406:	b2db      	uxtb	r3, r3
 800b408:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b40c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b410:	b34a      	cbz	r2, 800b466 <decode_mcu+0x2ce>
 800b412:	4443      	add	r3, r8
 800b414:	ebac 0c02 	sub.w	ip, ip, r2
 800b418:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b41c:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800b420:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800b424:	d021      	beq.n	800b46a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b426:	45dc      	cmp	ip, fp
	  k += r;
 800b428:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b42a:	da0a      	bge.n	800b442 <decode_mcu+0x2aa>
 800b42c:	465b      	mov	r3, fp
 800b42e:	4662      	mov	r2, ip
 800b430:	4671      	mov	r1, lr
 800b432:	a806      	add	r0, sp, #24
 800b434:	f7ff f978 	bl	800a728 <jpeg_fill_bit_buffer>
 800b438:	2800      	cmp	r0, #0
 800b43a:	f43f aec5 	beq.w	800b1c8 <decode_mcu+0x30>
 800b43e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800b442:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800b446:	3401      	adds	r4, #1
 800b448:	e744      	b.n	800b2d4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800b44a:	2301      	movs	r3, #1
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	4662      	mov	r2, ip
 800b450:	4643      	mov	r3, r8
 800b452:	4671      	mov	r1, lr
 800b454:	a806      	add	r0, sp, #24
 800b456:	f7ff f9c5 	bl	800a7e4 <jpeg_huff_decode>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f6ff aeb4 	blt.w	800b1c8 <decode_mcu+0x30>
 800b460:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b464:	e7da      	b.n	800b41c <decode_mcu+0x284>
 800b466:	2309      	movs	r3, #9
 800b468:	e7f0      	b.n	800b44c <decode_mcu+0x2b4>
	  if (r != 15)
 800b46a:	2b0f      	cmp	r3, #15
 800b46c:	f47f af35 	bne.w	800b2da <decode_mcu+0x142>
	  k += 15;
 800b470:	340f      	adds	r4, #15
 800b472:	e7e8      	b.n	800b446 <decode_mcu+0x2ae>
 800b474:	08023a18 	.word	0x08023a18
 800b478:	08022140 	.word	0x08022140

0800b47c <jpeg_make_d_derived_tbl>:
{
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800b480:	2a03      	cmp	r2, #3
{
 800b482:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800b486:	4604      	mov	r4, r0
 800b488:	4616      	mov	r6, r2
 800b48a:	461f      	mov	r7, r3
 800b48c:	9102      	str	r1, [sp, #8]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800b48e:	d905      	bls.n	800b49c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800b490:	6803      	ldr	r3, [r0, #0]
 800b492:	2234      	movs	r2, #52	; 0x34
 800b494:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800b49c:	9b02      	ldr	r3, [sp, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d044      	beq.n	800b52c <jpeg_make_d_derived_tbl+0xb0>
 800b4a2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b4a6:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800b4aa:	b935      	cbnz	r5, 800b4ba <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	2234      	movs	r2, #52	; 0x34
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4798      	blx	r3
  if (*pdtbl == NULL)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	b93b      	cbnz	r3, 800b4ce <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b4be:	6863      	ldr	r3, [r4, #4]
 800b4c0:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800b4c4:	2101      	movs	r1, #1
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800b4cc:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800b4ce:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800b4d2:	2601      	movs	r6, #1
  p = 0;
 800b4d4:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b4d6:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800b4da:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800b4de:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800b4e2:	46ba      	mov	sl, r7
 800b4e4:	444f      	add	r7, r9
 800b4e6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800b4ea:	dd05      	ble.n	800b4f8 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f8c3 b014 	str.w	fp, [r3, #20]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4798      	blx	r3
 800b4f8:	f10a 0318 	add.w	r3, sl, #24
 800b4fc:	446b      	add	r3, sp
    while (i--)
 800b4fe:	f1b9 0901 	subs.w	r9, r9, #1
 800b502:	d218      	bcs.n	800b536 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800b504:	3601      	adds	r6, #1
 800b506:	2e11      	cmp	r6, #17
 800b508:	d1e9      	bne.n	800b4de <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800b50a:	2200      	movs	r2, #0
 800b50c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800b50e:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800b512:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800b516:	55da      	strb	r2, [r3, r7]
  p = 0;
 800b518:	4691      	mov	r9, r2
  si = huffsize[0];
 800b51a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800b51e:	ab06      	add	r3, sp, #24
 800b520:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b524:	b313      	cbz	r3, 800b56c <jpeg_make_d_derived_tbl+0xf0>
 800b526:	4649      	mov	r1, r9
 800b528:	1a52      	subs	r2, r2, r1
 800b52a:	e00a      	b.n	800b542 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800b52c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b530:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800b534:	e7b9      	b.n	800b4aa <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800b536:	f803 6b01 	strb.w	r6, [r3], #1
 800b53a:	e7e0      	b.n	800b4fe <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800b53c:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800b540:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800b542:	a806      	add	r0, sp, #24
 800b544:	1853      	adds	r3, r2, r1
 800b546:	4689      	mov	r9, r1
 800b548:	5c40      	ldrb	r0, [r0, r1]
 800b54a:	42b0      	cmp	r0, r6
 800b54c:	d0f6      	beq.n	800b53c <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800b54e:	fa0b f206 	lsl.w	r2, fp, r6
 800b552:	429a      	cmp	r2, r3
 800b554:	dc07      	bgt.n	800b566 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b556:	6822      	ldr	r2, [r4, #0]
 800b558:	2109      	movs	r1, #9
 800b55a:	4620      	mov	r0, r4
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	6151      	str	r1, [r2, #20]
 800b560:	6812      	ldr	r2, [r2, #0]
 800b562:	4790      	blx	r2
 800b564:	9b00      	ldr	r3, [sp, #0]
    code <<= 1;
 800b566:	005a      	lsls	r2, r3, #1
    si++;
 800b568:	3601      	adds	r6, #1
 800b56a:	e7d8      	b.n	800b51e <jpeg_make_d_derived_tbl+0xa2>
 800b56c:	f105 0210 	add.w	r2, r5, #16
 800b570:	4628      	mov	r0, r5
 800b572:	4646      	mov	r6, r8
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800b574:	f50d 7c8e 	add.w	ip, sp, #284	; 0x11c
 800b578:	9201      	str	r2, [sp, #4]
    if (htbl->bits[l]) {
 800b57a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800b57e:	b349      	cbz	r1, 800b5d4 <jpeg_make_d_derived_tbl+0x158>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800b580:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800b584:	1a9a      	subs	r2, r3, r2
      p += htbl->bits[l];
 800b586:	440b      	add	r3, r1
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800b588:	64f2      	str	r2, [r6, #76]	; 0x4c
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800b58a:	1e5a      	subs	r2, r3, #1
 800b58c:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800b590:	f846 2f04 	str.w	r2, [r6, #4]!
  for (l = 1; l <= 16; l++) {
 800b594:	9a01      	ldr	r2, [sp, #4]
 800b596:	4282      	cmp	r2, r0
 800b598:	d1ef      	bne.n	800b57a <jpeg_make_d_derived_tbl+0xfe>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800b59a:	4b2d      	ldr	r3, [pc, #180]	; (800b650 <jpeg_make_d_derived_tbl+0x1d4>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800b59c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800b5a6:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800b5aa:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800b5ac:	f013 ff44 	bl	801f438 <memset>
  p = 0;
 800b5b0:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800b5b4:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b5b6:	5daa      	ldrb	r2, [r5, r6]
 800b5b8:	f1c6 0b08 	rsb	fp, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b5bc:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b5be:	9200      	str	r2, [sp, #0]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	9900      	ldr	r1, [sp, #0]
 800b5c4:	fa02 f20b 	lsl.w	r2, r2, fp
 800b5c8:	4451      	add	r1, sl
 800b5ca:	9103      	str	r1, [sp, #12]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b5cc:	f105 0111 	add.w	r1, r5, #17
 800b5d0:	9104      	str	r1, [sp, #16]
 800b5d2:	e01f      	b.n	800b614 <jpeg_make_d_derived_tbl+0x198>
 800b5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d8:	e7da      	b.n	800b590 <jpeg_make_d_derived_tbl+0x114>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800b5da:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b5de:	4696      	mov	lr, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b5e0:	9904      	ldr	r1, [sp, #16]
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800b5e2:	fa00 f00b 	lsl.w	r0, r0, fp
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b5e6:	f811 1009 	ldrb.w	r1, [r1, r9]
 800b5ea:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 800b5ee:	f10c 0c23 	add.w	ip, ip, #35	; 0x23
 800b5f2:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b5f6:	f1be 0e01 	subs.w	lr, lr, #1
	dtbl->look_nbits[lookbits] = l;
 800b5fa:	f84c 6f04 	str.w	r6, [ip, #4]!
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b5fe:	d1fa      	bne.n	800b5f6 <jpeg_make_d_derived_tbl+0x17a>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b600:	f500 6092 	add.w	r0, r0, #1168	; 0x490
 800b604:	9205      	str	r2, [sp, #20]
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b606:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b60a:	4440      	add	r0, r8
 800b60c:	f013 ff14 	bl	801f438 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b610:	ab47      	add	r3, sp, #284	; 0x11c
 800b612:	9a05      	ldr	r2, [sp, #20]
 800b614:	9903      	ldr	r1, [sp, #12]
 800b616:	4589      	cmp	r9, r1
 800b618:	d1df      	bne.n	800b5da <jpeg_make_d_derived_tbl+0x15e>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800b61a:	3601      	adds	r6, #1
 800b61c:	9a00      	ldr	r2, [sp, #0]
 800b61e:	2e09      	cmp	r6, #9
 800b620:	4492      	add	sl, r2
 800b622:	d1c8      	bne.n	800b5b6 <jpeg_make_d_derived_tbl+0x13a>
  if (isDC) {
 800b624:	9b02      	ldr	r3, [sp, #8]
 800b626:	b123      	cbz	r3, 800b632 <jpeg_make_d_derived_tbl+0x1b6>
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	3510      	adds	r5, #16
 800b62c:	441f      	add	r7, r3
    for (i = 0; i < numsymbols; i++) {
 800b62e:	42af      	cmp	r7, r5
 800b630:	d103      	bne.n	800b63a <jpeg_make_d_derived_tbl+0x1be>
}
 800b632:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sym < 0 || sym > 15)
 800b63a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800b63e:	2b0f      	cmp	r3, #15
 800b640:	d9f5      	bls.n	800b62e <jpeg_make_d_derived_tbl+0x1b2>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	4620      	mov	r0, r4
 800b646:	615e      	str	r6, [r3, #20]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800b64c:	e7ef      	b.n	800b62e <jpeg_make_d_derived_tbl+0x1b2>
 800b64e:	bf00      	nop
 800b650:	000fffff 	.word	0x000fffff

0800b654 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800b654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800b658:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800b65c:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b65e:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800b662:	f500 74a8 	add.w	r4, r0, #336	; 0x150
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800b666:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800b66a:	2d00      	cmp	r5, #0
 800b66c:	f000 80af 	beq.w	800b7ce <start_pass_huff_decoder+0x17a>
    if (cinfo->Ss == 0) {
 800b670:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800b674:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800b678:	b962      	cbnz	r2, 800b694 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800b67a:	b1a9      	cbz	r1, 800b6a8 <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800b67c:	f8da 3000 	ldr.w	r3, [sl]
 800b680:	2711      	movs	r7, #17
 800b682:	4650      	mov	r0, sl
 800b684:	625d      	str	r5, [r3, #36]	; 0x24
 800b686:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800b68a:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4798      	blx	r3
 800b692:	e00f      	b.n	800b6b4 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800b694:	428a      	cmp	r2, r1
 800b696:	dcf1      	bgt.n	800b67c <start_pass_huff_decoder+0x28>
 800b698:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800b69c:	428b      	cmp	r3, r1
 800b69e:	dbed      	blt.n	800b67c <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800b6a0:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d1e9      	bne.n	800b67c <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800b6a8:	b116      	cbz	r6, 800b6b0 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800b6aa:	1e73      	subs	r3, r6, #1
 800b6ac:	42ab      	cmp	r3, r5
 800b6ae:	d1e5      	bne.n	800b67c <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800b6b0:	2d0d      	cmp	r5, #13
 800b6b2:	dce3      	bgt.n	800b67c <start_pass_huff_decoder+0x28>
{
 800b6b4:	46a1      	mov	r9, r4
 800b6b6:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b6b8:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b6bc:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b6c0:	42bb      	cmp	r3, r7
 800b6c2:	dc20      	bgt.n	800b706 <start_pass_huff_decoder+0xb2>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800b6c4:	f8da 31a0 	ldr.w	r3, [sl, #416]	; 0x1a0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d158      	bne.n	800b77e <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800b6cc:	4bbb      	ldr	r3, [pc, #748]	; (800b9bc <start_pass_huff_decoder+0x368>)
 800b6ce:	49bc      	ldr	r1, [pc, #752]	; (800b9c0 <start_pass_huff_decoder+0x36c>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800b6d0:	2600      	movs	r6, #0
    } else {
      if (cinfo->Ss == 0)
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	bf08      	it	eq
 800b6d6:	460b      	moveq	r3, r1
 800b6d8:	f10b 0710 	add.w	r7, fp, #16
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b6dc:	46b0      	mov	r8, r6
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800b6de:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b6e2:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800b6e6:	42b3      	cmp	r3, r6
 800b6e8:	dc4c      	bgt.n	800b784 <start_pass_huff_decoder+0x130>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800b6f0:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800b6f2:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800b6f6:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b6fa:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800b6fe:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800b702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b706:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800b70a:	f8d3 8004 	ldr.w	r8, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b70e:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 800b712:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800b716:	eb03 2608 	add.w	r6, r3, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b71a:	b172      	cbz	r2, 800b73a <start_pass_huff_decoder+0xe6>
 800b71c:	585b      	ldr	r3, [r3, r1]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	da0b      	bge.n	800b73a <start_pass_huff_decoder+0xe6>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b722:	f8da 3000 	ldr.w	r3, [sl]
 800b726:	2276      	movs	r2, #118	; 0x76
 800b728:	f04f 31ff 	mov.w	r1, #4294967295
 800b72c:	4650      	mov	r0, sl
 800b72e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800b732:	2200      	movs	r2, #0
 800b734:	61da      	str	r2, [r3, #28]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b73a:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800b73e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800b742:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800b746:	42ab      	cmp	r3, r5
 800b748:	da01      	bge.n	800b74e <start_pass_huff_decoder+0xfa>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b74a:	3701      	adds	r7, #1
 800b74c:	e7b4      	b.n	800b6b8 <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b74e:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800b750:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800b758:	429a      	cmp	r2, r3
 800b75a:	d00a      	beq.n	800b772 <start_pass_huff_decoder+0x11e>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800b75c:	f8da 3000 	ldr.w	r3, [sl]
 800b760:	2276      	movs	r2, #118	; 0x76
 800b762:	f04f 31ff 	mov.w	r1, #4294967295
 800b766:	4650      	mov	r0, sl
 800b768:	61dd      	str	r5, [r3, #28]
 800b76a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800b772:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b776:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800b778:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b77c:	e7e1      	b.n	800b742 <start_pass_huff_decoder+0xee>
      if (cinfo->Ss == 0)
 800b77e:	4b91      	ldr	r3, [pc, #580]	; (800b9c4 <start_pass_huff_decoder+0x370>)
 800b780:	4991      	ldr	r1, [pc, #580]	; (800b9c8 <start_pass_huff_decoder+0x374>)
 800b782:	e7a5      	b.n	800b6d0 <start_pass_huff_decoder+0x7c>
      if (cinfo->Ss == 0) {
 800b784:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800b788:	f854 3f04 	ldr.w	r3, [r4, #4]!
      if (cinfo->Ss == 0) {
 800b78c:	b97a      	cbnz	r2, 800b7ae <start_pass_huff_decoder+0x15a>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800b78e:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800b792:	b942      	cbnz	r2, 800b7a6 <start_pass_huff_decoder+0x152>
	  tbl = compptr->dc_tbl_no;
 800b794:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b796:	2101      	movs	r1, #1
 800b798:	4650      	mov	r0, sl
 800b79a:	f102 030b 	add.w	r3, r2, #11
 800b79e:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b7a2:	f7ff fe6b 	bl	800b47c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b7a6:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800b7a8:	f847 8f04 	str.w	r8, [r7, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b7ac:	e799      	b.n	800b6e2 <start_pass_huff_decoder+0x8e>
	tbl = compptr->ac_tbl_no;
 800b7ae:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	f105 030b 	add.w	r3, r5, #11
 800b7b8:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800b7ba:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b7be:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b7c2:	f7ff fe5b 	bl	800b47c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800b7c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b7c8:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800b7cc:	e7eb      	b.n	800b7a6 <start_pass_huff_decoder+0x152>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b7ce:	b982      	cbnz	r2, 800b7f2 <start_pass_huff_decoder+0x19e>
 800b7d0:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800b7d4:	b96b      	cbnz	r3, 800b7f2 <start_pass_huff_decoder+0x19e>
 800b7d6:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800b7da:	b953      	cbnz	r3, 800b7f2 <start_pass_huff_decoder+0x19e>
 800b7dc:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800b7e0:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b7e4:	b90a      	cbnz	r2, 800b7ea <start_pass_huff_decoder+0x196>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800b7e6:	2b3f      	cmp	r3, #63	; 0x3f
 800b7e8:	dc0c      	bgt.n	800b804 <start_pass_huff_decoder+0x1b0>
 800b7ea:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d008      	beq.n	800b804 <start_pass_huff_decoder+0x1b0>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800b7f2:	f8da 3000 	ldr.w	r3, [sl]
 800b7f6:	227d      	movs	r2, #125	; 0x7d
 800b7f8:	f04f 31ff 	mov.w	r1, #4294967295
 800b7fc:	4650      	mov	r0, sl
 800b7fe:	615a      	str	r2, [r3, #20]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800b804:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800b808:	2600      	movs	r6, #0
 800b80a:	4b70      	ldr	r3, [pc, #448]	; (800b9cc <start_pass_huff_decoder+0x378>)
 800b80c:	f10b 0710 	add.w	r7, fp, #16
 800b810:	4a6f      	ldr	r2, [pc, #444]	; (800b9d0 <start_pass_huff_decoder+0x37c>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b812:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800b814:	293f      	cmp	r1, #63	; 0x3f
 800b816:	bf08      	it	eq
 800b818:	4613      	moveq	r3, r2
 800b81a:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b81e:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800b822:	42b3      	cmp	r3, r6
 800b824:	dc3d      	bgt.n	800b8a2 <start_pass_huff_decoder+0x24e>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b826:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800b82a:	f10b 045c 	add.w	r4, fp, #92	; 0x5c
 800b82e:	f50a 76b6 	add.w	r6, sl, #364	; 0x16c
 800b832:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800b836:	4f67      	ldr	r7, [pc, #412]	; (800b9d4 <start_pass_huff_decoder+0x380>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800b838:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b9ec <start_pass_huff_decoder+0x398>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b83c:	42a8      	cmp	r0, r5
 800b83e:	f77f af57 	ble.w	800b6f0 <start_pass_huff_decoder+0x9c>
      compptr = cinfo->cur_comp_info[ci];
 800b842:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800b846:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800b84a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800b84e:	6953      	ldr	r3, [r2, #20]
 800b850:	3310      	adds	r3, #16
 800b852:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b856:	f844 3f04 	str.w	r3, [r4, #4]!
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800b85a:	6993      	ldr	r3, [r2, #24]
 800b85c:	3314      	adds	r3, #20
 800b85e:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b862:	62a3      	str	r3, [r4, #40]	; 0x28
      if (compptr->component_needed) {
 800b864:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b866:	2b00      	cmp	r3, #0
 800b868:	d076      	beq.n	800b958 <start_pass_huff_decoder+0x304>
	switch (cinfo->lim_Se) {
 800b86a:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
 800b86e:	290f      	cmp	r1, #15
	i = compptr->DCT_h_scaled_size;
 800b870:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800b874:	d073      	beq.n	800b95e <start_pass_huff_decoder+0x30a>
 800b876:	dc31      	bgt.n	800b8dc <start_pass_huff_decoder+0x288>
 800b878:	2903      	cmp	r1, #3
 800b87a:	d04b      	beq.n	800b914 <start_pass_huff_decoder+0x2c0>
 800b87c:	2908      	cmp	r1, #8
 800b87e:	d059      	beq.n	800b934 <start_pass_huff_decoder+0x2e0>
 800b880:	2900      	cmp	r1, #0
 800b882:	f000 8099 	beq.w	800b9b8 <start_pass_huff_decoder+0x364>
	  if (ci <= 0 || ci > 8) ci = 8;
 800b886:	1e59      	subs	r1, r3, #1
 800b888:	2908      	cmp	r1, #8
	  if (i <= 0 || i > 8) i = 8;
 800b88a:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800b88e:	bf28      	it	cs
 800b890:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800b892:	2908      	cmp	r1, #8
 800b894:	bf28      	it	cs
 800b896:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800b898:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b89c:	4b4e      	ldr	r3, [pc, #312]	; (800b9d8 <start_pass_huff_decoder+0x384>)
 800b89e:	3a09      	subs	r2, #9
 800b8a0:	e045      	b.n	800b92e <start_pass_huff_decoder+0x2da>
      compptr = cinfo->cur_comp_info[ci];
 800b8a2:	f854 9f04 	ldr.w	r9, [r4, #4]!
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800b8aa:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b8ae:	f102 0310 	add.w	r3, r2, #16
 800b8b2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b8b6:	f7ff fde1 	bl	800b47c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800b8ba:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800b8be:	b14b      	cbz	r3, 800b8d4 <start_pass_huff_decoder+0x280>
	tbl = compptr->ac_tbl_no;
 800b8c0:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4650      	mov	r0, sl
 800b8c8:	f102 0314 	add.w	r3, r2, #20
 800b8cc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b8d0:	f7ff fdd4 	bl	800b47c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b8d4:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800b8d6:	f847 8f04 	str.w	r8, [r7, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b8da:	e7a0      	b.n	800b81e <start_pass_huff_decoder+0x1ca>
	switch (cinfo->lim_Se) {
 800b8dc:	2923      	cmp	r1, #35	; 0x23
 800b8de:	f103 3eff 	add.w	lr, r3, #4294967295
 800b8e2:	f102 39ff 	add.w	r9, r2, #4294967295
 800b8e6:	d048      	beq.n	800b97a <start_pass_huff_decoder+0x326>
 800b8e8:	2930      	cmp	r1, #48	; 0x30
 800b8ea:	d054      	beq.n	800b996 <start_pass_huff_decoder+0x342>
 800b8ec:	2918      	cmp	r1, #24
 800b8ee:	d1ca      	bne.n	800b886 <start_pass_huff_decoder+0x232>
	  if (ci <= 0 || ci > 5) ci = 5;
 800b8f0:	f1be 0f05 	cmp.w	lr, #5
 800b8f4:	bf28      	it	cs
 800b8f6:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800b8f8:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800b8fc:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800b900:	bf28      	it	cs
 800b902:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800b904:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b908:	3a01      	subs	r2, #1
 800b90a:	4413      	add	r3, r2
 800b90c:	4a33      	ldr	r2, [pc, #204]	; (800b9dc <start_pass_huff_decoder+0x388>)
 800b90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b912:	e020      	b.n	800b956 <start_pass_huff_decoder+0x302>
	  if (ci <= 0 || ci > 2) ci = 2;
 800b914:	1e59      	subs	r1, r3, #1
 800b916:	2902      	cmp	r1, #2
	  if (i <= 0 || i > 2) i = 2;
 800b918:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800b91c:	bf28      	it	cs
 800b91e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800b920:	2902      	cmp	r1, #2
 800b922:	bf28      	it	cs
 800b924:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800b926:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800b92a:	4b2d      	ldr	r3, [pc, #180]	; (800b9e0 <start_pass_huff_decoder+0x38c>)
 800b92c:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800b92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b932:	e010      	b.n	800b956 <start_pass_huff_decoder+0x302>
	  if (ci <= 0 || ci > 3) ci = 3;
 800b934:	1e59      	subs	r1, r3, #1
 800b936:	2903      	cmp	r1, #3
	  if (i <= 0 || i > 3) i = 3;
 800b938:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800b93c:	bf28      	it	cs
 800b93e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800b940:	2903      	cmp	r1, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800b942:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800b946:	bf28      	it	cs
 800b948:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800b94a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b94e:	3a01      	subs	r2, #1
 800b950:	4413      	add	r3, r2
 800b952:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800b956:	3301      	adds	r3, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b958:	3501      	adds	r5, #1
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800b95a:	6523      	str	r3, [r4, #80]	; 0x50
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b95c:	e76e      	b.n	800b83c <start_pass_huff_decoder+0x1e8>
	  if (ci <= 0 || ci > 4) ci = 4;
 800b95e:	1e59      	subs	r1, r3, #1
 800b960:	2904      	cmp	r1, #4
	  if (i <= 0 || i > 4) i = 4;
 800b962:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800b966:	bf28      	it	cs
 800b968:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800b96a:	2904      	cmp	r1, #4
 800b96c:	bf28      	it	cs
 800b96e:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800b970:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b974:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <start_pass_huff_decoder+0x390>)
 800b976:	3a05      	subs	r2, #5
 800b978:	e7d9      	b.n	800b92e <start_pass_huff_decoder+0x2da>
	  if (ci <= 0 || ci > 6) ci = 6;
 800b97a:	f1be 0f06 	cmp.w	lr, #6
 800b97e:	bf28      	it	cs
 800b980:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800b982:	f1b9 0f06 	cmp.w	r9, #6
 800b986:	bf28      	it	cs
 800b988:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800b98a:	3b01      	subs	r3, #1
 800b98c:	3a01      	subs	r2, #1
 800b98e:	fb0c 2203 	mla	r2, ip, r3, r2
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <start_pass_huff_decoder+0x394>)
 800b994:	e7cb      	b.n	800b92e <start_pass_huff_decoder+0x2da>
	  if (ci <= 0 || ci > 7) ci = 7;
 800b996:	f1be 0f07 	cmp.w	lr, #7
 800b99a:	bf28      	it	cs
 800b99c:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800b99e:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800b9a2:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800b9a6:	bf28      	it	cs
 800b9a8:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800b9aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b9ae:	3a01      	subs	r2, #1
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b9b6:	e7ce      	b.n	800b956 <start_pass_huff_decoder+0x302>
	switch (cinfo->lim_Se) {
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e7cd      	b.n	800b958 <start_pass_huff_decoder+0x304>
 800b9bc:	0800aa3d 	.word	0x0800aa3d
 800b9c0:	0800a8c9 	.word	0x0800a8c9
 800b9c4:	0800ac31 	.word	0x0800ac31
 800b9c8:	0800ab9d 	.word	0x0800ab9d
 800b9cc:	0800aea9 	.word	0x0800aea9
 800b9d0:	0800b199 	.word	0x0800b199
 800b9d4:	080223e8 	.word	0x080223e8
 800b9d8:	08022180 	.word	0x08022180
 800b9dc:	080222f4 	.word	0x080222f4
 800b9e0:	08022280 	.word	0x08022280
 800b9e4:	080222b4 	.word	0x080222b4
 800b9e8:	08022358 	.word	0x08022358
 800b9ec:	08022290 	.word	0x08022290

0800b9f0 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b9f2:	6843      	ldr	r3, [r0, #4]
 800b9f4:	22d8      	movs	r2, #216	; 0xd8
 800b9f6:	2101      	movs	r1, #1
{
 800b9f8:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800b9fe:	4b17      	ldr	r3, [pc, #92]	; (800ba5c <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800ba00:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba04:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800ba06:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800ba08:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800ba0c:	b943      	cbnz	r3, 800ba20 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800ba0e:	6503      	str	r3, [r0, #80]	; 0x50
 800ba10:	6403      	str	r3, [r0, #64]	; 0x40
 800ba12:	6543      	str	r3, [r0, #84]	; 0x54
 800ba14:	6443      	str	r3, [r0, #68]	; 0x44
 800ba16:	6583      	str	r3, [r0, #88]	; 0x58
 800ba18:	6483      	str	r3, [r0, #72]	; 0x48
 800ba1a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800ba1c:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800ba1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba20:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ba22:	2101      	movs	r1, #1
 800ba24:	686b      	ldr	r3, [r5, #4]
 800ba26:	4628      	mov	r0, r5
 800ba28:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ba2a:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4798      	blx	r3
 800ba30:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800ba32:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ba36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba38:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800ba3c:	42b3      	cmp	r3, r6
 800ba3e:	dc05      	bgt.n	800ba4c <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800ba40:	2300      	movs	r3, #0
 800ba42:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800ba46:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800ba4a:	e7e8      	b.n	800ba1e <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800ba4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba50:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ba52:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800ba54:	f013 fcf0 	bl	801f438 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ba58:	e7ed      	b.n	800ba36 <jinit_huff_decoder+0x46>
 800ba5a:	bf00      	nop
 800ba5c:	0800b655 	.word	0x0800b655

0800ba60 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800ba60:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800ba64:	4a01      	ldr	r2, [pc, #4]	; (800ba6c <finish_input_pass+0xc>)
 800ba66:	601a      	str	r2, [r3, #0]
}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	0800bc29 	.word	0x0800bc29

0800ba70 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800ba70:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800ba72:	4a0a      	ldr	r2, [pc, #40]	; (800ba9c <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800ba74:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800ba76:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800ba7a:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800ba7c:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800ba7e:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800ba80:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800ba84:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800ba86:	6803      	ldr	r3, [r0, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800ba8c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ba90:	4620      	mov	r0, r4
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800ba96:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	0800bc29 	.word	0x0800bc29

0800baa0 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800baa0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800baa4:	2a01      	cmp	r2, #1
{
 800baa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baaa:	4604      	mov	r4, r0
 800baac:	f500 76a8 	add.w	r6, r0, #336	; 0x150
  if (cinfo->comps_in_scan == 1) {
 800bab0:	d135      	bne.n	800bb1e <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800bab2:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800bab6:	69d9      	ldr	r1, [r3, #28]
 800bab8:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800babc:	6a19      	ldr	r1, [r3, #32]
 800babe:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800bac2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800bac4:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800bac6:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800baca:	68d8      	ldr	r0, [r3, #12]
 800bacc:	fbb1 f5f0 	udiv	r5, r1, r0
 800bad0:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800bad4:	2900      	cmp	r1, #0
 800bad6:	bf08      	it	eq
 800bad8:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800bada:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800bade:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800bae0:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800bae2:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800bae6:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800baea:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800baec:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800baee:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800baf2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800baf6:	429f      	cmp	r7, r3
 800baf8:	db71      	blt.n	800bbde <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800bafa:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800bafe:	4620      	mov	r0, r4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800bb04:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800bb08:	4620      	mov	r0, r4
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800bb0e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800bb12:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800bb16:	6852      	ldr	r2, [r2, #4]
 800bb18:	601a      	str	r2, [r3, #0]
}
 800bb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800bb1e:	1e53      	subs	r3, r2, #1
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d907      	bls.n	800bb34 <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800bb24:	6803      	ldr	r3, [r0, #0]
 800bb26:	211b      	movs	r1, #27
 800bb28:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800bb2c:	2204      	movs	r2, #4
 800bb2e:	61da      	str	r2, [r3, #28]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800bb34:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800bb38:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800bb3a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bb3e:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800bb40:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800bb42:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800bb46:	4359      	muls	r1, r3
 800bb48:	f009 fd9a 	bl	8015680 <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800bb4c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800bb50:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800bb54:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800bb58:	4359      	muls	r1, r3
 800bb5a:	6a20      	ldr	r0, [r4, #32]
 800bb5c:	f009 fd90 	bl	8015680 <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800bb60:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800bb64:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bb68:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bb6c:	429d      	cmp	r5, r3
 800bb6e:	dabc      	bge.n	800baea <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800bb70:	f858 3f04 	ldr.w	r3, [r8, #4]!
      compptr->MCU_width = compptr->h_samp_factor;
 800bb74:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800bb76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800bb78:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800bb7a:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800bb7c:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800bb80:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800bb82:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800bb84:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800bb86:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800bb88:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800bb8a:	fbb2 fcf1 	udiv	ip, r2, r1
 800bb8e:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800bb92:	2a00      	cmp	r2, #0
 800bb94:	bf08      	it	eq
 800bb96:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800bb98:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800bb9a:	6a1a      	ldr	r2, [r3, #32]
 800bb9c:	fbb2 f1f0 	udiv	r1, r2, r0
 800bba0:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800bba4:	2a00      	cmp	r2, #0
 800bba6:	bf08      	it	eq
 800bba8:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800bbaa:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800bbac:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800bbb0:	443b      	add	r3, r7
 800bbb2:	2b0a      	cmp	r3, #10
 800bbb4:	dd05      	ble.n	800bbc2 <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f8c3 9014 	str.w	r9, [r3, #20]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4798      	blx	r3
      while (mcublks-- > 0) {
 800bbc2:	2f00      	cmp	r7, #0
 800bbc4:	dc01      	bgt.n	800bbca <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bbc6:	3501      	adds	r5, #1
 800bbc8:	e7ce      	b.n	800bb68 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800bbca:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800bbce:	3f01      	subs	r7, #1
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	335c      	adds	r3, #92	; 0x5c
 800bbd4:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800bbd8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800bbdc:	e7f1      	b.n	800bbc2 <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800bbde:	f859 6f04 	ldr.w	r6, [r9, #4]!
    if (compptr->quant_table != NULL)
 800bbe2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bbe4:	b9eb      	cbnz	r3, 800bc22 <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800bbe6:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800bbe8:	2a03      	cmp	r2, #3
 800bbea:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800bbee:	d803      	bhi.n	800bbf8 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800bbf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	b92b      	cbnz	r3, 800bc04 <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc04:	6863      	ldr	r3, [r4, #4]
 800bc06:	2284      	movs	r2, #132	; 0x84
 800bc08:	2101      	movs	r1, #1
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800bc0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bc12:	4798      	blx	r3
 800bc14:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800bc16:	2284      	movs	r2, #132	; 0x84
 800bc18:	6869      	ldr	r1, [r5, #4]
 800bc1a:	f013 fcee 	bl	801f5fa <memcpy>
    compptr->quant_table = qtbl;
 800bc1e:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bc22:	3701      	adds	r7, #1
 800bc24:	e765      	b.n	800baf2 <start_input_pass+0x52>
	...

0800bc28 <consume_markers>:
{
 800bc28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800bc2c:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800bc30:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800bc32:	6973      	ldr	r3, [r6, #20]
 800bc34:	b9eb      	cbnz	r3, 800bc72 <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800bc36:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800bc3a:	4db0      	ldr	r5, [pc, #704]	; (800befc <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800bc3c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800bc40:	4620      	mov	r0, r4
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4798      	blx	r3
    switch (val) {
 800bc46:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800bc48:	4607      	mov	r7, r0
    switch (val) {
 800bc4a:	d016      	beq.n	800bc7a <consume_markers+0x52>
 800bc4c:	2802      	cmp	r0, #2
 800bc4e:	d111      	bne.n	800bc74 <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800bc50:	2301      	movs	r3, #1
 800bc52:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800bc54:	69b3      	ldr	r3, [r6, #24]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f000 8174 	beq.w	800bf44 <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800bc5c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	b133      	cbz	r3, 800bc72 <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	223d      	movs	r2, #61	; 0x3d
 800bc68:	4620      	mov	r0, r4
 800bc6a:	615a      	str	r2, [r3, #20]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4798      	blx	r3
 800bc70:	e000      	b.n	800bc74 <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800bc72:	2702      	movs	r7, #2
}
 800bc74:	4638      	mov	r0, r7
 800bc76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800bc7a:	69b3      	ldr	r3, [r6, #24]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f000 8150 	beq.w	800bf22 <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	f040 80d8 	bne.w	800be38 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800bc88:	6a22      	ldr	r2, [r4, #32]
 800bc8a:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	dc02      	bgt.n	800bc98 <consume_markers+0x70>
 800bc92:	69e2      	ldr	r2, [r4, #28]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	dd08      	ble.n	800bcaa <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	212a      	movs	r1, #42	; 0x2a
 800bc9c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800bca0:	4620      	mov	r0, r4
 800bca2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800bcaa:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800bcae:	2a08      	cmp	r2, #8
 800bcb0:	d006      	beq.n	800bcc0 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	2110      	movs	r1, #16
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800bcc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bcc2:	2a0a      	cmp	r2, #10
 800bcc4:	dd08      	ble.n	800bcd8 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	211b      	movs	r1, #27
 800bcca:	4620      	mov	r0, r4
 800bccc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800bcd0:	220a      	movs	r2, #10
 800bcd2:	61da      	str	r2, [r3, #28]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bcd8:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800bcdc:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800bce0:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800bce4:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcea:	459a      	cmp	sl, r3
 800bcec:	db0d      	blt.n	800bd0a <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800bcee:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800bcf2:	b92b      	cbnz	r3, 800bd00 <consume_markers+0xd8>
 800bcf4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bcf8:	b383      	cbz	r3, 800bd5c <consume_markers+0x134>
 800bcfa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bcfe:	b36b      	cbz	r3, 800bd5c <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800bd00:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800bd02:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800bd06:	233f      	movs	r3, #63	; 0x3f
 800bd08:	e071      	b.n	800bdee <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800bd0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d804      	bhi.n	800bd1e <consume_markers+0xf6>
 800bd14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d905      	bls.n	800bd2a <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	4620      	mov	r0, r4
 800bd22:	f8c3 b014 	str.w	fp, [r3, #20]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800bd2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800bd2e:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800bd32:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800bd36:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	bfac      	ite	ge
 800bd3e:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800bd42:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800bd46:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800bd4a:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	bfac      	ite	ge
 800bd52:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800bd56:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800bd5a:	e7c5      	b.n	800bce8 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800bd5c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800bd60:	2b50      	cmp	r3, #80	; 0x50
 800bd62:	f000 808a 	beq.w	800be7a <consume_markers+0x252>
 800bd66:	dc2b      	bgt.n	800bdc0 <consume_markers+0x198>
 800bd68:	2b18      	cmp	r3, #24
 800bd6a:	d078      	beq.n	800be5e <consume_markers+0x236>
 800bd6c:	dc1d      	bgt.n	800bdaa <consume_markers+0x182>
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d070      	beq.n	800be54 <consume_markers+0x22c>
 800bd72:	dc13      	bgt.n	800bd9c <consume_markers+0x174>
 800bd74:	b3bb      	cbz	r3, 800bde6 <consume_markers+0x1be>
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d065      	beq.n	800be46 <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800bd7a:	6822      	ldr	r2, [r4, #0]
 800bd7c:	2111      	movs	r1, #17
 800bd7e:	4620      	mov	r0, r4
 800bd80:	6151      	str	r1, [r2, #20]
 800bd82:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800bd86:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800bd8a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800bd8e:	6213      	str	r3, [r2, #32]
 800bd90:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800bd94:	6253      	str	r3, [r2, #36]	; 0x24
 800bd96:	6813      	ldr	r3, [r2, #0]
 800bd98:	4798      	blx	r3
      break;
 800bd9a:	e02a      	b.n	800bdf2 <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800bd9c:	2b0f      	cmp	r3, #15
 800bd9e:	d1ec      	bne.n	800bd7a <consume_markers+0x152>
      cinfo->block_size = 4;
 800bda0:	2204      	movs	r2, #4
 800bda2:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800bda6:	4a56      	ldr	r2, [pc, #344]	; (800bf00 <consume_markers+0x2d8>)
 800bda8:	e051      	b.n	800be4e <consume_markers+0x226>
    switch (cinfo->Se) {
 800bdaa:	2b30      	cmp	r3, #48	; 0x30
 800bdac:	d05c      	beq.n	800be68 <consume_markers+0x240>
 800bdae:	2b3f      	cmp	r3, #63	; 0x3f
 800bdb0:	d05f      	beq.n	800be72 <consume_markers+0x24a>
 800bdb2:	2b23      	cmp	r3, #35	; 0x23
 800bdb4:	d1e1      	bne.n	800bd7a <consume_markers+0x152>
      cinfo->block_size = 6;
 800bdb6:	2206      	movs	r2, #6
 800bdb8:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800bdbc:	4a51      	ldr	r2, [pc, #324]	; (800bf04 <consume_markers+0x2dc>)
 800bdbe:	e046      	b.n	800be4e <consume_markers+0x226>
    switch (cinfo->Se) {
 800bdc0:	2ba8      	cmp	r3, #168	; 0xa8
 800bdc2:	d060      	beq.n	800be86 <consume_markers+0x25e>
 800bdc4:	dc07      	bgt.n	800bdd6 <consume_markers+0x1ae>
 800bdc6:	2b78      	cmp	r3, #120	; 0x78
 800bdc8:	d059      	beq.n	800be7e <consume_markers+0x256>
 800bdca:	2b8f      	cmp	r3, #143	; 0x8f
 800bdcc:	d059      	beq.n	800be82 <consume_markers+0x25a>
 800bdce:	2b63      	cmp	r3, #99	; 0x63
 800bdd0:	d1d3      	bne.n	800bd7a <consume_markers+0x152>
      cinfo->block_size = 10;
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	e795      	b.n	800bd02 <consume_markers+0xda>
    switch (cinfo->Se) {
 800bdd6:	2be0      	cmp	r3, #224	; 0xe0
 800bdd8:	d057      	beq.n	800be8a <consume_markers+0x262>
 800bdda:	2bff      	cmp	r3, #255	; 0xff
 800bddc:	d057      	beq.n	800be8e <consume_markers+0x266>
 800bdde:	2bc3      	cmp	r3, #195	; 0xc3
 800bde0:	d1cb      	bne.n	800bd7a <consume_markers+0x152>
      cinfo->block_size = 14;
 800bde2:	230e      	movs	r3, #14
 800bde4:	e78d      	b.n	800bd02 <consume_markers+0xda>
      cinfo->block_size = 1;
 800bde6:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800bdea:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800bdee:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bdf2:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800bdf6:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bdfa:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800bdfe:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800be00:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800be06:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be0a:	459a      	cmp	sl, r3
 800be0c:	db41      	blt.n	800be92 <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800be0e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800be12:	6a20      	ldr	r0, [r4, #32]
 800be14:	4359      	muls	r1, r3
 800be16:	f009 fc33 	bl	8015680 <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800be1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be1c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800be20:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800be24:	429a      	cmp	r2, r3
 800be26:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800be2a:	db03      	blt.n	800be34 <consume_markers+0x20c>
 800be2c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800be30:	2a00      	cmp	r2, #0
 800be32:	d071      	beq.n	800bf18 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800be34:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800be38:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d16d      	bne.n	800bf1c <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800be40:	2302      	movs	r3, #2
 800be42:	61b3      	str	r3, [r6, #24]
	  break;
 800be44:	e6fa      	b.n	800bc3c <consume_markers+0x14>
      cinfo->block_size = 2;
 800be46:	2202      	movs	r2, #2
 800be48:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800be4c:	4a2e      	ldr	r2, [pc, #184]	; (800bf08 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800be4e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800be52:	e7cc      	b.n	800bdee <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800be54:	2203      	movs	r2, #3
 800be56:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800be5a:	4a2c      	ldr	r2, [pc, #176]	; (800bf0c <consume_markers+0x2e4>)
 800be5c:	e7f7      	b.n	800be4e <consume_markers+0x226>
      cinfo->block_size = 5;
 800be5e:	2205      	movs	r2, #5
 800be60:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800be64:	4a2a      	ldr	r2, [pc, #168]	; (800bf10 <consume_markers+0x2e8>)
 800be66:	e7f2      	b.n	800be4e <consume_markers+0x226>
      cinfo->block_size = 7;
 800be68:	2207      	movs	r2, #7
 800be6a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800be6e:	4a29      	ldr	r2, [pc, #164]	; (800bf14 <consume_markers+0x2ec>)
 800be70:	e7ed      	b.n	800be4e <consume_markers+0x226>
      cinfo->block_size = 8;
 800be72:	2208      	movs	r2, #8
 800be74:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800be78:	e7b7      	b.n	800bdea <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800be7a:	2309      	movs	r3, #9
 800be7c:	e741      	b.n	800bd02 <consume_markers+0xda>
      cinfo->block_size = 11;
 800be7e:	230b      	movs	r3, #11
 800be80:	e73f      	b.n	800bd02 <consume_markers+0xda>
      cinfo->block_size = 12;
 800be82:	230c      	movs	r3, #12
 800be84:	e73d      	b.n	800bd02 <consume_markers+0xda>
      cinfo->block_size = 13;
 800be86:	230d      	movs	r3, #13
 800be88:	e73b      	b.n	800bd02 <consume_markers+0xda>
      cinfo->block_size = 15;
 800be8a:	230f      	movs	r3, #15
 800be8c:	e739      	b.n	800bd02 <consume_markers+0xda>
      cinfo->block_size = 16;
 800be8e:	2310      	movs	r3, #16
 800be90:	e737      	b.n	800bd02 <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800be92:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800be96:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800be9a:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800be9e:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800bea2:	69e3      	ldr	r3, [r4, #28]
 800bea4:	4351      	muls	r1, r2
 800bea6:	4358      	muls	r0, r3
 800bea8:	f009 fbea 	bl	8015680 <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800beac:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800beb0:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800beb4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800beb8:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800beba:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800bebe:	4358      	muls	r0, r3
 800bec0:	4351      	muls	r1, r2
 800bec2:	f009 fbdd 	bl	8015680 <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800bec6:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800beca:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800bece:	69e3      	ldr	r3, [r4, #28]
 800bed0:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800bed4:	4358      	muls	r0, r3
 800bed6:	f009 fbd3 	bl	8015680 <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800beda:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800bede:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800bee2:	6a23      	ldr	r3, [r4, #32]
 800bee4:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800bee8:	4358      	muls	r0, r3
 800beea:	f009 fbc9 	bl	8015680 <jdiv_round_up>
    compptr->quant_table = NULL;
 800beee:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800bef2:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800bef6:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800befa:	e783      	b.n	800be04 <consume_markers+0x1dc>
 800befc:	08023a18 	.word	0x08023a18
 800bf00:	08023c0c 	.word	0x08023c0c
 800bf04:	08023d30 	.word	0x08023d30
 800bf08:	08023b58 	.word	0x08023b58
 800bf0c:	08023ba8 	.word	0x08023ba8
 800bf10:	08023c8c 	.word	0x08023c8c
 800bf14:	08023e00 	.word	0x08023e00
    cinfo->inputctl->has_multiple_scans = FALSE;
 800bf18:	611a      	str	r2, [r3, #16]
 800bf1a:	e78d      	b.n	800be38 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	61b3      	str	r3, [r6, #24]
 800bf20:	e6a8      	b.n	800bc74 <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800bf22:	6933      	ldr	r3, [r6, #16]
 800bf24:	b92b      	cbnz	r3, 800bf32 <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	2224      	movs	r2, #36	; 0x24
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	615a      	str	r2, [r3, #20]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800bf32:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f43f ae80 	beq.w	800bc3c <consume_markers+0x14>
	start_input_pass(cinfo);
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f7ff fdaf 	bl	800baa0 <start_input_pass>
 800bf42:	e697      	b.n	800bc74 <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800bf44:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bf48:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	f77f ae90 	ble.w	800bc72 <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800bf52:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800bf56:	e68d      	b.n	800bc74 <consume_markers+0x4c>

0800bf58 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800bf58:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800bf5c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800bf5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bf60:	434a      	muls	r2, r1
 800bf62:	429a      	cmp	r2, r3
{
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800bf68:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800bf6a:	d813      	bhi.n	800bf94 <jpeg_core_output_dimensions+0x3c>
    cinfo->output_width = (JDIMENSION)
 800bf6c:	2501      	movs	r5, #1
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800bf6e:	f009 fb87 	bl	8015680 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800bf72:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800bf76:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800bf78:	6a20      	ldr	r0, [r4, #32]
 800bf7a:	f009 fb81 	bl	8015680 <jdiv_round_up>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bf7e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800bf82:	2200      	movs	r2, #0
 800bf84:	6a61      	ldr	r1, [r4, #36]	; 0x24
    cinfo->output_height = (JDIMENSION)
 800bf86:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 1;
 800bf88:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bf8c:	4291      	cmp	r1, r2
 800bf8e:	f300 80bf 	bgt.w	800c110 <jpeg_core_output_dimensions+0x1b8>
}
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800bf94:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800bf98:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800bf9c:	d80b      	bhi.n	800bfb6 <jpeg_core_output_dimensions+0x5e>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800bf9e:	0040      	lsls	r0, r0, #1
 800bfa0:	2502      	movs	r5, #2
 800bfa2:	f009 fb6d 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bfa6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800bfa8:	6a20      	ldr	r0, [r4, #32]
 800bfaa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bfae:	0040      	lsls	r0, r0, #1
 800bfb0:	f009 fb66 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 2;
 800bfb4:	e7e3      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800bfb6:	441d      	add	r5, r3
 800bfb8:	42aa      	cmp	r2, r5
 800bfba:	d80d      	bhi.n	800bfd8 <jpeg_core_output_dimensions+0x80>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800bfbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bfc0:	2503      	movs	r5, #3
 800bfc2:	f009 fb5d 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bfc6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800bfc8:	6a20      	ldr	r0, [r4, #32]
 800bfca:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bfce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bfd2:	f009 fb55 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 3;
 800bfd6:	e7d2      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800bfd8:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800bfdc:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800bfe0:	d80b      	bhi.n	800bffa <jpeg_core_output_dimensions+0xa2>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800bfe2:	0080      	lsls	r0, r0, #2
 800bfe4:	2504      	movs	r5, #4
 800bfe6:	f009 fb4b 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bfea:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800bfec:	6a20      	ldr	r0, [r4, #32]
 800bfee:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bff2:	0080      	lsls	r0, r0, #2
 800bff4:	f009 fb44 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 4;
 800bff8:	e7c1      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800bffa:	441d      	add	r5, r3
 800bffc:	42aa      	cmp	r2, r5
 800bffe:	d80d      	bhi.n	800c01c <jpeg_core_output_dimensions+0xc4>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800c000:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c004:	2505      	movs	r5, #5
 800c006:	f009 fb3b 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c00a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800c00c:	6a20      	ldr	r0, [r4, #32]
 800c00e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c016:	f009 fb33 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 5;
 800c01a:	e7b0      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800c01c:	2506      	movs	r5, #6
 800c01e:	fb05 f603 	mul.w	r6, r5, r3
 800c022:	42b2      	cmp	r2, r6
 800c024:	d80a      	bhi.n	800c03c <jpeg_core_output_dimensions+0xe4>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800c026:	4368      	muls	r0, r5
 800c028:	f009 fb2a 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c02c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800c02e:	6a20      	ldr	r0, [r4, #32]
 800c030:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c034:	4368      	muls	r0, r5
 800c036:	f009 fb23 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 14;
 800c03a:	e7a0      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800c03c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800c040:	00dd      	lsls	r5, r3, #3
 800c042:	42b2      	cmp	r2, r6
 800c044:	d80d      	bhi.n	800c062 <jpeg_core_output_dimensions+0x10a>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800c046:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800c04a:	2507      	movs	r5, #7
 800c04c:	f009 fb18 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c050:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800c052:	6a20      	ldr	r0, [r4, #32]
 800c054:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c058:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800c05c:	f009 fb10 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 7;
 800c060:	e78d      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800c062:	42aa      	cmp	r2, r5
 800c064:	d80b      	bhi.n	800c07e <jpeg_core_output_dimensions+0x126>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800c066:	00c0      	lsls	r0, r0, #3
 800c068:	2508      	movs	r5, #8
 800c06a:	f009 fb09 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c06e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800c070:	6a20      	ldr	r0, [r4, #32]
 800c072:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c076:	00c0      	lsls	r0, r0, #3
 800c078:	f009 fb02 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 8;
 800c07c:	e77f      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800c07e:	441d      	add	r5, r3
 800c080:	42aa      	cmp	r2, r5
 800c082:	d80d      	bhi.n	800c0a0 <jpeg_core_output_dimensions+0x148>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800c084:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800c088:	2509      	movs	r5, #9
 800c08a:	f009 faf9 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c08e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800c090:	6a20      	ldr	r0, [r4, #32]
 800c092:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c096:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800c09a:	f009 faf1 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 9;
 800c09e:	e76e      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800c0a0:	250a      	movs	r5, #10
 800c0a2:	fb05 f603 	mul.w	r6, r5, r3
 800c0a6:	42b2      	cmp	r2, r6
 800c0a8:	d9bd      	bls.n	800c026 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800c0aa:	250b      	movs	r5, #11
 800c0ac:	fb05 f603 	mul.w	r6, r5, r3
 800c0b0:	42b2      	cmp	r2, r6
 800c0b2:	d9b8      	bls.n	800c026 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800c0b4:	250c      	movs	r5, #12
 800c0b6:	fb05 f603 	mul.w	r6, r5, r3
 800c0ba:	42b2      	cmp	r2, r6
 800c0bc:	d9b3      	bls.n	800c026 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800c0be:	250d      	movs	r5, #13
 800c0c0:	fb05 f603 	mul.w	r6, r5, r3
 800c0c4:	42b2      	cmp	r2, r6
 800c0c6:	d9ae      	bls.n	800c026 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800c0c8:	250e      	movs	r5, #14
 800c0ca:	fb05 f603 	mul.w	r6, r5, r3
 800c0ce:	42b2      	cmp	r2, r6
 800c0d0:	d9a9      	bls.n	800c026 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800c0d2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800c0dc:	d80c      	bhi.n	800c0f8 <jpeg_core_output_dimensions+0x1a0>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800c0de:	1a18      	subs	r0, r3, r0
 800c0e0:	250f      	movs	r5, #15
 800c0e2:	f009 facd 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c0e6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800c0e8:	6a20      	ldr	r0, [r4, #32]
 800c0ea:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c0ee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800c0f2:	f009 fac5 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 15;
 800c0f6:	e742      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800c0f8:	4618      	mov	r0, r3
    cinfo->output_height = (JDIMENSION)
 800c0fa:	2510      	movs	r5, #16
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800c0fc:	f009 fac0 	bl	8015680 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c100:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800c102:	6a20      	ldr	r0, [r4, #32]
 800c104:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c108:	0100      	lsls	r0, r0, #4
 800c10a:	f009 fab9 	bl	8015680 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 16;
 800c10e:	e736      	b.n	800bf7e <jpeg_core_output_dimensions+0x26>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800c110:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800c114:	3201      	adds	r2, #1
 800c116:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800c118:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800c11c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800c120:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800c124:	e732      	b.n	800bf8c <jpeg_core_output_dimensions+0x34>
	...

0800c128 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800c128:	6843      	ldr	r3, [r0, #4]
 800c12a:	221c      	movs	r2, #28
 800c12c:	2100      	movs	r1, #0
 800c12e:	681b      	ldr	r3, [r3, #0]
{
 800c130:	b510      	push	{r4, lr}
 800c132:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800c134:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800c136:	4b08      	ldr	r3, [pc, #32]	; (800c158 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800c138:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800c13c:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800c13e:	4b07      	ldr	r3, [pc, #28]	; (800c15c <jinit_input_controller+0x34>)
 800c140:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800c142:	4b07      	ldr	r3, [pc, #28]	; (800c160 <jinit_input_controller+0x38>)
 800c144:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800c146:	4b07      	ldr	r3, [pc, #28]	; (800c164 <jinit_input_controller+0x3c>)
 800c148:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800c14a:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800c14c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800c150:	2301      	movs	r3, #1
 800c152:	6183      	str	r3, [r0, #24]
}
 800c154:	bd10      	pop	{r4, pc}
 800c156:	bf00      	nop
 800c158:	0800bc29 	.word	0x0800bc29
 800c15c:	0800ba71 	.word	0x0800ba71
 800c160:	0800baa1 	.word	0x0800baa1
 800c164:	0800ba61 	.word	0x0800ba61

0800c168 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800c168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c16c:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800c170:	4602      	mov	r2, r0

  switch (pass_mode) {
 800c172:	b149      	cbz	r1, 800c188 <start_pass_main+0x20>
 800c174:	2902      	cmp	r1, #2
 800c176:	d071      	beq.n	800c25c <start_pass_main+0xf4>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800c178:	6803      	ldr	r3, [r0, #0]
 800c17a:	2203      	movs	r2, #3
 800c17c:	615a      	str	r2, [r3, #20]
 800c17e:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800c180:	b003      	add	sp, #12
 800c182:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800c186:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800c188:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800c18c:	6880      	ldr	r0, [r0, #8]
 800c18e:	2800      	cmp	r0, #0
 800c190:	d061      	beq.n	800c256 <start_pass_main+0xee>
  int M = cinfo->min_DCT_v_scaled_size;
 800c192:	f8d2 c144 	ldr.w	ip, [r2, #324]	; 0x144
      main->pub.process_data = process_data_context_main;
 800c196:	461f      	mov	r7, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c198:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800c19c:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800c19e:	4831      	ldr	r0, [pc, #196]	; (800c264 <start_pass_main+0xfc>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c1a0:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c1a2:	f10c 0202 	add.w	r2, ip, #2
      main->pub.process_data = process_data_context_main;
 800c1a6:	f847 0f04 	str.w	r0, [r7, #4]!
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c1aa:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c1ac:	9a00      	ldr	r2, [sp, #0]
 800c1ae:	4291      	cmp	r1, r2
 800c1b0:	db09      	blt.n	800c1c6 <start_pass_main+0x5e>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800c1b2:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800c1b4:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800c1b8:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800c1ba:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800c1bc:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800c1c0:	b003      	add	sp, #12
 800c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c1c6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800c1c8:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c1ca:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c1cc:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800c1ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800c1d0:	f857 4f04 	ldr.w	r4, [r7, #4]!
    xbuf0 = main->xbuffer[0][ci];
 800c1d4:	f850 e021 	ldr.w	lr, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800c1d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c1da:	fb92 f2fc 	sdiv	r2, r2, ip
    xbuf1 = main->xbuffer[1][ci];
 800c1de:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c1e2:	fb02 f905 	mul.w	r9, r2, r5
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	454d      	cmp	r5, r9
 800c1ea:	db1c      	blt.n	800c226 <start_pass_main+0xbe>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c1ec:	fb02 fb0c 	mul.w	fp, r2, ip
 800c1f0:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800c1f4:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c1f8:	fb05 b502 	mla	r5, r5, r2, fp
 800c1fc:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800c200:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800c204:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800c208:	2400      	movs	r4, #0
 800c20a:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800c20e:	4554      	cmp	r4, sl
 800c210:	db11      	blt.n	800c236 <start_pass_main+0xce>
 800c212:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800c216:	2400      	movs	r4, #0
 800c218:	fb00 e502 	mla	r5, r0, r2, lr
 800c21c:	42a2      	cmp	r2, r4
 800c21e:	dc14      	bgt.n	800c24a <start_pass_main+0xe2>
       ci++, compptr++) {
 800c220:	3101      	adds	r1, #1
 800c222:	3658      	adds	r6, #88	; 0x58
 800c224:	e7c2      	b.n	800c1ac <start_pass_main+0x44>
      xbuf0[i] = xbuf1[i] = buf[i];
 800c226:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800c22a:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800c22e:	f84e 8025 	str.w	r8, [lr, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c232:	3501      	adds	r5, #1
 800c234:	e7d8      	b.n	800c1e8 <start_pass_main+0x80>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c236:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800c23a:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c23c:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800c240:	f855 bb04 	ldr.w	fp, [r5], #4
 800c244:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800c248:	e7e1      	b.n	800c20e <start_pass_main+0xa6>
      xbuf0[i - rgroup] = xbuf0[0];
 800c24a:	f8de 0000 	ldr.w	r0, [lr]
 800c24e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800c252:	3401      	adds	r4, #1
 800c254:	e7e2      	b.n	800c21c <start_pass_main+0xb4>
      main->pub.process_data = process_data_simple_main;
 800c256:	4a04      	ldr	r2, [pc, #16]	; (800c268 <start_pass_main+0x100>)
 800c258:	605a      	str	r2, [r3, #4]
 800c25a:	e7ae      	b.n	800c1ba <start_pass_main+0x52>
    main->pub.process_data = process_data_crank_post;
 800c25c:	4a03      	ldr	r2, [pc, #12]	; (800c26c <start_pass_main+0x104>)
 800c25e:	605a      	str	r2, [r3, #4]
    break;
 800c260:	e7ae      	b.n	800c1c0 <start_pass_main+0x58>
 800c262:	bf00      	nop
 800c264:	0800c2c9 	.word	0x0800c2c9
 800c268:	0800c271 	.word	0x0800c271
 800c26c:	0800c4bd 	.word	0x0800c4bd

0800c270 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800c270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c274:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800c278:	4698      	mov	r8, r3
 800c27a:	460e      	mov	r6, r1
 800c27c:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800c27e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800c280:	4605      	mov	r5, r0
 800c282:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800c284:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800c288:	b943      	cbnz	r3, 800c29c <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800c28a:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800c28e:	9105      	str	r1, [sp, #20]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	4798      	blx	r3
 800c294:	b1a8      	cbz	r0, 800c2c2 <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800c296:	2301      	movs	r3, #1
 800c298:	9905      	ldr	r1, [sp, #20]
 800c29a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800c29c:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800c2a0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c2a4:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	9600      	str	r6, [sp, #0]
 800c2ac:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800c2b0:	685e      	ldr	r6, [r3, #4]
 800c2b2:	464b      	mov	r3, r9
 800c2b4:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800c2b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2b8:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800c2ba:	bf24      	itt	cs
 800c2bc:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800c2be:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800c2c2:	b007      	add	sp, #28
 800c2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c2c8 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800c2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c2cc:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800c2d0:	4698      	mov	r8, r3
 800c2d2:	b08b      	sub	sp, #44	; 0x2c
 800c2d4:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800c2d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800c2d8:	4689      	mov	r9, r1
 800c2da:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800c2dc:	b973      	cbnz	r3, 800c2fc <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800c2de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2e0:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800c2e4:	330e      	adds	r3, #14
 800c2e6:	68d2      	ldr	r2, [r2, #12]
 800c2e8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800c2ec:	4790      	blx	r2
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d05a      	beq.n	800c3a8 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800c2f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800c2fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d011      	beq.n	800c326 <process_data_context_main+0x5e>
 800c302:	2b02      	cmp	r3, #2
 800c304:	d036      	beq.n	800c374 <process_data_context_main+0xac>
 800c306:	2b00      	cmp	r3, #0
 800c308:	d14e      	bne.n	800c3a8 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800c30a:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800c30e:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800c310:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800c312:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800c316:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800c318:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800c31a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800c31e:	429a      	cmp	r2, r3
 800c320:	d045      	beq.n	800c3ae <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800c322:	2301      	movs	r3, #1
 800c324:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800c326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c328:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c32c:	4628      	mov	r0, r5
 800c32e:	f103 010e 	add.w	r1, r3, #14
 800c332:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800c336:	f8cd 9000 	str.w	r9, [sp]
 800c33a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800c33e:	685e      	ldr	r6, [r3, #4]
 800c340:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800c344:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c346:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800c348:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c34a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d32b      	bcc.n	800c3a8 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800c350:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800c352:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800c356:	2b01      	cmp	r3, #1
 800c358:	d063      	beq.n	800c422 <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800c35a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c35c:	f083 0301 	eor.w	r3, r3, #1
 800c360:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800c366:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800c368:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800c36a:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800c36c:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800c36e:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800c370:	6463      	str	r3, [r4, #68]	; 0x44
 800c372:	e019      	b.n	800c3a8 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800c374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c376:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c37a:	4628      	mov	r0, r5
 800c37c:	f103 010e 	add.w	r1, r3, #14
 800c380:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800c384:	f8cd 9000 	str.w	r9, [sp]
 800c388:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800c38c:	685e      	ldr	r6, [r3, #4]
 800c38e:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800c392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c394:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800c396:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c398:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d304      	bcc.n	800c3a8 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	4543      	cmp	r3, r8
 800c3a6:	d3b0      	bcc.n	800c30a <process_data_context_main+0x42>
  }
}
 800c3a8:	b00b      	add	sp, #44	; 0x2c
 800c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c3ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c3b0:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c3b4:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c3b8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800c3bc:	9206      	str	r2, [sp, #24]
 800c3be:	9a06      	ldr	r2, [sp, #24]
 800c3c0:	4296      	cmp	r6, r2
 800c3c2:	daae      	bge.n	800c322 <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800c3c4:	68d8      	ldr	r0, [r3, #12]
 800c3c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3c8:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800c3ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c3cc:	fbb0 fbf2 	udiv	fp, r0, r2
 800c3d0:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800c3d4:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	bf08      	it	eq
 800c3dc:	4610      	moveq	r0, r2
    if (ci == 0) {
 800c3de:	b926      	cbnz	r6, 800c3ea <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800c3e0:	1e42      	subs	r2, r0, #1
 800c3e2:	fb92 f2fa 	sdiv	r2, r2, sl
 800c3e6:	3201      	adds	r2, #1
 800c3e8:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800c3ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c3ec:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800c3ee:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800c3f2:	320e      	adds	r2, #14
 800c3f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c3f8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c3fc:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800c400:	2000      	movs	r0, #0
 800c402:	465a      	mov	r2, fp
 800c404:	3204      	adds	r2, #4
 800c406:	9005      	str	r0, [sp, #20]
 800c408:	9805      	ldr	r0, [sp, #20]
 800c40a:	4550      	cmp	r0, sl
 800c40c:	db02      	blt.n	800c414 <process_data_context_main+0x14c>
       ci++, compptr++) {
 800c40e:	3601      	adds	r6, #1
 800c410:	3358      	adds	r3, #88	; 0x58
 800c412:	e7d4      	b.n	800c3be <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c414:	f8db 0000 	ldr.w	r0, [fp]
 800c418:	f842 0b04 	str.w	r0, [r2], #4
    for (i = 0; i < rgroup * 2; i++) {
 800c41c:	9805      	ldr	r0, [sp, #20]
 800c41e:	3001      	adds	r0, #1
 800c420:	e7f1      	b.n	800c406 <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c422:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c426:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c42a:	9305      	str	r3, [sp, #20]
 800c42c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c42e:	2500      	movs	r5, #0
 800c430:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800c432:	1c43      	adds	r3, r0, #1
 800c434:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c436:	9b08      	ldr	r3, [sp, #32]
 800c438:	429d      	cmp	r5, r3
 800c43a:	da8e      	bge.n	800c35a <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c43c:	9b05      	ldr	r3, [sp, #20]
 800c43e:	68da      	ldr	r2, [r3, #12]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800c444:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c448:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800c44c:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800c450:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800c454:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800c458:	9b07      	ldr	r3, [sp, #28]
 800c45a:	4353      	muls	r3, r2
 800c45c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800c460:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800c464:	4413      	add	r3, r2
 800c466:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800c468:	2100      	movs	r1, #0
 800c46a:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800c46e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c472:	461e      	mov	r6, r3
 800c474:	f06f 0303 	mvn.w	r3, #3
 800c478:	fb03 fe02 	mul.w	lr, r3, r2
 800c47c:	eb07 030e 	add.w	r3, r7, lr
 800c480:	44e6      	add	lr, ip
 800c482:	9309      	str	r3, [sp, #36]	; 0x24
 800c484:	428a      	cmp	r2, r1
 800c486:	dc04      	bgt.n	800c492 <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800c488:	9b05      	ldr	r3, [sp, #20]
 800c48a:	3501      	adds	r5, #1
 800c48c:	3358      	adds	r3, #88	; 0x58
 800c48e:	9305      	str	r3, [sp, #20]
 800c490:	e7d1      	b.n	800c436 <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	f853 bb04 	ldr.w	fp, [r3], #4
 800c498:	9306      	str	r3, [sp, #24]
 800c49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49c:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800c4a0:	f85a bb04 	ldr.w	fp, [sl], #4
 800c4a4:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800c4a8:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800c4ac:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800c4b0:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800c4b4:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800c4b6:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800c4ba:	e7e3      	b.n	800c484 <process_data_context_main+0x1bc>

0800c4bc <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800c4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800c4be:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800c4c2:	9100      	str	r1, [sp, #0]
 800c4c4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	6864      	ldr	r4, [r4, #4]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800c4d2:	b004      	add	sp, #16
 800c4d4:	bd10      	pop	{r4, pc}
	...

0800c4d8 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800c4d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c4dc:	6843      	ldr	r3, [r0, #4]
{
 800c4de:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c4e0:	2250      	movs	r2, #80	; 0x50
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	681b      	ldr	r3, [r3, #0]
{
 800c4e6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c4e8:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800c4ea:	4b3a      	ldr	r3, [pc, #232]	; (800c5d4 <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800c4ec:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c4f0:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800c4f2:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800c4f4:	b12d      	cbz	r5, 800c502 <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	2203      	movs	r2, #3
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	615a      	str	r2, [r3, #20]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800c502:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800c506:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	b31b      	cbz	r3, 800c556 <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800c50e:	2d01      	cmp	r5, #1
 800c510:	dc05      	bgt.n	800c51e <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	2230      	movs	r2, #48	; 0x30
 800c516:	4620      	mov	r0, r4
 800c518:	615a      	str	r2, [r3, #20]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c51e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c520:	2101      	movs	r1, #1
 800c522:	6863      	ldr	r3, [r4, #4]
 800c524:	4620      	mov	r0, r4
 800c526:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c528:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c52c:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c52e:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800c532:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c536:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800c538:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800c53a:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800c53c:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800c540:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c544:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800c548:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c54a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800c54c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c550:	4590      	cmp	r8, r2
 800c552:	db0a      	blt.n	800c56a <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800c554:	1c9d      	adds	r5, r3, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c556:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800c55a:	3604      	adds	r6, #4
 800c55c:	f04f 0800 	mov.w	r8, #0
 800c560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c562:	4543      	cmp	r3, r8
 800c564:	dc1d      	bgt.n	800c5a2 <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800c566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c56a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c56c:	4620      	mov	r0, r4
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c56e:	68ea      	ldr	r2, [r5, #12]
       ci++, compptr++) {
 800c570:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c572:	434a      	muls	r2, r1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c574:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c576:	fb92 fbf3 	sdiv	fp, r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c57a:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800c57c:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c586:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800c58a:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800c58e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800c592:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800c596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c598:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800c59c:	f108 0801 	add.w	r8, r8, #1
 800c5a0:	e7d3      	b.n	800c54a <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800c5a4:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c5a8:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800c5aa:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800c5ac:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c5b0:	4353      	muls	r3, r2
 800c5b2:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800c5b6:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c5b8:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800c5bc:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800c5c0:	436b      	muls	r3, r5
 800c5c2:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	434a      	muls	r2, r1
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	47c8      	blx	r9
 800c5ce:	f846 0f04 	str.w	r0, [r6, #4]!
       ci++, compptr++) {
 800c5d2:	e7c5      	b.n	800c560 <jinit_d_main_controller+0x88>
 800c5d4:	0800c169 	.word	0x0800c169

0800c5d8 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800c5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800c5dc:	6986      	ldr	r6, [r0, #24]
{
 800c5de:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800c5e0:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800c5e4:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800c5e8:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c5ec:	b93d      	cbnz	r5, 800c5fe <get_sof+0x26>
 800c5ee:	68f3      	ldr	r3, [r6, #12]
 800c5f0:	4798      	blx	r3
 800c5f2:	b910      	cbnz	r0, 800c5fa <get_sof+0x22>
 800c5f4:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800c5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c5fa:	e9d6 c500 	ldrd	ip, r5, [r6]
 800c5fe:	1e6b      	subs	r3, r5, #1
 800c600:	f89c 7000 	ldrb.w	r7, [ip]
 800c604:	f000 8088 	beq.w	800c718 <get_sof+0x140>
 800c608:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c60c:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c60e:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c612:	f000 808a 	beq.w	800c72a <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c616:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c618:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c61a:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c61c:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c620:	f000 808c 	beq.w	800c73c <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c624:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c626:	782a      	ldrb	r2, [r5, #0]
 800c628:	3b01      	subs	r3, #1
 800c62a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c62e:	6222      	str	r2, [r4, #32]
 800c630:	f000 808d 	beq.w	800c74e <get_sof+0x176>
 800c634:	3501      	adds	r5, #1
 800c636:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c638:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c63a:	6a22      	ldr	r2, [r4, #32]
 800c63c:	440a      	add	r2, r1
 800c63e:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c640:	f000 808e 	beq.w	800c760 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c644:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c646:	782a      	ldrb	r2, [r5, #0]
 800c648:	3b01      	subs	r3, #1
 800c64a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c64e:	61e2      	str	r2, [r4, #28]
 800c650:	f000 808f 	beq.w	800c772 <get_sof+0x19a>
 800c654:	3501      	adds	r5, #1
 800c656:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c658:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c65a:	69e2      	ldr	r2, [r4, #28]
 800c65c:	440a      	add	r2, r1
 800c65e:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c660:	f000 8090 	beq.w	800c784 <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c664:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c666:	f103 39ff 	add.w	r9, r3, #4294967295
 800c66a:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c66e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800c672:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c674:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c676:	4620      	mov	r0, r4
 800c678:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c67a:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c67e:	619a      	str	r2, [r3, #24]
  length -= 8;
 800c680:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c684:	69e2      	ldr	r2, [r4, #28]
 800c686:	61da      	str	r2, [r3, #28]
 800c688:	6a22      	ldr	r2, [r4, #32]
 800c68a:	621a      	str	r2, [r3, #32]
 800c68c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c68e:	625a      	str	r2, [r3, #36]	; 0x24
 800c690:	2266      	movs	r2, #102	; 0x66
 800c692:	615a      	str	r2, [r3, #20]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800c698:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	b12b      	cbz	r3, 800c6ac <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	223c      	movs	r2, #60	; 0x3c
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	615a      	str	r2, [r3, #20]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800c6ac:	6a23      	ldr	r3, [r4, #32]
 800c6ae:	b123      	cbz	r3, 800c6ba <get_sof+0xe2>
 800c6b0:	69e3      	ldr	r3, [r4, #28]
 800c6b2:	b113      	cbz	r3, 800c6ba <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800c6b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	dc05      	bgt.n	800c6c6 <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	2221      	movs	r2, #33	; 0x21
 800c6be:	4620      	mov	r0, r4
 800c6c0:	615a      	str	r2, [r3, #20]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800c6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c6cc:	4543      	cmp	r3, r8
 800c6ce:	d005      	beq.n	800c6dc <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	220c      	movs	r2, #12
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	615a      	str	r2, [r3, #20]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800c6dc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800c6e0:	b94b      	cbnz	r3, 800c6f6 <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800c6e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c6e4:	2158      	movs	r1, #88	; 0x58
 800c6e6:	6863      	ldr	r3, [r4, #4]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	434a      	muls	r2, r1
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4798      	blx	r3
 800c6f2:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c6f6:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800c6fa:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c6fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c702:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c706:	4543      	cmp	r3, r8
 800c708:	dc45      	bgt.n	800c796 <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800c70a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c70e:	2001      	movs	r0, #1
 800c710:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800c712:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800c716:	e76e      	b.n	800c5f6 <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c718:	68f3      	ldr	r3, [r6, #12]
 800c71a:	4620      	mov	r0, r4
 800c71c:	4798      	blx	r3
 800c71e:	2800      	cmp	r0, #0
 800c720:	f43f af68 	beq.w	800c5f4 <get_sof+0x1c>
 800c724:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c728:	e770      	b.n	800c60c <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c72a:	68f3      	ldr	r3, [r6, #12]
 800c72c:	4620      	mov	r0, r4
 800c72e:	4798      	blx	r3
 800c730:	2800      	cmp	r0, #0
 800c732:	f43f af5f 	beq.w	800c5f4 <get_sof+0x1c>
 800c736:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c73a:	e76d      	b.n	800c618 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c73c:	68f3      	ldr	r3, [r6, #12]
 800c73e:	4620      	mov	r0, r4
 800c740:	4798      	blx	r3
 800c742:	2800      	cmp	r0, #0
 800c744:	f43f af56 	beq.w	800c5f4 <get_sof+0x1c>
 800c748:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c74c:	e76b      	b.n	800c626 <get_sof+0x4e>
 800c74e:	68f3      	ldr	r3, [r6, #12]
 800c750:	4620      	mov	r0, r4
 800c752:	4798      	blx	r3
 800c754:	2800      	cmp	r0, #0
 800c756:	f43f af4d 	beq.w	800c5f4 <get_sof+0x1c>
 800c75a:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c75e:	e76a      	b.n	800c636 <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c760:	68f3      	ldr	r3, [r6, #12]
 800c762:	4620      	mov	r0, r4
 800c764:	4798      	blx	r3
 800c766:	2800      	cmp	r0, #0
 800c768:	f43f af44 	beq.w	800c5f4 <get_sof+0x1c>
 800c76c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c770:	e769      	b.n	800c646 <get_sof+0x6e>
 800c772:	68f3      	ldr	r3, [r6, #12]
 800c774:	4620      	mov	r0, r4
 800c776:	4798      	blx	r3
 800c778:	2800      	cmp	r0, #0
 800c77a:	f43f af3b 	beq.w	800c5f4 <get_sof+0x1c>
 800c77e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c782:	e768      	b.n	800c656 <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c784:	68f3      	ldr	r3, [r6, #12]
 800c786:	4620      	mov	r0, r4
 800c788:	4798      	blx	r3
 800c78a:	2800      	cmp	r0, #0
 800c78c:	f43f af32 	beq.w	800c5f4 <get_sof+0x1c>
 800c790:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c794:	e767      	b.n	800c666 <get_sof+0x8e>
    compptr->component_index = ci;
 800c796:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800c79a:	f1b9 0f00 	cmp.w	r9, #0
 800c79e:	d107      	bne.n	800c7b0 <get_sof+0x1d8>
 800c7a0:	68f3      	ldr	r3, [r6, #12]
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	4798      	blx	r3
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f43f af24 	beq.w	800c5f4 <get_sof+0x1c>
 800c7ac:	e9d6 5900 	ldrd	r5, r9, [r6]
 800c7b0:	782b      	ldrb	r3, [r5, #0]
 800c7b2:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800c7b6:	f1b9 0301 	subs.w	r3, r9, #1
 800c7ba:	d029      	beq.n	800c810 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800c7bc:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800c7be:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c7c0:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800c7c2:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800c7c6:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800c7ca:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800c7ce:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c7d2:	d026      	beq.n	800c822 <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800c7d4:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c7d6:	f103 39ff 	add.w	r9, r3, #4294967295
 800c7da:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c7de:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800c7e2:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c7e4:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800c7ec:	f108 0801 	add.w	r8, r8, #1
 800c7f0:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c7f2:	619a      	str	r2, [r3, #24]
 800c7f4:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800c7f8:	61da      	str	r2, [r3, #28]
 800c7fa:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800c7fe:	621a      	str	r2, [r3, #32]
 800c800:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800c804:	f8c3 a014 	str.w	sl, [r3, #20]
 800c808:	625a      	str	r2, [r3, #36]	; 0x24
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	4798      	blx	r3
       ci++, compptr++) {
 800c80e:	e779      	b.n	800c704 <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800c810:	68f3      	ldr	r3, [r6, #12]
 800c812:	4620      	mov	r0, r4
 800c814:	4798      	blx	r3
 800c816:	2800      	cmp	r0, #0
 800c818:	f43f aeec 	beq.w	800c5f4 <get_sof+0x1c>
 800c81c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c820:	e7cd      	b.n	800c7be <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c822:	68f3      	ldr	r3, [r6, #12]
 800c824:	4620      	mov	r0, r4
 800c826:	4798      	blx	r3
 800c828:	2800      	cmp	r0, #0
 800c82a:	f43f aee3 	beq.w	800c5f4 <get_sof+0x1c>
 800c82e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c832:	e7d0      	b.n	800c7d6 <get_sof+0x1fe>

0800c834 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800c838:	2a0d      	cmp	r2, #13
{
 800c83a:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800c83c:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800c83e:	eb02 0603 	add.w	r6, r2, r3
{
 800c842:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800c844:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800c846:	d96d      	bls.n	800c924 <examine_app0+0xf0>
 800c848:	7822      	ldrb	r2, [r4, #0]
 800c84a:	2a4a      	cmp	r2, #74	; 0x4a
 800c84c:	f040 808f 	bne.w	800c96e <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800c850:	7862      	ldrb	r2, [r4, #1]
 800c852:	2a46      	cmp	r2, #70	; 0x46
 800c854:	f040 808b 	bne.w	800c96e <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800c858:	78a2      	ldrb	r2, [r4, #2]
 800c85a:	2a49      	cmp	r2, #73	; 0x49
 800c85c:	d16a      	bne.n	800c934 <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800c85e:	78e2      	ldrb	r2, [r4, #3]
 800c860:	2a46      	cmp	r2, #70	; 0x46
 800c862:	d167      	bne.n	800c934 <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800c864:	7922      	ldrb	r2, [r4, #4]
 800c866:	2a00      	cmp	r2, #0
 800c868:	d164      	bne.n	800c934 <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800c86a:	2201      	movs	r2, #1
 800c86c:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800c870:	7962      	ldrb	r2, [r4, #5]
 800c872:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800c876:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800c878:	f894 c006 	ldrb.w	ip, [r4, #6]
 800c87c:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800c880:	79e7      	ldrb	r7, [r4, #7]
 800c882:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800c886:	f894 e008 	ldrb.w	lr, [r4, #8]
 800c88a:	7a67      	ldrb	r7, [r4, #9]
 800c88c:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800c890:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800c894:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800c898:	7ae7      	ldrb	r7, [r4, #11]
 800c89a:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800c89e:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800c8a2:	d007      	beq.n	800c8b4 <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800c8a4:	277a      	movs	r7, #122	; 0x7a
 800c8a6:	f8c1 c01c 	str.w	ip, [r1, #28]
 800c8aa:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800c8ae:	f04f 31ff 	mov.w	r1, #4294967295
 800c8b2:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	2101      	movs	r1, #1
 800c8b8:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800c8bc:	4628      	mov	r0, r5
 800c8be:	619a      	str	r2, [r3, #24]
 800c8c0:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800c8c4:	61da      	str	r2, [r3, #28]
 800c8c6:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800c8ca:	621a      	str	r2, [r3, #32]
 800c8cc:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800c8d0:	625a      	str	r2, [r3, #36]	; 0x24
 800c8d2:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800c8d6:	629a      	str	r2, [r3, #40]	; 0x28
 800c8d8:	2259      	movs	r2, #89	; 0x59
 800c8da:	615a      	str	r2, [r3, #20]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800c8e0:	7b23      	ldrb	r3, [r4, #12]
 800c8e2:	7b62      	ldrb	r2, [r4, #13]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	d00a      	beq.n	800c8fe <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	225c      	movs	r2, #92	; 0x5c
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	615a      	str	r2, [r3, #20]
 800c8f2:	7b22      	ldrb	r2, [r4, #12]
 800c8f4:	619a      	str	r2, [r3, #24]
 800c8f6:	7b62      	ldrb	r2, [r4, #13]
 800c8f8:	61da      	str	r2, [r3, #28]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800c8fe:	7b23      	ldrb	r3, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800c900:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800c902:	7b62      	ldrb	r2, [r4, #13]
 800c904:	fb13 f302 	smulbb	r3, r3, r2
 800c908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (totallen !=
 800c90c:	42b3      	cmp	r3, r6
 800c90e:	d030      	beq.n	800c972 <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	225a      	movs	r2, #90	; 0x5a
 800c914:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c918:	685b      	ldr	r3, [r3, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c91a:	4628      	mov	r0, r5
 800c91c:	2101      	movs	r1, #1
  }
}
 800c91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c922:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800c924:	2a05      	cmp	r2, #5
 800c926:	d922      	bls.n	800c96e <examine_app0+0x13a>
 800c928:	7822      	ldrb	r2, [r4, #0]
 800c92a:	2a4a      	cmp	r2, #74	; 0x4a
 800c92c:	d11f      	bne.n	800c96e <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800c92e:	7862      	ldrb	r2, [r4, #1]
 800c930:	2a46      	cmp	r2, #70	; 0x46
 800c932:	d11c      	bne.n	800c96e <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800c934:	78a2      	ldrb	r2, [r4, #2]
 800c936:	2a58      	cmp	r2, #88	; 0x58
 800c938:	d119      	bne.n	800c96e <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800c93a:	78e2      	ldrb	r2, [r4, #3]
 800c93c:	2a58      	cmp	r2, #88	; 0x58
 800c93e:	d116      	bne.n	800c96e <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800c940:	7922      	ldrb	r2, [r4, #4]
 800c942:	b9a2      	cbnz	r2, 800c96e <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800c944:	7962      	ldrb	r2, [r4, #5]
 800c946:	2a11      	cmp	r2, #17
 800c948:	d007      	beq.n	800c95a <examine_app0+0x126>
 800c94a:	2a13      	cmp	r2, #19
 800c94c:	d007      	beq.n	800c95e <examine_app0+0x12a>
 800c94e:	2a10      	cmp	r2, #16
 800c950:	d107      	bne.n	800c962 <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800c952:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c954:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800c958:	e7df      	b.n	800c91a <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800c95a:	226f      	movs	r2, #111	; 0x6f
 800c95c:	e7fa      	b.n	800c954 <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800c95e:	2270      	movs	r2, #112	; 0x70
 800c960:	e7f8      	b.n	800c954 <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800c962:	225b      	movs	r2, #91	; 0x5b
 800c964:	614a      	str	r2, [r1, #20]
 800c966:	7962      	ldrb	r2, [r4, #5]
 800c968:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800c96c:	e7d5      	b.n	800c91a <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c96e:	224f      	movs	r2, #79	; 0x4f
 800c970:	e7f0      	b.n	800c954 <examine_app0+0x120>
}
 800c972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c976 <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800c976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800c97a:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c97c:	6804      	ldr	r4, [r0, #0]
{
 800c97e:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c980:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800c982:	d92b      	bls.n	800c9dc <examine_app14+0x66>
 800c984:	780f      	ldrb	r7, [r1, #0]
 800c986:	2f41      	cmp	r7, #65	; 0x41
 800c988:	d128      	bne.n	800c9dc <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800c98a:	784f      	ldrb	r7, [r1, #1]
 800c98c:	2f64      	cmp	r7, #100	; 0x64
 800c98e:	d125      	bne.n	800c9dc <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800c990:	788f      	ldrb	r7, [r1, #2]
 800c992:	2f6f      	cmp	r7, #111	; 0x6f
 800c994:	d122      	bne.n	800c9dc <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800c996:	78cf      	ldrb	r7, [r1, #3]
 800c998:	2f62      	cmp	r7, #98	; 0x62
 800c99a:	d11f      	bne.n	800c9dc <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800c99c:	790f      	ldrb	r7, [r1, #4]
 800c99e:	2f65      	cmp	r7, #101	; 0x65
 800c9a0:	d11c      	bne.n	800c9dc <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800c9a2:	79cb      	ldrb	r3, [r1, #7]
 800c9a4:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800c9a6:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800c9a8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800c9ac:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800c9ae:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800c9b2:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800c9b6:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800c9b8:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c9ba:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800c9be:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c9c2:	234e      	movs	r3, #78	; 0x4e
 800c9c4:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800c9c8:	6163      	str	r3, [r4, #20]
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800c9ce:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800c9d0:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800c9d4:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800c9dc:	2150      	movs	r1, #80	; 0x50
 800c9de:	441a      	add	r2, r3
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	4633      	mov	r3, r6
 800c9e4:	6161      	str	r1, [r4, #20]
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	61a2      	str	r2, [r4, #24]
}
 800c9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800c9ee:	4718      	bx	r3

0800c9f0 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800c9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800c9f4:	6986      	ldr	r6, [r0, #24]
{
 800c9f6:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800c9f8:	e9d6 4700 	ldrd	r4, r7, [r6]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c9fc:	b947      	cbnz	r7, 800ca10 <get_interesting_appn+0x20>
 800c9fe:	68f3      	ldr	r3, [r6, #12]
 800ca00:	4798      	blx	r3
 800ca02:	b918      	cbnz	r0, 800ca0c <get_interesting_appn+0x1c>
 800ca04:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800ca06:	b004      	add	sp, #16
 800ca08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ca0c:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ca10:	f894 9000 	ldrb.w	r9, [r4]
 800ca14:	3f01      	subs	r7, #1
 800ca16:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800ca1a:	d02e      	beq.n	800ca7a <get_interesting_appn+0x8a>
 800ca1c:	3401      	adds	r4, #1
 800ca1e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ca22:	3f01      	subs	r7, #1
 800ca24:	444d      	add	r5, r9
  length -= 2;
 800ca26:	3d02      	subs	r5, #2
  if (length >= APPN_DATA_LEN)
 800ca28:	2d0d      	cmp	r5, #13
 800ca2a:	dc2e      	bgt.n	800ca8a <get_interesting_appn+0x9a>
  else if (length > 0)
 800ca2c:	2d00      	cmp	r5, #0
 800ca2e:	dd2f      	ble.n	800ca90 <get_interesting_appn+0xa0>
    numtoread = (unsigned int) length;
 800ca30:	46a9      	mov	r9, r5
  for (i = 0; i < numtoread; i++)
 800ca32:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800ca36:	b937      	cbnz	r7, 800ca46 <get_interesting_appn+0x56>
 800ca38:	68f3      	ldr	r3, [r6, #12]
 800ca3a:	4640      	mov	r0, r8
 800ca3c:	4798      	blx	r3
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d0e0      	beq.n	800ca04 <get_interesting_appn+0x14>
 800ca42:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ca46:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca4a:	3f01      	subs	r7, #1
 800ca4c:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800ca50:	f10a 0a01 	add.w	sl, sl, #1
 800ca54:	45d1      	cmp	r9, sl
 800ca56:	d1ee      	bne.n	800ca36 <get_interesting_appn+0x46>
  switch (cinfo->unread_marker) {
 800ca58:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800ca5c:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800ca60:	2ae0      	cmp	r2, #224	; 0xe0
 800ca62:	d018      	beq.n	800ca96 <get_interesting_appn+0xa6>
 800ca64:	2aee      	cmp	r2, #238	; 0xee
 800ca66:	d028      	beq.n	800caba <get_interesting_appn+0xca>
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ca68:	f8d8 3000 	ldr.w	r3, [r8]
 800ca6c:	2146      	movs	r1, #70	; 0x46
 800ca6e:	4640      	mov	r0, r8
 800ca70:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4798      	blx	r3
    break;
 800ca78:	e013      	b.n	800caa2 <get_interesting_appn+0xb2>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ca7a:	68f3      	ldr	r3, [r6, #12]
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	4798      	blx	r3
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d0bf      	beq.n	800ca04 <get_interesting_appn+0x14>
 800ca84:	e9d6 4700 	ldrd	r4, r7, [r6]
 800ca88:	e7c9      	b.n	800ca1e <get_interesting_appn+0x2e>
    numtoread = APPN_DATA_LEN;
 800ca8a:	f04f 090e 	mov.w	r9, #14
 800ca8e:	e7d0      	b.n	800ca32 <get_interesting_appn+0x42>
    numtoread = 0;
 800ca90:	f04f 0900 	mov.w	r9, #0
 800ca94:	e7e0      	b.n	800ca58 <get_interesting_appn+0x68>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800ca96:	462b      	mov	r3, r5
 800ca98:	464a      	mov	r2, r9
 800ca9a:	4669      	mov	r1, sp
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	f7ff fec9 	bl	800c834 <examine_app0>
  if (length > 0)
 800caa2:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800caa4:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800caa8:	dd05      	ble.n	800cab6 <get_interesting_appn+0xc6>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800caaa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800caae:	4629      	mov	r1, r5
 800cab0:	4640      	mov	r0, r8
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	4798      	blx	r3
  return TRUE;
 800cab6:	2001      	movs	r0, #1
 800cab8:	e7a5      	b.n	800ca06 <get_interesting_appn+0x16>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800caba:	462b      	mov	r3, r5
 800cabc:	464a      	mov	r2, r9
 800cabe:	4669      	mov	r1, sp
 800cac0:	4640      	mov	r0, r8
 800cac2:	f7ff ff58 	bl	800c976 <examine_app14>
    break;
 800cac6:	e7ec      	b.n	800caa2 <get_interesting_appn+0xb2>

0800cac8 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800cac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800cacc:	6984      	ldr	r4, [r0, #24]
{
 800cace:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800cad0:	e9d4 5300 	ldrd	r5, r3, [r4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800cad4:	b93b      	cbnz	r3, 800cae6 <skip_variable+0x1e>
 800cad6:	68e3      	ldr	r3, [r4, #12]
 800cad8:	4798      	blx	r3
 800cada:	b910      	cbnz	r0, 800cae2 <skip_variable+0x1a>
 800cadc:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800cade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cae2:	e9d4 5300 	ldrd	r5, r3, [r4]
 800cae6:	f895 9000 	ldrb.w	r9, [r5]
 800caea:	f1b3 0801 	subs.w	r8, r3, #1
 800caee:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800caf2:	d01c      	beq.n	800cb2e <skip_variable+0x66>
 800caf4:	3501      	adds	r5, #1
 800caf6:	f815 6b01 	ldrb.w	r6, [r5], #1
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800cafa:	235d      	movs	r3, #93	; 0x5d
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cb00:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800cb02:	4638      	mov	r0, r7
 800cb04:	6153      	str	r3, [r2, #20]
  length -= 2;
 800cb06:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800cb08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800cb0c:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800cb10:	6853      	ldr	r3, [r2, #4]
 800cb12:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cb14:	f108 33ff 	add.w	r3, r8, #4294967295
  if (length > 0)
 800cb18:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800cb1a:	6025      	str	r5, [r4, #0]
 800cb1c:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800cb1e:	dd04      	ble.n	800cb2a <skip_variable+0x62>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	4631      	mov	r1, r6
 800cb24:	4638      	mov	r0, r7
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	4798      	blx	r3
  return TRUE;
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	e7d7      	b.n	800cade <skip_variable+0x16>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cb2e:	68e3      	ldr	r3, [r4, #12]
 800cb30:	4638      	mov	r0, r7
 800cb32:	4798      	blx	r3
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d0d1      	beq.n	800cadc <skip_variable+0x14>
 800cb38:	e9d4 5800 	ldrd	r5, r8, [r4]
 800cb3c:	e7db      	b.n	800caf6 <skip_variable+0x2e>

0800cb3e <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800cb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800cb42:	6986      	ldr	r6, [r0, #24]
{
 800cb44:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800cb46:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800cb4a:	b987      	cbnz	r7, 800cb6e <next_marker+0x30>
 800cb4c:	68f3      	ldr	r3, [r6, #12]
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4798      	blx	r3
 800cb52:	b950      	cbnz	r0, 800cb6a <next_marker+0x2c>
 800cb54:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800cb5a:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800cb5e:	6993      	ldr	r3, [r2, #24]
 800cb60:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800cb62:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800cb64:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800cb68:	e7ef      	b.n	800cb4a <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800cb6a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800cb6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb72:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800cb74:	2bff      	cmp	r3, #255	; 0xff
 800cb76:	d1f0      	bne.n	800cb5a <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800cb78:	b937      	cbnz	r7, 800cb88 <next_marker+0x4a>
 800cb7a:	68f3      	ldr	r3, [r6, #12]
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	4798      	blx	r3
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d0e7      	beq.n	800cb54 <next_marker+0x16>
 800cb84:	e9d6 4700 	ldrd	r4, r7, [r6]
 800cb88:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cb8c:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800cb8e:	2dff      	cmp	r5, #255	; 0xff
 800cb90:	d0f2      	beq.n	800cb78 <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800cb92:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800cb96:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800cb98:	b90d      	cbnz	r5, 800cb9e <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800cb9a:	3302      	adds	r3, #2
 800cb9c:	e7e1      	b.n	800cb62 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800cb9e:	b173      	cbz	r3, 800cbbe <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800cba0:	f8d8 2000 	ldr.w	r2, [r8]
 800cba4:	2177      	movs	r1, #119	; 0x77
 800cba6:	4640      	mov	r0, r8
 800cba8:	61d5      	str	r5, [r2, #28]
 800cbaa:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800cbae:	6853      	ldr	r3, [r2, #4]
 800cbb0:	f04f 31ff 	mov.w	r1, #4294967295
 800cbb4:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800cbb6:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800cbba:	2200      	movs	r2, #0
 800cbbc:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800cbbe:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800cbc2:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800cbc4:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800cbc8:	e7c5      	b.n	800cb56 <next_marker+0x18>

0800cbca <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800cbca:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800cbce:	b510      	push	{r4, lr}
 800cbd0:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800cbd2:	b1e3      	cbz	r3, 800cc0e <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800cbd4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800cbd8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800cbdc:	6959      	ldr	r1, [r3, #20]
 800cbde:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d119      	bne.n	800cc1a <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800cbe6:	6823      	ldr	r3, [r4, #0]
 800cbe8:	2264      	movs	r2, #100	; 0x64
 800cbea:	4620      	mov	r0, r4
 800cbec:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	2103      	movs	r1, #3
 800cbf4:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800cbfc:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800cc00:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800cc02:	6953      	ldr	r3, [r2, #20]
 800cc04:	3301      	adds	r3, #1
 800cc06:	f003 0307 	and.w	r3, r3, #7
 800cc0a:	6153      	str	r3, [r2, #20]
  return TRUE;
 800cc0c:	e004      	b.n	800cc18 <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800cc0e:	f7ff ff96 	bl	800cb3e <next_marker>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d1de      	bne.n	800cbd4 <read_restart_marker+0xa>
      return FALSE;
 800cc16:	2000      	movs	r0, #0
}
 800cc18:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800cc1a:	69a3      	ldr	r3, [r4, #24]
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	4798      	blx	r3
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d1ea      	bne.n	800cbfc <read_restart_marker+0x32>
 800cc26:	e7f6      	b.n	800cc16 <read_restart_marker+0x4c>

0800cc28 <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800cc28:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800cc2a:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800cc2e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800cc32:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800cc36:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800cc3a:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800cc3c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800cc40:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800cc44:	4770      	bx	lr

0800cc46 <get_dht>:
{
 800cc46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800cc4a:	6987      	ldr	r7, [r0, #24]
{
 800cc4c:	b0c9      	sub	sp, #292	; 0x124
 800cc4e:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800cc50:	e9d7 4600 	ldrd	r4, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cc54:	b946      	cbnz	r6, 800cc68 <get_dht+0x22>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	4798      	blx	r3
 800cc5a:	b918      	cbnz	r0, 800cc64 <get_dht+0x1e>
 800cc5c:	2000      	movs	r0, #0
}
 800cc5e:	b049      	add	sp, #292	; 0x124
 800cc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cc64:	e9d7 4600 	ldrd	r4, r6, [r7]
 800cc68:	f894 8000 	ldrb.w	r8, [r4]
 800cc6c:	3e01      	subs	r6, #1
 800cc6e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800cc72:	d018      	beq.n	800cca6 <get_dht+0x60>
 800cc74:	3401      	adds	r4, #1
 800cc76:	f814 9b01 	ldrb.w	r9, [r4], #1
 800cc7a:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800cc7c:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cc80:	44c1      	add	r9, r8
  length -= 2;
 800cc82:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800cc86:	f1b9 0f10 	cmp.w	r9, #16
 800cc8a:	dc14      	bgt.n	800ccb6 <get_dht+0x70>
  if (length != 0)
 800cc8c:	f1b9 0f00 	cmp.w	r9, #0
 800cc90:	d005      	beq.n	800cc9e <get_dht+0x58>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800cc92:	682b      	ldr	r3, [r5, #0]
 800cc94:	220c      	movs	r2, #12
 800cc96:	4628      	mov	r0, r5
 800cc98:	615a      	str	r2, [r3, #20]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4798      	blx	r3
  return TRUE;
 800cc9e:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800cca0:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800cca4:	e7db      	b.n	800cc5e <get_dht+0x18>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4628      	mov	r0, r5
 800ccaa:	4798      	blx	r3
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d0d5      	beq.n	800cc5c <get_dht+0x16>
 800ccb0:	e9d7 4600 	ldrd	r4, r6, [r7]
 800ccb4:	e7df      	b.n	800cc76 <get_dht+0x30>
    INPUT_BYTE(cinfo, index, return FALSE);
 800ccb6:	b936      	cbnz	r6, 800ccc6 <get_dht+0x80>
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	4628      	mov	r0, r5
 800ccbc:	4790      	blx	r2
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d0cc      	beq.n	800cc5c <get_dht+0x16>
 800ccc2:	e9d7 4600 	ldrd	r4, r6, [r7]
 800ccc6:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800ccca:	2152      	movs	r1, #82	; 0x52
 800cccc:	682a      	ldr	r2, [r5, #0]
 800ccce:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800ccd0:	f8cd 8000 	str.w	r8, [sp]
 800ccd4:	3e01      	subs	r6, #1
    count = 0;
 800ccd6:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800ccda:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800ccde:	6852      	ldr	r2, [r2, #4]
 800cce0:	2101      	movs	r1, #1
 800cce2:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800cce4:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800cce6:	b946      	cbnz	r6, 800ccfa <get_dht+0xb4>
 800cce8:	68f9      	ldr	r1, [r7, #12]
 800ccea:	4628      	mov	r0, r5
 800ccec:	9201      	str	r2, [sp, #4]
 800ccee:	4788      	blx	r1
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d0b3      	beq.n	800cc5c <get_dht+0x16>
 800ccf4:	9a01      	ldr	r2, [sp, #4]
 800ccf6:	e9d7 4600 	ldrd	r4, r6, [r7]
 800ccfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfe:	3e01      	subs	r6, #1
 800cd00:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800cd04:	3201      	adds	r2, #1
      count += bits[i];
 800cd06:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800cd08:	2a11      	cmp	r2, #17
 800cd0a:	d1ec      	bne.n	800cce6 <get_dht+0xa0>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cd0c:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800cd0e:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cd12:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800cd16:	f04f 0958 	mov.w	r9, #88	; 0x58
 800cd1a:	4628      	mov	r0, r5
    length -= 1 + 16;
 800cd1c:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cd1e:	6191      	str	r1, [r2, #24]
 800cd20:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800cd24:	f8c2 9014 	str.w	r9, [r2, #20]
 800cd28:	61d1      	str	r1, [r2, #28]
 800cd2a:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800cd2e:	6211      	str	r1, [r2, #32]
 800cd30:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800cd34:	6251      	str	r1, [r2, #36]	; 0x24
 800cd36:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800cd3a:	6291      	str	r1, [r2, #40]	; 0x28
 800cd3c:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800cd40:	62d1      	str	r1, [r2, #44]	; 0x2c
 800cd42:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800cd46:	6311      	str	r1, [r2, #48]	; 0x30
 800cd48:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800cd4c:	6351      	str	r1, [r2, #52]	; 0x34
 800cd4e:	2102      	movs	r1, #2
 800cd50:	6852      	ldr	r2, [r2, #4]
 800cd52:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cd54:	682a      	ldr	r2, [r5, #0]
 800cd56:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f8c2 9014 	str.w	r9, [r2, #20]
 800cd60:	6191      	str	r1, [r2, #24]
 800cd62:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800cd66:	61d1      	str	r1, [r2, #28]
 800cd68:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800cd6c:	6211      	str	r1, [r2, #32]
 800cd6e:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800cd72:	6251      	str	r1, [r2, #36]	; 0x24
 800cd74:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800cd78:	6291      	str	r1, [r2, #40]	; 0x28
 800cd7a:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800cd7e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800cd80:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800cd84:	6311      	str	r1, [r2, #48]	; 0x30
 800cd86:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800cd8a:	6351      	str	r1, [r2, #52]	; 0x34
 800cd8c:	2102      	movs	r1, #2
 800cd8e:	6852      	ldr	r2, [r2, #4]
 800cd90:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800cd92:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800cd96:	dc02      	bgt.n	800cd9e <get_dht+0x158>
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	4553      	cmp	r3, sl
 800cd9c:	da05      	bge.n	800cdaa <get_dht+0x164>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cd9e:	682a      	ldr	r2, [r5, #0]
 800cda0:	2109      	movs	r1, #9
 800cda2:	4628      	mov	r0, r5
 800cda4:	6151      	str	r1, [r2, #20]
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	4790      	blx	r2
 800cdaa:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800cdae:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800cdb0:	45d1      	cmp	r9, sl
 800cdb2:	d13f      	bne.n	800ce34 <get_dht+0x1ee>
    if (index & 0x10) {		/* AC table definition */
 800cdb4:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800cdb8:	9b01      	ldr	r3, [sp, #4]
 800cdba:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800cdbe:	bf17      	itett	ne
 800cdc0:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800cdc4:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800cdc8:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800cdcc:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800cdce:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800cdd0:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800cdd4:	2b03      	cmp	r3, #3
 800cdd6:	d906      	bls.n	800cde6 <get_dht+0x1a0>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800cdd8:	682a      	ldr	r2, [r5, #0]
 800cdda:	211f      	movs	r1, #31
 800cddc:	4628      	mov	r0, r5
 800cdde:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800cde2:	6812      	ldr	r2, [r2, #0]
 800cde4:	4790      	blx	r2
    if (*htblptr == NULL)
 800cde6:	f8d8 2000 	ldr.w	r2, [r8]
 800cdea:	b922      	cbnz	r2, 800cdf6 <get_dht+0x1b0>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800cdec:	4628      	mov	r0, r5
 800cdee:	f7fb fbb5 	bl	800855c <jpeg_alloc_huff_table>
 800cdf2:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	46de      	mov	lr, fp
 800cdfa:	f10d 0a1c 	add.w	sl, sp, #28
 800cdfe:	f88b 2000 	strb.w	r2, [fp]
 800ce02:	f8d8 2000 	ldr.w	r2, [r8]
 800ce06:	46f4      	mov	ip, lr
 800ce08:	3208      	adds	r2, #8
 800ce0a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800ce0e:	45d4      	cmp	ip, sl
 800ce10:	f842 0c08 	str.w	r0, [r2, #-8]
 800ce14:	f842 1c04 	str.w	r1, [r2, #-4]
 800ce18:	46e6      	mov	lr, ip
 800ce1a:	d1f4      	bne.n	800ce06 <get_dht+0x1c0>
 800ce1c:	f89c 1000 	ldrb.w	r1, [ip]
 800ce20:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800ce22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce26:	f8d8 0000 	ldr.w	r0, [r8]
 800ce2a:	a908      	add	r1, sp, #32
 800ce2c:	3011      	adds	r0, #17
 800ce2e:	f012 fbe4 	bl	801f5fa <memcpy>
 800ce32:	e728      	b.n	800cc86 <get_dht+0x40>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800ce34:	b946      	cbnz	r6, 800ce48 <get_dht+0x202>
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4628      	mov	r0, r5
 800ce3a:	4790      	blx	r2
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f43f af0d 	beq.w	800cc5c <get_dht+0x16>
 800ce42:	a908      	add	r1, sp, #32
 800ce44:	e9d7 4600 	ldrd	r4, r6, [r7]
 800ce48:	f814 2b01 	ldrb.w	r2, [r4], #1
 800ce4c:	3e01      	subs	r6, #1
 800ce4e:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800ce52:	f109 0901 	add.w	r9, r9, #1
 800ce56:	e7ab      	b.n	800cdb0 <get_dht+0x16a>

0800ce58 <read_markers>:
{
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800ce60:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800ce64:	bb5b      	cbnz	r3, 800cebe <read_markers+0x66>
      if (! cinfo->marker->saw_SOI) {
 800ce66:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d17b      	bne.n	800cf68 <read_markers+0x110>
  INPUT_VARS(cinfo);
 800ce70:	69a7      	ldr	r7, [r4, #24]
 800ce72:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_BYTE(cinfo, c, return FALSE);
 800ce76:	b933      	cbnz	r3, 800ce86 <read_markers+0x2e>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	4798      	blx	r3
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d077      	beq.n	800cf72 <read_markers+0x11a>
 800ce82:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ce86:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ce88:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ce8c:	d065      	beq.n	800cf5a <read_markers+0x102>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ce8e:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800ce90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ce94:	f103 36ff 	add.w	r6, r3, #4294967295
 800ce98:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800ce9c:	d102      	bne.n	800cea4 <read_markers+0x4c>
 800ce9e:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800cea2:	d008      	beq.n	800ceb6 <read_markers+0x5e>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	2237      	movs	r2, #55	; 0x37
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f8c3 901c 	str.w	r9, [r3, #28]
 800ceae:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800ceb6:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800ceba:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800cebe:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	f000 83ba 	beq.w	800d63c <read_markers+0x7e4>
 800cec8:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800cecc:	2a3e      	cmp	r2, #62	; 0x3e
 800cece:	f200 83c2 	bhi.w	800d656 <read_markers+0x7fe>
 800ced2:	2a3e      	cmp	r2, #62	; 0x3e
 800ced4:	f200 83bf 	bhi.w	800d656 <read_markers+0x7fe>
 800ced8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800cedc:	0094008b 	.word	0x0094008b
 800cee0:	00a00097 	.word	0x00a00097
 800cee4:	00a00232 	.word	0x00a00232
 800cee8:	00a000a0 	.word	0x00a000a0
 800ceec:	009b00a0 	.word	0x009b00a0
 800cef0:	00a0009d 	.word	0x00a0009d
 800cef4:	00a001b9 	.word	0x00a001b9
 800cef8:	00a000a0 	.word	0x00a000a0
 800cefc:	03b003b0 	.word	0x03b003b0
 800cf00:	03b003b0 	.word	0x03b003b0
 800cf04:	03b003b0 	.word	0x03b003b0
 800cf08:	03b003b0 	.word	0x03b003b0
 800cf0c:	01ad004d 	.word	0x01ad004d
 800cf10:	023600a8 	.word	0x023600a8
 800cf14:	035203b9 	.word	0x035203b9
 800cf18:	03bd03bd 	.word	0x03bd03bd
 800cf1c:	03a403a4 	.word	0x03a403a4
 800cf20:	03a403a4 	.word	0x03a403a4
 800cf24:	03a403a4 	.word	0x03a403a4
 800cf28:	03a403a4 	.word	0x03a403a4
 800cf2c:	03a403a4 	.word	0x03a403a4
 800cf30:	03a403a4 	.word	0x03a403a4
 800cf34:	03a403a4 	.word	0x03a403a4
 800cf38:	03a403a4 	.word	0x03a403a4
 800cf3c:	03bd03bd 	.word	0x03bd03bd
 800cf40:	03bd03bd 	.word	0x03bd03bd
 800cf44:	03bd03bd 	.word	0x03bd03bd
 800cf48:	03bd03bd 	.word	0x03bd03bd
 800cf4c:	03bd03bd 	.word	0x03bd03bd
 800cf50:	03bd03bd 	.word	0x03bd03bd
 800cf54:	03bd03bd 	.word	0x03bd03bd
 800cf58:	03ac      	.short	0x03ac
  INPUT_BYTE(cinfo, c2, return FALSE);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4798      	blx	r3
 800cf60:	b138      	cbz	r0, 800cf72 <read_markers+0x11a>
 800cf62:	e9d7 5300 	ldrd	r5, r3, [r7]
 800cf66:	e793      	b.n	800ce90 <read_markers+0x38>
	if (! next_marker(cinfo))
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f7ff fde8 	bl	800cb3e <next_marker>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d1a5      	bne.n	800cebe <read_markers+0x66>
	  return JPEG_SUSPENDED;
 800cf72:	2000      	movs	r0, #0
 800cf74:	e0ea      	b.n	800d14c <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	2268      	movs	r2, #104	; 0x68
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	615a      	str	r2, [r3, #20]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800cf84:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	b12b      	cbz	r3, 800cf98 <read_markers+0x140>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	223f      	movs	r2, #63	; 0x3f
 800cf90:	4620      	mov	r0, r4
 800cf92:	615a      	str	r2, [r3, #20]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800cf98:	2210      	movs	r2, #16
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800cfa0:	f012 fa4a 	bl	801f438 <memset>
    cinfo->arith_dc_U[i] = 1;
 800cfa4:	2210      	movs	r2, #16
 800cfa6:	2101      	movs	r1, #1
 800cfa8:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800cfac:	f012 fa44 	bl	801f438 <memset>
    cinfo->arith_ac_K[i] = 5;
 800cfb0:	2210      	movs	r2, #16
 800cfb2:	2105      	movs	r1, #5
 800cfb4:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800cfb8:	f012 fa3e 	bl	801f438 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800cfbc:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800cfc0:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800cfc2:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800cfc6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800cfca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800cfce:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800cfd2:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800cfd6:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800cfda:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800cfde:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cfe8:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800cff0:	e736      	b.n	800ce60 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800cff2:	2300      	movs	r3, #0
 800cff4:	2101      	movs	r1, #1
 800cff6:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800cff8:	4620      	mov	r0, r4
 800cffa:	f7ff faed 	bl	800c5d8 <get_sof>
      if (! skip_variable(cinfo))
 800cffe:	2800      	cmp	r0, #0
 800d000:	d1f3      	bne.n	800cfea <read_markers+0x192>
 800d002:	e7b6      	b.n	800cf72 <read_markers+0x11a>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800d004:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800d006:	2200      	movs	r2, #0
 800d008:	e001      	b.n	800d00e <read_markers+0x1b6>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800d00a:	2300      	movs	r3, #0
 800d00c:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800d00e:	2100      	movs	r1, #0
 800d010:	e7f2      	b.n	800cff8 <read_markers+0x1a0>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800d012:	2301      	movs	r3, #1
 800d014:	e7f7      	b.n	800d006 <read_markers+0x1ae>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800d016:	2301      	movs	r3, #1
 800d018:	461a      	mov	r2, r3
 800d01a:	e7f8      	b.n	800d00e <read_markers+0x1b6>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800d01c:	6822      	ldr	r2, [r4, #0]
 800d01e:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800d020:	4620      	mov	r0, r4
 800d022:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d026:	6813      	ldr	r3, [r2, #0]
 800d028:	4798      	blx	r3
      break;
 800d02a:	e7de      	b.n	800cfea <read_markers+0x192>
  if (! cinfo->marker->saw_SOF)
 800d02c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800d030:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800d032:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800d034:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800d038:	b92b      	cbnz	r3, 800d046 <read_markers+0x1ee>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	2240      	movs	r2, #64	; 0x40
 800d03e:	4620      	mov	r0, r4
 800d040:	615a      	str	r2, [r3, #20]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d046:	b936      	cbnz	r6, 800d056 <read_markers+0x1fe>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4620      	mov	r0, r4
 800d04c:	4798      	blx	r3
 800d04e:	2800      	cmp	r0, #0
 800d050:	d08f      	beq.n	800cf72 <read_markers+0x11a>
 800d052:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d056:	f895 9000 	ldrb.w	r9, [r5]
 800d05a:	3e01      	subs	r6, #1
 800d05c:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800d060:	d077      	beq.n	800d152 <read_markers+0x2fa>
 800d062:	3501      	adds	r5, #1
 800d064:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d068:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d06a:	44c8      	add	r8, r9
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d06c:	d07a      	beq.n	800d164 <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d06e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d070:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800d074:	2269      	movs	r2, #105	; 0x69
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	2101      	movs	r1, #1
 800d07a:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d07c:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800d07e:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800d086:	f109 0303 	add.w	r3, r9, #3
 800d08a:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800d08e:	d108      	bne.n	800d0a2 <read_markers+0x24a>
 800d090:	f1b9 0f04 	cmp.w	r9, #4
 800d094:	dc05      	bgt.n	800d0a2 <read_markers+0x24a>
 800d096:	f1b9 0f00 	cmp.w	r9, #0
 800d09a:	d108      	bne.n	800d0ae <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800d09c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d0a0:	b92b      	cbnz	r3, 800d0ae <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	220c      	movs	r2, #12
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	615a      	str	r2, [r3, #20]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800d0ae:	f504 73a8 	add.w	r3, r4, #336	; 0x150
  for (i = 0; i < n; i++) {
 800d0b2:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800d0b6:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800d0ba:	9301      	str	r3, [sp, #4]
 800d0bc:	45d1      	cmp	r9, sl
 800d0be:	dc5a      	bgt.n	800d176 <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0c0:	b93e      	cbnz	r6, 800d0d2 <read_markers+0x27a>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	4798      	blx	r3
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	f43f af52 	beq.w	800cf72 <read_markers+0x11a>
 800d0ce:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d0d2:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0d4:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0d6:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0da:	f000 809a 	beq.w	800d212 <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0de:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0e0:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0e2:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0e4:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0e8:	f000 809c 	beq.w	800d224 <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0ec:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0ee:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800d0f6:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800d0f8:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800d0fa:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800d0fe:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800d102:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800d106:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	619a      	str	r2, [r3, #24]
 800d10e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800d112:	61da      	str	r2, [r3, #28]
 800d114:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800d118:	621a      	str	r2, [r3, #32]
 800d11a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800d11e:	625a      	str	r2, [r3, #36]	; 0x24
 800d120:	226b      	movs	r2, #107	; 0x6b
 800d122:	615a      	str	r2, [r3, #20]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800d128:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d12c:	2200      	movs	r2, #0
 800d12e:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800d130:	f1b9 0f00 	cmp.w	r9, #0
 800d134:	d004      	beq.n	800d140 <read_markers+0x2e8>
 800d136:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d13a:	3301      	adds	r3, #1
 800d13c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800d140:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800d142:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800d144:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800d148:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800d14c:	b005      	add	sp, #20
 800d14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	4620      	mov	r0, r4
 800d156:	4798      	blx	r3
 800d158:	2800      	cmp	r0, #0
 800d15a:	f43f af0a 	beq.w	800cf72 <read_markers+0x11a>
 800d15e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d162:	e77f      	b.n	800d064 <read_markers+0x20c>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4620      	mov	r0, r4
 800d168:	4798      	blx	r3
 800d16a:	2800      	cmp	r0, #0
 800d16c:	f43f af01 	beq.w	800cf72 <read_markers+0x11a>
 800d170:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d174:	e77c      	b.n	800d070 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800d176:	b93e      	cbnz	r6, 800d188 <read_markers+0x330>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4620      	mov	r0, r4
 800d17c:	4798      	blx	r3
 800d17e:	2800      	cmp	r0, #0
 800d180:	f43f aef7 	beq.w	800cf72 <read_markers+0x11a>
 800d184:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d188:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800d18a:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d18e:	d02f      	beq.n	800d1f0 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800d190:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800d192:	3e01      	subs	r6, #1
 800d194:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d198:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800d19c:	2000      	movs	r0, #0
 800d19e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d1a0:	4290      	cmp	r0, r2
 800d1a2:	db2e      	blt.n	800d202 <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800d1a4:	6821      	ldr	r1, [r4, #0]
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	9302      	str	r3, [sp, #8]
 800d1aa:	2304      	movs	r3, #4
 800d1ac:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800d1b0:	6809      	ldr	r1, [r1, #0]
 800d1b2:	4788      	blx	r1
 800d1b4:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800d1b6:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800d1b8:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800d1ba:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d1be:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800d1c0:	f842 8f04 	str.w	r8, [r2, #4]!
  for (i = 0; i < n; i++) {
 800d1c4:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800d1c8:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d1cc:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800d1ce:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d1d2:	f8c1 b018 	str.w	fp, [r1, #24]
 800d1d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800d1da:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d1dc:	61cb      	str	r3, [r1, #28]
 800d1de:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d1e2:	620b      	str	r3, [r1, #32]
 800d1e4:	236a      	movs	r3, #106	; 0x6a
 800d1e6:	614b      	str	r3, [r1, #20]
 800d1e8:	684b      	ldr	r3, [r1, #4]
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800d1ee:	e765      	b.n	800d0bc <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	4798      	blx	r3
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	f43f aebb 	beq.w	800cf72 <read_markers+0x11a>
 800d1fc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d200:	e7c7      	b.n	800d192 <read_markers+0x33a>
      if (cc == compptr->component_id)
 800d202:	f8d8 1000 	ldr.w	r1, [r8]
 800d206:	458b      	cmp	fp, r1
 800d208:	d0d5      	beq.n	800d1b6 <read_markers+0x35e>
	 ci++, compptr++) {
 800d20a:	3001      	adds	r0, #1
 800d20c:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d210:	e7c6      	b.n	800d1a0 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4620      	mov	r0, r4
 800d216:	4798      	blx	r3
 800d218:	2800      	cmp	r0, #0
 800d21a:	f43f aeaa 	beq.w	800cf72 <read_markers+0x11a>
 800d21e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d222:	e75d      	b.n	800d0e0 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	4620      	mov	r0, r4
 800d228:	4798      	blx	r3
 800d22a:	2800      	cmp	r0, #0
 800d22c:	f43f aea1 	beq.w	800cf72 <read_markers+0x11a>
 800d230:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d234:	e75b      	b.n	800d0ee <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	2257      	movs	r2, #87	; 0x57
 800d23a:	4620      	mov	r0, r4
 800d23c:	2101      	movs	r1, #1
 800d23e:	615a      	str	r2, [r3, #20]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800d244:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800d246:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800d248:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800d24c:	e77e      	b.n	800d14c <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800d24e:	69a7      	ldr	r7, [r4, #24]
 800d250:	e9d7 5600 	ldrd	r5, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d254:	b93e      	cbnz	r6, 800d266 <read_markers+0x40e>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	4620      	mov	r0, r4
 800d25a:	4798      	blx	r3
 800d25c:	2800      	cmp	r0, #0
 800d25e:	f43f ae88 	beq.w	800cf72 <read_markers+0x11a>
 800d262:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d266:	f895 8000 	ldrb.w	r8, [r5]
 800d26a:	3e01      	subs	r6, #1
 800d26c:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800d270:	d015      	beq.n	800d29e <read_markers+0x446>
 800d272:	3501      	adds	r5, #1
 800d274:	f815 9b01 	ldrb.w	r9, [r5], #1
 800d278:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800d27a:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d27e:	44c1      	add	r9, r8
  length -= 2;
 800d280:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800d284:	f1b9 0f00 	cmp.w	r9, #0
 800d288:	dc12      	bgt.n	800d2b0 <read_markers+0x458>
  if (length != 0)
 800d28a:	d005      	beq.n	800d298 <read_markers+0x440>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	220c      	movs	r2, #12
 800d290:	4620      	mov	r0, r4
 800d292:	615a      	str	r2, [r3, #20]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800d298:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800d29a:	607e      	str	r6, [r7, #4]
  return TRUE;
 800d29c:	e6a5      	b.n	800cfea <read_markers+0x192>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	4798      	blx	r3
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	f43f ae64 	beq.w	800cf72 <read_markers+0x11a>
 800d2aa:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d2ae:	e7e1      	b.n	800d274 <read_markers+0x41c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800d2b0:	b93e      	cbnz	r6, 800d2c2 <read_markers+0x46a>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	4798      	blx	r3
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	f43f ae5a 	beq.w	800cf72 <read_markers+0x11a>
 800d2be:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800d2c2:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800d2c4:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800d2c8:	d01f      	beq.n	800d30a <read_markers+0x4b2>
    INPUT_BYTE(cinfo, index, return FALSE);
 800d2ca:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d2cc:	6822      	ldr	r2, [r4, #0]
 800d2ce:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800d2d0:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800d2d8:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d2da:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800d2de:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d2e2:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800d2e6:	6852      	ldr	r2, [r2, #4]
 800d2e8:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800d2ea:	f1b8 0f1f 	cmp.w	r8, #31
 800d2ee:	d905      	bls.n	800d2fc <read_markers+0x4a4>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800d2f0:	6822      	ldr	r2, [r4, #0]
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800d2f8:	6812      	ldr	r2, [r2, #0]
 800d2fa:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800d2fc:	f1b8 0f0f 	cmp.w	r8, #15
 800d300:	44a0      	add	r8, r4
 800d302:	dd0b      	ble.n	800d31c <read_markers+0x4c4>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800d304:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800d308:	e7bc      	b.n	800d284 <read_markers+0x42c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	4620      	mov	r0, r4
 800d30e:	4798      	blx	r3
 800d310:	2800      	cmp	r0, #0
 800d312:	f43f ae2e 	beq.w	800cf72 <read_markers+0x11a>
 800d316:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d31a:	e7d7      	b.n	800d2cc <read_markers+0x474>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800d31c:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800d320:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800d324:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800d326:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800d32a:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800d32e:	d9a9      	bls.n	800d284 <read_markers+0x42c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800d330:	6822      	ldr	r2, [r4, #0]
 800d332:	211e      	movs	r1, #30
 800d334:	4620      	mov	r0, r4
 800d336:	6813      	ldr	r3, [r2, #0]
 800d338:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800d33c:	4798      	blx	r3
 800d33e:	e7a1      	b.n	800d284 <read_markers+0x42c>
      if (! get_dht(cinfo))
 800d340:	4620      	mov	r0, r4
 800d342:	f7ff fc80 	bl	800cc46 <get_dht>
 800d346:	e65a      	b.n	800cffe <read_markers+0x1a6>
  INPUT_VARS(cinfo);
 800d348:	69a6      	ldr	r6, [r4, #24]
 800d34a:	e9d6 5300 	ldrd	r5, r3, [r6]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d34e:	b93b      	cbnz	r3, 800d360 <read_markers+0x508>
 800d350:	68f3      	ldr	r3, [r6, #12]
 800d352:	4620      	mov	r0, r4
 800d354:	4798      	blx	r3
 800d356:	2800      	cmp	r0, #0
 800d358:	f43f ae0b 	beq.w	800cf72 <read_markers+0x11a>
 800d35c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d360:	782f      	ldrb	r7, [r5, #0]
 800d362:	3b01      	subs	r3, #1
 800d364:	ea4f 2707 	mov.w	r7, r7, lsl #8
 800d368:	d014      	beq.n	800d394 <read_markers+0x53c>
 800d36a:	3501      	adds	r5, #1
 800d36c:	f815 8b01 	ldrb.w	r8, [r5], #1
 800d370:	f103 3aff 	add.w	sl, r3, #4294967295
 800d374:	44b8      	add	r8, r7
  length -= 2;
 800d376:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800d37a:	f1b8 0f00 	cmp.w	r8, #0
 800d37e:	dc12      	bgt.n	800d3a6 <read_markers+0x54e>
  if (length != 0)
 800d380:	d005      	beq.n	800d38e <read_markers+0x536>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d382:	6822      	ldr	r2, [r4, #0]
 800d384:	210c      	movs	r1, #12
 800d386:	4620      	mov	r0, r4
 800d388:	6151      	str	r1, [r2, #20]
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800d38e:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800d392:	e62a      	b.n	800cfea <read_markers+0x192>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d394:	68f3      	ldr	r3, [r6, #12]
 800d396:	4620      	mov	r0, r4
 800d398:	4798      	blx	r3
 800d39a:	2800      	cmp	r0, #0
 800d39c:	f43f ade9 	beq.w	800cf72 <read_markers+0x11a>
 800d3a0:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d3a4:	e7e2      	b.n	800d36c <read_markers+0x514>
    length--;
 800d3a6:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800d3aa:	f1ba 0f00 	cmp.w	sl, #0
 800d3ae:	d107      	bne.n	800d3c0 <read_markers+0x568>
 800d3b0:	68f3      	ldr	r3, [r6, #12]
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	4798      	blx	r3
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	f43f addb 	beq.w	800cf72 <read_markers+0x11a>
 800d3bc:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800d3c0:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800d3c4:	2153      	movs	r1, #83	; 0x53
 800d3c6:	6822      	ldr	r2, [r4, #0]
 800d3c8:	4620      	mov	r0, r4
    prec = n >> 4;
 800d3ca:	ea4f 1329 	mov.w	r3, r9, asr #4
 800d3ce:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800d3d2:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800d3d6:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800d3d8:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800d3da:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800d3de:	6852      	ldr	r2, [r2, #4]
 800d3e0:	2101      	movs	r1, #1
 800d3e2:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800d3e4:	f019 0f0c 	tst.w	r9, #12
 800d3e8:	d006      	beq.n	800d3f8 <read_markers+0x5a0>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800d3ea:	6822      	ldr	r2, [r4, #0]
 800d3ec:	2120      	movs	r1, #32
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800d3f4:	6812      	ldr	r2, [r2, #0]
 800d3f6:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800d3f8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800d3fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d400:	b922      	cbnz	r2, 800d40c <read_markers+0x5b4>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800d402:	4620      	mov	r0, r4
 800d404:	f7fb f8a0 	bl	8008548 <jpeg_alloc_quant_table>
 800d408:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800d40c:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800d40e:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800d412:	2b00      	cmp	r3, #0
 800d414:	d057      	beq.n	800d4c6 <read_markers+0x66e>
      if (length < DCTSIZE2 * 2) {
 800d416:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800d41a:	dc6c      	bgt.n	800d4f6 <read_markers+0x69e>
 800d41c:	f1ab 0202 	sub.w	r2, fp, #2
 800d420:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800d424:	2001      	movs	r0, #1
 800d426:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800d42a:	4291      	cmp	r1, r2
 800d42c:	d1fb      	bne.n	800d426 <read_markers+0x5ce>
	count = length >> 1;
 800d42e:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800d432:	f1b9 0f19 	cmp.w	r9, #25
 800d436:	d062      	beq.n	800d4fe <read_markers+0x6a6>
 800d438:	dc53      	bgt.n	800d4e2 <read_markers+0x68a>
 800d43a:	f1b9 0f09 	cmp.w	r9, #9
 800d43e:	d060      	beq.n	800d502 <read_markers+0x6aa>
 800d440:	f1b9 0f10 	cmp.w	r9, #16
 800d444:	d05f      	beq.n	800d506 <read_markers+0x6ae>
    default:    natural_order = jpeg_natural_order;  break;
 800d446:	4f85      	ldr	r7, [pc, #532]	; (800d65c <read_markers+0x804>)
 800d448:	4a85      	ldr	r2, [pc, #532]	; (800d660 <read_markers+0x808>)
 800d44a:	f1b9 0f04 	cmp.w	r9, #4
 800d44e:	bf18      	it	ne
 800d450:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800d452:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800d456:	9302      	str	r3, [sp, #8]
 800d458:	9b02      	ldr	r3, [sp, #8]
 800d45a:	42bb      	cmp	r3, r7
 800d45c:	d157      	bne.n	800d50e <read_markers+0x6b6>
    if (cinfo->err->trace_level >= 2) {
 800d45e:	6822      	ldr	r2, [r4, #0]
 800d460:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d462:	2a01      	cmp	r2, #1
 800d464:	dd26      	ble.n	800d4b4 <read_markers+0x65c>
 800d466:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800d46a:	275f      	movs	r7, #95	; 0x5f
 800d46c:	f8bb 1000 	ldrh.w	r1, [fp]
 800d470:	4620      	mov	r0, r4
 800d472:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800d474:	f10b 0b10 	add.w	fp, fp, #16
 800d478:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800d47a:	6191      	str	r1, [r2, #24]
 800d47c:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800d480:	61d1      	str	r1, [r2, #28]
 800d482:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800d486:	6211      	str	r1, [r2, #32]
 800d488:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800d48c:	6251      	str	r1, [r2, #36]	; 0x24
 800d48e:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800d492:	6291      	str	r1, [r2, #40]	; 0x28
 800d494:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800d498:	62d1      	str	r1, [r2, #44]	; 0x2c
 800d49a:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800d49e:	6311      	str	r1, [r2, #48]	; 0x30
 800d4a0:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800d4a4:	6157      	str	r7, [r2, #20]
 800d4a6:	6351      	str	r1, [r2, #52]	; 0x34
 800d4a8:	2102      	movs	r1, #2
 800d4aa:	6852      	ldr	r2, [r2, #4]
 800d4ac:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800d4ae:	9b02      	ldr	r3, [sp, #8]
 800d4b0:	459b      	cmp	fp, r3
 800d4b2:	d1db      	bne.n	800d46c <read_markers+0x614>
    if (prec) length -= count;
 800d4b4:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800d4b6:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f43f af5d 	beq.w	800d37a <read_markers+0x522>
 800d4c0:	eba8 0809 	sub.w	r8, r8, r9
 800d4c4:	e759      	b.n	800d37a <read_markers+0x522>
      if (length < DCTSIZE2) {
 800d4c6:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800d4ca:	dc14      	bgt.n	800d4f6 <read_markers+0x69e>
 800d4cc:	f1ab 0202 	sub.w	r2, fp, #2
 800d4d0:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800d4da:	4291      	cmp	r1, r2
 800d4dc:	d1fb      	bne.n	800d4d6 <read_markers+0x67e>
 800d4de:	46c1      	mov	r9, r8
 800d4e0:	e7a7      	b.n	800d432 <read_markers+0x5da>
    switch (count) {
 800d4e2:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800d4e6:	d010      	beq.n	800d50a <read_markers+0x6b2>
    default:    natural_order = jpeg_natural_order;  break;
 800d4e8:	4f5d      	ldr	r7, [pc, #372]	; (800d660 <read_markers+0x808>)
 800d4ea:	4b5e      	ldr	r3, [pc, #376]	; (800d664 <read_markers+0x80c>)
 800d4ec:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800d4f0:	bf08      	it	eq
 800d4f2:	461f      	moveq	r7, r3
 800d4f4:	e7ad      	b.n	800d452 <read_markers+0x5fa>
	count = DCTSIZE2;
 800d4f6:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800d4fa:	4f59      	ldr	r7, [pc, #356]	; (800d660 <read_markers+0x808>)
 800d4fc:	e7a9      	b.n	800d452 <read_markers+0x5fa>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800d4fe:	4f5a      	ldr	r7, [pc, #360]	; (800d668 <read_markers+0x810>)
 800d500:	e7a7      	b.n	800d452 <read_markers+0x5fa>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800d502:	4f5a      	ldr	r7, [pc, #360]	; (800d66c <read_markers+0x814>)
 800d504:	e7a5      	b.n	800d452 <read_markers+0x5fa>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800d506:	4f5a      	ldr	r7, [pc, #360]	; (800d670 <read_markers+0x818>)
 800d508:	e7a3      	b.n	800d452 <read_markers+0x5fa>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800d50a:	4f5a      	ldr	r7, [pc, #360]	; (800d674 <read_markers+0x81c>)
 800d50c:	e7a1      	b.n	800d452 <read_markers+0x5fa>
      if (prec)
 800d50e:	9b01      	ldr	r3, [sp, #4]
 800d510:	b333      	cbz	r3, 800d560 <read_markers+0x708>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d512:	f1ba 0f00 	cmp.w	sl, #0
 800d516:	d107      	bne.n	800d528 <read_markers+0x6d0>
 800d518:	68f3      	ldr	r3, [r6, #12]
 800d51a:	4620      	mov	r0, r4
 800d51c:	4798      	blx	r3
 800d51e:	2800      	cmp	r0, #0
 800d520:	f43f ad27 	beq.w	800cf72 <read_markers+0x11a>
 800d524:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800d528:	782a      	ldrb	r2, [r5, #0]
 800d52a:	f1ba 0301 	subs.w	r3, sl, #1
 800d52e:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d532:	d00a      	beq.n	800d54a <read_markers+0x6f2>
 800d534:	3501      	adds	r5, #1
 800d536:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d53a:	f103 3aff 	add.w	sl, r3, #4294967295
 800d53e:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800d540:	f857 1b04 	ldr.w	r1, [r7], #4
 800d544:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800d548:	e786      	b.n	800d458 <read_markers+0x600>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d54a:	68f3      	ldr	r3, [r6, #12]
 800d54c:	4620      	mov	r0, r4
 800d54e:	9203      	str	r2, [sp, #12]
 800d550:	4798      	blx	r3
 800d552:	2800      	cmp	r0, #0
 800d554:	f43f ad0d 	beq.w	800cf72 <read_markers+0x11a>
 800d558:	9a03      	ldr	r2, [sp, #12]
 800d55a:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d55e:	e7ea      	b.n	800d536 <read_markers+0x6de>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800d560:	f1ba 0f00 	cmp.w	sl, #0
 800d564:	d107      	bne.n	800d576 <read_markers+0x71e>
 800d566:	68f3      	ldr	r3, [r6, #12]
 800d568:	4620      	mov	r0, r4
 800d56a:	4798      	blx	r3
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f43f ad00 	beq.w	800cf72 <read_markers+0x11a>
 800d572:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800d576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d57a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800d57e:	e7df      	b.n	800d540 <read_markers+0x6e8>
  INPUT_VARS(cinfo);
 800d580:	69a7      	ldr	r7, [r4, #24]
 800d582:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d586:	b93b      	cbnz	r3, 800d598 <read_markers+0x740>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	4620      	mov	r0, r4
 800d58c:	4798      	blx	r3
 800d58e:	2800      	cmp	r0, #0
 800d590:	f43f acef 	beq.w	800cf72 <read_markers+0x11a>
 800d594:	e9d7 5300 	ldrd	r5, r3, [r7]
 800d598:	f895 8000 	ldrb.w	r8, [r5]
 800d59c:	3b01      	subs	r3, #1
 800d59e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800d5a2:	d024      	beq.n	800d5ee <read_markers+0x796>
 800d5a4:	3501      	adds	r5, #1
 800d5a6:	782a      	ldrb	r2, [r5, #0]
 800d5a8:	1e5e      	subs	r6, r3, #1
 800d5aa:	4442      	add	r2, r8
  if (length != 4)
 800d5ac:	2a04      	cmp	r2, #4
 800d5ae:	d005      	beq.n	800d5bc <read_markers+0x764>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	220c      	movs	r2, #12
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	615a      	str	r2, [r3, #20]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d5bc:	b306      	cbz	r6, 800d600 <read_markers+0x7a8>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d5be:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d5c0:	f895 9000 	ldrb.w	r9, [r5]
 800d5c4:	3e01      	subs	r6, #1
 800d5c6:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800d5ca:	d022      	beq.n	800d612 <read_markers+0x7ba>
 800d5cc:	3501      	adds	r5, #1
 800d5ce:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800d5d2:	2254      	movs	r2, #84	; 0x54
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d5d8:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800d5da:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d5dc:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800d5de:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800d5e6:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800d5ea:	603d      	str	r5, [r7, #0]
 800d5ec:	e655      	b.n	800d29a <read_markers+0x442>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	4798      	blx	r3
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f43f acbc 	beq.w	800cf72 <read_markers+0x11a>
 800d5fa:	e9d7 5300 	ldrd	r5, r3, [r7]
 800d5fe:	e7d2      	b.n	800d5a6 <read_markers+0x74e>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4620      	mov	r0, r4
 800d604:	4798      	blx	r3
 800d606:	2800      	cmp	r0, #0
 800d608:	f43f acb3 	beq.w	800cf72 <read_markers+0x11a>
 800d60c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d610:	e7d6      	b.n	800d5c0 <read_markers+0x768>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	4620      	mov	r0, r4
 800d616:	4798      	blx	r3
 800d618:	2800      	cmp	r0, #0
 800d61a:	f43f acaa 	beq.w	800cf72 <read_markers+0x11a>
 800d61e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d622:	e7d4      	b.n	800d5ce <read_markers+0x776>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800d624:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800d628:	3bd8      	subs	r3, #216	; 0xd8
 800d62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800d62e:	4620      	mov	r0, r4
 800d630:	4798      	blx	r3
 800d632:	e4e4      	b.n	800cffe <read_markers+0x1a6>
 800d634:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	e7f8      	b.n	800d62e <read_markers+0x7d6>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800d63c:	6822      	ldr	r2, [r4, #0]
 800d63e:	215e      	movs	r1, #94	; 0x5e
 800d640:	4620      	mov	r0, r4
 800d642:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d646:	6853      	ldr	r3, [r2, #4]
 800d648:	2101      	movs	r1, #1
 800d64a:	4798      	blx	r3
      break;
 800d64c:	e4cd      	b.n	800cfea <read_markers+0x192>
      if (! skip_variable(cinfo))
 800d64e:	4620      	mov	r0, r4
 800d650:	f7ff fa3a 	bl	800cac8 <skip_variable>
 800d654:	e4d3      	b.n	800cffe <read_markers+0x1a6>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800d656:	6822      	ldr	r2, [r4, #0]
 800d658:	2146      	movs	r1, #70	; 0x46
 800d65a:	e4e1      	b.n	800d020 <read_markers+0x1c8>
 800d65c:	08023b58 	.word	0x08023b58
 800d660:	08023a18 	.word	0x08023a18
 800d664:	08023e00 	.word	0x08023e00
 800d668:	08023c8c 	.word	0x08023c8c
 800d66c:	08023ba8 	.word	0x08023ba8
 800d670:	08023c0c 	.word	0x08023c0c
 800d674:	08023d30 	.word	0x08023d30

0800d678 <jpeg_resync_to_restart>:
{
 800d678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67c:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d67e:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800d680:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d684:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d686:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d68a:	61d9      	str	r1, [r3, #28]
 800d68c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800d690:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d692:	f008 0807 	and.w	r8, r8, #7
 800d696:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d69a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800d6a2:	2dbf      	cmp	r5, #191	; 0xbf
 800d6a4:	dd2e      	ble.n	800d704 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800d6a6:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800d6aa:	2b07      	cmp	r3, #7
 800d6ac:	d828      	bhi.n	800d700 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d6ae:	4545      	cmp	r5, r8
 800d6b0:	d026      	beq.n	800d700 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800d6b2:	1cbb      	adds	r3, r7, #2
 800d6b4:	f003 0307 	and.w	r3, r3, #7
 800d6b8:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d6ba:	429d      	cmp	r5, r3
 800d6bc:	d020      	beq.n	800d700 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800d6be:	1e7b      	subs	r3, r7, #1
 800d6c0:	f003 0307 	and.w	r3, r3, #7
 800d6c4:	33d0      	adds	r3, #208	; 0xd0
 800d6c6:	429d      	cmp	r5, r3
 800d6c8:	d01c      	beq.n	800d704 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800d6ca:	1ebc      	subs	r4, r7, #2
 800d6cc:	f004 0407 	and.w	r4, r4, #7
 800d6d0:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800d6d2:	42a5      	cmp	r5, r4
 800d6d4:	bf14      	ite	ne
 800d6d6:	2401      	movne	r4, #1
 800d6d8:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800d6da:	6833      	ldr	r3, [r6, #0]
 800d6dc:	2263      	movs	r2, #99	; 0x63
 800d6de:	2104      	movs	r1, #4
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	61dc      	str	r4, [r3, #28]
 800d6e4:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	4798      	blx	r3
    switch (action) {
 800d6ec:	2c02      	cmp	r4, #2
 800d6ee:	d00b      	beq.n	800d708 <jpeg_resync_to_restart+0x90>
 800d6f0:	2c03      	cmp	r4, #3
 800d6f2:	d002      	beq.n	800d6fa <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800d6fa:	2001      	movs	r0, #1
}
 800d6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800d700:	2403      	movs	r4, #3
 800d702:	e7ea      	b.n	800d6da <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800d704:	2402      	movs	r4, #2
 800d706:	e7e8      	b.n	800d6da <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800d708:	4630      	mov	r0, r6
 800d70a:	f7ff fa18 	bl	800cb3e <next_marker>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d0f4      	beq.n	800d6fc <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800d712:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800d716:	e7c4      	b.n	800d6a2 <jpeg_resync_to_restart+0x2a>

0800d718 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800d718:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d71a:	6843      	ldr	r3, [r0, #4]
 800d71c:	22ac      	movs	r2, #172	; 0xac
 800d71e:	2100      	movs	r1, #0
{
 800d720:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800d726:	4b11      	ldr	r3, [pc, #68]	; (800d76c <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800d728:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d72c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800d72e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800d730:	f100 015c 	add.w	r1, r0, #92	; 0x5c
 800d734:	4b0e      	ldr	r3, [pc, #56]	; (800d770 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800d736:	4a0f      	ldr	r2, [pc, #60]	; (800d774 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800d738:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800d73a:	4b0f      	ldr	r3, [pc, #60]	; (800d778 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800d73c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800d73e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800d740:	2300      	movs	r3, #0
 800d742:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800d744:	f100 031c 	add.w	r3, r0, #28
    marker->process_APPn[i] = skip_variable;
 800d748:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0; i < 16; i++) {
 800d74c:	4299      	cmp	r1, r3
 800d74e:	d1fb      	bne.n	800d748 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800d750:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800d754:	2240      	movs	r2, #64	; 0x40
 800d756:	2100      	movs	r1, #0
 800d758:	f011 fe6e 	bl	801f438 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800d75c:	4b07      	ldr	r3, [pc, #28]	; (800d77c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800d75e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800d760:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800d762:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800d764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800d768:	f7ff ba5e 	b.w	800cc28 <reset_marker_reader>
 800d76c:	0800cc29 	.word	0x0800cc29
 800d770:	0800ce59 	.word	0x0800ce59
 800d774:	0800cac9 	.word	0x0800cac9
 800d778:	0800cbcb 	.word	0x0800cbcb
 800d77c:	0800c9f1 	.word	0x0800c9f1

0800d780 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800d780:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d782:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800d786:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800d788:	68ab      	ldr	r3, [r5, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d02a      	beq.n	800d7e4 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800d78e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800d790:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800d794:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d79a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800d79e:	2102      	movs	r1, #2
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d7a6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800d7aa:	2102      	movs	r1, #2
 800d7ac:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800d7b2:	68a2      	ldr	r2, [r4, #8]
 800d7b4:	b1aa      	cbz	r2, 800d7e2 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800d7b6:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800d7b8:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800d7ba:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800d7bc:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800d7be:	bf14      	ite	ne
 800d7c0:	2102      	movne	r1, #2
 800d7c2:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800d7c4:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800d7c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800d7c8:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800d7ca:	b151      	cbz	r1, 800d7e2 <prepare_for_output_pass+0x62>
 800d7cc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800d7d0:	6949      	ldr	r1, [r1, #20]
 800d7d2:	b931      	cbnz	r1, 800d7e2 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800d7d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d7d6:	2900      	cmp	r1, #0
 800d7d8:	bf14      	ite	ne
 800d7da:	2102      	movne	r1, #2
 800d7dc:	2101      	moveq	r1, #1
 800d7de:	440b      	add	r3, r1
 800d7e0:	6113      	str	r3, [r2, #16]
    }
  }
}
 800d7e2:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800d7e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800d7e6:	b16b      	cbz	r3, 800d804 <prepare_for_output_pass+0x84>
 800d7e8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800d7ec:	b953      	cbnz	r3, 800d804 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800d7ee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d037      	beq.n	800d864 <prepare_for_output_pass+0xe4>
 800d7f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d034      	beq.n	800d864 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800d7fa:	69ab      	ldr	r3, [r5, #24]
 800d7fc:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800d800:	2301      	movs	r3, #1
 800d802:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800d804:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800d808:	4620      	mov	r0, r4
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800d80e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800d812:	4620      	mov	r0, r4
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800d818:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1c9      	bne.n	800d7b2 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800d81e:	692b      	ldr	r3, [r5, #16]
 800d820:	b923      	cbnz	r3, 800d82c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800d822:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800d826:	4620      	mov	r0, r4
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800d82c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800d830:	4620      	mov	r0, r4
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800d836:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d838:	b12b      	cbz	r3, 800d846 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800d83a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800d83e:	4620      	mov	r0, r4
 800d840:	68a9      	ldr	r1, [r5, #8]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800d846:	68aa      	ldr	r2, [r5, #8]
 800d848:	4620      	mov	r0, r4
 800d84a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800d84e:	2a00      	cmp	r2, #0
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	bf14      	ite	ne
 800d854:	2103      	movne	r1, #3
 800d856:	2100      	moveq	r1, #0
 800d858:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800d85a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800d85e:	2100      	movs	r1, #0
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	e7a4      	b.n	800d7ae <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800d864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d866:	b11b      	cbz	r3, 800d870 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800d868:	696b      	ldr	r3, [r5, #20]
 800d86a:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800d86e:	e7c9      	b.n	800d804 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800d870:	6823      	ldr	r3, [r4, #0]
 800d872:	222f      	movs	r2, #47	; 0x2f
 800d874:	4620      	mov	r0, r4
 800d876:	615a      	str	r2, [r3, #20]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4798      	blx	r3
 800d87c:	e7c2      	b.n	800d804 <prepare_for_output_pass+0x84>

0800d87e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800d87e:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800d880:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d882:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800d886:	b11a      	cbz	r2, 800d890 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800d888:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	4798      	blx	r3
  master->pass_number++;
 800d890:	68e3      	ldr	r3, [r4, #12]
 800d892:	3301      	adds	r3, #1
 800d894:	60e3      	str	r3, [r4, #12]
}
 800d896:	bd10      	pop	{r4, pc}

0800d898 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800d898:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800d89a:	4602      	mov	r2, r0
 800d89c:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d142      	bne.n	800d928 <use_merged_upsample+0x90>
 800d8a2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d140      	bne.n	800d92c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800d8aa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d139      	bne.n	800d926 <use_merged_upsample+0x8e>
 800d8b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d8b4:	2b03      	cmp	r3, #3
 800d8b6:	d136      	bne.n	800d926 <use_merged_upsample+0x8e>
 800d8b8:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d132      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->out_color_space != JCS_RGB ||
 800d8c0:	6f93      	ldr	r3, [r2, #120]	; 0x78
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d12f      	bne.n	800d926 <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800d8c6:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 800d8ca:	6899      	ldr	r1, [r3, #8]
 800d8cc:	2902      	cmp	r1, #2
 800d8ce:	d12a      	bne.n	800d926 <use_merged_upsample+0x8e>
 800d8d0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800d8d2:	2901      	cmp	r1, #1
 800d8d4:	d127      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800d8d6:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800d8da:	2901      	cmp	r1, #1
 800d8dc:	d123      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800d8de:	68d9      	ldr	r1, [r3, #12]
 800d8e0:	2902      	cmp	r1, #2
 800d8e2:	dc20      	bgt.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800d8e4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800d8e6:	2901      	cmp	r1, #1
 800d8e8:	d11d      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800d8ea:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800d8ee:	2901      	cmp	r1, #1
 800d8f0:	d119      	bne.n	800d926 <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d8f2:	f8d2 4140 	ldr.w	r4, [r2, #320]	; 0x140
 800d8f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d8f8:	42a1      	cmp	r1, r4
 800d8fa:	d114      	bne.n	800d926 <use_merged_upsample+0x8e>
 800d8fc:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800d8fe:	42a1      	cmp	r1, r4
 800d900:	d111      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d902:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800d906:	42a1      	cmp	r1, r4
 800d908:	d10d      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d90a:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d90e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d910:	428a      	cmp	r2, r1
 800d912:	d108      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d914:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800d918:	428a      	cmp	r2, r1
 800d91a:	d104      	bne.n	800d926 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d91c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 800d920:	1a83      	subs	r3, r0, r2
 800d922:	4258      	negs	r0, r3
 800d924:	4158      	adcs	r0, r3
}
 800d926:	bd10      	pop	{r4, pc}
    return FALSE;
 800d928:	2000      	movs	r0, #0
 800d92a:	e7fc      	b.n	800d926 <use_merged_upsample+0x8e>
 800d92c:	4618      	mov	r0, r3
 800d92e:	e7fa      	b.n	800d926 <use_merged_upsample+0x8e>

0800d930 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800d930:	6942      	ldr	r2, [r0, #20]
 800d932:	2aca      	cmp	r2, #202	; 0xca
{
 800d934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d938:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800d93a:	d005      	beq.n	800d948 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d93c:	6803      	ldr	r3, [r0, #0]
 800d93e:	2115      	movs	r1, #21
 800d940:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800d948:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d94a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800d94c:	f7fe fb04 	bl	800bf58 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d950:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800d954:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800d958:	462b      	mov	r3, r5
 800d95a:	45b4      	cmp	ip, r6
 800d95c:	dd7a      	ble.n	800da54 <jpeg_calc_output_dimensions+0x124>
 800d95e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800d960:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800d962:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800d966:	2a00      	cmp	r2, #0
 800d968:	bf14      	ite	ne
 800d96a:	2708      	movne	r7, #8
 800d96c:	2704      	moveq	r7, #4
 800d96e:	e000      	b.n	800d972 <jpeg_calc_output_dimensions+0x42>
      ssize = ssize * 2;
 800d970:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800d972:	fb01 f008 	mul.w	r0, r1, r8
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d976:	42b8      	cmp	r0, r7
 800d978:	dc0a      	bgt.n	800d990 <jpeg_calc_output_dimensions+0x60>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800d97a:	689a      	ldr	r2, [r3, #8]
 800d97c:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800d980:	434a      	muls	r2, r1
 800d982:	0052      	lsls	r2, r2, #1
 800d984:	fb9e f9f2 	sdiv	r9, lr, r2
 800d988:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d98c:	2a00      	cmp	r2, #0
 800d98e:	d0ef      	beq.n	800d970 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800d990:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800d992:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800d996:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800d99a:	fb08 f109 	mul.w	r1, r8, r9
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d99e:	42b9      	cmp	r1, r7
 800d9a0:	dc0a      	bgt.n	800d9b8 <jpeg_calc_output_dimensions+0x88>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800d9a2:	68da      	ldr	r2, [r3, #12]
 800d9a4:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800d9a8:	fb02 f208 	mul.w	r2, r2, r8
 800d9ac:	0052      	lsls	r2, r2, #1
 800d9ae:	fb9e faf2 	sdiv	sl, lr, r2
 800d9b2:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d9b6:	b14a      	cbz	r2, 800d9cc <jpeg_calc_output_dimensions+0x9c>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800d9b8:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800d9bc:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800d9be:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d9c2:	dd06      	ble.n	800d9d2 <jpeg_calc_output_dimensions+0xa2>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800d9c4:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800d9c6:	3601      	adds	r6, #1
 800d9c8:	3358      	adds	r3, #88	; 0x58
 800d9ca:	e7c6      	b.n	800d95a <jpeg_calc_output_dimensions+0x2a>
      ssize = ssize * 2;
 800d9cc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d9d0:	e7e3      	b.n	800d99a <jpeg_calc_output_dimensions+0x6a>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800d9d2:	0042      	lsls	r2, r0, #1
 800d9d4:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800d9d8:	bfc8      	it	gt
 800d9da:	629a      	strgt	r2, [r3, #40]	; 0x28
 800d9dc:	e7f3      	b.n	800d9c6 <jpeg_calc_output_dimensions+0x96>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800d9de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800d9e0:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800d9e2:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800d9e4:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d9e6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800d9ea:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800d9ee:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800d9f0:	69e3      	ldr	r3, [r4, #28]
 800d9f2:	4351      	muls	r1, r2
 800d9f4:	4358      	muls	r0, r3
 800d9f6:	f007 fe43 	bl	8015680 <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800d9fa:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800d9fe:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800da02:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800da06:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800da0a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800da0e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800da10:	6a23      	ldr	r3, [r4, #32]
 800da12:	4351      	muls	r1, r2
 800da14:	4358      	muls	r0, r3
 800da16:	f007 fe33 	bl	8015680 <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800da1a:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da20:	42b3      	cmp	r3, r6
 800da22:	dcdc      	bgt.n	800d9de <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800da24:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800da28:	2a03      	cmp	r2, #3
 800da2a:	d815      	bhi.n	800da58 <jpeg_calc_output_dimensions+0x128>
 800da2c:	2a01      	cmp	r2, #1
 800da2e:	d818      	bhi.n	800da62 <jpeg_calc_output_dimensions+0x132>
 800da30:	d100      	bne.n	800da34 <jpeg_calc_output_dimensions+0x104>
 800da32:	4613      	mov	r3, r2
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800da34:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (use_merged_upsample(cinfo))
 800da36:	4620      	mov	r0, r4
    cinfo->out_color_components = 1;
 800da38:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800da3a:	2a00      	cmp	r2, #0
 800da3c:	bf18      	it	ne
 800da3e:	2301      	movne	r3, #1
 800da40:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800da42:	f7ff ff29 	bl	800d898 <use_merged_upsample>
 800da46:	b170      	cbz	r0, 800da66 <jpeg_calc_output_dimensions+0x136>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800da48:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800da4c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800da50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da54:	2600      	movs	r6, #0
 800da56:	e7e2      	b.n	800da1e <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800da58:	3a04      	subs	r2, #4
 800da5a:	2a01      	cmp	r2, #1
 800da5c:	bf98      	it	ls
 800da5e:	2304      	movls	r3, #4
 800da60:	e7e8      	b.n	800da34 <jpeg_calc_output_dimensions+0x104>
 800da62:	2303      	movs	r3, #3
 800da64:	e7e6      	b.n	800da34 <jpeg_calc_output_dimensions+0x104>
    cinfo->rec_outbuf_height = 1;
 800da66:	2301      	movs	r3, #1
 800da68:	e7f0      	b.n	800da4c <jpeg_calc_output_dimensions+0x11c>
	...

0800da6c <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800da6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da6e:	6843      	ldr	r3, [r0, #4]
 800da70:	221c      	movs	r2, #28
 800da72:	2101      	movs	r1, #1
{
 800da74:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da76:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800da78:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da7a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800da7c:	4b6d      	ldr	r3, [pc, #436]	; (800dc34 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800da7e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da82:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800da84:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800da86:	4b6c      	ldr	r3, [pc, #432]	; (800dc38 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800da88:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800da8a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800da8c:	4620      	mov	r0, r4
 800da8e:	f7ff ff4f 	bl	800d930 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da92:	6863      	ldr	r3, [r4, #4]
 800da94:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800da98:	2101      	movs	r1, #1
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4620      	mov	r0, r4
 800da9e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800daa0:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800daa4:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800daa6:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800daa8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800daac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dab0:	f011 fcc2 	bl	801f438 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800dab4:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800dab8:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800daba:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800dabe:	3101      	adds	r1, #1
 800dac0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800dac4:	d1f9      	bne.n	800daba <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800dac6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800daca:	21ff      	movs	r1, #255	; 0xff
 800dacc:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800dad0:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800dad2:	f011 fcb1 	bl	801f438 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800dad6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800dada:	2100      	movs	r1, #0
 800dadc:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800dae0:	f011 fcaa 	bl	801f438 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800dae4:	2280      	movs	r2, #128	; 0x80
 800dae6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800daea:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800daee:	f011 fd84 	bl	801f5fa <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800daf2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800daf4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800daf6:	f7ff fecf 	bl	800d898 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800dafa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800dafc:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800dafe:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800db02:	b1b3      	cbz	r3, 800db32 <jinit_master_decompress+0xc6>
 800db04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800db06:	b1a2      	cbz	r2, 800db32 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800db08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d166      	bne.n	800dbdc <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800db0e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800db10:	2b03      	cmp	r3, #3
 800db12:	f04f 0301 	mov.w	r3, #1
 800db16:	d068      	beq.n	800dbea <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800db18:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800db1a:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800db1c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800db20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800db24:	4620      	mov	r0, r4
 800db26:	f006 feb9 	bl	801489c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800db2a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800db2e:	616b      	str	r3, [r5, #20]
 800db30:	e062      	b.n	800dbf8 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800db32:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800db36:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1e5      	bne.n	800db08 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800db3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db3e:	b94b      	cbnz	r3, 800db54 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800db40:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800db42:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800db44:	2b00      	cmp	r3, #0
 800db46:	d069      	beq.n	800dc1c <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800db48:	f000 fa1e 	bl	800df88 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800db4c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 fb9a 	bl	800e288 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800db54:	4620      	mov	r0, r4
 800db56:	f7fc fdbd 	bl	800a6d4 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800db5a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800db5e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800db60:	2b00      	cmp	r3, #0
 800db62:	d061      	beq.n	800dc28 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800db64:	f7fb fc2c 	bl	80093c0 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800db68:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d15d      	bne.n	800dc2e <jinit_master_decompress+0x1c2>
 800db72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800db74:	3900      	subs	r1, #0
 800db76:	bf18      	it	ne
 800db78:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800db7a:	4620      	mov	r0, r4
 800db7c:	f7fc f916 	bl	8009dac <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800db80:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800db82:	b911      	cbnz	r1, 800db8a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800db84:	4620      	mov	r0, r4
 800db86:	f7fe fca7 	bl	800c4d8 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800db8a:	6863      	ldr	r3, [r4, #4]
 800db8c:	4620      	mov	r0, r4
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800db92:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800db96:	4620      	mov	r0, r4
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800db9c:	68a2      	ldr	r2, [r4, #8]
 800db9e:	b1e2      	cbz	r2, 800dbda <jinit_master_decompress+0x16e>
 800dba0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dba2:	b9d3      	cbnz	r3, 800dbda <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800dba4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	b1b3      	cbz	r3, 800dbda <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800dbac:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800dbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800dbb2:	b111      	cbz	r1, 800dbba <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800dbb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dbb8:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800dbba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800dbbe:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800dbc0:	4359      	muls	r1, r3
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800dbc2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    cinfo->progress->pass_counter = 0L;
 800dbc4:	6050      	str	r0, [r2, #4]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800dbc6:	4283      	cmp	r3, r0
 800dbc8:	bf14      	ite	ne
 800dbca:	2303      	movne	r3, #3
 800dbcc:	2302      	moveq	r3, #2
 800dbce:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800dbd0:	68eb      	ldr	r3, [r5, #12]
 800dbd2:	3301      	adds	r3, #1
    cinfo->progress->completed_passes = 0;
 800dbd4:	e9c2 1002 	strd	r1, r0, [r2, #8]
    master->pass_number++;
 800dbd8:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800dbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	2230      	movs	r2, #48	; 0x30
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	615a      	str	r2, [r3, #20]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4798      	blx	r3
 800dbe8:	e791      	b.n	800db0e <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800dbea:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800dbee:	b17a      	cbz	r2, 800dc10 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800dbf0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800dbf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d195      	bne.n	800db24 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800dbf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dbfa:	b913      	cbnz	r3, 800dc02 <jinit_master_decompress+0x196>
 800dbfc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d09c      	beq.n	800db3c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800dc02:	4620      	mov	r0, r4
 800dc04:	f007 fcd0 	bl	80155a8 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800dc08:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800dc0c:	61ab      	str	r3, [r5, #24]
 800dc0e:	e795      	b.n	800db3c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800dc10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800dc12:	b10a      	cbz	r2, 800dc18 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800dc14:	66e3      	str	r3, [r4, #108]	; 0x6c
 800dc16:	e7ec      	b.n	800dbf2 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800dc18:	6663      	str	r3, [r4, #100]	; 0x64
 800dc1a:	e783      	b.n	800db24 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800dc1c:	f7fc faea 	bl	800a1f4 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 fc4f 	bl	800e4c4 <jinit_upsampler>
 800dc26:	e791      	b.n	800db4c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800dc28:	f7fd fee2 	bl	800b9f0 <jinit_huff_decoder>
 800dc2c:	e79c      	b.n	800db68 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800dc2e:	2101      	movs	r1, #1
 800dc30:	e7a3      	b.n	800db7a <jinit_master_decompress+0x10e>
 800dc32:	bf00      	nop
 800dc34:	0800d781 	.word	0x0800d781
 800dc38:	0800d87f 	.word	0x0800d87f

0800dc3c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dc3c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800dc40:	2200      	movs	r2, #0
 800dc42:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800dc44:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800dc46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800dc48:	4770      	bx	lr

0800dc4a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800dc4a:	b570      	push	{r4, r5, r6, lr}
 800dc4c:	9d05      	ldr	r5, [sp, #20]
 800dc4e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800dc50:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800dc54:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800dc56:	68de      	ldr	r6, [r3, #12]
 800dc58:	9b04      	ldr	r3, [sp, #16]
 800dc5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800dc5e:	6822      	ldr	r2, [r4, #0]
 800dc60:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800dc62:	682b      	ldr	r3, [r5, #0]
 800dc64:	3301      	adds	r3, #1
 800dc66:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	6023      	str	r3, [r4, #0]
}
 800dc6e:	bd70      	pop	{r4, r5, r6, pc}

0800dc70 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800dc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dc74:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800dc78:	b089      	sub	sp, #36	; 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800dc7a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800dc7e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800dc80:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800dc84:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800dc86:	9601      	str	r6, [sp, #4]
  int * Cbbtab = upsample->Cb_b_tab;
 800dc88:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800dc8a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800dc8e:	9602      	str	r6, [sp, #8]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dc90:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800dc92:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dc94:	9603      	str	r6, [sp, #12]
  inptr0 = input_buf[0][in_row_group_ctr];
 800dc96:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800dc9a:	9504      	str	r5, [sp, #16]
  inptr1 = input_buf[1][in_row_group_ctr];
 800dc9c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800dc9e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800dca0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800dca4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dca8:	9904      	ldr	r1, [sp, #16]
 800dcaa:	9205      	str	r2, [sp, #20]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dcac:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800dcae:	f8dd 9014 	ldr.w	r9, [sp, #20]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dcb2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800dcb6:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800dcba:	9206      	str	r2, [sp, #24]
 800dcbc:	9a06      	ldr	r2, [sp, #24]
 800dcbe:	3306      	adds	r3, #6
 800dcc0:	3102      	adds	r1, #2
 800dcc2:	4295      	cmp	r5, r2
 800dcc4:	d128      	bne.n	800dd18 <h2v1_merged_upsample+0xa8>
 800dcc6:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800dcc8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800dcca:	fb03 f30e 	mul.w	r3, r3, lr
 800dcce:	07d2      	lsls	r2, r2, #31
 800dcd0:	eb0c 0103 	add.w	r1, ip, r3
 800dcd4:	d51d      	bpl.n	800dd12 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800dcd6:	9a05      	ldr	r2, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800dcd8:	9f01      	ldr	r7, [sp, #4]
    cred = Crrtab[cr];
 800dcda:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dcde:	782a      	ldrb	r2, [r5, #0]
 800dce0:	9d03      	ldr	r5, [sp, #12]
 800dce2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800dce6:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800dcea:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dcee:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800dcf0:	9d02      	ldr	r5, [sp, #8]
 800dcf2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800dcf6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800dcfa:	9a04      	ldr	r2, [sp, #16]
 800dcfc:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800dd00:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800dd02:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800dd04:	5dbe      	ldrb	r6, [r7, r6]
 800dd06:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800dd08:	5c80      	ldrb	r0, [r0, r2]
 800dd0a:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800dd0c:	5ca2      	ldrb	r2, [r4, r2]
 800dd0e:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800dd12:	b009      	add	sp, #36	; 0x24
 800dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dd18:	f815 ab01 	ldrb.w	sl, [r5], #1
    cred = Crrtab[cr];
 800dd1c:	f819 2b01 	ldrb.w	r2, [r9], #1
 800dd20:	9e01      	ldr	r6, [sp, #4]
 800dd22:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dd26:	f858 602a 	ldr.w	r6, [r8, sl, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800dd2a:	4427      	add	r7, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dd2c:	9607      	str	r6, [sp, #28]
 800dd2e:	9e03      	ldr	r6, [sp, #12]
 800dd30:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800dd34:	9e07      	ldr	r6, [sp, #28]
 800dd36:	4432      	add	r2, r6
    cblue = Cbbtab[cb];
 800dd38:	9e02      	ldr	r6, [sp, #8]
 800dd3a:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800dd3e:	eb04 4222 	add.w	r2, r4, r2, asr #16
    y  = GETJSAMPLE(*inptr0++);
 800dd42:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800dd46:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800dd48:	f817 b00a 	ldrb.w	fp, [r7, sl]
 800dd4c:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800dd50:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800dd54:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800dd58:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800dd5c:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800dd60:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800dd64:	f817 700a 	ldrb.w	r7, [r7, sl]
 800dd68:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800dd6c:	f812 200a 	ldrb.w	r2, [r2, sl]
 800dd70:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800dd74:	f816 200a 	ldrb.w	r2, [r6, sl]
 800dd78:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dd7c:	e79e      	b.n	800dcbc <h2v1_merged_upsample+0x4c>

0800dd7e <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800dd7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dd82:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800dd86:	b08d      	sub	sp, #52	; 0x34
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800dd88:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800dd8c:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800dd8e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800dd92:	9604      	str	r6, [sp, #16]
  int * Cbbtab = upsample->Cb_b_tab;
 800dd94:	696e      	ldr	r6, [r5, #20]
 800dd96:	9605      	str	r6, [sp, #20]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dd98:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800dd9a:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dd9c:	9606      	str	r6, [sp, #24]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800dd9e:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800dda2:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800dda6:	686d      	ldr	r5, [r5, #4]
 800dda8:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800ddaa:	9607      	str	r6, [sp, #28]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800ddac:	9508      	str	r5, [sp, #32]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ddae:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ddb0:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ddb2:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ddb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ddba:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800ddbc:	9209      	str	r2, [sp, #36]	; 0x24
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ddbe:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ddcc:	910a      	str	r1, [sp, #40]	; 0x28
  inptr2 = input_buf[2][in_row_group_ctr];
 800ddce:	9909      	ldr	r1, [sp, #36]	; 0x24
  outptr0 = output_buf[0];
 800ddd0:	9201      	str	r2, [sp, #4]
  outptr1 = output_buf[1];
 800ddd2:	9302      	str	r3, [sp, #8]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ddd4:	9103      	str	r1, [sp, #12]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ddd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ddd8:	3206      	adds	r2, #6
 800ddda:	3306      	adds	r3, #6
 800dddc:	f10e 0e02 	add.w	lr, lr, #2
 800dde0:	4588      	cmp	r8, r1
 800dde2:	f10c 0c02 	add.w	ip, ip, #2
 800dde6:	d139      	bne.n	800de5c <h2v2_merged_upsample+0xde>
 800dde8:	2306      	movs	r3, #6
 800ddea:	9a01      	ldr	r2, [sp, #4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800ddec:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800ddee:	437b      	muls	r3, r7
 800ddf0:	07c0      	lsls	r0, r0, #31
 800ddf2:	eb02 0103 	add.w	r1, r2, r3
 800ddf6:	9a02      	ldr	r2, [sp, #8]
 800ddf8:	441a      	add	r2, r3
 800ddfa:	d52c      	bpl.n	800de56 <h2v2_merged_upsample+0xd8>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800ddfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddfe:	9d04      	ldr	r5, [sp, #16]
 800de00:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800de02:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800de06:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800de0a:	9d06      	ldr	r5, [sp, #24]
 800de0c:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800de10:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
 800de14:	9d05      	ldr	r5, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800de16:	4460      	add	r0, ip
    cblue = Cbbtab[cb];
 800de18:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
    y  = GETJSAMPLE(*inptr00);
 800de1c:	9d07      	ldr	r5, [sp, #28]
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800de1e:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr00);
 800de22:	f815 6017 	ldrb.w	r6, [r5, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800de26:	eb0e 0504 	add.w	r5, lr, r4
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800de2a:	4464      	add	r4, ip
    outptr0[RGB_RED] =   range_limit[y + cred];
 800de2c:	f815 e006 	ldrb.w	lr, [r5, r6]
 800de30:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800de34:	f810 e006 	ldrb.w	lr, [r0, r6]
 800de38:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800de3c:	5da1      	ldrb	r1, [r4, r6]
 800de3e:	9e01      	ldr	r6, [sp, #4]
 800de40:	54f1      	strb	r1, [r6, r3]
    y  = GETJSAMPLE(*inptr01);
 800de42:	9908      	ldr	r1, [sp, #32]
 800de44:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800de48:	5c6d      	ldrb	r5, [r5, r1]
 800de4a:	7095      	strb	r5, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800de4c:	5c40      	ldrb	r0, [r0, r1]
 800de4e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800de50:	5c62      	ldrb	r2, [r4, r1]
 800de52:	9902      	ldr	r1, [sp, #8]
 800de54:	54ca      	strb	r2, [r1, r3]
  }
}
 800de56:	b00d      	add	sp, #52	; 0x34
 800de58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800de5c:	9d03      	ldr	r5, [sp, #12]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800de5e:	f818 9b01 	ldrb.w	r9, [r8], #1
    cred = Crrtab[cr];
 800de62:	f815 1b01 	ldrb.w	r1, [r5], #1
 800de66:	9503      	str	r5, [sp, #12]
 800de68:	9d04      	ldr	r5, [sp, #16]
 800de6a:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800de6e:	f85a 5029 	ldr.w	r5, [sl, r9, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800de72:	4426      	add	r6, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800de74:	950b      	str	r5, [sp, #44]	; 0x2c
 800de76:	9d06      	ldr	r5, [sp, #24]
 800de78:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800de7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800de7e:	4429      	add	r1, r5
    cblue = Cbbtab[cb];
 800de80:	9d05      	ldr	r5, [sp, #20]
 800de82:	f855 5029 	ldr.w	r5, [r5, r9, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800de86:	eb04 4121 	add.w	r1, r4, r1, asr #16
    y  = GETJSAMPLE(*inptr00++);
 800de8a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800de8e:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800de90:	f816 b009 	ldrb.w	fp, [r6, r9]
 800de94:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800de98:	f811 b009 	ldrb.w	fp, [r1, r9]
 800de9c:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800dea0:	f815 9009 	ldrb.w	r9, [r5, r9]
 800dea4:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800dea8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800deac:	f816 b009 	ldrb.w	fp, [r6, r9]
 800deb0:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800deb4:	f811 b009 	ldrb.w	fp, [r1, r9]
 800deb8:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800debc:	f815 9009 	ldrb.w	r9, [r5, r9]
 800dec0:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800dec4:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800dec8:	f816 b009 	ldrb.w	fp, [r6, r9]
 800decc:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ded0:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ded4:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800ded8:	f815 9009 	ldrb.w	r9, [r5, r9]
 800dedc:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800dee0:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800dee4:	f816 6009 	ldrb.w	r6, [r6, r9]
 800dee8:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800deec:	f811 1009 	ldrb.w	r1, [r1, r9]
 800def0:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800def4:	f815 1009 	ldrb.w	r1, [r5, r9]
 800def8:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800defc:	e76b      	b.n	800ddd6 <h2v2_merged_upsample+0x58>

0800defe <merged_2v_upsample>:
{
 800defe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800df02:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800df06:	4616      	mov	r6, r2
 800df08:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800df0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800df0e:	f8d8 3000 	ldr.w	r3, [r8]
 800df12:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800df16:	b1dd      	cbz	r5, 800df50 <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800df18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df1a:	2501      	movs	r5, #1
 800df1c:	f104 0020 	add.w	r0, r4, #32
 800df20:	9301      	str	r3, [sp, #4]
 800df22:	2300      	movs	r3, #0
 800df24:	9500      	str	r5, [sp, #0]
 800df26:	4619      	mov	r1, r3
 800df28:	f007 fbb7 	bl	801569a <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800df2c:	2300      	movs	r3, #0
 800df2e:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800df30:	f8d8 3000 	ldr.w	r3, [r8]
 800df34:	442b      	add	r3, r5
 800df36:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800df3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800df3c:	1b5b      	subs	r3, r3, r5
 800df3e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800df40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df42:	b913      	cbnz	r3, 800df4a <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800df44:	6833      	ldr	r3, [r6, #0]
 800df46:	3301      	adds	r3, #1
 800df48:	6033      	str	r3, [r6, #0]
}
 800df4a:	b004      	add	sp, #16
 800df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800df50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800df52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800df54:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800df56:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800df5a:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800df5e:	bf28      	it	cs
 800df60:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800df62:	9302      	str	r3, [sp, #8]
 800df64:	42bd      	cmp	r5, r7
 800df66:	bf28      	it	cs
 800df68:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800df6a:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800df6c:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800df6e:	bf17      	itett	ne
 800df70:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800df72:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800df74:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800df76:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800df78:	bf0c      	ite	eq
 800df7a:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800df7c:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800df7e:	ab02      	add	r3, sp, #8
 800df80:	6832      	ldr	r2, [r6, #0]
 800df82:	47b8      	blx	r7
 800df84:	e7d4      	b.n	800df30 <merged_2v_upsample+0x32>
	...

0800df88 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df88:	6843      	ldr	r3, [r0, #4]
 800df8a:	2230      	movs	r2, #48	; 0x30
 800df8c:	2101      	movs	r1, #1
 800df8e:	681b      	ldr	r3, [r3, #0]
{
 800df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df94:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df96:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800df98:	4b37      	ldr	r3, [pc, #220]	; (800e078 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800df9a:	4605      	mov	r5, r0
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800df9c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800dfa0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  upsample->pub.start_pass = start_pass_merged_upsample;
 800dfa2:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800dfa4:	2000      	movs	r0, #0
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800dfa6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  upsample->pub.need_context_rows = FALSE;
 800dfa8:	60a8      	str	r0, [r5, #8]
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800dfaa:	435a      	muls	r2, r3

  if (cinfo->max_v_samp_factor == 2) {
 800dfac:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800dfb0:	2b02      	cmp	r3, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800dfb2:	62aa      	str	r2, [r5, #40]	; 0x28
  if (cinfo->max_v_samp_factor == 2) {
 800dfb4:	d15a      	bne.n	800e06c <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800dfb6:	4b31      	ldr	r3, [pc, #196]	; (800e07c <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfb8:	2101      	movs	r1, #1
 800dfba:	4620      	mov	r0, r4
    upsample->pub.upsample = merged_2v_upsample;
 800dfbc:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800dfbe:	4b30      	ldr	r3, [pc, #192]	; (800e080 <jinit_merged_upsampler+0xf8>)
 800dfc0:	60eb      	str	r3, [r5, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfc2:	6863      	ldr	r3, [r4, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfc8:	6863      	ldr	r3, [r4, #4]
 800dfca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    upsample->spare_row = (JSAMPROW)
 800dfce:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4620      	mov	r0, r4
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dfd6:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfda:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfdc:	6863      	ldr	r3, [r4, #4]
 800dfde:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800dfe2:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4620      	mov	r0, r4
 800dfea:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfec:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800dfee:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2101      	movs	r1, #1
 800dff8:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800dffa:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800e098 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dffe:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e000:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800e002:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e004:	2101      	movs	r1, #1
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4620      	mov	r0, r4
 800e00a:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800e00e:	4f1d      	ldr	r7, [pc, #116]	; (800e084 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e010:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800e012:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800e014:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800e016:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800e018:	f8df e080 	ldr.w	lr, [pc, #128]	; 800e09c <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800e01c:	491a      	ldr	r1, [pc, #104]	; (800e088 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800e01e:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800e022:	4d1a      	ldr	r5, [pc, #104]	; (800e08c <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800e024:	fb08 e203 	mla	r2, r8, r3, lr
 800e028:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800e02a:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800e02e:	fb07 f203 	mul.w	r2, r7, r3
 800e032:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800e036:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800e03a:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800e03c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800e040:	fb05 f203 	mul.w	r2, r5, r3
 800e044:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800e048:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800e04c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800e050:	fb01 f203 	mul.w	r2, r1, r3
 800e054:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800e058:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800e05c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800e060:	3301      	adds	r3, #1
 800e062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e066:	d1dd      	bne.n	800e024 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800e068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800e06c:	4b08      	ldr	r3, [pc, #32]	; (800e090 <jinit_merged_upsampler+0x108>)
 800e06e:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800e070:	4b08      	ldr	r3, [pc, #32]	; (800e094 <jinit_merged_upsampler+0x10c>)
 800e072:	60eb      	str	r3, [r5, #12]
    upsample->spare_row = NULL;
 800e074:	e7a8      	b.n	800dfc8 <jinit_merged_upsampler+0x40>
 800e076:	bf00      	nop
 800e078:	0800dc3d 	.word	0x0800dc3d
 800e07c:	0800deff 	.word	0x0800deff
 800e080:	0800dd7f 	.word	0x0800dd7f
 800e084:	0001c5a2 	.word	0x0001c5a2
 800e088:	ffffa7e6 	.word	0xffffa7e6
 800e08c:	ffff492e 	.word	0xffff492e
 800e090:	0800dc4b 	.word	0x0800dc4b
 800e094:	0800dc71 	.word	0x0800dc71
 800e098:	000166e9 	.word	0x000166e9
 800e09c:	ff4d0b80 	.word	0xff4d0b80

0800e0a0 <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800e0a0:	2902      	cmp	r1, #2
{
 800e0a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e0a4:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800e0a8:	d023      	beq.n	800e0f2 <start_pass_dpost+0x52>
 800e0aa:	2903      	cmp	r1, #3
 800e0ac:	d019      	beq.n	800e0e2 <start_pass_dpost+0x42>
 800e0ae:	2900      	cmp	r1, #0
 800e0b0:	d128      	bne.n	800e104 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800e0b2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800e0b4:	b182      	cbz	r2, 800e0d8 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800e0b6:	4a16      	ldr	r2, [pc, #88]	; (800e110 <start_pass_dpost+0x70>)
 800e0b8:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800e0ba:	68e2      	ldr	r2, [r4, #12]
 800e0bc:	b93a      	cbnz	r2, 800e0ce <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800e0be:	6843      	ldr	r3, [r0, #4]
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	9100      	str	r1, [sp, #0]
 800e0c4:	69dd      	ldr	r5, [r3, #28]
 800e0c6:	68a1      	ldr	r1, [r4, #8]
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	47a8      	blx	r5
 800e0cc:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800e0d4:	b003      	add	sp, #12
 800e0d6:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800e0d8:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800e0dc:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800e0de:	6063      	str	r3, [r4, #4]
    break;
 800e0e0:	e7f5      	b.n	800e0ce <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800e0e2:	68a2      	ldr	r2, [r4, #8]
 800e0e4:	b91a      	cbnz	r2, 800e0ee <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e0e6:	6803      	ldr	r3, [r0, #0]
 800e0e8:	6159      	str	r1, [r3, #20]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800e0ee:	4b09      	ldr	r3, [pc, #36]	; (800e114 <start_pass_dpost+0x74>)
 800e0f0:	e7f5      	b.n	800e0de <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800e0f2:	68a2      	ldr	r2, [r4, #8]
 800e0f4:	b922      	cbnz	r2, 800e100 <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e0f6:	6803      	ldr	r3, [r0, #0]
 800e0f8:	2203      	movs	r2, #3
 800e0fa:	615a      	str	r2, [r3, #20]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800e100:	4b05      	ldr	r3, [pc, #20]	; (800e118 <start_pass_dpost+0x78>)
 800e102:	e7ec      	b.n	800e0de <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e104:	6803      	ldr	r3, [r0, #0]
 800e106:	2203      	movs	r2, #3
 800e108:	615a      	str	r2, [r3, #20]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4798      	blx	r3
    break;
 800e10e:	e7de      	b.n	800e0ce <start_pass_dpost+0x2e>
 800e110:	0800e11d 	.word	0x0800e11d
 800e114:	0800e17d 	.word	0x0800e17d
 800e118:	0800e20b 	.word	0x0800e20b

0800e11c <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e120:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e122:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800e126:	4604      	mov	r4, r0
 800e128:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800e12a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800e12c:	682f      	ldr	r7, [r5, #0]
 800e12e:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800e130:	2700      	movs	r7, #0
 800e132:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800e134:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800e138:	9705      	str	r7, [sp, #20]
 800e13a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e13e:	42be      	cmp	r6, r7
 800e140:	bf94      	ite	ls
 800e142:	9602      	strls	r6, [sp, #8]
 800e144:	9702      	strhi	r7, [sp, #8]
 800e146:	ae07      	add	r6, sp, #28
 800e148:	9601      	str	r6, [sp, #4]
 800e14a:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e14e:	9600      	str	r6, [sp, #0]
 800e150:	9e05      	ldr	r6, [sp, #20]
 800e152:	6876      	ldr	r6, [r6, #4]
 800e154:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800e156:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e158:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e15c:	4620      	mov	r0, r4
 800e15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e160:	685e      	ldr	r6, [r3, #4]
 800e162:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e166:	9b07      	ldr	r3, [sp, #28]
 800e168:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800e16c:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800e16e:	682b      	ldr	r3, [r5, #0]
 800e170:	9a07      	ldr	r2, [sp, #28]
 800e172:	4413      	add	r3, r2
 800e174:	602b      	str	r3, [r5, #0]
}
 800e176:	b008      	add	sp, #32
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e17c <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800e17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e180:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800e184:	b085      	sub	sp, #20
 800e186:	469a      	mov	sl, r3
 800e188:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800e18a:	69a3      	ldr	r3, [r4, #24]
{
 800e18c:	460e      	mov	r6, r1
 800e18e:	4691      	mov	r9, r2
 800e190:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800e194:	b943      	cbnz	r3, 800e1a8 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800e196:	6843      	ldr	r3, [r0, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	9200      	str	r2, [sp, #0]
 800e19c:	69df      	ldr	r7, [r3, #28]
 800e19e:	68a1      	ldr	r1, [r4, #8]
 800e1a0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e1a4:	47b8      	blx	r7
 800e1a6:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800e1a8:	6922      	ldr	r2, [r4, #16]
 800e1aa:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800e1ac:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	9202      	str	r2, [sp, #8]
 800e1b2:	f104 0218 	add.w	r2, r4, #24
 800e1b6:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800e1ba:	9201      	str	r2, [sp, #4]
 800e1bc:	68e2      	ldr	r2, [r4, #12]
 800e1be:	9200      	str	r2, [sp, #0]
 800e1c0:	464a      	mov	r2, r9
 800e1c2:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800e1c6:	4653      	mov	r3, sl
 800e1c8:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800e1ca:	69a6      	ldr	r6, [r4, #24]
 800e1cc:	42be      	cmp	r6, r7
 800e1ce:	d910      	bls.n	800e1f2 <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800e1d0:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800e1d4:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800e1d6:	68e1      	ldr	r1, [r4, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e1de:	4628      	mov	r0, r5
 800e1e0:	4633      	mov	r3, r6
 800e1e2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800e1e6:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800e1e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ec:	4433      	add	r3, r6
 800e1ee:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800e1f2:	6922      	ldr	r2, [r4, #16]
 800e1f4:	69a3      	ldr	r3, [r4, #24]
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d304      	bcc.n	800e204 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800e1fa:	6963      	ldr	r3, [r4, #20]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800e200:	2300      	movs	r3, #0
 800e202:	61a3      	str	r3, [r4, #24]
  }
}
 800e204:	b005      	add	sp, #20
 800e206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e20a <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800e20a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e20e:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800e212:	4606      	mov	r6, r0
 800e214:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800e216:	69a3      	ldr	r3, [r4, #24]
 800e218:	b93b      	cbnz	r3, 800e22a <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800e21a:	6842      	ldr	r2, [r0, #4]
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	69d5      	ldr	r5, [r2, #28]
 800e220:	68a1      	ldr	r1, [r4, #8]
 800e222:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e226:	47a8      	blx	r5
 800e228:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800e22a:	6963      	ldr	r3, [r4, #20]
 800e22c:	6f75      	ldr	r5, [r6, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800e22e:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800e230:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800e232:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800e234:	683a      	ldr	r2, [r7, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800e236:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e238:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e23a:	429d      	cmp	r5, r3
 800e23c:	bf28      	it	cs
 800e23e:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800e240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e242:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e244:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e248:	429d      	cmp	r5, r3
 800e24a:	bf28      	it	cs
 800e24c:	461d      	movcs	r5, r3
 800e24e:	68e3      	ldr	r3, [r4, #12]
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	9803      	ldr	r0, [sp, #12]
 800e254:	f8d6 31e0 	ldr.w	r3, [r6, #480]	; 0x1e0
 800e258:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e25c:	4630      	mov	r0, r6
 800e25e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e262:	462b      	mov	r3, r5
 800e264:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	442b      	add	r3, r5
 800e26a:	603b      	str	r3, [r7, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800e26c:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800e26e:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800e270:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800e272:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800e274:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800e276:	d304      	bcc.n	800e282 <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800e278:	6963      	ldr	r3, [r4, #20]
 800e27a:	4413      	add	r3, r2
 800e27c:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	61a3      	str	r3, [r4, #24]
  }
}
 800e282:	b004      	add	sp, #16
 800e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e288 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e288:	6843      	ldr	r3, [r0, #4]
 800e28a:	221c      	movs	r2, #28
{
 800e28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e28e:	681b      	ldr	r3, [r3, #0]
{
 800e290:	b085      	sub	sp, #20
 800e292:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e294:	2101      	movs	r1, #1
{
 800e296:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e298:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800e29a:	4b15      	ldr	r3, [pc, #84]	; (800e2f0 <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800e29c:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800e29e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e2a2:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800e2a4:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800e2a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800e2a8:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800e2ac:	b1bb      	cbz	r3, 800e2de <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800e2ae:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e2b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800e2b4:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e2b6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800e2b8:	6861      	ldr	r1, [r4, #4]
 800e2ba:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800e2bc:	b18f      	cbz	r7, 800e2e2 <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e2be:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e2c4:	9203      	str	r2, [sp, #12]
 800e2c6:	f007 f9e0 	bl	801568a <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e2ca:	692b      	ldr	r3, [r5, #16]
 800e2cc:	2101      	movs	r1, #1
 800e2ce:	9a03      	ldr	r2, [sp, #12]
 800e2d0:	e9cd 0300 	strd	r0, r3, [sp]
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4632      	mov	r2, r6
 800e2da:	47b8      	blx	r7
 800e2dc:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800e2de:	b005      	add	sp, #20
 800e2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800e2e2:	688e      	ldr	r6, [r1, #8]
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	2101      	movs	r1, #1
 800e2e8:	47b0      	blx	r6
 800e2ea:	60e8      	str	r0, [r5, #12]
}
 800e2ec:	e7f7      	b.n	800e2de <jinit_d_post_controller+0x56>
 800e2ee:	bf00      	nop
 800e2f0:	0800e0a1 	.word	0x0800e0a1

0800e2f4 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800e2f4:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e2f8:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800e2fc:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800e2fe:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800e300:	661a      	str	r2, [r3, #96]	; 0x60
}
 800e302:	4770      	bx	lr

0800e304 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800e304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e308:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800e30c:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800e30e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800e312:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800e314:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800e316:	4683      	mov	fp, r0
 800e318:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800e31a:	429a      	cmp	r2, r3
 800e31c:	db10      	blt.n	800e340 <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e31e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800e322:	2600      	movs	r6, #0
 800e324:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800e328:	9303      	str	r3, [sp, #12]
 800e32a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800e32e:	9a03      	ldr	r2, [sp, #12]
 800e330:	fb0a 2106 	mla	r1, sl, r6, r2
 800e334:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800e338:	42b2      	cmp	r2, r6
 800e33a:	dc31      	bgt.n	800e3a0 <sep_upsample+0x9c>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800e33c:	2300      	movs	r3, #0
 800e33e:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800e340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800e342:	4658      	mov	r0, fp
  out_rows_avail -= *out_row_ctr;
 800e344:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800e34a:	1af6      	subs	r6, r6, r3
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800e34c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  if (num_rows > out_rows_avail)
 800e34e:	428e      	cmp	r6, r1
 800e350:	bf28      	it	cs
 800e352:	460e      	movcs	r6, r1
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800e354:	f8db 113c 	ldr.w	r1, [fp, #316]	; 0x13c
 800e358:	1a89      	subs	r1, r1, r2
 800e35a:	428e      	cmp	r6, r1
 800e35c:	bf28      	it	cs
 800e35e:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800e360:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800e364:	9600      	str	r6, [sp, #0]
 800e366:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800e36a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e36c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e370:	f104 010c 	add.w	r1, r4, #12
 800e374:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800e376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4433      	add	r3, r6
 800e37e:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800e380:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800e382:	1b9b      	subs	r3, r3, r6
 800e384:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800e386:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e388:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800e38a:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800e38e:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800e390:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800e392:	bfa2      	ittt	ge
 800e394:	682b      	ldrge	r3, [r5, #0]
 800e396:	3301      	addge	r3, #1
 800e398:	602b      	strge	r3, [r5, #0]
}
 800e39a:	b005      	add	sp, #20
 800e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800e3a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
      (*upsample->methods[ci]) (cinfo, compptr,
 800e3a2:	f103 0904 	add.w	r9, r3, #4
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800e3a6:	682a      	ldr	r2, [r5, #0]
      (*upsample->methods[ci]) (cinfo, compptr,
 800e3a8:	3b24      	subs	r3, #36	; 0x24
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800e3aa:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800e3ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e3ae:	4607      	mov	r7, r0
 800e3b0:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800e3b4:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800e3b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e3ba:	4658      	mov	r0, fp
 800e3bc:	47b8      	blx	r7
	 ci++, compptr++) {
 800e3be:	464b      	mov	r3, r9
 800e3c0:	e7b5      	b.n	800e32e <sep_upsample+0x2a>

0800e3c2 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800e3c2:	601a      	str	r2, [r3, #0]
}
 800e3c4:	4770      	bx	lr

0800e3c6 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	601a      	str	r2, [r3, #0]
}
 800e3ca:	4770      	bx	lr

0800e3cc <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800e3ce:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800e3d6:	4299      	cmp	r1, r3
 800e3d8:	dc00      	bgt.n	800e3dc <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800e3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800e3dc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800e3e0:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800e3e2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800e3e6:	440c      	add	r4, r1
    while (outptr < outend) {
 800e3e8:	42a1      	cmp	r1, r4
 800e3ea:	d301      	bcc.n	800e3f0 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	e7f0      	b.n	800e3d2 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800e3f0:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800e3f4:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800e3f8:	f801 6c01 	strb.w	r6, [r1, #-1]
 800e3fc:	e7f4      	b.n	800e3e8 <h2v1_upsample+0x1c>

0800e3fe <int_upsample>:
{
 800e3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e402:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800e404:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e406:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800e40a:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800e40c:	684b      	ldr	r3, [r1, #4]
 800e40e:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800e410:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800e412:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800e414:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800e418:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e41c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e420:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800e422:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800e426:	42a3      	cmp	r3, r4
 800e428:	dc02      	bgt.n	800e430 <int_upsample+0x32>
}
 800e42a:	b005      	add	sp, #20
 800e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800e430:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800e434:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800e436:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800e43a:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800e43e:	454b      	cmp	r3, r9
 800e440:	d30e      	bcc.n	800e460 <int_upsample+0x62>
    if (v_expand > 1) {
 800e442:	f1b8 0f01 	cmp.w	r8, #1
 800e446:	dd09      	ble.n	800e45c <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e448:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e44a:	463a      	mov	r2, r7
 800e44c:	4621      	mov	r1, r4
 800e44e:	4638      	mov	r0, r7
 800e450:	9301      	str	r3, [sp, #4]
 800e452:	9b03      	ldr	r3, [sp, #12]
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	1c63      	adds	r3, r4, #1
 800e458:	f007 f91f 	bl	801569a <jcopy_sample_rows>
    outrow += v_expand;
 800e45c:	4444      	add	r4, r8
 800e45e:	e7e0      	b.n	800e422 <int_upsample+0x24>
	*outptr++ = invalue;
 800e460:	4618      	mov	r0, r3
 800e462:	4652      	mov	r2, sl
 800e464:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800e468:	f010 ffe6 	bl	801f438 <memset>
 800e46c:	4603      	mov	r3, r0
 800e46e:	4453      	add	r3, sl
 800e470:	e7e5      	b.n	800e43e <int_upsample+0x40>

0800e472 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e472:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e476:	4605      	mov	r5, r0
 800e478:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800e47a:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800e47c:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e47e:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800e482:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800e486:	42a3      	cmp	r3, r4
 800e488:	dc02      	bgt.n	800e490 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800e48a:	b002      	add	sp, #8
 800e48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800e490:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800e494:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800e496:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800e49a:	441a      	add	r2, r3
    while (outptr < outend) {
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d30a      	bcc.n	800e4b6 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e4a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	4632      	mov	r2, r6
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	e9cd 8300 	strd	r8, r3, [sp]
 800e4ac:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800e4ae:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e4b0:	f007 f8f3 	bl	801569a <jcopy_sample_rows>
    outrow += 2;
 800e4b4:	e7e5      	b.n	800e482 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800e4b6:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800e4ba:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800e4be:	f803 0c01 	strb.w	r0, [r3, #-1]
 800e4c2:	e7eb      	b.n	800e49c <h2v2_upsample+0x2a>

0800e4c4 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800e4c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e4c8:	6843      	ldr	r3, [r0, #4]
 800e4ca:	22a0      	movs	r2, #160	; 0xa0
 800e4cc:	2101      	movs	r1, #1
{
 800e4ce:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800e4d4:	4b3f      	ldr	r3, [pc, #252]	; (800e5d4 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800e4d6:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e4da:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800e4dc:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800e4de:	4b3e      	ldr	r3, [pc, #248]	; (800e5d8 <jinit_upsampler+0x114>)
 800e4e0:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800e4e6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e4ea:	b12b      	cbz	r3, 800e4f8 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800e4ec:	6823      	ldr	r3, [r4, #0]
 800e4ee:	221a      	movs	r2, #26
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	615a      	str	r2, [r3, #20]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e4f8:	f105 060c 	add.w	r6, r5, #12
 800e4fc:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800e500:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800e504:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800e508:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800e5e8 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e50c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800e510:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e5ec <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e514:	3574      	adds	r5, #116	; 0x74
 800e516:	eb05 0308 	add.w	r3, r5, r8
 800e51a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e51c:	429a      	cmp	r2, r3
 800e51e:	dc01      	bgt.n	800e524 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800e520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e526:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e528:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e52c:	4343      	muls	r3, r0
 800e52e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e532:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800e536:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e53a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800e53e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800e542:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800e544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e546:	b932      	cbnz	r2, 800e556 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800e548:	4b24      	ldr	r3, [pc, #144]	; (800e5dc <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800e54a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800e54c:	3758      	adds	r7, #88	; 0x58
 800e54e:	3604      	adds	r6, #4
 800e550:	f108 0801 	add.w	r8, r8, #1
 800e554:	e7df      	b.n	800e516 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e556:	fb0c f20e 	mul.w	r2, ip, lr
 800e55a:	fb92 f2f1 	sdiv	r2, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800e55e:	455a      	cmp	r2, fp
 800e560:	d103      	bne.n	800e56a <jinit_upsampler+0xa6>
 800e562:	4283      	cmp	r3, r0
 800e564:	d101      	bne.n	800e56a <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800e566:	4b1e      	ldr	r3, [pc, #120]	; (800e5e0 <jinit_upsampler+0x11c>)
 800e568:	e7ef      	b.n	800e54a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800e56a:	ebbb 0f42 	cmp.w	fp, r2, lsl #1
 800e56e:	d119      	bne.n	800e5a4 <jinit_upsampler+0xe0>
 800e570:	4283      	cmp	r3, r0
 800e572:	d111      	bne.n	800e598 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800e574:	4b1b      	ldr	r3, [pc, #108]	; (800e5e4 <jinit_upsampler+0x120>)
 800e576:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e578:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800e57a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800e57e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e580:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800e584:	f007 f881 	bl	801568a <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e588:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800e58c:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e58e:	2101      	movs	r1, #1
 800e590:	4620      	mov	r0, r4
 800e592:	47d8      	blx	fp
 800e594:	6030      	str	r0, [r6, #0]
 800e596:	e7d9      	b.n	800e54c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800e598:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800e59c:	d102      	bne.n	800e5a4 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800e59e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800e5a2:	e7e9      	b.n	800e578 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800e5a4:	fb9b f1f2 	sdiv	r1, fp, r2
 800e5a8:	fb02 b211 	mls	r2, r2, r1, fp
 800e5ac:	b95a      	cbnz	r2, 800e5c6 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800e5ae:	fb90 f2f3 	sdiv	r2, r0, r3
 800e5b2:	fb03 0312 	mls	r3, r3, r2, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800e5b6:	b933      	cbnz	r3, 800e5c6 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800e5b8:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800e5bc:	f888 1000 	strb.w	r1, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800e5c0:	f888 200a 	strb.w	r2, [r8, #10]
    if (need_buffer) {
 800e5c4:	e7d8      	b.n	800e578 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800e5c6:	6823      	ldr	r3, [r4, #0]
 800e5c8:	2227      	movs	r2, #39	; 0x27
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	615a      	str	r2, [r3, #20]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4798      	blx	r3
    if (need_buffer) {
 800e5d2:	e7d1      	b.n	800e578 <jinit_upsampler+0xb4>
 800e5d4:	0800e2f5 	.word	0x0800e2f5
 800e5d8:	0800e305 	.word	0x0800e305
 800e5dc:	0800e3c7 	.word	0x0800e3c7
 800e5e0:	0800e3c3 	.word	0x0800e3c3
 800e5e4:	0800e3cd 	.word	0x0800e3cd
 800e5e8:	0800e3ff 	.word	0x0800e3ff
 800e5ec:	0800e473 	.word	0x0800e473

0800e5f0 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800e5f0:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800e5f2:	6803      	ldr	r3, [r0, #0]
{
 800e5f4:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	4669      	mov	r1, sp
 800e5fa:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800e5fc:	b033      	add	sp, #204	; 0xcc
 800e5fe:	f85d fb04 	ldr.w	pc, [sp], #4

0800e602 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800e602:	2900      	cmp	r1, #0
{
 800e604:	4603      	mov	r3, r0
 800e606:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800e608:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800e60a:	da0b      	bge.n	800e624 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800e60c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e60e:	b112      	cbz	r2, 800e616 <emit_message+0x14>
 800e610:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800e612:	2a02      	cmp	r2, #2
 800e614:	dd02      	ble.n	800e61c <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800e616:	68a2      	ldr	r2, [r4, #8]
 800e618:	4618      	mov	r0, r3
 800e61a:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800e61c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e61e:	3301      	adds	r3, #1
 800e620:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800e622:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800e624:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e626:	428b      	cmp	r3, r1
 800e628:	dbfb      	blt.n	800e622 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800e62a:	68a3      	ldr	r3, [r4, #8]
}
 800e62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800e630:	4718      	bx	r3

0800e632 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800e632:	6803      	ldr	r3, [r0, #0]
 800e634:	2200      	movs	r2, #0
 800e636:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800e638:	615a      	str	r2, [r3, #20]
}
 800e63a:	4770      	bx	lr

0800e63c <format_message>:
{
 800e63c:	4603      	mov	r3, r0
 800e63e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800e640:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800e642:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800e644:	2b00      	cmp	r3, #0
{
 800e646:	b530      	push	{r4, r5, lr}
 800e648:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800e64a:	dd1f      	ble.n	800e68c <format_message+0x50>
 800e64c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800e64e:	4299      	cmp	r1, r3
 800e650:	db1c      	blt.n	800e68c <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800e652:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e654:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800e658:	b911      	cbnz	r1, 800e660 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800e65a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800e65c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800e65e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800e660:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800e662:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e666:	b9fc      	cbnz	r4, 800e6a8 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800e668:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e66a:	9305      	str	r3, [sp, #20]
 800e66c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e66e:	9304      	str	r3, [sp, #16]
 800e670:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e672:	9303      	str	r3, [sp, #12]
 800e674:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800e676:	9302      	str	r3, [sp, #8]
 800e678:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e67a:	9301      	str	r3, [sp, #4]
 800e67c:	6a13      	ldr	r3, [r2, #32]
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800e684:	f010 fde0 	bl	801f248 <siprintf>
}
 800e688:	b007      	add	sp, #28
 800e68a:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800e68c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800e68e:	2c00      	cmp	r4, #0
 800e690:	d0e3      	beq.n	800e65a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800e692:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800e694:	4299      	cmp	r1, r3
 800e696:	dce0      	bgt.n	800e65a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800e698:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800e69c:	429d      	cmp	r5, r3
 800e69e:	dbdc      	blt.n	800e65a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800e6a0:	1a59      	subs	r1, r3, r1
 800e6a2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e6a6:	e7d7      	b.n	800e658 <format_message+0x1c>
    if (ch == '%') {
 800e6a8:	2c25      	cmp	r4, #37	; 0x25
 800e6aa:	d1da      	bne.n	800e662 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2b73      	cmp	r3, #115	; 0x73
 800e6b0:	d1da      	bne.n	800e668 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800e6b2:	3218      	adds	r2, #24
}
 800e6b4:	b007      	add	sp, #28
 800e6b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800e6ba:	f010 bdc5 	b.w	801f248 <siprintf>

0800e6be <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800e6be:	6803      	ldr	r3, [r0, #0]
{
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800e6c4:	689b      	ldr	r3, [r3, #8]
 800e6c6:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800e6c8:	4620      	mov	r0, r4
}
 800e6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800e6ce:	f7f9 bf31 	b.w	8008534 <jpeg_destroy>
	...

0800e6d4 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800e6d4:	4a0a      	ldr	r2, [pc, #40]	; (800e700 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800e6d6:	490b      	ldr	r1, [pc, #44]	; (800e704 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800e6d8:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800e6da:	4a0b      	ldr	r2, [pc, #44]	; (800e708 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800e6dc:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800e6de:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800e6e0:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800e6e2:	4a0a      	ldr	r2, [pc, #40]	; (800e70c <jpeg_std_error+0x38>)
 800e6e4:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800e6e6:	4a0a      	ldr	r2, [pc, #40]	; (800e710 <jpeg_std_error+0x3c>)
 800e6e8:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800e6ea:	4a0a      	ldr	r2, [pc, #40]	; (800e714 <jpeg_std_error+0x40>)
 800e6ec:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800e6ee:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800e6f0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800e6f4:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800e6f6:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800e6fa:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800e6fe:	4770      	bx	lr
 800e700:	0800e6bf 	.word	0x0800e6bf
 800e704:	080236fc 	.word	0x080236fc
 800e708:	0800e603 	.word	0x0800e603
 800e70c:	0800e5f1 	.word	0x0800e5f1
 800e710:	0800e63d 	.word	0x0800e63d
 800e714:	0800e633 	.word	0x0800e633

0800e718 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800e71c:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800e720:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800e722:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800e726:	3a02      	subs	r2, #2
 800e728:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800e72c:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e72e:	ed9f 5abc 	vldr	s10, [pc, #752]	; 800ea20 <jpeg_idct_float+0x308>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e732:	ed9f 4abc 	vldr	s8, [pc, #752]	; 800ea24 <jpeg_idct_float+0x30c>
 800e736:	eddf 4abc 	vldr	s9, [pc, #752]	; 800ea28 <jpeg_idct_float+0x310>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e73a:	eddf 3abc 	vldr	s7, [pc, #752]	; 800ea2c <jpeg_idct_float+0x314>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800e73e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800e742:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800e744:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800e748:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800e74c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e750:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800e754:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800e758:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e75c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800e760:	ecbc 7a01 	vldmia	ip!, {s14}
 800e764:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e768:	ea4e 0b09 	orr.w	fp, lr, r9
 800e76c:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e774:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e778:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e77c:	ea41 0b0b 	orr.w	fp, r1, fp
 800e780:	ea45 0b0b 	orr.w	fp, r5, fp
 800e784:	ea50 0b0b 	orrs.w	fp, r0, fp
 800e788:	f040 80bf 	bne.w	800e90a <jpeg_idct_float+0x1f2>
      wsptr[DCTSIZE*0] = dcval;
 800e78c:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800e790:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800e794:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800e798:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800e79c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800e7a0:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800e7a4:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800e7a8:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800e7ac:	45e2      	cmp	sl, ip
 800e7ae:	d1c6      	bne.n	800e73e <jpeg_idct_float+0x26>
 800e7b0:	1f1c      	subs	r4, r3, #4
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800e7b2:	4669      	mov	r1, sp
 800e7b4:	331c      	adds	r3, #28
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800e7b6:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800ea30 <jpeg_idct_float+0x318>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800e7ba:	eddf 4a99 	vldr	s9, [pc, #612]	; 800ea20 <jpeg_idct_float+0x308>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e7be:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800ea24 <jpeg_idct_float+0x30c>
 800e7c2:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800ea28 <jpeg_idct_float+0x310>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e7c6:	eddf 3a99 	vldr	s7, [pc, #612]	; 800ea2c <jpeg_idct_float+0x314>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800e7ca:	edd1 6a00 	vldr	s13, [r1]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800e7ce:	3120      	adds	r1, #32
    tmp10 = z5 + wsptr[4];
 800e7d0:	ed11 7a04 	vldr	s14, [r1, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800e7d4:	ee76 6aa2 	vadd.f32	s13, s13, s5
    tmp13 = wsptr[2] + wsptr[6];
 800e7d8:	ed51 5a02 	vldr	s11, [r1, #-8]
    z11 = wsptr[1] + wsptr[7];
 800e7dc:	ed11 1a01 	vldr	s2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 800e7e0:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800e7e4:	ee77 7a26 	vadd.f32	s15, s14, s13
    outptr = output_buf[ctr] + output_col;
 800e7e8:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800e7ea:	ee76 6ac7 	vsub.f32	s13, s13, s14
    tmp13 = wsptr[2] + wsptr[6];
 800e7ee:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800e7f2:	18a8      	adds	r0, r5, r2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e7f4:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800e7f6:	ee37 6a25 	vadd.f32	s12, s14, s11
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800e7fa:	42a3      	cmp	r3, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800e7fc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e800:	eeb0 2a46 	vmov.f32	s4, s12
    tmp0 = tmp10 + tmp13;
 800e804:	ee77 5a86 	vadd.f32	s11, s15, s12
    tmp3 = tmp10 - tmp13;
 800e808:	ee37 5ac6 	vsub.f32	s10, s15, s12
    z13 = wsptr[5] + wsptr[3];
 800e80c:	ed51 7a03 	vldr	s15, [r1, #-12]
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800e810:	ee97 2a24 	vfnms.f32	s4, s14, s9
    z13 = wsptr[5] + wsptr[3];
 800e814:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 800e818:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800e81c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800e820:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800e824:	ee36 6a82 	vadd.f32	s12, s13, s4
    tmp2 = tmp11 - tmp12;
 800e828:	ee76 6ac2 	vsub.f32	s13, s13, s4
    z11 = wsptr[1] + wsptr[7];
 800e82c:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800e830:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800e834:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800e838:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800e83c:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e840:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e844:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e848:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e84c:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800e850:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800e854:	eef0 1a67 	vmov.f32	s3, s15
 800e858:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e85c:	ee35 2a81 	vadd.f32	s4, s11, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e860:	ee75 5ac1 	vsub.f32	s11, s11, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e864:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e868:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tmp4 = tmp10 - tmp5;
 800e86c:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e870:	ee12 2a10 	vmov	r2, s4
 800e874:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e878:	5cb2      	ldrb	r2, [r6, r2]
 800e87a:	55ea      	strb	r2, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e87c:	ee15 2a90 	vmov	r2, s11
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800e880:	ee76 5a27 	vadd.f32	s11, s12, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e884:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e888:	ee36 6a67 	vsub.f32	s12, s12, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800e88c:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e890:	5cb2      	ldrb	r2, [r6, r2]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e892:	eefd 7ac6 	vcvt.s32.f32	s15, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e896:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800e898:	ee15 2a90 	vmov	r2, s11
 800e89c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e8a0:	5cb2      	ldrb	r2, [r6, r2]
 800e8a2:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e8a4:	ee17 2a90 	vmov	r2, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e8a8:	ee76 7aa1 	vadd.f32	s15, s13, s3
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e8ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e8b0:	ee76 6ae1 	vsub.f32	s13, s13, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e8b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e8b8:	5cb2      	ldrb	r2, [r6, r2]
 800e8ba:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e8bc:	ee17 2a90 	vmov	r2, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e8c0:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e8c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e8c8:	5cb2      	ldrb	r2, [r6, r2]
 800e8ca:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e8cc:	ee17 2a90 	vmov	r2, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e8d0:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e8d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e8d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e8dc:	5cb2      	ldrb	r2, [r6, r2]
 800e8de:	7142      	strb	r2, [r0, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e8e0:	ee17 2a90 	vmov	r2, s15
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800e8e4:	ee75 7a47 	vsub.f32	s15, s10, s14
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e8e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800e8ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e8f0:	5cb2      	ldrb	r2, [r6, r2]
 800e8f2:	70c2      	strb	r2, [r0, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800e8f4:	ee17 2a90 	vmov	r2, s15
 800e8f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e8fc:	5cb2      	ldrb	r2, [r6, r2]
 800e8fe:	7102      	strb	r2, [r0, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800e900:	f47f af63 	bne.w	800e7ca <jpeg_idct_float+0xb2>
  }
}
 800e904:	b041      	add	sp, #260	; 0x104
 800e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e90a:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e90e:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800e912:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e916:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800e91a:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e91e:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800e922:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e926:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800e92a:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e92e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800e932:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800e936:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e93a:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800e93e:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800e942:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800e946:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800e94a:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e94e:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800e952:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e956:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800e95a:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800e95e:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e962:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800e966:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800e96a:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800e96e:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800e972:	ee07 ea90 	vmov	s15, lr
 800e976:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800e97a:	ee07 8a90 	vmov	s15, r8
 800e97e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800e982:	ee07 1a90 	vmov	s15, r1
 800e986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e98a:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800e98e:	ee07 0a10 	vmov	s14, r0
 800e992:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e996:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800e99a:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800e99e:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800e9a2:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800e9a6:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800e9aa:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800e9ae:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800e9b2:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e9b6:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800e9ba:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e9be:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e9c2:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800e9c6:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e9ca:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800e9ce:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800e9d2:	eeb0 6a67 	vmov.f32	s12, s15
 800e9d6:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800e9da:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800e9de:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800e9e2:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800e9e6:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800e9ea:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800e9ee:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800e9f2:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800e9f6:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800e9fa:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800e9fe:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800ea02:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800ea06:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800ea0a:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800ea0e:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800ea12:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800ea16:	ee73 7a47 	vsub.f32	s15, s6, s14
 800ea1a:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
    wsptr++;
 800ea1e:	e6c5      	b.n	800e7ac <jpeg_idct_float+0x94>
 800ea20:	3fb504f3 	.word	0x3fb504f3
 800ea24:	3f8a8bd4 	.word	0x3f8a8bd4
 800ea28:	3fec835e 	.word	0x3fec835e
 800ea2c:	40273d75 	.word	0x40273d75
 800ea30:	43008000 	.word	0x43008000

0800ea34 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800ea34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea38:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800ea3a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800ea3c:	3a02      	subs	r2, #2
{
 800ea3e:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ea40:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800ea44:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800ea48:	f105 0320 	add.w	r3, r5, #32
 800ea4c:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800ea4e:	ab04      	add	r3, sp, #16
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800ea50:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800ea54:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800ea56:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800ea5a:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800ea5e:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ea62:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800ea66:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800ea6a:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ea6e:	f855 0b04 	ldr.w	r0, [r5], #4
 800ea72:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800ea76:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ea78:	ea46 000c 	orr.w	r0, r6, ip
 800ea7c:	4338      	orrs	r0, r7
 800ea7e:	ea4a 0000 	orr.w	r0, sl, r0
 800ea82:	4308      	orrs	r0, r1
 800ea84:	ea4e 0000 	orr.w	r0, lr, r0
 800ea88:	ea58 0000 	orrs.w	r0, r8, r0
 800ea8c:	d13f      	bne.n	800eb0e <jpeg_idct_ifast+0xda>
      wsptr[DCTSIZE*0] = dcval;
 800ea8e:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800ea92:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800ea94:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800ea96:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800ea98:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800ea9a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800ea9e:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800eaa2:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800eaa6:	9903      	ldr	r1, [sp, #12]
 800eaa8:	42a9      	cmp	r1, r5
 800eaaa:	d1d1      	bne.n	800ea50 <jpeg_idct_ifast+0x1c>
 800eaac:	9b02      	ldr	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800eaae:	ad04      	add	r5, sp, #16
 800eab0:	f1a3 0b04 	sub.w	fp, r3, #4
 800eab4:	331c      	adds	r3, #28
 800eab6:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800eab8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800eaba:	f85b af04 	ldr.w	sl, [fp, #4]!
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800eabe:	69ea      	ldr	r2, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 800eac0:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800eac4:	e9d5 e801 	ldrd	lr, r8, [r5, #4]
 800eac8:	e9d5 4703 	ldrd	r4, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800eacc:	ea4e 0608 	orr.w	r6, lr, r8
 800ead0:	4326      	orrs	r6, r4
 800ead2:	e9d5 3c05 	ldrd	r3, ip, [r5, #20]
 800ead6:	433e      	orrs	r6, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800ead8:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800eadc:	431e      	orrs	r6, r3
 800eade:	ea46 060c 	orr.w	r6, r6, ip
 800eae2:	4316      	orrs	r6, r2
 800eae4:	d17e      	bne.n	800ebe4 <jpeg_idct_ifast+0x1b0>
				  & RANGE_MASK];
 800eae6:	f3c1 1149 	ubfx	r1, r1, #5, #10
      
      outptr[0] = dcval;
 800eaea:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800eaec:	f819 3001 	ldrb.w	r3, [r9, r1]
      outptr[0] = dcval;
 800eaf0:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800eaf4:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800eaf6:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800eaf8:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800eafa:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800eafc:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800eafe:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800eb00:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800eb02:	9b03      	ldr	r3, [sp, #12]
 800eb04:	455b      	cmp	r3, fp
 800eb06:	d1d7      	bne.n	800eab8 <jpeg_idct_ifast+0x84>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800eb08:	b045      	add	sp, #276	; 0x114
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800eb0e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800eb10:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800eb14:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800eb16:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800eb1a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800eb1e:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800eb22:	eb0a 0004 	add.w	r0, sl, r4
    tmp11 = tmp0 - tmp2;
 800eb26:	eba4 040a 	sub.w	r4, r4, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800eb2a:	ebac 0b0e 	sub.w	fp, ip, lr
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800eb2e:	eb0c 0a0e 	add.w	sl, ip, lr
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800eb32:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800eb36:	eb00 0e0a 	add.w	lr, r0, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800eb3a:	fb0c fb0b 	mul.w	fp, ip, fp
 800eb3e:	ebca 2b2b 	rsb	fp, sl, fp, asr #8
    tmp3 = tmp10 - tmp13;
 800eb42:	eba0 0a0a 	sub.w	sl, r0, sl
    tmp2 = tmp11 - tmp12;
 800eb46:	eba4 000b 	sub.w	r0, r4, fp
    tmp1 = tmp11 + tmp12;
 800eb4a:	eb04 0c0b 	add.w	ip, r4, fp
    tmp2 = tmp11 - tmp12;
 800eb4e:	9001      	str	r0, [sp, #4]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800eb50:	69e8      	ldr	r0, [r5, #28]
 800eb52:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800eb54:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800eb56:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800eb58:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800eb5c:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800eb5e:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800eb62:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800eb66:	eb07 0801 	add.w	r8, r7, r1
    z10 = tmp6 - tmp5;
 800eb6a:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800eb6c:	1837      	adds	r7, r6, r0
    z12 = tmp4 - tmp7;
 800eb6e:	1a30      	subs	r0, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800eb70:	180e      	adds	r6, r1, r0
    z12 = tmp4 - tmp7;
 800eb72:	4604      	mov	r4, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800eb74:	f240 10d9 	movw	r0, #473	; 0x1d9
    tmp7 = z11 + z13;		/* phase 5 */
 800eb78:	eb08 0b07 	add.w	fp, r8, r7
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800eb7c:	eba7 0708 	sub.w	r7, r7, r8
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800eb80:	4346      	muls	r6, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800eb82:	f46f 7027 	mvn.w	r0, #668	; 0x29c
 800eb86:	4341      	muls	r1, r0
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800eb88:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800eb8c:	4347      	muls	r7, r0
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800eb8e:	f240 1015 	movw	r0, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800eb92:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800eb94:	4344      	muls	r4, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800eb96:	eb01 2126 	add.w	r1, r1, r6, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800eb9a:	1220      	asrs	r0, r4, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800eb9c:	eba1 010b 	sub.w	r1, r1, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800eba0:	eba0 2026 	sub.w	r0, r0, r6, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800eba4:	eb0e 060b 	add.w	r6, lr, fp
    tmp5 = tmp11 - tmp6;
 800eba8:	ebc1 2727 	rsb	r7, r1, r7, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800ebac:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800ebb0:	ebae 060b 	sub.w	r6, lr, fp
    tmp4 = tmp10 + tmp5;
 800ebb4:	4438      	add	r0, r7
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800ebb6:	f8c3 60dc 	str.w	r6, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800ebba:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800ebbe:	ebac 0101 	sub.w	r1, ip, r1
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800ebc2:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800ebc4:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800ebc8:	9901      	ldr	r1, [sp, #4]
 800ebca:	4439      	add	r1, r7
 800ebcc:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800ebce:	9901      	ldr	r1, [sp, #4]
 800ebd0:	1bcc      	subs	r4, r1, r7
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800ebd2:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800ebd6:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800ebda:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800ebde:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800ebe0:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800ebe2:	e760      	b.n	800eaa6 <jpeg_idct_ifast+0x72>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800ebe4:	187e      	adds	r6, r7, r1
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800ebe6:	1bc9      	subs	r1, r1, r7
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800ebe8:	eb08 070c 	add.w	r7, r8, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ebec:	eba8 080c 	sub.w	r8, r8, ip
 800ebf0:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
 800ebf4:	fb0c f808 	mul.w	r8, ip, r8
    tmp0 = tmp10 + tmp13;
 800ebf8:	eb06 0c07 	add.w	ip, r6, r7
    tmp3 = tmp10 - tmp13;
 800ebfc:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ebfe:	ebc7 2828 	rsb	r8, r7, r8, asr #8
    tmp1 = tmp11 + tmp12;
 800ec02:	eb01 0708 	add.w	r7, r1, r8
    tmp2 = tmp11 - tmp12;
 800ec06:	eba1 0108 	sub.w	r1, r1, r8
 800ec0a:	9101      	str	r1, [sp, #4]
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800ec0c:	18e1      	adds	r1, r4, r3
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800ec0e:	1b1b      	subs	r3, r3, r4
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800ec10:	eb0e 0402 	add.w	r4, lr, r2
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800ec14:	ebae 0202 	sub.w	r2, lr, r2
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800ec18:	9102      	str	r1, [sp, #8]
    tmp7 = z11 + z13;		/* phase 5 */
 800ec1a:	eb01 0804 	add.w	r8, r1, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800ec1e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec22:	eb03 0e02 	add.w	lr, r3, r2
 800ec26:	fb01 fe0e 	mul.w	lr, r1, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ec2a:	f46f 7127 	mvn.w	r1, #668	; 0x29c
 800ec2e:	434b      	muls	r3, r1
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800ec30:	9902      	ldr	r1, [sp, #8]
 800ec32:	1a64      	subs	r4, r4, r1
 800ec34:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ec38:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800ec3a:	434c      	muls	r4, r1
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ec3c:	f240 1115 	movw	r1, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ec40:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ec44:	434a      	muls	r2, r1
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800ec46:	994e      	ldr	r1, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800ec48:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ec4c:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800ec4e:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ec52:	eba2 222e 	sub.w	r2, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800ec56:	eb0c 0e08 	add.w	lr, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800ec5a:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 800ec5e:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    tmp4 = tmp10 + tmp5;
 800ec62:	4422      	add	r2, r4
			    & RANGE_MASK];
 800ec64:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800ec68:	f819 e00e 	ldrb.w	lr, [r9, lr]
 800ec6c:	f80a e001 	strb.w	lr, [sl, r1]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800ec70:	f819 c00c 	ldrb.w	ip, [r9, ip]
 800ec74:	f880 c007 	strb.w	ip, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800ec78:	eb07 0c03 	add.w	ip, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800ec7c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800ec7e:	f3cc 1c49 	ubfx	ip, ip, #5, #10
			    & RANGE_MASK];
 800ec82:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800ec86:	f819 c00c 	ldrb.w	ip, [r9, ip]
 800ec8a:	f880 c001 	strb.w	ip, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800ec8e:	f819 3007 	ldrb.w	r3, [r9, r7]
 800ec92:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800ec94:	9b01      	ldr	r3, [sp, #4]
 800ec96:	4423      	add	r3, r4
			    & RANGE_MASK];
 800ec98:	f3c3 1349 	ubfx	r3, r3, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800ec9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eca0:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800eca2:	9b01      	ldr	r3, [sp, #4]
 800eca4:	1b19      	subs	r1, r3, r4
			    & RANGE_MASK];
 800eca6:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800ecaa:	f819 3001 	ldrb.w	r3, [r9, r1]
 800ecae:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800ecb0:	18b3      	adds	r3, r6, r2
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800ecb2:	1ab6      	subs	r6, r6, r2
			    & RANGE_MASK];
 800ecb4:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800ecb8:	f3c6 1649 	ubfx	r6, r6, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800ecbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ecc0:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800ecc2:	f819 3006 	ldrb.w	r3, [r9, r6]
 800ecc6:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800ecc8:	e71b      	b.n	800eb02 <jpeg_idct_ifast+0xce>
	...

0800eccc <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800eccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd0:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800ecd2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 800ecd4:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800ecd6:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ecd8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800ecdc:	3380      	adds	r3, #128	; 0x80
 800ecde:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800ece0:	1e93      	subs	r3, r2, #2
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	f105 0320 	add.w	r3, r5, #32
 800ece8:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800ecea:	9b00      	ldr	r3, [sp, #0]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800ecec:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800ecee:	f855 0b04 	ldr.w	r0, [r5], #4
 800ecf2:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800ecf4:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 800ecf8:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800ecfc:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 800ed00:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ed04:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 800ed08:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800ed0c:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800ed10:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800ed14:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ed16:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800ed1a:	9200      	str	r2, [sp, #0]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ed1c:	ea4e 0000 	orr.w	r0, lr, r0
 800ed20:	4330      	orrs	r0, r6
 800ed22:	ea48 0000 	orr.w	r0, r8, r0
 800ed26:	4320      	orrs	r0, r4
 800ed28:	ea59 0000 	orrs.w	r0, r9, r0
 800ed2c:	d146      	bne.n	800edbc <jpeg_idct_islow+0xf0>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800ed2e:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 800ed30:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800ed34:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800ed36:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800ed38:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800ed3a:	67cb      	str	r3, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800ed3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800ed40:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800ed44:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800ed48:	9b04      	ldr	r3, [sp, #16]
 800ed4a:	42ab      	cmp	r3, r5
 800ed4c:	d1cd      	bne.n	800ecea <jpeg_idct_islow+0x1e>
 800ed4e:	9b03      	ldr	r3, [sp, #12]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800ed50:	ad06      	add	r5, sp, #24
 800ed52:	f1a3 0904 	sub.w	r9, r3, #4
 800ed56:	331c      	adds	r3, #28
 800ed58:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800ed5a:	f859 3f04 	ldr.w	r3, [r9, #4]!
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ed5e:	f8d5 b01c 	ldr.w	fp, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 800ed62:	9300      	str	r3, [sp, #0]
 800ed64:	9a00      	ldr	r2, [sp, #0]
 800ed66:	9b50      	ldr	r3, [sp, #320]	; 0x140
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800ed68:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 800ed6c:	e9d5 e603 	ldrd	lr, r6, [r5, #12]
    outptr = output_buf[ctr] + output_col;
 800ed70:	4413      	add	r3, r2
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ed72:	ea4a 0200 	orr.w	r2, sl, r0
 800ed76:	ea42 020e 	orr.w	r2, r2, lr
 800ed7a:	e9d5 8405 	ldrd	r8, r4, [r5, #20]
 800ed7e:	4332      	orrs	r2, r6
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ed80:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ed84:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ed88:	3110      	adds	r1, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ed8a:	4322      	orrs	r2, r4
 800ed8c:	ea52 020b 	orrs.w	r2, r2, fp
 800ed90:	f040 8092 	bne.w	800eeb8 <jpeg_idct_islow+0x1ec>
				  & RANGE_MASK];
 800ed94:	f3c1 1149 	ubfx	r1, r1, #5, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ed98:	9a01      	ldr	r2, [sp, #4]

      outptr[0] = dcval;
 800ed9a:	9800      	ldr	r0, [sp, #0]
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ed9c:	5c52      	ldrb	r2, [r2, r1]
      outptr[0] = dcval;
 800ed9e:	9950      	ldr	r1, [sp, #320]	; 0x140
 800eda0:	5442      	strb	r2, [r0, r1]
      outptr[1] = dcval;
 800eda2:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800eda4:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800eda6:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800eda8:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800edaa:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800edac:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800edae:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800edb0:	9b05      	ldr	r3, [sp, #20]
 800edb2:	454b      	cmp	r3, r9
 800edb4:	d1d1      	bne.n	800ed5a <jpeg_idct_islow+0x8e>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800edb6:	b047      	add	sp, #284	; 0x11c
 800edb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800edbc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800edbe:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 800edc2:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800edc4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800edc6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800edca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800edce:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800edd0:	183c      	adds	r4, r7, r0
 800edd2:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800edd4:	f641 027e 	movw	r2, #6270	; 0x187e
 800edd8:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800eddc:	4a74      	ldr	r2, [pc, #464]	; (800efb0 <jpeg_idct_islow+0x2e4>)
 800edde:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ede2:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800ede4:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 800ede6:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 800edea:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 800edee:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 800edf2:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800edf4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 800edf8:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 800edfa:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800edfc:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800edfe:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ee02:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ee06:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ee0a:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ee0e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 800ee10:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800ee12:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ee16:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 800ee1a:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 800ee1e:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800ee22:	1930      	adds	r0, r6, r4
 800ee24:	4350      	muls	r0, r2
    z2 += z1;
 800ee26:	4a63      	ldr	r2, [pc, #396]	; (800efb4 <jpeg_idct_islow+0x2e8>)
 800ee28:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 800ee2c:	4a62      	ldr	r2, [pc, #392]	; (800efb8 <jpeg_idct_islow+0x2ec>)
 800ee2e:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800ee32:	eb09 040a 	add.w	r4, r9, sl
 800ee36:	4a61      	ldr	r2, [pc, #388]	; (800efbc <jpeg_idct_islow+0x2f0>)
 800ee38:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 800ee3a:	f640 128e 	movw	r2, #2446	; 0x98e
 800ee3e:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 800ee42:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 800ee44:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 800ee48:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ee4c:	4a5c      	ldr	r2, [pc, #368]	; (800efc0 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 800ee4e:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ee52:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 800ee56:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ee5a:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 800ee5e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 800ee60:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 800ee62:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 800ee66:	f246 2854 	movw	r8, #25172	; 0x6254
 800ee6a:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800ee6e:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800ee72:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800ee76:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800ee78:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800ee7c:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800ee80:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ee84:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ee88:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ee8c:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ee8e:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ee90:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ee92:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ee94:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ee96:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ee9a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ee9c:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ee9e:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800eea0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800eea4:	9b02      	ldr	r3, [sp, #8]
 800eea6:	444b      	add	r3, r9
 800eea8:	12db      	asrs	r3, r3, #11
 800eeaa:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 800eeac:	9b02      	ldr	r3, [sp, #8]
 800eeae:	eba3 0309 	sub.w	r3, r3, r9
 800eeb2:	12db      	asrs	r3, r3, #11
 800eeb4:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 800eeb6:	e747      	b.n	800ed48 <jpeg_idct_islow+0x7c>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800eeb8:	1902      	adds	r2, r0, r4
 800eeba:	f241 1751 	movw	r7, #4433	; 0x1151
 800eebe:	437a      	muls	r2, r7
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800eec0:	f641 077e 	movw	r7, #6270	; 0x187e
 800eec4:	fb07 2000 	mla	r0, r7, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800eec8:	4f39      	ldr	r7, [pc, #228]	; (800efb0 <jpeg_idct_islow+0x2e4>)
 800eeca:	fb07 2204 	mla	r2, r7, r4, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 800eece:	1874      	adds	r4, r6, r1
    tmp1 = (z2 - z3) << CONST_BITS;
 800eed0:	1b89      	subs	r1, r1, r6
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800eed2:	f242 57a1 	movw	r7, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 800eed6:	eb00 3644 	add.w	r6, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 800eeda:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 800eede:	eb0e 040b 	add.w	r4, lr, fp
    tmp10 = tmp0 + tmp2;
 800eee2:	9602      	str	r6, [sp, #8]
    tmp11 = tmp1 + tmp3;
 800eee4:	eb02 3641 	add.w	r6, r2, r1, lsl #13
    tmp13 = tmp0 - tmp2;
 800eee8:	9003      	str	r0, [sp, #12]
    z3 = tmp1 + tmp3;
 800eeea:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 800eeee:	ebc2 3241 	rsb	r2, r2, r1, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800eef2:	1821      	adds	r1, r4, r0
    tmp12 = tmp1 - tmp3;
 800eef4:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800eef6:	4379      	muls	r1, r7
    z2 += z1;
 800eef8:	4f2e      	ldr	r7, [pc, #184]	; (800efb4 <jpeg_idct_islow+0x2e8>)
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800eefa:	9a00      	ldr	r2, [sp, #0]
    z2 += z1;
 800eefc:	fb07 1404 	mla	r4, r7, r4, r1
    z3 += z1;
 800ef00:	4f2d      	ldr	r7, [pc, #180]	; (800efb8 <jpeg_idct_islow+0x2ec>)
 800ef02:	fb07 1100 	mla	r1, r7, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800ef06:	eb0a 000b 	add.w	r0, sl, fp
 800ef0a:	4f2c      	ldr	r7, [pc, #176]	; (800efbc <jpeg_idct_islow+0x2f0>)
 800ef0c:	4378      	muls	r0, r7
    tmp0 += z1 + z2;
 800ef0e:	f640 178e 	movw	r7, #2446	; 0x98e
 800ef12:	eb04 0c00 	add.w	ip, r4, r0
    tmp3 += z1 + z3;
 800ef16:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 800ef18:	fb07 cc0b 	mla	ip, r7, fp, ip
    tmp3 += z1 + z3;
 800ef1c:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ef20:	4f27      	ldr	r7, [pc, #156]	; (800efc0 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 800ef22:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ef26:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 800ef2a:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ef2e:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ef32:	9f02      	ldr	r7, [sp, #8]
    tmp1 += z1 + z3;
 800ef34:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 800ef36:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 800ef38:	fb0b 1108 	mla	r1, fp, r8, r1
    tmp2 += z1 + z2;
 800ef3c:	f246 2854 	movw	r8, #25172	; 0x6254
 800ef40:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ef44:	eb07 0e00 	add.w	lr, r7, r0
 800ef48:	9f01      	ldr	r7, [sp, #4]
			    & RANGE_MASK];
 800ef4a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ef4e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800ef52:	9f50      	ldr	r7, [sp, #320]	; 0x140
 800ef54:	f802 e007 	strb.w	lr, [r2, r7]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800ef58:	9f02      	ldr	r7, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800ef5a:	9a04      	ldr	r2, [sp, #16]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800ef5c:	1a3f      	subs	r7, r7, r0
 800ef5e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 800ef60:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800ef64:	5dc0      	ldrb	r0, [r0, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800ef66:	9f01      	ldr	r7, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800ef68:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800ef6a:	1930      	adds	r0, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800ef6c:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 800ef6e:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800ef72:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800ef76:	5c38      	ldrb	r0, [r7, r0]
 800ef78:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800ef7a:	5db8      	ldrb	r0, [r7, r6]
 800ef7c:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800ef7e:	1850      	adds	r0, r2, r1
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800ef80:	1a52      	subs	r2, r2, r1
			    & RANGE_MASK];
 800ef82:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800ef86:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800ef8a:	5c38      	ldrb	r0, [r7, r0]
 800ef8c:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800ef8e:	5cba      	ldrb	r2, [r7, r2]
 800ef90:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800ef92:	9a03      	ldr	r2, [sp, #12]
 800ef94:	4462      	add	r2, ip
			    & RANGE_MASK];
 800ef96:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800ef9a:	5cba      	ldrb	r2, [r7, r2]
 800ef9c:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800ef9e:	9a03      	ldr	r2, [sp, #12]
 800efa0:	eba2 020c 	sub.w	r2, r2, ip
			    & RANGE_MASK];
 800efa4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800efa8:	5cba      	ldrb	r2, [r7, r2]
 800efaa:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800efac:	e700      	b.n	800edb0 <jpeg_idct_islow+0xe4>
 800efae:	bf00      	nop
 800efb0:	ffffc4df 	.word	0xffffc4df
 800efb4:	ffffc13b 	.word	0xffffc13b
 800efb8:	fffff384 	.word	0xfffff384
 800efbc:	ffffe333 	.word	0xffffe333
 800efc0:	ffffadfd 	.word	0xffffadfd

0800efc4 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800efc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc8:	b0b9      	sub	sp, #228	; 0xe4
 800efca:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800efcc:	1e96      	subs	r6, r2, #2
 800efce:	9303      	str	r3, [sp, #12]
 800efd0:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800efd2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800efd6:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800efda:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800efde:	f102 030c 	add.w	r3, r2, #12
 800efe2:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800efe4:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800efe8:	f640 2112 	movw	r1, #2578	; 0xa12
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800efec:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800eff0:	f642 09c6 	movw	r9, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800eff4:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800eff8:	f10c 0c04 	add.w	ip, ip, #4
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800effc:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800effe:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f002:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 800f006:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f00c:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f00e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f010:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f012:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800f016:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f01a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 800f01e:	435a      	muls	r2, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800f020:	f641 4337 	movw	r3, #7223	; 0x1c37
 800f024:	ebae 0702 	sub.w	r7, lr, r2
 800f028:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800f02a:	eba4 030e 	sub.w	r3, r4, lr
 800f02e:	434b      	muls	r3, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800f030:	9901      	ldr	r1, [sp, #4]
 800f032:	18f8      	adds	r0, r7, r3
 800f034:	4408      	add	r0, r1
 800f036:	4985      	ldr	r1, [pc, #532]	; (800f24c <jpeg_idct_7x7+0x288>)
 800f038:	fb01 010e 	mla	r1, r1, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800f03c:	18a0      	adds	r0, r4, r2
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800f03e:	9102      	str	r1, [sp, #8]
    tmp0 = z1 + z3;
 800f040:	18a1      	adds	r1, r4, r2
 800f042:	9104      	str	r1, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800f044:	9901      	ldr	r1, [sp, #4]
 800f046:	fb09 1100 	mla	r1, r9, r0, r1
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800f04a:	f46f 701f 	mvn.w	r0, #636	; 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f04e:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800f052:	fb00 1202 	mla	r2, r0, r2, r1
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800f056:	487e      	ldr	r0, [pc, #504]	; (800f250 <jpeg_idct_7x7+0x28c>)
 800f058:	fb00 1104 	mla	r1, r0, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f05c:	6a2c      	ldr	r4, [r5, #32]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800f05e:	443a      	add	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f060:	6e2f      	ldr	r7, [r5, #96]	; 0x60
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800f062:	4419      	add	r1, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f064:	f9b6 3010 	ldrsh.w	r3, [r6, #16]

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800f068:	f641 50ef 	movw	r0, #7663	; 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f06c:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f06e:	f9b6 4030 	ldrsh.w	r4, [r6, #48]	; 0x30
 800f072:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f074:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800f078:	eb03 0b04 	add.w	fp, r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f07c:	fb07 f909 	mul.w	r9, r7, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f080:	1b1f      	subs	r7, r3, r4
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800f082:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f086:	f240 5073 	movw	r0, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f08a:	444b      	add	r3, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f08c:	444c      	add	r4, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f08e:	4347      	muls	r7, r0
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f090:	4870      	ldr	r0, [pc, #448]	; (800f254 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 800f092:	ebab 0a07 	sub.w	sl, fp, r7
    tmp1 += tmp2;
 800f096:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f098:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f09c:	4344      	muls	r4, r0
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f09e:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800f0a2:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800f0a6:	4427      	add	r7, r4
    tmp0 += z2;
 800f0a8:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800f0aa:	fb0b 3309 	mla	r3, fp, r9, r3
 800f0ae:	4423      	add	r3, r4

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f0b0:	eb02 040a 	add.w	r4, r2, sl
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f0b4:	eba2 020a 	sub.w	r2, r2, sl
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f0b8:	12e4      	asrs	r4, r4, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f0ba:	12d2      	asrs	r2, r2, #11
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f0bc:	f84c 4c04 	str.w	r4, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f0c0:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f0c4:	9a02      	ldr	r2, [sp, #8]
 800f0c6:	443a      	add	r2, r7
 800f0c8:	12d2      	asrs	r2, r2, #11
 800f0ca:	f8cc 2018 	str.w	r2, [ip, #24]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f0ce:	9a02      	ldr	r2, [sp, #8]
 800f0d0:	1bd0      	subs	r0, r2, r7
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f0d2:	18ca      	adds	r2, r1, r3
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f0d4:	1ac9      	subs	r1, r1, r3
    z2 -= tmp0;
 800f0d6:	9b04      	ldr	r3, [sp, #16]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f0d8:	12d2      	asrs	r2, r2, #11
    z2 -= tmp0;
 800f0da:	ebae 0e03 	sub.w	lr, lr, r3
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800f0de:	f642 5341 	movw	r3, #11585	; 0x2d41
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f0e2:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f0e6:	12c0      	asrs	r0, r0, #11
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800f0e8:	9a01      	ldr	r2, [sp, #4]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f0ea:	12c9      	asrs	r1, r1, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f0ec:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800f0f0:	fb03 230e 	mla	r3, r3, lr, r2
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f0f4:	f8cc 106c 	str.w	r1, [ip, #108]	; 0x6c
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 800f0f8:	12db      	asrs	r3, r3, #11
 800f0fa:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800f0fe:	9b05      	ldr	r3, [sp, #20]
 800f100:	42b3      	cmp	r3, r6
 800f102:	f47f af6f 	bne.w	800efe4 <jpeg_idct_7x7+0x20>
 800f106:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 800f108:	ac07      	add	r4, sp, #28
 800f10a:	f1a3 0904 	sub.w	r9, r3, #4
 800f10e:	3318      	adds	r3, #24
 800f110:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f112:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 800f116:	341c      	adds	r4, #28
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f118:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 800f11c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800f11e:	9303      	str	r3, [sp, #12]
 800f120:	189e      	adds	r6, r3, r2
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f122:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 800f126:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f12a:	9301      	str	r3, [sp, #4]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800f12c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 800f130:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800f134:	eba3 0c01 	sub.w	ip, r3, r1
 800f138:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800f13c:	4f43      	ldr	r7, [pc, #268]	; (800f24c <jpeg_idct_7x7+0x288>)
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800f13e:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800f142:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 800f146:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800f14a:	1aea      	subs	r2, r5, r3
 800f14c:	f640 2312 	movw	r3, #2578	; 0xa12
    z3 = (INT32) wsptr[5];
 800f150:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800f154:	435a      	muls	r2, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800f156:	9b01      	ldr	r3, [sp, #4]
 800f158:	eb0c 0002 	add.w	r0, ip, r2
 800f15c:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 800f160:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800f164:	fb07 0003 	mla	r0, r7, r3, r0
    tmp0 = z1 + z3;
 800f168:	186b      	adds	r3, r5, r1
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800f16a:	f642 07c6 	movw	r7, #10438	; 0x28c6
    tmp0 = z1 + z3;
 800f16e:	9304      	str	r3, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800f170:	437b      	muls	r3, r7
 800f172:	9f01      	ldr	r7, [sp, #4]
 800f174:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800f178:	f46f 771f 	mvn.w	r7, #636	; 0x27c
 800f17c:	fb07 3101 	mla	r1, r7, r1, r3
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800f180:	4f33      	ldr	r7, [pc, #204]	; (800f250 <jpeg_idct_7x7+0x28c>)
 800f182:	fb07 3305 	mla	r3, r7, r5, r3
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f186:	f240 5773 	movw	r7, #1395	; 0x573
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800f18a:	4461      	add	r1, ip
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800f18c:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 800f18e:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800f192:	9302      	str	r3, [sp, #8]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800f194:	eb02 0b0a 	add.w	fp, r2, sl
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f198:	eba2 050a 	sub.w	r5, r2, sl
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800f19c:	f641 53ef 	movw	r3, #7663	; 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f1a0:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f1a2:	44f2      	add	sl, lr
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800f1a4:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f1a8:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f1aa:	437d      	muls	r5, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f1ac:	4f29      	ldr	r7, [pc, #164]	; (800f254 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 800f1ae:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 800f1b2:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f1b4:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f1b8:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f1bc:	9f03      	ldr	r7, [sp, #12]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f1be:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800f1c2:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800f1c6:	4455      	add	r5, sl
    tmp0 += z2;
 800f1c8:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800f1ca:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f1ce:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f1d2:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800f1d6:	4452      	add	r2, sl
			    & RANGE_MASK];
 800f1d8:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 800f1dc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f1e0:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800f1e4:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f1e8:	f818 1001 	ldrb.w	r1, [r8, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f1ec:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f1ee:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f1f0:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f1f2:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 800f1f4:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 800f1f8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f1fc:	f818 1001 	ldrb.w	r1, [r8, r1]
 800f200:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f202:	f818 1000 	ldrb.w	r1, [r8, r0]
 800f206:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f208:	1899      	adds	r1, r3, r2
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f20a:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 800f20c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 800f210:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f214:	f818 1001 	ldrb.w	r1, [r8, r1]
 800f218:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f21a:	f818 3003 	ldrb.w	r3, [r8, r3]
 800f21e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 800f220:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800f224:	9a04      	ldr	r2, [sp, #16]
 800f226:	1a9b      	subs	r3, r3, r2
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800f228:	f642 5241 	movw	r2, #11585	; 0x2d41
 800f22c:	4353      	muls	r3, r2
 800f22e:	9a01      	ldr	r2, [sp, #4]
 800f230:	eb03 3342 	add.w	r3, r3, r2, lsl #13
			    & RANGE_MASK];
 800f234:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 800f238:	f818 3003 	ldrb.w	r3, [r8, r3]
 800f23c:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 800f23e:	9b05      	ldr	r3, [sp, #20]
 800f240:	454b      	cmp	r3, r9
 800f242:	f47f af66 	bne.w	800f112 <jpeg_idct_7x7+0x14e>
  }
}
 800f246:	b039      	add	sp, #228	; 0xe4
 800f248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24c:	ffffc515 	.word	0xffffc515
 800f250:	ffffb0f1 	.word	0xffffb0f1
 800f254:	ffffd3e1 	.word	0xffffd3e1

0800f258 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f25c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800f260:	b0a7      	sub	sp, #156	; 0x9c
 800f262:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f264:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f266:	3080      	adds	r0, #128	; 0x80
 800f268:	320a      	adds	r2, #10
 800f26a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f26c:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f26e:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f270:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f272:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f276:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f27a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f27e:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f280:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f284:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f286:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f28a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f28e:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 800f290:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f292:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f296:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f29a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f29e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f2a2:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 800f2a4:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 800f2a6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f2aa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800f2ac:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f2b0:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f2b2:	6a28      	ldr	r0, [r5, #32]
    tmp10 = tmp1 + tmp0;
 800f2b4:	eb04 0e02 	add.w	lr, r4, r2
    tmp12 = tmp1 - tmp0;
 800f2b8:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f2ba:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 800f2be:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f2c0:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800f2c2:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f2c6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 800f2ca:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f2ce:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f2d2:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f2d6:	eb02 0c08 	add.w	ip, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800f2da:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f2de:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f2e2:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800f2e6:	eba2 0208 	sub.w	r2, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f2ea:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800f2ee:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f2f0:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f2f4:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f2f8:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f2fc:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f300:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f304:	f8c7 e074 	str.w	lr, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800f308:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800f30c:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f310:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800f314:	f8c7 e014 	str.w	lr, [r7, #20]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800f318:	65fa      	str	r2, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f31a:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f31e:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f322:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f324:	12e4      	asrs	r4, r4, #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f326:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f328:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f32a:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f32c:	42b2      	cmp	r2, r6
 800f32e:	d1a0      	bne.n	800f272 <jpeg_idct_6x6+0x1a>
 800f330:	f1a3 0e04 	sub.w	lr, r3, #4
 800f334:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 800f338:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f33a:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f33e:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 800f342:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 800f344:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f346:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 800f34a:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 800f34c:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f350:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f354:	fb00 f402 	mul.w	r4, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f358:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f35c:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 800f360:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = tmp0 + tmp10;
 800f364:	eb04 3243 	add.w	r2, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 800f368:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 800f36c:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f370:	f851 4c10 	ldr.w	r4, [r1, #-16]
 800f374:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f378:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp1 + tmp0;
 800f37c:	eb02 0604 	add.w	r6, r2, r4
    tmp12 = tmp1 - tmp0;
 800f380:	eba2 0204 	sub.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 800f384:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f388:	eb04 0508 	add.w	r5, r4, r8
 800f38c:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f390:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800f394:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800f398:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f39c:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f3a0:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f3a2:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800f3a6:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f3aa:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f3ae:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f3b2:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 800f3b6:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 800f3ba:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f3be:	f810 8008 	ldrb.w	r8, [r0, r8]
 800f3c2:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800f3c4:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f3c8:	9800      	ldr	r0, [sp, #0]
 800f3ca:	5d86      	ldrb	r6, [r0, r6]
 800f3cc:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f3ce:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f3d2:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 800f3d6:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 800f3da:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f3de:	5d86      	ldrb	r6, [r0, r6]
 800f3e0:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f3e2:	5cc3      	ldrb	r3, [r0, r3]
 800f3e4:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f3e6:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f3ea:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 800f3ee:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 800f3f2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f3f6:	5cc3      	ldrb	r3, [r0, r3]
 800f3f8:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f3fa:	5c83      	ldrb	r3, [r0, r2]
 800f3fc:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 800f3fe:	d19c      	bne.n	800f33a <jpeg_idct_6x6+0xe2>
  }
}
 800f400:	b027      	add	sp, #156	; 0x9c
 800f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f408 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f40c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800f410:	b09d      	sub	sp, #116	; 0x74
 800f412:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f414:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f416:	3080      	adds	r0, #128	; 0x80
 800f418:	3208      	adds	r2, #8
 800f41a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f41c:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f41e:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f422:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f426:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f428:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f42a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f42e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f430:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f434:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f438:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f43a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800f43c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f440:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 800f442:	0352      	lsls	r2, r2, #13
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f444:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f446:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f44a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f44e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f452:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f456:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f45a:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f45e:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f460:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f464:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f466:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f46a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f46e:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f472:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 800f476:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 800f478:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 800f47c:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 800f480:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f484:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 800f488:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f48a:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f48e:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 800f492:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f494:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800f498:	483a      	ldr	r0, [pc, #232]	; (800f584 <jpeg_idct_5x5+0x17c>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f49a:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800f49c:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f4a0:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f4a4:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f4a8:	42b2      	cmp	r2, r6
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f4aa:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f4ae:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f4b2:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f4b6:	f8c7 904c 	str.w	r9, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f4ba:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f4be:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f4c2:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f4c6:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f4ca:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f4ce:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f4d0:	d1ab      	bne.n	800f42a <jpeg_idct_5x5+0x22>
 800f4d2:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 800f4d6:	a903      	add	r1, sp, #12
 800f4d8:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f4da:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f4de:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 800f4e2:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 800f4e4:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f4e8:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 800f4ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 800f4ee:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 800f4f0:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 800f4f4:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f4f8:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 800f4fc:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f500:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 800f504:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 800f508:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f50c:	189c      	adds	r4, r3, r2
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f50e:	1a9b      	subs	r3, r3, r2
 800f510:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f514:	fb0a f404 	mul.w	r4, sl, r4
    z3 = tmp12 + z2;
 800f518:	eb03 324c 	add.w	r2, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 800f51c:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 800f51e:	18a5      	adds	r5, r4, r2
    tmp11 = z3 - z1;
 800f520:	1b12      	subs	r2, r2, r4
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f522:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 800f526:	ebc3 334c 	rsb	r3, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f52a:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f52c:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 800f530:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f534:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800f538:	4812      	ldr	r0, [pc, #72]	; (800f584 <jpeg_idct_5x5+0x17c>)
 800f53a:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f53e:	eb05 0b06 	add.w	fp, r5, r6
 800f542:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f544:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 800f546:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 800f54a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f54e:	f810 b00b 	ldrb.w	fp, [r0, fp]
 800f552:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f554:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f558:	9800      	ldr	r0, [sp, #0]
 800f55a:	5d45      	ldrb	r5, [r0, r5]
 800f55c:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f55e:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f560:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 800f562:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 800f566:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f56a:	5d45      	ldrb	r5, [r0, r5]
 800f56c:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f56e:	5c82      	ldrb	r2, [r0, r2]
 800f570:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 800f572:	5cc3      	ldrb	r3, [r0, r3]
 800f574:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 800f576:	9b01      	ldr	r3, [sp, #4]
 800f578:	4573      	cmp	r3, lr
 800f57a:	d1b3      	bne.n	800f4e4 <jpeg_idct_5x5+0xdc>
  }
}
 800f57c:	b01d      	add	sp, #116	; 0x74
 800f57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f582:	bf00      	nop
 800f584:	ffffba5c 	.word	0xffffba5c

0800f588 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f58c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
{
 800f590:	b093      	sub	sp, #76	; 0x4c
 800f592:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f594:	1e97      	subs	r7, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f596:	3680      	adds	r6, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800f598:	3206      	adds	r2, #6
 800f59a:	3d04      	subs	r5, #4
  wsptr = workspace;
 800f59c:	a802      	add	r0, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 800f59e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 800f5a2:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 800f5a6:	f8df c108 	ldr.w	ip, [pc, #264]	; 800f6b0 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f5aa:	f937 4f02 	ldrsh.w	r4, [r7, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800f5ae:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f5b0:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f5b4:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800f5b8:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f5ba:	fb01 f404 	mul.w	r4, r1, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f5be:	6c29      	ldr	r1, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f5c0:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f5c4:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f5c8:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 800f5cc:	eb04 0901 	add.w	r9, r4, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 800f5d0:	eba4 0401 	sub.w	r4, r4, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f5d4:	6a29      	ldr	r1, [r5, #32]
 800f5d6:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f5da:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800f5dc:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 800f5e0:	eb0a 010b 	add.w	r1, sl, fp
 800f5e4:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f5e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 800f5ec:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 800f5f0:	fb0c 110b 	mla	r1, ip, fp, r1
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 800f5f4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 800f5f8:	ea4f 21e1 	mov.w	r1, r1, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 800f5fc:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 800f600:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 800f604:	eb01 0984 	add.w	r9, r1, r4, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 800f608:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 800f60c:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 800f610:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 800f614:	f8c0 900c 	str.w	r9, [r0, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 800f618:	61c1      	str	r1, [r0, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800f61a:	d1c6      	bne.n	800f5aa <jpeg_idct_4x4+0x22>
 800f61c:	1f1d      	subs	r5, r3, #4
 800f61e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 800f622:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 800f624:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 800f628:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 800f62c:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f6b0 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 800f630:	f855 3f04 	ldr.w	r3, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 800f634:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 800f636:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f638:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 800f63c:	45ac      	cmp	ip, r5
    outptr = output_buf[ctr] + output_col;
 800f63e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 800f642:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 800f646:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f64a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 800f64e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 800f652:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 800f656:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 800f65a:	eb01 020b 	add.w	r2, r1, fp
 800f65e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 800f662:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 800f666:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f66a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f66e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 800f672:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 800f674:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f678:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 800f67a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f67e:	f816 b00b 	ldrb.w	fp, [r6, fp]
 800f682:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f686:	5c73      	ldrb	r3, [r6, r1]
 800f688:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f68a:	9b01      	ldr	r3, [sp, #4]
 800f68c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 800f690:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f694:	5cf3      	ldrb	r3, [r6, r3]
 800f696:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f698:	9b01      	ldr	r3, [sp, #4]
 800f69a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 800f69e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f6a2:	5cb3      	ldrb	r3, [r6, r2]
 800f6a4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 800f6a6:	d1c3      	bne.n	800f630 <jpeg_idct_4x4+0xa8>
  }
}
 800f6a8:	b013      	add	sp, #76	; 0x4c
 800f6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ae:	bf00      	nop
 800f6b0:	ffffc4df 	.word	0xffffc4df

0800f6b4 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f6ba:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 800f6be:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800f6c0:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f6c4:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f6c6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f6ca:	f1a1 0c04 	sub.w	ip, r1, #4
 800f6ce:	3204      	adds	r2, #4
 800f6d0:	4620      	mov	r0, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f6d2:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f6d6:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f6da:	f938 1f02 	ldrsh.w	r1, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f6de:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f6e0:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f6e4:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f6e8:	4542      	cmp	r2, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f6ea:	fb05 f101 	mul.w	r1, r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f6ee:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
 800f6f2:	f9b8 5020 	ldrsh.w	r5, [r8, #32]
    tmp0 <<= CONST_BITS;
 800f6f6:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f6fa:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f6fe:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f702:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f706:	fb07 f70b 	mul.w	r7, r7, fp
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f70a:	fb0a f505 	mul.w	r5, sl, r5
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f70e:	fb09 f707 	mul.w	r7, r9, r7
    tmp10 = tmp0 + tmp12;
 800f712:	eb01 0605 	add.w	r6, r1, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 800f716:	eba1 0145 	sub.w	r1, r1, r5, lsl #1

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f71a:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f71e:	eba6 0607 	sub.w	r6, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 800f722:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f726:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f72a:	ea4f 26e6 	mov.w	r6, r6, asr #11
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 800f72e:	60a1      	str	r1, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f730:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f734:	6166      	str	r6, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f736:	d1d0      	bne.n	800f6da <jpeg_idct_3x3+0x26>
 800f738:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f73a:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 800f73e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f740:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 800f744:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 800f748:	300c      	adds	r0, #12
    outptr = output_buf[ctr] + output_col;
 800f74a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f74c:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 800f750:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 800f752:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f756:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f75a:	fb0c f101 	mul.w	r1, ip, r1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f75e:	f850 4c08 	ldr.w	r4, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f762:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f766:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f768:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 800f76c:	eb01 3842 	add.w	r8, r1, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 800f770:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f774:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f778:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 800f77c:	eba2 0201 	sub.w	r2, r2, r1
			    & RANGE_MASK];
 800f780:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 800f784:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 800f788:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f78c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 800f790:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f794:	f81e 4008 	ldrb.w	r4, [lr, r8]
 800f798:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 800f79a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800f79e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 800f7a0:	d1d0      	bne.n	800f744 <jpeg_idct_3x3+0x90>
  }
}
 800f7a2:	b00b      	add	sp, #44	; 0x2c
 800f7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f7a8 <jpeg_idct_2x2>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800f7a8:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f7ac:	f9b2 1000 	ldrsh.w	r1, [r2]
{
 800f7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f7b2:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f7b6:	f8dc 0000 	ldr.w	r0, [ip]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f7ba:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f7be:	3680      	adds	r6, #128	; 0x80
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f7c0:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f7c2:	f8dc 0020 	ldr.w	r0, [ip, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 800f7c6:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f7ca:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 800f7cc:	3104      	adds	r1, #4
{
 800f7ce:	9f05      	ldr	r7, [sp, #20]
  tmp0 = tmp4 + tmp5;
 800f7d0:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 800f7d2:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 800f7d4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f7d8:	4365      	muls	r5, r4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 800f7da:	f9b2 4012 	ldrsh.w	r4, [r2, #18]
 800f7de:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 800f7e2:	4354      	muls	r4, r2

  tmp1 = tmp4 + tmp5;
 800f7e4:	eb05 0c04 	add.w	ip, r5, r4
  tmp3 = tmp4 - tmp5;
 800f7e8:	1b2a      	subs	r2, r5, r4

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 800f7ea:	681d      	ldr	r5, [r3, #0]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 800f7ec:	eb00 040c 	add.w	r4, r0, ip
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 800f7f0:	eba0 000c 	sub.w	r0, r0, ip
  outptr = output_buf[0] + output_col;
 800f7f4:	eb05 0e07 	add.w	lr, r5, r7
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 800f7f8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 800f7fc:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 800f800:	5d34      	ldrb	r4, [r6, r4]
 800f802:	55ec      	strb	r4, [r5, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 800f804:	5c30      	ldrb	r0, [r6, r0]
 800f806:	f88e 0001 	strb.w	r0, [lr, #1]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 800f80a:	6858      	ldr	r0, [r3, #4]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 800f80c:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 800f80e:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 800f810:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr = output_buf[1] + output_col;
 800f814:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 800f816:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 800f81a:	5cf3      	ldrb	r3, [r6, r3]
 800f81c:	55c3      	strb	r3, [r0, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 800f81e:	5c73      	ldrb	r3, [r6, r1]
 800f820:	7063      	strb	r3, [r4, #1]
}
 800f822:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f824 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 800f824:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800f826:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f82a:	6809      	ldr	r1, [r1, #0]
 800f82c:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 800f82e:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 800f832:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 800f834:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800f838:	440a      	add	r2, r1
 800f83a:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	9b00      	ldr	r3, [sp, #0]
 800f842:	54d1      	strb	r1, [r2, r3]
}
 800f844:	4770      	bx	lr
	...

0800f848 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84c:	b0d1      	sub	sp, #324	; 0x144
 800f84e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 800f850:	f1a2 0e02 	sub.w	lr, r2, #2
 800f854:	9306      	str	r3, [sp, #24]
 800f856:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f858:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f85c:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f85e:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f862:	f102 030e 	add.w	r3, r2, #14
 800f866:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f868:	f93e 5f02 	ldrsh.w	r5, [lr, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f86c:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f86e:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f872:	f9be 1020 	ldrsh.w	r1, [lr, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f876:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f878:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f87a:	f9be 2040 	ldrsh.w	r2, [lr, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f87e:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f880:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f884:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp0 <<= CONST_BITS;
 800f888:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f88a:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f88c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f890:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f894:	f9be c050 	ldrsh.w	ip, [lr, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f898:	4373      	muls	r3, r6
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f89a:	f241 66a1 	movw	r6, #5793	; 0x16a1
 800f89e:	4373      	muls	r3, r6
    tmp1 = tmp0 + tmp3;
 800f8a0:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 800f8a2:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 800f8a6:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 800f8a8:	1a8b      	subs	r3, r1, r2
 800f8aa:	4373      	muls	r3, r6
 800f8ac:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 800f8ae:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 800f8b2:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 800f8b4:	188b      	adds	r3, r1, r2
 800f8b6:	f642 2587 	movw	r5, #10887	; 0x2a87
 800f8ba:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 800f8bc:	f242 25ab 	movw	r5, #8875	; 0x22ab
 800f8c0:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 800f8c2:	f240 75dc 	movw	r5, #2012	; 0x7dc
 800f8c6:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 800f8c8:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 800f8ca:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 800f8cc:	1a7f      	subs	r7, r7, r1
    tmp10 = tmp1 + tmp0 - tmp3;
 800f8ce:	1aad      	subs	r5, r5, r2
    tmp13 = tmp1 - tmp2 + tmp3;
 800f8d0:	18ba      	adds	r2, r7, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 800f8d2:	440b      	add	r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f8d4:	f9be 1010 	ldrsh.w	r1, [lr, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 800f8d8:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f8da:	6a22      	ldr	r2, [r4, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f8dc:	6e27      	ldr	r7, [r4, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f8de:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f8e0:	f9be 2030 	ldrsh.w	r2, [lr, #48]	; 0x30
    tmp12 = tmp1 - tmp0 + tmp2;
 800f8e4:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f8e6:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f8e8:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f8ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f8f0:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f8f4:	f9be 7070 	ldrsh.w	r7, [lr, #112]	; 0x70
    tmp10 = tmp1 + tmp0 - tmp3;
 800f8f8:	9503      	str	r5, [sp, #12]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f8fa:	f642 4591 	movw	r5, #11409	; 0x2c91
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f8fe:	435f      	muls	r7, r3
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800f900:	4b81      	ldr	r3, [pc, #516]	; (800fb08 <jpeg_idct_9x9+0x2c0>)
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f902:	eb01 0b0c 	add.w	fp, r1, ip
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800f906:	435a      	muls	r2, r3
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f908:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f90c:	eb01 0907 	add.w	r9, r1, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f910:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f914:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f918:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f91c:	1bc9      	subs	r1, r1, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f91e:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f922:	ebac 0307 	sub.w	r3, ip, r7
 800f926:	436b      	muls	r3, r5
    tmp0 = tmp2 + tmp3 - z2;
 800f928:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f92c:	461d      	mov	r5, r3
    tmp2 += z2 - tmp1;
 800f92e:	1ad3      	subs	r3, r2, r3
    tmp0 = tmp2 + tmp3 - z2;
 800f930:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 800f934:	449b      	add	fp, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f936:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp3 += z2 + tmp1;
 800f93a:	442a      	add	r2, r5
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f93c:	4359      	muls	r1, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f93e:	9b03      	ldr	r3, [sp, #12]
    tmp3 += z2 + tmp1;
 800f940:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f942:	eba3 0508 	sub.w	r5, r3, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f946:	eb03 0708 	add.w	r7, r3, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f94a:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f94c:	12ed      	asrs	r5, r5, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f94e:	12ff      	asrs	r7, r7, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f950:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f954:	1875      	adds	r5, r6, r1
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f956:	1a76      	subs	r6, r6, r1
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f958:	eb03 010b 	add.w	r1, r3, fp
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f95c:	eba3 030b 	sub.w	r3, r3, fp
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f960:	12ed      	asrs	r5, r5, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f962:	12f6      	asrs	r6, r6, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f964:	f840 7c04 	str.w	r7, [r0, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f968:	12db      	asrs	r3, r3, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f96a:	61c5      	str	r5, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f96c:	12c9      	asrs	r1, r1, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f96e:	f8c0 60dc 	str.w	r6, [r0, #220]	; 0xdc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f972:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 800f976:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f978:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 800f97a:	4413      	add	r3, r2
 800f97c:	12db      	asrs	r3, r3, #11
 800f97e:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 800f980:	9b05      	ldr	r3, [sp, #20]
 800f982:	1a9b      	subs	r3, r3, r2
 800f984:	12db      	asrs	r3, r3, #11
 800f986:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 800f98a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800f98e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 800f992:	12db      	asrs	r3, r3, #11
 800f994:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f996:	9b07      	ldr	r3, [sp, #28]
 800f998:	4573      	cmp	r3, lr
 800f99a:	f47f af65 	bne.w	800f868 <jpeg_idct_9x9+0x20>
 800f99e:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 800f9a0:	aa08      	add	r2, sp, #32
 800f9a2:	f1a3 0904 	sub.w	r9, r3, #4
 800f9a6:	3320      	adds	r3, #32
 800f9a8:	9306      	str	r3, [sp, #24]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f9aa:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f9ae:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 800f9b2:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 800f9b4:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 800f9b6:	9305      	str	r3, [sp, #20]
 800f9b8:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f9ba:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z1 = (INT32) wsptr[2];
 800f9be:	f852 0c18 	ldr.w	r0, [r2, #-24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f9c2:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f9c6:	f852 3c08 	ldr.w	r3, [r2, #-8]
    z2 = (INT32) wsptr[4];
 800f9ca:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f9ce:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 800f9d2:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 800f9d6:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp2 = tmp0 - tmp3 - tmp3;
 800f9da:	1b9b      	subs	r3, r3, r6
 800f9dc:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 800f9de:	1a43      	subs	r3, r0, r1
 800f9e0:	fb0c f303 	mul.w	r3, ip, r3
 800f9e4:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 800f9e6:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 800f9ea:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 800f9ec:	1843      	adds	r3, r0, r1
 800f9ee:	f642 2587 	movw	r5, #10887	; 0x2a87
 800f9f2:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 800f9f4:	f242 25ab 	movw	r5, #8875	; 0x22ab
 800f9f8:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 800f9fa:	f240 75dc 	movw	r5, #2012	; 0x7dc
 800f9fe:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 800fa00:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 800fa02:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 800fa04:	1a3f      	subs	r7, r7, r0
    tmp10 = tmp1 + tmp0 - tmp3;
 800fa06:	1a6d      	subs	r5, r5, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 800fa08:	1879      	adds	r1, r7, r1
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800fa0a:	4f3f      	ldr	r7, [pc, #252]	; (800fb08 <jpeg_idct_9x9+0x2c0>)
    tmp12 = tmp1 - tmp0 + tmp2;
 800fa0c:	4403      	add	r3, r0
    z1 = (INT32) wsptr[1];
 800fa0e:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp13 = tmp1 - tmp2 + tmp3;
 800fa12:	9104      	str	r1, [sp, #16]
    z2 = (INT32) wsptr[3];
 800fa14:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp12 = tmp1 - tmp0 + tmp2;
 800fa18:	9303      	str	r3, [sp, #12]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800fa1a:	f641 5317 	movw	r3, #7447	; 0x1d17
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800fa1e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800fa20:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800fa24:	eb00 0b07 	add.w	fp, r0, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800fa28:	f852 7c04 	ldr.w	r7, [r2, #-4]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800fa2c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800fa30:	eb00 0e07 	add.w	lr, r0, r7
 800fa34:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800fa38:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800fa3c:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800fa40:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800fa44:	eba7 0803 	sub.w	r8, r7, r3
 800fa48:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 800fa4c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800fa50:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800fa54:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 800fa58:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 800fa5c:	eba1 0708 	sub.w	r7, r1, r8
    tmp3 += z2 + tmp1;
 800fa60:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800fa62:	1ac0      	subs	r0, r0, r3
 800fa64:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp3 += z2 + tmp1;
 800fa68:	eb01 080e 	add.w	r8, r1, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fa6c:	eb05 0e0c 	add.w	lr, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800fa70:	1ac0      	subs	r0, r0, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fa72:	eba5 050c 	sub.w	r5, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800fa76:	f242 7331 	movw	r3, #10033	; 0x2731
			    & RANGE_MASK];
 800fa7a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fa7e:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 800fa80:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fa84:	f81a e00e 	ldrb.w	lr, [sl, lr]
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800fa88:	4358      	muls	r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fa8a:	9b05      	ldr	r3, [sp, #20]
    tmp2 += z2 - tmp1;
 800fa8c:	445f      	add	r7, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fa8e:	f803 e001 	strb.w	lr, [r3, r1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fa92:	f81a 5005 	ldrb.w	r5, [sl, r5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fa96:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fa98:	7225      	strb	r5, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800fa9a:	1835      	adds	r5, r6, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fa9c:	1a36      	subs	r6, r6, r0
			    & RANGE_MASK];
 800fa9e:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 800faa2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800faa6:	f81a 5005 	ldrb.w	r5, [sl, r5]
 800faaa:	7065      	strb	r5, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800faac:	f81a 0006 	ldrb.w	r0, [sl, r6]
 800fab0:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fab2:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fab4:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 800fab6:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800faba:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fabe:	f81a 0000 	ldrb.w	r0, [sl, r0]
 800fac2:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fac4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800fac8:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 800faca:	9b04      	ldr	r3, [sp, #16]
 800facc:	4443      	add	r3, r8
			    & RANGE_MASK];
 800face:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 800fad2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800fad6:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 800fad8:	9b04      	ldr	r3, [sp, #16]
 800fada:	eba3 0308 	sub.w	r3, r3, r8
			    & RANGE_MASK];
 800fade:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 800fae2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800fae6:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 800fae8:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 800faec:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
			    & RANGE_MASK];
 800faf0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 800faf4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800faf8:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 800fafa:	9b06      	ldr	r3, [sp, #24]
 800fafc:	454b      	cmp	r3, r9
 800fafe:	f47f af54 	bne.w	800f9aa <jpeg_idct_9x9+0x162>
  }
}
 800fb02:	b051      	add	sp, #324	; 0x144
 800fb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb08:	ffffd8cf 	.word	0xffffd8cf

0800fb0c <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fb10:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800fb14:	b0d9      	sub	sp, #356	; 0x164
 800fb16:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 800fb18:	f1a2 0b02 	sub.w	fp, r2, #2
 800fb1c:	9304      	str	r3, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fb1e:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800fb22:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800fb24:	a908      	add	r1, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fb26:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fb28:	f102 030e 	add.w	r3, r2, #14
 800fb2c:	9306      	str	r3, [sp, #24]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fb2e:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800fb32:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fb36:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fb3a:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fb3c:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fb40:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fb42:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fb46:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fb4a:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800fb4c:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 800fb50:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800fb52:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800fb56:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fb5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800fb5e:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 800fb60:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 800fb62:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 800fb64:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 800fb66:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fb6a:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fb6e:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 800fb72:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fb74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb76:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fb78:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800fb7c:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800fb7e:	19f3      	adds	r3, r6, r7
 800fb80:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 800fb82:	f241 0071 	movw	r0, #4209	; 0x1071
 800fb86:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 800fb8a:	48a0      	ldr	r0, [pc, #640]	; (800fe0c <jpeg_idct_10x10+0x300>)
 800fb8c:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 800fb90:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 800fb94:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fb96:	6e25      	ldr	r5, [r4, #96]	; 0x60
    tmp21 = tmp11 + tmp13;
 800fb98:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 800fb9a:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fb9c:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 800fba0:	9303      	str	r3, [sp, #12]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fba2:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fba4:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fba8:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fbaa:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	; 0x30
    tmp24 = tmp10 - tmp12;
 800fbae:	9002      	str	r0, [sp, #8]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fbb0:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fbb4:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fbb6:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 800fbba:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fbbe:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 800fbc2:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 800fbc4:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 800fbc8:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fbca:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 800fbce:	f641 606f 	movw	r0, #7791	; 0x1e6f
 800fbd2:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fbd6:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 800fbda:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fbde:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fbe2:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fbe6:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fbea:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fbec:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fbee:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 800fbf2:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fbf4:	1b86      	subs	r6, r0, r6

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) (tmp22 + tmp12);
 800fbf6:	9805      	ldr	r0, [sp, #20]
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 800fbf8:	eba3 030e 	sub.w	r3, r3, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fbfc:	f642 0e53 	movw	lr, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fc00:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fc02:	f241 2acf 	movw	sl, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fc06:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 800fc0a:	009b      	lsls	r3, r3, #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fc0c:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fc10:	f241 4a8c 	movw	sl, #5260	; 0x148c
 800fc14:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fc18:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fc1c:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fc20:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fc24:	442a      	add	r2, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fc26:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800fc2a:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fc2e:	12ed      	asrs	r5, r5, #11
 800fc30:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800fc34:	ea4f 25ec 	mov.w	r5, ip, asr #11
 800fc38:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800fc3c:	eb07 050e 	add.w	r5, r7, lr
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800fc40:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800fc44:	12ed      	asrs	r5, r5, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800fc46:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800fc48:	61cd      	str	r5, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 800fc4a:	eb03 25e0 	add.w	r5, r3, r0, asr #11
    wsptr[8*7] = (int) (tmp22 - tmp12);
 800fc4e:	ebc3 23e0 	rsb	r3, r3, r0, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800fc52:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*2] = (int) (tmp22 + tmp12);
 800fc56:	63cd      	str	r5, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 800fc58:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800fc5c:	9b03      	ldr	r3, [sp, #12]
 800fc5e:	4413      	add	r3, r2
 800fc60:	12db      	asrs	r3, r3, #11
 800fc62:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800fc64:	9b03      	ldr	r3, [sp, #12]
 800fc66:	1a9b      	subs	r3, r3, r2
 800fc68:	12db      	asrs	r3, r3, #11
 800fc6a:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fc6e:	9b02      	ldr	r3, [sp, #8]
 800fc70:	4433      	add	r3, r6
 800fc72:	12db      	asrs	r3, r3, #11
 800fc74:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800fc76:	9b02      	ldr	r3, [sp, #8]
 800fc78:	1b9b      	subs	r3, r3, r6
 800fc7a:	12db      	asrs	r3, r3, #11
 800fc7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fc80:	9b06      	ldr	r3, [sp, #24]
 800fc82:	455b      	cmp	r3, fp
 800fc84:	f47f af53 	bne.w	800fb2e <jpeg_idct_10x10+0x22>
 800fc88:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 800fc8a:	a908      	add	r1, sp, #32
 800fc8c:	f1a3 0b04 	sub.w	fp, r3, #4
 800fc90:	3324      	adds	r3, #36	; 0x24
 800fc92:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fc94:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800fc98:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 800fc9c:	9a62      	ldr	r2, [sp, #392]	; 0x188
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 800fc9e:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 800fca0:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 800fca4:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800fca6:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 800fcaa:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800fcac:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fcb0:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800fcb4:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fcb8:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800fcba:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 800fcbc:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 800fcc0:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 800fcc2:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 800fcc6:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 800fcca:	006d      	lsls	r5, r5, #1
 800fccc:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 800fcd0:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 800fcd4:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800fcd6:	19eb      	adds	r3, r5, r7
 800fcd8:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 800fcda:	f241 0071 	movw	r0, #4209	; 0x1071
 800fcde:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 800fce2:	484a      	ldr	r0, [pc, #296]	; (800fe0c <jpeg_idct_10x10+0x300>)
 800fce4:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 800fce8:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 800fcec:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 800fcee:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 800fcf2:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 800fcf4:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 800fcf6:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fcf8:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 800fcfc:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 800fcfe:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 800fd02:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 800fd06:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 800fd0a:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fd0c:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 800fd10:	f641 606f 	movw	r0, #7791	; 0x1e6f
 800fd14:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 800fd18:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800fd1c:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fd20:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 800fd24:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fd28:	f240 7014 	movw	r0, #1812	; 0x714
 800fd2c:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fd30:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fd32:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fd36:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fd3a:	f642 0853 	movw	r8, #10323	; 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fd3e:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fd42:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fd44:	f241 2acf 	movw	sl, #4815	; 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fd48:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fd4c:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fd50:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fd54:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 800fd58:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fd5a:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fd5e:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 800fd62:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fd64:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fd68:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 800fd6c:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fd70:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fd72:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fd74:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 800fd78:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800fd7a:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fd7e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 800fd80:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 800fd84:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fd88:	5d5d      	ldrb	r5, [r3, r5]
 800fd8a:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800fd8c:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800fd8e:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800fd90:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800fd92:	f813 500c 	ldrb.w	r5, [r3, ip]
 800fd96:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800fd98:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800fd9c:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 800fda0:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 800fda4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800fda8:	5d5d      	ldrb	r5, [r3, r5]
 800fdaa:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800fdac:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800fdae:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800fdb0:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800fdb2:	181d      	adds	r5, r3, r0
 800fdb4:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 800fdb6:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800fdba:	5d5d      	ldrb	r5, [r3, r5]
 800fdbc:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800fdbe:	9b02      	ldr	r3, [sp, #8]
 800fdc0:	1a1b      	subs	r3, r3, r0
 800fdc2:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 800fdc4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800fdc8:	5cc3      	ldrb	r3, [r0, r3]
 800fdca:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800fdcc:	9b04      	ldr	r3, [sp, #16]
 800fdce:	4413      	add	r3, r2
			    & RANGE_MASK];
 800fdd0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800fdd4:	5cc3      	ldrb	r3, [r0, r3]
 800fdd6:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 800fdd8:	9b04      	ldr	r3, [sp, #16]
 800fdda:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 800fddc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 800fde0:	5cc3      	ldrb	r3, [r0, r3]
 800fde2:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 800fde4:	9b03      	ldr	r3, [sp, #12]
 800fde6:	4433      	add	r3, r6
			    & RANGE_MASK];
 800fde8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 800fdec:	5cc3      	ldrb	r3, [r0, r3]
 800fdee:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 800fdf0:	9b03      	ldr	r3, [sp, #12]
 800fdf2:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 800fdf4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 800fdf8:	5cc3      	ldrb	r3, [r0, r3]
 800fdfa:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 800fdfc:	9b07      	ldr	r3, [sp, #28]
 800fdfe:	455b      	cmp	r3, fp
 800fe00:	f47f af48 	bne.w	800fc94 <jpeg_idct_10x10+0x188>
  }
}
 800fe04:	b059      	add	sp, #356	; 0x164
 800fe06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0a:	bf00      	nop
 800fe0c:	ffffba5c 	.word	0xffffba5c

0800fe10 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fe10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe14:	b0e5      	sub	sp, #404	; 0x194
 800fe16:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800fe18:	f1a2 0b02 	sub.w	fp, r2, #2
 800fe1c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe1e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fe22:	3380      	adds	r3, #128	; 0x80
 800fe24:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fe26:	1f0b      	subs	r3, r1, #4
 800fe28:	9302      	str	r3, [sp, #8]
 800fe2a:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 800fe2e:	aa0c      	add	r2, sp, #48	; 0x30
 800fe30:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe32:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 800fe34:	f642 3e6c 	movw	lr, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe38:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800fe3c:	f244 2958 	movw	r9, #16984	; 0x4258
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe40:	f851 0f04 	ldr.w	r0, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fe44:	3204      	adds	r2, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fe46:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe4a:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe4c:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe4e:	f9bb 0020 	ldrsh.w	r0, [fp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe52:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
    tmp10 <<= CONST_BITS;
 800fe56:	035b      	lsls	r3, r3, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe58:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe5a:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe5e:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fe60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe64:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fe66:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
 800fe6a:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 800fe6c:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 800fe70:	1a27      	subs	r7, r4, r0
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 800fe72:	eba4 0c06 	sub.w	ip, r4, r6
 800fe76:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 800fe7a:	f640 55c9 	movw	r5, #3529	; 0xdc9
 800fe7e:	436f      	muls	r7, r5
    z4 = z1 + z3;
 800fe80:	1985      	adds	r5, r0, r6
    z4 -= z2;
 800fe82:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 800fe84:	fb0e 3301 	mla	r3, lr, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 800fe88:	eb0c 0e07 	add.w	lr, ip, r7
    z4 -= z2;
 800fe8c:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 800fe8e:	449e      	add	lr, r3
 800fe90:	49d0      	ldr	r1, [pc, #832]	; (80101d4 <jpeg_idct_11x11+0x3c4>)
 800fe92:	fb01 e104 	mla	r1, r1, r4, lr
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fe96:	f244 3eb5 	movw	lr, #17333	; 0x43b5
 800fe9a:	fb0e 3e06 	mla	lr, lr, r6, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 800fe9e:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fea0:	eb0e 010c 	add.w	r1, lr, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800fea4:	f44f 6e4c 	mov.w	lr, #3264	; 0xcc0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fea8:	9104      	str	r1, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 800feaa:	49cb      	ldr	r1, [pc, #812]	; (80101d8 <jpeg_idct_11x11+0x3c8>)
 800feac:	fb01 3c00 	mla	ip, r1, r0, r3
 800feb0:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800feb4:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800feb8:	f9bb c050 	ldrsh.w	ip, [fp, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 800febc:	9105      	str	r1, [sp, #20]
    tmp24 += tmp25;
 800febe:	49c7      	ldr	r1, [pc, #796]	; (80101dc <jpeg_idct_11x11+0x3cc>)
 800fec0:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 800fec4:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 800fec8:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fecc:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 800fed0:	9106      	str	r1, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 800fed2:	49c3      	ldr	r1, [pc, #780]	; (80101e0 <jpeg_idct_11x11+0x3d0>)
 800fed4:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fed6:	fb06 0004 	mla	r0, r6, r4, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800feda:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fede:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fee2:	1941      	adds	r1, r0, r5
 800fee4:	9107      	str	r1, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fee6:	9902      	ldr	r1, [sp, #8]
 800fee8:	6a08      	ldr	r0, [r1, #32]
 800feea:	4344      	muls	r4, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800feec:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800feee:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fef0:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 800fef4:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fef8:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    tmp10 = tmp11 + tmp12 + tmp13 -
 800fefc:	49b9      	ldr	r1, [pc, #740]	; (80101e4 <jpeg_idct_11x11+0x3d4>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fefe:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 800ff00:	19e0      	adds	r0, r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 800ff02:	eb04 0a0c 	add.w	sl, r4, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800ff06:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 800ff0a:	eb04 0806 	add.w	r8, r4, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800ff0e:	4435      	add	r5, r6
 800ff10:	fb0e f505 	mul.w	r5, lr, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 800ff14:	f641 4e6a 	movw	lr, #7274	; 0x1c6a
 800ff18:	fb0e f000 	mul.w	r0, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 800ff1c:	f241 5e74 	movw	lr, #5492	; 0x1574
 800ff20:	fb0e fa0a 	mul.w	sl, lr, sl
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 800ff24:	f640 3eb8 	movw	lr, #3000	; 0xbb8
 800ff28:	fb0e 5808 	mla	r8, lr, r8, r5
    tmp10 = tmp11 + tmp12 + tmp13 -
 800ff2c:	eb00 0e0a 	add.w	lr, r0, sl
 800ff30:	44c6      	add	lr, r8
 800ff32:	fb01 ee04 	mla	lr, r1, r4, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 800ff36:	eb07 040c 	add.w	r4, r7, ip
 800ff3a:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
 800ff3e:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800ff42:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800ff44:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800ff48:	fb01 440c 	mla	r4, r1, ip, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800ff4c:	49a6      	ldr	r1, [pc, #664]	; (80101e8 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800ff4e:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800ff50:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800ff52:	4454      	add	r4, sl
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 800ff54:	f244 3a47 	movw	sl, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800ff58:	4348      	muls	r0, r1
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800ff5a:	9904      	ldr	r1, [sp, #16]
    tmp11 += z1;
 800ff5c:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 800ff5e:	fb0a 0006 	mla	r0, sl, r6, r0
 800ff62:	4440      	add	r0, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 800ff64:	f242 080b 	movw	r8, #8203	; 0x200b
 800ff68:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 800ff6c:	f8df 8280 	ldr.w	r8, [pc, #640]	; 80101f0 <jpeg_idct_11x11+0x3e0>
 800ff70:	fb08 cc07 	mla	ip, r8, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 800ff74:	4f9d      	ldr	r7, [pc, #628]	; (80101ec <jpeg_idct_11x11+0x3dc>)
 800ff76:	fb07 cc06 	mla	ip, r7, r6, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 800ff7a:	44ac      	add	ip, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800ff7c:	eb01 050e 	add.w	r5, r1, lr
 800ff80:	12ed      	asrs	r5, r5, #11
 800ff82:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800ff86:	eba1 050e 	sub.w	r5, r1, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800ff8a:	9903      	ldr	r1, [sp, #12]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800ff8c:	12ed      	asrs	r5, r5, #11
 800ff8e:	f8c2 513c 	str.w	r5, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800ff92:	eb01 0509 	add.w	r5, r1, r9
 800ff96:	12ed      	asrs	r5, r5, #11
 800ff98:	61d5      	str	r5, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800ff9a:	eba1 0509 	sub.w	r5, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800ff9e:	9906      	ldr	r1, [sp, #24]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800ffa0:	12ed      	asrs	r5, r5, #11
 800ffa2:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800ffa6:	190d      	adds	r5, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 800ffa8:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800ffaa:	12ed      	asrs	r5, r5, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 800ffac:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800ffae:	63d5      	str	r5, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800ffb0:	9905      	ldr	r1, [sp, #20]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 800ffb2:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800ffb6:	180c      	adds	r4, r1, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800ffb8:	1a08      	subs	r0, r1, r0
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800ffba:	9907      	ldr	r1, [sp, #28]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800ffbc:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800ffbe:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800ffc0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800ffc4:	eb01 000c 	add.w	r0, r1, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800ffc8:	65d4      	str	r4, [r2, #92]	; 0x5c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800ffca:	12c0      	asrs	r0, r0, #11
 800ffcc:	67d0      	str	r0, [r2, #124]	; 0x7c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800ffce:	eba1 000c 	sub.w	r0, r1, ip
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 800ffd2:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800ffd4:	12c0      	asrs	r0, r0, #11
 800ffd6:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 800ffda:	f645 00ad 	movw	r0, #22701	; 0x58ad
 800ffde:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 800ffe2:	12db      	asrs	r3, r3, #11
 800ffe4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800ffe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffea:	455b      	cmp	r3, fp
 800ffec:	f47f af21 	bne.w	800fe32 <jpeg_idct_11x11+0x22>
 800fff0:	9b08      	ldr	r3, [sp, #32]
 800fff2:	3b04      	subs	r3, #4
 800fff4:	9303      	str	r3, [sp, #12]
 800fff6:	9b08      	ldr	r3, [sp, #32]
 800fff8:	3328      	adds	r3, #40	; 0x28
 800fffa:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 800fffc:	ab0c      	add	r3, sp, #48	; 0x30
 800fffe:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010000:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010002:	f245 107e 	movw	r0, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8010006:	9a02      	ldr	r2, [sp, #8]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010008:	f244 2a58 	movw	sl, #16984	; 0x4258
    outptr = output_buf[ctr] + output_col;
 801000c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z2 = (INT32) wsptr[4];
 8010010:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8010012:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8010014:	9109      	str	r1, [sp, #36]	; 0x24
 8010016:	9303      	str	r3, [sp, #12]
 8010018:	460b      	mov	r3, r1
 801001a:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801001c:	eba6 0e07 	sub.w	lr, r6, r7
    z1 = (INT32) wsptr[2];
 8010020:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 8010022:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010024:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8010026:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010028:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801002c:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010030:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010032:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010036:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010038:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801003a:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 801003e:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8010040:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 8010042:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010044:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8010048:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 801004c:	eb0e 000c 	add.w	r0, lr, ip
 8010050:	4a60      	ldr	r2, [pc, #384]	; (80101d4 <jpeg_idct_11x11+0x3c4>)
 8010052:	4418      	add	r0, r3
 8010054:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010058:	f244 30b5 	movw	r0, #17333	; 0x43b5
 801005c:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010060:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010062:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010066:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010068:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801006a:	4a5b      	ldr	r2, [pc, #364]	; (80101d8 <jpeg_idct_11x11+0x3c8>)
 801006c:	fb02 3e04 	mla	lr, r2, r4, r3
 8010070:	eb0e 020c 	add.w	r2, lr, ip
 8010074:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8010076:	4a59      	ldr	r2, [pc, #356]	; (80101dc <jpeg_idct_11x11+0x3cc>)
 8010078:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 801007c:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 8010080:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010084:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010088:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 801008a:	4a55      	ldr	r2, [pc, #340]	; (80101e0 <jpeg_idct_11x11+0x3d0>)
 801008c:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801008e:	fb07 4406 	mla	r4, r7, r6, r4
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010092:	f44f 674c 	mov.w	r7, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010096:	1962      	adds	r2, r4, r5
 8010098:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 801009a:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 801009c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 80100a0:	6855      	ldr	r5, [r2, #4]
    z3 = (INT32) wsptr[5];
 80100a2:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 80100a6:	eb05 040e 	add.w	r4, r5, lr
    z4 = (INT32) wsptr[7];
 80100aa:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80100ae:	eb05 0b08 	add.w	fp, r5, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 80100b2:	4a4c      	ldr	r2, [pc, #304]	; (80101e4 <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80100b4:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80100b8:	eb05 090c 	add.w	r9, r5, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80100bc:	4466      	add	r6, ip
 80100be:	437e      	muls	r6, r7
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80100c0:	f641 476a 	movw	r7, #7274	; 0x1c6a
 80100c4:	437c      	muls	r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80100c6:	f241 5774 	movw	r7, #5492	; 0x1574
 80100ca:	fb07 fb0b 	mul.w	fp, r7, fp
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80100ce:	f640 37b8 	movw	r7, #3000	; 0xbb8
 80100d2:	fb07 6909 	mla	r9, r7, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 80100d6:	eb04 070b 	add.w	r7, r4, fp
 80100da:	444f      	add	r7, r9
 80100dc:	fb02 7705 	mla	r7, r2, r5, r7
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 80100e0:	eb0e 0508 	add.w	r5, lr, r8
 80100e4:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 80100e8:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80100ec:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80100ee:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80100f2:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80100f6:	4a3c      	ldr	r2, [pc, #240]	; (80101e8 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80100f8:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80100fa:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80100fe:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010100:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010104:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010106:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8010108:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801010a:	fb0b 440c 	mla	r4, fp, ip, r4
 801010e:	444c      	add	r4, r9
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010110:	f242 090b 	movw	r9, #8203	; 0x200b
 8010114:	fb09 f808 	mul.w	r8, r9, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010118:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80101f0 <jpeg_idct_11x11+0x3e0>
 801011c:	fb09 880e 	mla	r8, r9, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010120:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80101ec <jpeg_idct_11x11+0x3dc>
 8010124:	fb0e 880c 	mla	r8, lr, ip, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010128:	44b0      	add	r8, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801012a:	19d6      	adds	r6, r2, r7
 801012c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801012e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010132:	5d96      	ldrb	r6, [r2, r6]
 8010134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010136:	5416      	strb	r6, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010138:	9a05      	ldr	r2, [sp, #20]
 801013a:	1bd0      	subs	r0, r2, r7
 801013c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801013e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010142:	5c10      	ldrb	r0, [r2, r0]
 8010144:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010146:	9a04      	ldr	r2, [sp, #16]
 8010148:	eb02 000a 	add.w	r0, r2, sl
 801014c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801014e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010152:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010154:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010156:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010158:	eba2 000a 	sub.w	r0, r2, sl
 801015c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801015e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010162:	5c10      	ldrb	r0, [r2, r0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010164:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010166:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010168:	1950      	adds	r0, r2, r5
 801016a:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801016c:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010170:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010172:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010174:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010176:	1b50      	subs	r0, r2, r5
 8010178:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801017a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801017e:	5c10      	ldrb	r0, [r2, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010180:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010182:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010184:	1910      	adds	r0, r2, r4
 8010186:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010188:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801018c:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801018e:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010190:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010192:	1b10      	subs	r0, r2, r4
 8010194:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010196:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801019a:	5c10      	ldrb	r0, [r2, r0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801019c:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801019e:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80101a0:	eb02 0008 	add.w	r0, r2, r8
 80101a4:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80101a6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80101aa:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80101ac:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80101ae:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80101b0:	eba2 0008 	sub.w	r0, r2, r8
 80101b4:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80101b6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80101ba:	5c10      	ldrb	r0, [r2, r0]
 80101bc:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80101be:	f645 00ad 	movw	r0, #22701	; 0x58ad
 80101c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101c4:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80101c8:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80101ca:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80101ce:	5cd3      	ldrb	r3, [r2, r3]
 80101d0:	e010      	b.n	80101f4 <jpeg_idct_11x11+0x3e4>
 80101d2:	bf00      	nop
 80101d4:	ffffc5b4 	.word	0xffffc5b4
 80101d8:	ffffcf91 	.word	0xffffcf91
 80101dc:	ffffdb05 	.word	0xffffdb05
 80101e0:	ffffd37d 	.word	0xffffd37d
 80101e4:	ffffe276 	.word	0xffffe276
 80101e8:	ffffc675 	.word	0xffffc675
 80101ec:	ffffca16 	.word	0xffffca16
 80101f0:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 80101f4:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80101f6:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 80101f8:	9b02      	ldr	r3, [sp, #8]
 80101fa:	3320      	adds	r3, #32
 80101fc:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 80101fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010200:	4293      	cmp	r3, r2
 8010202:	f47f aefd 	bne.w	8010000 <jpeg_idct_11x11+0x1f0>
  }
}
 8010206:	b065      	add	sp, #404	; 0x194
 8010208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801020c <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801020c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010210:	b0eb      	sub	sp, #428	; 0x1ac
 8010212:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010214:	f1a2 0802 	sub.w	r8, r2, #2
 8010218:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801021a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801021e:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010222:	1f0b      	subs	r3, r1, #4
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	f102 030e 	add.w	r3, r2, #14
 801022a:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 801022c:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801022e:	9900      	ldr	r1, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010230:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010232:	f938 cf02 	ldrsh.w	ip, [r8, #2]!
 8010236:	f851 2f04 	ldr.w	r2, [r1, #4]!
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801023a:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801023e:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010242:	fb02 fc0c 	mul.w	ip, r2, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010246:	f9b8 2040 	ldrsh.w	r2, [r8, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801024a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801024c:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010250:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010252:	f242 7031 	movw	r0, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010256:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801025a:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801025e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010260:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010262:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010266:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 8010268:	eb0c 0702 	add.w	r7, ip, r2
    tmp11 = z3 - z4;
 801026c:	ebac 0202 	sub.w	r2, ip, r2
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010270:	fb01 f006 	mul.w	r0, r1, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010274:	9900      	ldr	r1, [sp, #0]
 8010276:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
 801027a:	436c      	muls	r4, r5
    z2 <<= CONST_BITS;
 801027c:	0364      	lsls	r4, r4, #13

    tmp12 = z1 - z2;
 801027e:	ebc4 3546 	rsb	r5, r4, r6, lsl #13

    tmp21 = z3 + tmp12;
 8010282:	eb0c 0105 	add.w	r1, ip, r5
 8010286:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 8010288:	ebac 0105 	sub.w	r1, ip, r5

    tmp12 = z4 + z2;
 801028c:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 801028e:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 8010292:	9102      	str	r1, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010294:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp25 = tmp10 - tmp12;
 8010298:	1b79      	subs	r1, r7, r5
    tmp12 = z4 - z1 - z2;
 801029a:	1b00      	subs	r0, r0, r4
    tmp20 = tmp10 + tmp12;
 801029c:	eb07 0b05 	add.w	fp, r7, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102a0:	f9b8 7010 	ldrsh.w	r7, [r8, #16]
    tmp25 = tmp10 - tmp12;
 80102a4:	9103      	str	r1, [sp, #12]
    tmp22 = tmp11 + tmp12;
 80102a6:	1811      	adds	r1, r2, r0
    tmp23 = tmp11 - tmp12;
 80102a8:	1a12      	subs	r2, r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80102aa:	f9b8 c030 	ldrsh.w	ip, [r8, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80102ae:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp23 = tmp11 - tmp12;
 80102b2:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102b4:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80102b6:	9104      	str	r1, [sp, #16]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102b8:	6a12      	ldr	r2, [r2, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80102ba:	9900      	ldr	r1, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102bc:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80102be:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80102c0:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80102c4:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80102c8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80102ca:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80102ce:	9a00      	ldr	r2, [sp, #0]
 80102d0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80102d4:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80102d8:	49b9      	ldr	r1, [pc, #740]	; (80105c0 <jpeg_idct_12x12+0x3b4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80102da:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80102dc:	f9b8 2070 	ldrsh.w	r2, [r8, #112]	; 0x70
    tmp10 = z1 + z3;
 80102e0:	eb07 0a05 	add.w	sl, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80102e4:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80102e6:	fb01 f00c 	mul.w	r0, r1, ip
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80102ea:	eb02 0e0a 	add.w	lr, r2, sl
 80102ee:	fb06 fe0e 	mul.w	lr, r6, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80102f2:	f640 065b 	movw	r6, #2139	; 0x85b
 80102f6:	fb06 ea0a 	mla	sl, r6, sl, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80102fa:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80102fe:	eb04 010a 	add.w	r1, r4, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010302:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010306:	fb06 1107 	mla	r1, r6, r7, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801030a:	18ae      	adds	r6, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801030c:	9106      	str	r1, [sp, #24]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801030e:	49ad      	ldr	r1, [pc, #692]	; (80105c4 <jpeg_idct_12x12+0x3b8>)
 8010310:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010312:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010314:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010316:	49ac      	ldr	r1, [pc, #688]	; (80105c8 <jpeg_idct_12x12+0x3bc>)
 8010318:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801031c:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 801031e:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010322:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010326:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010328:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 801032c:	fb0a 4402 	mla	r4, sl, r2, r4
 8010330:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010332:	49a6      	ldr	r1, [pc, #664]	; (80105cc <jpeg_idct_12x12+0x3c0>)
 8010334:	fb01 0007 	mla	r0, r1, r7, r0
 8010338:	49a5      	ldr	r1, [pc, #660]	; (80105d0 <jpeg_idct_12x12+0x3c4>)
 801033a:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 801033e:	1aba      	subs	r2, r7, r2
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010340:	1957      	adds	r7, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010342:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010344:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8010348:	f641 0c7e 	movw	ip, #6270	; 0x187e
 801034c:	fb0c 7c02 	mla	ip, ip, r2, r7
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010350:	4aa0      	ldr	r2, [pc, #640]	; (80105d4 <jpeg_idct_12x12+0x3c8>)
 8010352:	fb02 7705 	mla	r7, r2, r5, r7

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010356:	9a06      	ldr	r2, [sp, #24]
 8010358:	445a      	add	r2, fp
 801035a:	12d2      	asrs	r2, r2, #11
 801035c:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010360:	9a06      	ldr	r2, [sp, #24]
 8010362:	ebab 0b02 	sub.w	fp, fp, r2
 8010366:	ea4f 22eb 	mov.w	r2, fp, asr #11
 801036a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801036e:	9a01      	ldr	r2, [sp, #4]
 8010370:	4462      	add	r2, ip
 8010372:	12d2      	asrs	r2, r2, #11
 8010374:	61da      	str	r2, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010376:	9a01      	ldr	r2, [sp, #4]
 8010378:	eba2 020c 	sub.w	r2, r2, ip
 801037c:	12d2      	asrs	r2, r2, #11
 801037e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010382:	9a04      	ldr	r2, [sp, #16]
 8010384:	4432      	add	r2, r6
 8010386:	12d2      	asrs	r2, r2, #11
 8010388:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801038a:	9a04      	ldr	r2, [sp, #16]
 801038c:	1b92      	subs	r2, r2, r6
 801038e:	12d2      	asrs	r2, r2, #11
 8010390:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010394:	9a05      	ldr	r2, [sp, #20]
 8010396:	4422      	add	r2, r4
 8010398:	12d2      	asrs	r2, r2, #11
 801039a:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801039c:	9a05      	ldr	r2, [sp, #20]
 801039e:	1b12      	subs	r2, r2, r4
 80103a0:	12d2      	asrs	r2, r2, #11
 80103a2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80103a6:	9a02      	ldr	r2, [sp, #8]
 80103a8:	443a      	add	r2, r7
 80103aa:	12d2      	asrs	r2, r2, #11
 80103ac:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80103ae:	9a02      	ldr	r2, [sp, #8]
 80103b0:	1bd2      	subs	r2, r2, r7
 80103b2:	12d2      	asrs	r2, r2, #11
 80103b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80103b8:	9a03      	ldr	r2, [sp, #12]
 80103ba:	4402      	add	r2, r0
 80103bc:	12d2      	asrs	r2, r2, #11
 80103be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80103c2:	9a03      	ldr	r2, [sp, #12]
 80103c4:	1a12      	subs	r2, r2, r0
 80103c6:	12d2      	asrs	r2, r2, #11
 80103c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80103cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103ce:	4542      	cmp	r2, r8
 80103d0:	f47f af2d 	bne.w	801022e <jpeg_idct_12x12+0x22>
 80103d4:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80103d6:	aa0a      	add	r2, sp, #40	; 0x28
 80103d8:	f1a3 0a04 	sub.w	sl, r3, #4
 80103dc:	332c      	adds	r3, #44	; 0x2c
 80103de:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80103e0:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80103e4:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80103e6:	9974      	ldr	r1, [sp, #464]	; 0x1d0
    z2 = (INT32) wsptr[6];
 80103e8:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 80103ec:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 80103f0:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 80103f2:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80103f4:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 80103f8:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 80103fa:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 80103fe:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010402:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8010404:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010406:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801040a:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801040e:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010410:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8010414:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8010418:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 801041c:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 801041e:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8010422:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8010426:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 801042a:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 801042e:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 8010430:	1b09      	subs	r1, r1, r4
    tmp25 = tmp10 - tmp12;
 8010432:	eba6 030c 	sub.w	r3, r6, ip
    z3 = (INT32) wsptr[5];
 8010436:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp20 = tmp10 + tmp12;
 801043a:	eb06 070c 	add.w	r7, r6, ip
    tmp25 = tmp10 - tmp12;
 801043e:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8010440:	1843      	adds	r3, r0, r1
    z4 = (INT32) wsptr[7];
 8010442:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010446:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp22 = tmp11 + tmp12;
 801044a:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 801044c:	1a43      	subs	r3, r0, r1
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801044e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    tmp23 = tmp11 - tmp12;
 8010452:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010454:	f852 3c14 	ldr.w	r3, [r2, #-20]
 8010458:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801045c:	4958      	ldr	r1, [pc, #352]	; (80105c0 <jpeg_idct_12x12+0x3b4>)
 801045e:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 8010460:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8010464:	eb03 0b05 	add.w	fp, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010468:	eb04 0c0b 	add.w	ip, r4, fp
 801046c:	fb06 fc0c 	mul.w	ip, r6, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8010470:	f640 065b 	movw	r6, #2139	; 0x85b
 8010474:	fb06 cb0b 	mla	fp, r6, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010478:	f640 06f7 	movw	r6, #2295	; 0x8f7
 801047c:	eb00 0e0b 	add.w	lr, r0, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010480:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010484:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010488:	192e      	adds	r6, r5, r4
 801048a:	4b4e      	ldr	r3, [pc, #312]	; (80105c4 <jpeg_idct_12x12+0x3b8>)
 801048c:	fb03 f806 	mul.w	r8, r3, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010490:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 8010494:	eb01 0608 	add.w	r6, r1, r8
 8010498:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801049c:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80104a0:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80104a2:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 80104a6:	fb0b 0004 	mla	r0, fp, r4, r0
 80104aa:	eb00 0b08 	add.w	fp, r0, r8
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80104ae:	4847      	ldr	r0, [pc, #284]	; (80105cc <jpeg_idct_12x12+0x3c0>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80104b0:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80104b4:	fb00 1103 	mla	r1, r0, r3, r1
 80104b8:	4b45      	ldr	r3, [pc, #276]	; (80105d0 <jpeg_idct_12x12+0x3c4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80104ba:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80104bc:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 80104c0:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 80104c4:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 80104c6:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80104ca:	4461      	add	r1, ip
    z2 -= z3;
 80104cc:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80104ce:	4b41      	ldr	r3, [pc, #260]	; (80105d4 <jpeg_idct_12x12+0x3c8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80104d0:	eb04 0c05 	add.w	ip, r4, r5
 80104d4:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80104d8:	f641 087e 	movw	r8, #6270	; 0x187e
 80104dc:	fb08 c804 	mla	r8, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80104e0:	eb07 040e 	add.w	r4, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80104e4:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80104e8:	fb03 cc05 	mla	ip, r3, r5, ip
			     & RANGE_MASK];
 80104ec:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80104f0:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80104f2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80104f6:	f819 4004 	ldrb.w	r4, [r9, r4]
 80104fa:	541c      	strb	r4, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80104fc:	9b00      	ldr	r3, [sp, #0]
 80104fe:	f819 4007 	ldrb.w	r4, [r9, r7]
 8010502:	72dc      	strb	r4, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010504:	9b01      	ldr	r3, [sp, #4]
 8010506:	eb03 0408 	add.w	r4, r3, r8
 801050a:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801050c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010510:	f819 4004 	ldrb.w	r4, [r9, r4]
 8010514:	705c      	strb	r4, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010516:	9b01      	ldr	r3, [sp, #4]
 8010518:	eba3 0408 	sub.w	r4, r3, r8
			     & RANGE_MASK];
 801051c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010520:	f819 4004 	ldrb.w	r4, [r9, r4]
 8010524:	9b00      	ldr	r3, [sp, #0]
 8010526:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	199c      	adds	r4, r3, r6
 801052c:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801052e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010532:	f819 4004 	ldrb.w	r4, [r9, r4]
 8010536:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010538:	9b04      	ldr	r3, [sp, #16]
 801053a:	1b9c      	subs	r4, r3, r6
 801053c:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801053e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010542:	f819 4004 	ldrb.w	r4, [r9, r4]
 8010546:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010548:	9b05      	ldr	r3, [sp, #20]
 801054a:	eb03 040b 	add.w	r4, r3, fp
 801054e:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010550:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010554:	f819 4004 	ldrb.w	r4, [r9, r4]
 8010558:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801055a:	9b05      	ldr	r3, [sp, #20]
 801055c:	eba3 000b 	sub.w	r0, r3, fp
 8010560:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010562:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010566:	f819 0000 	ldrb.w	r0, [r9, r0]
 801056a:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801056c:	9b02      	ldr	r3, [sp, #8]
 801056e:	eb03 000c 	add.w	r0, r3, ip
 8010572:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010574:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010578:	f819 0000 	ldrb.w	r0, [r9, r0]
 801057c:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801057e:	9b02      	ldr	r3, [sp, #8]
 8010580:	eba3 000c 	sub.w	r0, r3, ip
 8010584:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010586:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801058a:	f819 0000 	ldrb.w	r0, [r9, r0]
 801058e:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010590:	9b03      	ldr	r3, [sp, #12]
 8010592:	1858      	adds	r0, r3, r1
 8010594:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010596:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801059a:	f819 0000 	ldrb.w	r0, [r9, r0]
 801059e:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80105a0:	9b03      	ldr	r3, [sp, #12]
 80105a2:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 80105a4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80105a8:	f819 1001 	ldrb.w	r1, [r9, r1]
 80105ac:	9b00      	ldr	r3, [sp, #0]
 80105ae:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 80105b0:	9b07      	ldr	r3, [sp, #28]
 80105b2:	4553      	cmp	r3, sl
 80105b4:	f47f af14 	bne.w	80103e0 <jpeg_idct_12x12+0x1d4>
  }
}
 80105b8:	b06b      	add	sp, #428	; 0x1ac
 80105ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105be:	bf00      	nop
 80105c0:	ffffeeaf 	.word	0xffffeeaf
 80105c4:	ffffde8b 	.word	0xffffde8b
 80105c8:	ffffd0b0 	.word	0xffffd0b0
 80105cc:	ffffea5c 	.word	0xffffea5c
 80105d0:	ffffc08c 	.word	0xffffc08c
 80105d4:	ffffc4df 	.word	0xffffc4df

080105d8 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80105d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105dc:	b0f7      	sub	sp, #476	; 0x1dc
 80105de:	f1a2 0902 	sub.w	r9, r2, #2
 80105e2:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80105e4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80105e8:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80105ec:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80105ee:	f1a3 0e04 	sub.w	lr, r3, #4
 80105f2:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 80105f6:	aa0e      	add	r2, sp, #56	; 0x38
 80105f8:	930d      	str	r3, [sp, #52]	; 0x34
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80105fa:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80105fe:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010602:	f85e 1f04 	ldr.w	r1, [lr, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010606:	3204      	adds	r2, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010608:	f9b9 4020 	ldrsh.w	r4, [r9, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801060c:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801060e:	f9b9 1040 	ldrsh.w	r1, [r9, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010612:	f9b9 0060 	ldrsh.w	r0, [r9, #96]	; 0x60
    z1 <<= CONST_BITS;
 8010616:	035b      	lsls	r3, r3, #13

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010618:	f9b9 7050 	ldrsh.w	r7, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801061c:	f9b9 c070 	ldrsh.w	ip, [r9, #112]	; 0x70
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010624:	9303      	str	r3, [sp, #12]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010626:	f8de 3040 	ldr.w	r3, [lr, #64]	; 0x40
 801062a:	4363      	muls	r3, r4
 801062c:	9301      	str	r3, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801062e:	f8de 3080 	ldr.w	r3, [lr, #128]	; 0x80
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8010632:	9c01      	ldr	r4, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010634:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010636:	f8de 30c0 	ldr.w	r3, [lr, #192]	; 0xc0
 801063a:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 801063c:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 801063e:	1a09      	subs	r1, r1, r0
 8010640:	9102      	str	r1, [sp, #8]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8010642:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8010646:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8010648:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
 801064c:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8010650:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8010654:	fb00 5004 	mla	r0, r0, r4, r5
 8010658:	4408      	add	r0, r1
 801065a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801065c:	f241 000c 	movw	r0, #4108	; 0x100c
 8010660:	4360      	muls	r0, r4
 8010662:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8010664:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8010668:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801066a:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801066e:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8010672:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8010674:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8010678:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801067a:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801067c:	1a2d      	subs	r5, r5, r0
 801067e:	440d      	add	r5, r1
 8010680:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8010682:	4dd9      	ldr	r5, [pc, #868]	; (80109e8 <jpeg_idct_13x13+0x410>)
 8010684:	fb05 0004 	mla	r0, r5, r4, r0
 8010688:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801068a:	9803      	ldr	r0, [sp, #12]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801068c:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801068e:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8010692:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8010694:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8010698:	4371      	muls	r1, r6

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
    tmp10 = tmp11 + tmp12 + tmp13 -
 801069a:	4ed4      	ldr	r6, [pc, #848]	; (80109ec <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801069c:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 801069e:	48d4      	ldr	r0, [pc, #848]	; (80109f0 <jpeg_idct_13x13+0x418>)
 80106a0:	4360      	muls	r0, r4
 80106a2:	1ac0      	subs	r0, r0, r3
 80106a4:	1a40      	subs	r0, r0, r1
 80106a6:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80106a8:	48d2      	ldr	r0, [pc, #840]	; (80109f4 <jpeg_idct_13x13+0x41c>)
 80106aa:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80106ae:	f8de 0060 	ldr.w	r0, [lr, #96]	; 0x60
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80106b2:	f641 6402 	movw	r4, #7682	; 0x1e02
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80106b6:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106b8:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80106bc:	9309      	str	r3, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106be:	f8de 3020 	ldr.w	r3, [lr, #32]
 80106c2:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80106c4:	f9b9 3030 	ldrsh.w	r3, [r9, #48]	; 0x30
 80106c8:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80106ca:	f8de 00a0 	ldr.w	r0, [lr, #160]	; 0xa0
 80106ce:	4347      	muls	r7, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80106d0:	f8de 00e0 	ldr.w	r0, [lr, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80106d4:	eb01 0b03 	add.w	fp, r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80106d8:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80106dc:	f642 2050 	movw	r0, #10832	; 0x2a50
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80106e0:	19cd      	adds	r5, r1, r7
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80106e2:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80106e6:	f242 503e 	movw	r0, #9534	; 0x253e
 80106ea:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80106ec:	eb01 000c 	add.w	r0, r1, ip
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80106f0:	fb04 fa00 	mul.w	sl, r4, r0
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80106f4:	4cc0      	ldr	r4, [pc, #768]	; (80109f8 <jpeg_idct_13x13+0x420>)
    tmp15 = z1 + z4;
 80106f6:	900a      	str	r0, [sp, #40]	; 0x28
    tmp10 = tmp11 + tmp12 + tmp13 -
 80106f8:	eb0b 0005 	add.w	r0, fp, r5
 80106fc:	4450      	add	r0, sl
 80106fe:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8010702:	4ebe      	ldr	r6, [pc, #760]	; (80109fc <jpeg_idct_13x13+0x424>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010704:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8010706:	19d8      	adds	r0, r3, r7
 8010708:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801070a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 801070e:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010712:	fb04 0007 	mla	r0, r4, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8010716:	f604 5411 	addw	r4, r4, #3345	; 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801071a:	445e      	add	r6, fp
    tmp11 += tmp14;
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801071c:	f244 6b94 	movw	fp, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010720:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8010722:	eb03 050c 	add.w	r5, r3, ip
 8010726:	4365      	muls	r5, r4
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8010728:	4cb5      	ldr	r4, [pc, #724]	; (8010a00 <jpeg_idct_13x13+0x428>)
    tmp11 += tmp14;
 801072a:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801072c:	fb0b 550c 	mla	r5, fp, ip, r5
    tmp12 += tmp14;
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8010730:	f640 2b33 	movw	fp, #2611	; 0xa33
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8010734:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8010736:	eb07 0a0c 	add.w	sl, r7, ip
 801073a:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801073e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp12 += tmp14;
 8010740:	4450      	add	r0, sl
    tmp13 += tmp14;
 8010742:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8010744:	f640 25d5 	movw	r5, #2773	; 0xad5
 8010748:	4365      	muls	r5, r4
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801074a:	4cae      	ldr	r4, [pc, #696]	; (8010a04 <jpeg_idct_13x13+0x42c>)
 801074c:	fb0b 5101 	mla	r1, fp, r1, r5
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8010750:	f640 4b4e 	movw	fp, #3150	; 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8010754:	fb04 1103 	mla	r1, r4, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8010758:	1afb      	subs	r3, r7, r3
 801075a:	f641 6402 	movw	r4, #7682	; 0x1e02
 801075e:	4363      	muls	r3, r4
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010760:	9c04      	ldr	r4, [sp, #16]
    tmp14 += z1;
 8010762:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8010764:	fb0b 3307 	mla	r3, fp, r7, r3
 8010768:	f46f 575f 	mvn.w	r7, #14272	; 0x37c0
 801076c:	fb07 330c 	mla	r3, r7, ip, r3
 8010770:	442b      	add	r3, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010772:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010774:	1965      	adds	r5, r4, r5
 8010776:	12ed      	asrs	r5, r5, #11
 8010778:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801077c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801077e:	1b65      	subs	r5, r4, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010780:	9c06      	ldr	r4, [sp, #24]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010782:	12ed      	asrs	r5, r5, #11
 8010784:	f8c2 517c 	str.w	r5, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010788:	19a5      	adds	r5, r4, r6
 801078a:	12ed      	asrs	r5, r5, #11
 801078c:	61d5      	str	r5, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801078e:	1ba5      	subs	r5, r4, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010790:	9c05      	ldr	r4, [sp, #20]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010792:	12ed      	asrs	r5, r5, #11
 8010794:	f8c2 515c 	str.w	r5, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010798:	1825      	adds	r5, r4, r0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801079a:	1a20      	subs	r0, r4, r0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801079c:	12ed      	asrs	r5, r5, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801079e:	12c0      	asrs	r0, r0, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80107a0:	63d5      	str	r5, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80107a2:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80107a6:	9808      	ldr	r0, [sp, #32]
 80107a8:	4450      	add	r0, sl
 80107aa:	12c0      	asrs	r0, r0, #11
 80107ac:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80107ae:	9808      	ldr	r0, [sp, #32]
 80107b0:	eba0 000a 	sub.w	r0, r0, sl
 80107b4:	12c0      	asrs	r0, r0, #11
 80107b6:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80107ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107bc:	4408      	add	r0, r1
 80107be:	12c0      	asrs	r0, r0, #11
 80107c0:	67d0      	str	r0, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80107c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107c4:	1a41      	subs	r1, r0, r1
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80107c6:	9803      	ldr	r0, [sp, #12]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80107c8:	12c9      	asrs	r1, r1, #11
 80107ca:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80107ce:	9907      	ldr	r1, [sp, #28]
 80107d0:	4419      	add	r1, r3
 80107d2:	12c9      	asrs	r1, r1, #11
 80107d4:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80107d8:	9907      	ldr	r1, [sp, #28]
 80107da:	1acb      	subs	r3, r1, r3
 80107dc:	12db      	asrs	r3, r3, #11
 80107de:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80107e2:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 80107e6:	1a5b      	subs	r3, r3, r1
 80107e8:	f642 5141 	movw	r1, #11585	; 0x2d41
 80107ec:	fb01 0303 	mla	r3, r1, r3, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 80107f0:	12db      	asrs	r3, r3, #11
 80107f2:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80107f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107f8:	454b      	cmp	r3, r9
 80107fa:	f47f aefe 	bne.w	80105fa <jpeg_idct_13x13+0x22>
 80107fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8010800:	ac0e      	add	r4, sp, #56	; 0x38
 8010802:	3b04      	subs	r3, #4
 8010804:	9303      	str	r3, [sp, #12]
 8010806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010808:	3330      	adds	r3, #48	; 0x30
 801080a:	930c      	str	r3, [sp, #48]	; 0x30
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801080c:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801080e:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8010812:	6920      	ldr	r0, [r4, #16]
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8010814:	f641 6702 	movw	r7, #7682	; 0x1e02
    outptr = output_buf[ctr] + output_col;
 8010818:	f853 2f04 	ldr.w	r2, [r3, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801081c:	3420      	adds	r4, #32
    z4 = (INT32) wsptr[6];
 801081e:	f854 1c08 	ldr.w	r1, [r4, #-8]
    outptr = output_buf[ctr] + output_col;
 8010822:	920b      	str	r2, [sp, #44]	; 0x2c
 8010824:	9303      	str	r3, [sp, #12]
 8010826:	4613      	mov	r3, r2
 8010828:	9a80      	ldr	r2, [sp, #512]	; 0x200
    z2 = (INT32) wsptr[2];
 801082a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 801082e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010830:	f854 3c20 	ldr.w	r3, [r4, #-32]
    z3 = (INT32) wsptr[5];
 8010834:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010838:	3310      	adds	r3, #16
 801083a:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 801083c:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 801083e:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8010840:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8010842:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8010844:	f240 3119 	movw	r1, #793	; 0x319
 8010848:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801084a:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801084c:	4341      	muls	r1, r0
 801084e:	9802      	ldr	r0, [sp, #8]
 8010850:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8010854:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8010858:	fb00 500e 	mla	r0, r0, lr, r5
 801085c:	4408      	add	r0, r1
 801085e:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8010860:	f241 000c 	movw	r0, #4108	; 0x100c
 8010864:	fb00 f00e 	mul.w	r0, r0, lr
 8010868:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801086a:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801086e:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8010870:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8010874:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8010878:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801087a:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801087e:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8010882:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8010884:	1a2d      	subs	r5, r5, r0
 8010886:	440d      	add	r5, r1
 8010888:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801088a:	4d57      	ldr	r5, [pc, #348]	; (80109e8 <jpeg_idct_13x13+0x410>)
 801088c:	fb05 000e 	mla	r0, r5, lr, r0
 8010890:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8010892:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8010894:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8010896:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801089a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801089c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 80108a0:	4371      	muls	r1, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80108a2:	4e56      	ldr	r6, [pc, #344]	; (80109fc <jpeg_idct_13x13+0x424>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80108a4:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80108a8:	4851      	ldr	r0, [pc, #324]	; (80109f0 <jpeg_idct_13x13+0x418>)
 80108aa:	fb00 f00e 	mul.w	r0, r0, lr
 80108ae:	1ac0      	subs	r0, r0, r3
 80108b0:	1a40      	subs	r0, r0, r1
 80108b2:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80108b4:	484f      	ldr	r0, [pc, #316]	; (80109f4 <jpeg_idct_13x13+0x41c>)
 80108b6:	fb00 330e 	mla	r3, r0, lr, r3
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80108ba:	f642 2050 	movw	r0, #10832	; 0x2a50
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80108be:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 80108c0:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80108c4:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80108c6:	eb01 050c 	add.w	r5, r1, ip
    z2 = (INT32) wsptr[3];
 80108ca:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80108ce:	eb01 0b03 	add.w	fp, r1, r3
 80108d2:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80108d6:	f242 503e 	movw	r0, #9534	; 0x253e
 80108da:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80108dc:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80108e0:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 80108e4:	4841      	ldr	r0, [pc, #260]	; (80109ec <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80108e6:	fb07 fa09 	mul.w	sl, r7, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 80108ea:	eb0b 0705 	add.w	r7, fp, r5
 80108ee:	4457      	add	r7, sl
 80108f0:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80108f4:	4f40      	ldr	r7, [pc, #256]	; (80109f8 <jpeg_idct_13x13+0x420>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 80108f6:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80108f8:	eb03 000c 	add.w	r0, r3, ip
 80108fc:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80108fe:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8010902:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010906:	fb07 000c 	mla	r0, r7, ip, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801090a:	f607 5711 	addw	r7, r7, #3345	; 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801090e:	445e      	add	r6, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8010910:	f244 6b94 	movw	fp, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010914:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8010916:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801091a:	195d      	adds	r5, r3, r5
 801091c:	437d      	muls	r5, r7
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801091e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp11 += tmp14;
 8010922:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8010924:	fb0b 5507 	mla	r5, fp, r7, r5
 8010928:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801092a:	eb0c 0a07 	add.w	sl, ip, r7
 801092e:	4f34      	ldr	r7, [pc, #208]	; (8010a00 <jpeg_idct_13x13+0x428>)
 8010930:	fb07 fa0a 	mul.w	sl, r7, sl
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8010934:	f207 671e 	addw	r7, r7, #1566	; 0x61e
    tmp12 += tmp14;
 8010938:	4450      	add	r0, sl
    tmp13 += tmp14;
 801093a:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801093c:	f640 25d5 	movw	r5, #2773	; 0xad5
 8010940:	fb05 f509 	mul.w	r5, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8010944:	f640 2933 	movw	r9, #2611	; 0xa33
 8010948:	fb09 5101 	mla	r1, r9, r1, r5
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801094c:	f640 494e 	movw	r9, #3150	; 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8010950:	fb07 1103 	mla	r1, r7, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8010954:	ebac 0303 	sub.w	r3, ip, r3
 8010958:	f641 6702 	movw	r7, #7682	; 0x1e02
 801095c:	437b      	muls	r3, r7
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801095e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp14 += z1;
 8010962:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8010964:	fb09 330c 	mla	r3, r9, ip, r3
 8010968:	f46f 5c5f 	mvn.w	ip, #14272	; 0x37c0
 801096c:	fb0c 3307 	mla	r3, ip, r7, r3
 8010970:	eb03 0c05 	add.w	ip, r3, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010976:	9d04      	ldr	r5, [sp, #16]
 8010978:	441d      	add	r5, r3
			     & RANGE_MASK];
 801097a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801097e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8010982:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8010984:	9b80      	ldr	r3, [sp, #512]	; 0x200
 8010986:	54fd      	strb	r5, [r7, r3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010988:	9b04      	ldr	r3, [sp, #16]
 801098a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801098c:	1b5d      	subs	r5, r3, r5
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801098e:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8010990:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010994:	f818 5005 	ldrb.w	r5, [r8, r5]
 8010998:	7315      	strb	r5, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801099a:	199d      	adds	r5, r3, r6
			     & RANGE_MASK];
 801099c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80109a0:	f818 5005 	ldrb.w	r5, [r8, r5]
 80109a4:	7055      	strb	r5, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80109a6:	1b9d      	subs	r5, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80109a8:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80109aa:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80109ae:	f818 5005 	ldrb.w	r5, [r8, r5]
 80109b2:	72d5      	strb	r5, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80109b4:	181d      	adds	r5, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80109b6:	1a18      	subs	r0, r3, r0
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80109b8:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80109ba:	f3c5 4589 	ubfx	r5, r5, #18, #10
			     & RANGE_MASK];
 80109be:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80109c2:	f818 5005 	ldrb.w	r5, [r8, r5]
 80109c6:	7095      	strb	r5, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80109c8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80109cc:	7290      	strb	r0, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80109ce:	eb03 000a 	add.w	r0, r3, sl
			     & RANGE_MASK];
 80109d2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80109d6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80109da:	70d0      	strb	r0, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80109dc:	eba3 000a 	sub.w	r0, r3, sl
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80109e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80109e2:	f3c0 4089 	ubfx	r0, r0, #18, #10
 80109e6:	e00f      	b.n	8010a08 <jpeg_idct_13x13+0x430>
 80109e8:	ffffd7ee 	.word	0xffffd7ee
 80109ec:	ffffbf5b 	.word	0xffffbf5b
 80109f0:	fffffa8c 	.word	0xfffffa8c
 80109f4:	ffffe64b 	.word	0xffffe64b
 80109f8:	ffffcdb1 	.word	0xffffcdb1
 80109fc:	fffff52b 	.word	0xfffff52b
 8010a00:	ffffeaf8 	.word	0xffffeaf8
 8010a04:	fffff116 	.word	0xfffff116
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010a08:	f818 0000 	ldrb.w	r0, [r8, r0]
 8010a0c:	7250      	strb	r0, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010a0e:	1858      	adds	r0, r3, r1
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010a10:	1a59      	subs	r1, r3, r1
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010a12:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8010a14:	f3c0 4089 	ubfx	r0, r0, #18, #10
			     & RANGE_MASK];
 8010a18:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010a1c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8010a20:	7110      	strb	r0, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010a22:	f818 1001 	ldrb.w	r1, [r8, r1]
 8010a26:	7211      	strb	r1, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010a28:	eb03 010c 	add.w	r1, r3, ip
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010a2c:	eba3 030c 	sub.w	r3, r3, ip
			     & RANGE_MASK];
 8010a30:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 8010a34:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010a38:	f818 1001 	ldrb.w	r1, [r8, r1]
 8010a3c:	7151      	strb	r1, [r2, #5]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8010a3e:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010a42:	f818 3003 	ldrb.w	r3, [r8, r3]
 8010a46:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8010a48:	9b01      	ldr	r3, [sp, #4]
 8010a4a:	eba3 030e 	sub.w	r3, r3, lr
 8010a4e:	434b      	muls	r3, r1
 8010a50:	9902      	ldr	r1, [sp, #8]
 8010a52:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8010a56:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8010a5a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8010a5e:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8010a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a62:	9a03      	ldr	r2, [sp, #12]
 8010a64:	4293      	cmp	r3, r2
 8010a66:	f47f aed1 	bne.w	801080c <jpeg_idct_13x13+0x234>
  }
}
 8010a6a:	b077      	add	sp, #476	; 0x1dc
 8010a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a70 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a74:	b0fd      	sub	sp, #500	; 0x1f4
 8010a76:	f1a2 0b02 	sub.w	fp, r2, #2
 8010a7a:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a7c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010a80:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8010a82:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010a86:	1f03      	subs	r3, r0, #4
 8010a88:	9300      	str	r3, [sp, #0]
 8010a8a:	f102 030e 	add.w	r3, r2, #14
 8010a8e:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8010a90:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a92:	9900      	ldr	r1, [sp, #0]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8010a94:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a98:	f93b 4f02 	ldrsh.w	r4, [fp, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8010a9c:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010aa0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010aa4:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010aa6:	9100      	str	r1, [sp, #0]
 8010aa8:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010aaa:	9a00      	ldr	r2, [sp, #0]
 8010aac:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
 8010ab0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8010ab4:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ab6:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010ab8:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8010aba:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010abe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8010ac2:	fb01 f702 	mul.w	r7, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8010ac6:	f640 2112 	movw	r1, #2578	; 0xa12
 8010aca:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8010ace:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8010ad2:	19e6      	adds	r6, r4, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8010ad4:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010ad6:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8010ad8:	eb04 050c 	add.w	r5, r4, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010adc:	f9bb c020 	ldrsh.w	ip, [fp, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010ae0:	1abf      	subs	r7, r7, r2
    tmp12 = z1 - z4;
 8010ae2:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010ae4:	eba4 0247 	sub.w	r2, r4, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ae8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8010aec:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8010af0:	48d6      	ldr	r0, [pc, #856]	; (8010e4c <jpeg_idct_14x14+0x3dc>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010af2:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010af4:	9a00      	ldr	r2, [sp, #0]
 8010af6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010af8:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010afc:	f9bb 2060 	ldrsh.w	r2, [fp, #96]	; 0x60
 8010b00:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8010b02:	eb0c 0402 	add.w	r4, ip, r2
 8010b06:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8010b08:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8010b0c:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8010b10:	fb00 4402 	mla	r4, r0, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8010b14:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8010b18:	4342      	muls	r2, r0
    tmp20 = tmp10 + tmp13;
 8010b1a:	19f0      	adds	r0, r6, r7
 8010b1c:	9001      	str	r0, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8010b1e:	1bf0      	subs	r0, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8010b20:	fb0e 220c 	mla	r2, lr, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010b24:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	; 0x30
    tmp26 = tmp10 - tmp13;
 8010b28:	9002      	str	r0, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8010b2a:	1928      	adds	r0, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010b2c:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp11 + tmp14;
 8010b30:	9003      	str	r0, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8010b32:	1b28      	subs	r0, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b34:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8010b38:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 8010b3c:	9004      	str	r0, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8010b3e:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8010b40:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010b42:	9900      	ldr	r1, [sp, #0]
    tmp22 = tmp12 + tmp15;
 8010b44:	9005      	str	r0, [sp, #20]
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8010b46:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
    tmp24 = tmp12 - tmp15;
 8010b4a:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b4c:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010b4e:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b52:	6a12      	ldr	r2, [r2, #32]
 8010b54:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010b56:	9a00      	ldr	r2, [sp, #0]
 8010b58:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8010b5a:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010b5c:	9a00      	ldr	r2, [sp, #0]
 8010b5e:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010b62:	eb04 0c07 	add.w	ip, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010b66:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010b68:	f9bb 2070 	ldrsh.w	r2, [fp, #112]	; 0x70
    tmp14 = z1 + z3;
 8010b6c:	eb04 0a06 	add.w	sl, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010b70:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010b72:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8010b76:	fb05 f50a 	mul.w	r5, r5, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010b7a:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8010b7e:	49b4      	ldr	r1, [pc, #720]	; (8010e50 <jpeg_idct_14x14+0x3e0>)
 8010b80:	eb0c 0e05 	add.w	lr, ip, r5
 8010b84:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8010b88:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8010b8c:	f641 0114 	movw	r1, #6164	; 0x1814
 8010b90:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8010b94:	49af      	ldr	r1, [pc, #700]	; (8010e54 <jpeg_idct_14x14+0x3e4>)
 8010b96:	fb01 a104 	mla	r1, r1, r4, sl
    z1    -= z2;
 8010b9a:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8010b9c:	fb08 f804 	mul.w	r8, r8, r4
 8010ba0:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8010ba4:	4441      	add	r1, r8
 8010ba6:	9107      	str	r1, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8010ba8:	19b9      	adds	r1, r7, r6
 8010baa:	4341      	muls	r1, r0
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8010bac:	f6a0 0081 	subw	r0, r0, #2177	; 0x881
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8010bb0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8010bb4:	fb00 1007 	mla	r0, r0, r7, r1
 8010bb8:	4460      	add	r0, ip
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010bba:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8010bbe:	9008      	str	r0, [sp, #32]
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8010bc0:	48a5      	ldr	r0, [pc, #660]	; (8010e58 <jpeg_idct_14x14+0x3e8>)
 8010bc2:	fb00 1106 	mla	r1, r0, r6, r1
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010bc6:	48a5      	ldr	r0, [pc, #660]	; (8010e5c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8010bc8:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010bca:	1bf5      	subs	r5, r6, r7
 8010bcc:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010bd0:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8010bd4:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010bd6:	fb00 cc06 	mla	ip, r0, r6, ip

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010bda:	9801      	ldr	r0, [sp, #4]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8010bdc:	1b92      	subs	r2, r2, r6
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010bde:	eb00 040e 	add.w	r4, r0, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010be2:	44d4      	add	ip, sl
    tmp13 = (z1 - z3) << PASS1_BITS;
 8010be4:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8010be6:	f241 5a99 	movw	sl, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010bea:	12e4      	asrs	r4, r4, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8010bec:	fb0a 5507 	mla	r5, sl, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010bf0:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010bf4:	eba0 040e 	sub.w	r4, r0, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010bf8:	9803      	ldr	r0, [sp, #12]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8010bfa:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010bfc:	12e4      	asrs	r4, r4, #11
 8010bfe:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010c02:	9c08      	ldr	r4, [sp, #32]
 8010c04:	1904      	adds	r4, r0, r4
 8010c06:	12e4      	asrs	r4, r4, #11
 8010c08:	61dc      	str	r4, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010c0a:	9c08      	ldr	r4, [sp, #32]
 8010c0c:	1b04      	subs	r4, r0, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010c0e:	9805      	ldr	r0, [sp, #20]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010c10:	12e4      	asrs	r4, r4, #11
 8010c12:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010c16:	1844      	adds	r4, r0, r1
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010c18:	1a41      	subs	r1, r0, r1
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010c1a:	12e4      	asrs	r4, r4, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010c1c:	12c9      	asrs	r1, r1, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010c1e:	63dc      	str	r4, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010c20:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8010c24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010c26:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 8010c2a:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8010c2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010c2e:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010c32:	9907      	ldr	r1, [sp, #28]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8010c34:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010c38:	9a06      	ldr	r2, [sp, #24]
 8010c3a:	4462      	add	r2, ip
 8010c3c:	12d2      	asrs	r2, r2, #11
 8010c3e:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010c40:	9a06      	ldr	r2, [sp, #24]
 8010c42:	eba2 020c 	sub.w	r2, r2, ip
 8010c46:	12d2      	asrs	r2, r2, #11
 8010c48:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010c4c:	9a04      	ldr	r2, [sp, #16]
 8010c4e:	442a      	add	r2, r5
 8010c50:	12d2      	asrs	r2, r2, #11
 8010c52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010c56:	9a04      	ldr	r2, [sp, #16]
 8010c58:	1b52      	subs	r2, r2, r5
 8010c5a:	12d2      	asrs	r2, r2, #11
 8010c5c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010c60:	9a02      	ldr	r2, [sp, #8]
 8010c62:	440a      	add	r2, r1
 8010c64:	12d2      	asrs	r2, r2, #11
 8010c66:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8010c6a:	9a02      	ldr	r2, [sp, #8]
 8010c6c:	1a52      	subs	r2, r2, r1
 8010c6e:	12d2      	asrs	r2, r2, #11
 8010c70:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c76:	455a      	cmp	r2, fp
 8010c78:	f47f af0b 	bne.w	8010a92 <jpeg_idct_14x14+0x22>
 8010c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8010c7e:	a80c      	add	r0, sp, #48	; 0x30
 8010c80:	3b04      	subs	r3, #4
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c86:	3334      	adds	r3, #52	; 0x34
 8010c88:	930b      	str	r3, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010c8a:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8010c8c:	f640 2412 	movw	r4, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 8010c90:	6906      	ldr	r6, [r0, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8010c92:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8010c96:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8010c9a:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c9e:	6801      	ldr	r1, [r0, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8010ca0:	fb04 f706 	mul.w	r7, r4, r6
    outptr = output_buf[ctr] + output_col;
 8010ca4:	920a      	str	r2, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8010ca6:	f641 4437 	movw	r4, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	4613      	mov	r3, r2
 8010cae:	9a86      	ldr	r2, [sp, #536]	; 0x218
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010cb0:	3110      	adds	r1, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010cb2:	3020      	adds	r0, #32
    outptr = output_buf[ctr] + output_col;
 8010cb4:	189a      	adds	r2, r3, r2
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8010cb6:	f642 03c6 	movw	r3, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8010cba:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8010cbe:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8010cc0:	4366      	muls	r6, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8010cc2:	4c62      	ldr	r4, [pc, #392]	; (8010e4c <jpeg_idct_14x14+0x3dc>)
    tmp10 = z1 + z2;
 8010cc4:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8010cc8:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8010cca:	ebc6 3841 	rsb	r8, r6, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8010cce:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8010cd2:	1b9b      	subs	r3, r3, r6
    z1 = (INT32) wsptr[2];
 8010cd4:	f850 6c18 	ldr.w	r6, [r0, #-24]
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8010cd8:	005b      	lsls	r3, r3, #1
 8010cda:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8010cde:	9301      	str	r3, [sp, #4]
    z2 = (INT32) wsptr[6];
 8010ce0:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8010ce4:	18f1      	adds	r1, r6, r3
 8010ce6:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8010ce8:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8010cec:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8010cf0:	fb04 1103 	mla	r1, r4, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8010cf4:	f604 24e5 	addw	r4, r4, #2789	; 0xae5
 8010cf8:	4363      	muls	r3, r4
    tmp20 = tmp10 + tmp13;
 8010cfa:	eb0c 0407 	add.w	r4, ip, r7
 8010cfe:	9402      	str	r4, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8010d00:	ebac 0407 	sub.w	r4, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8010d04:	fb0e 3306 	mla	r3, lr, r6, r3
    z3 = (INT32) wsptr[5];
 8010d08:	f850 cc0c 	ldr.w	ip, [r0, #-12]
    tmp26 = tmp10 - tmp13;
 8010d0c:	9403      	str	r4, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8010d0e:	186c      	adds	r4, r5, r1
    tmp25 = tmp11 - tmp14;
 8010d10:	1a69      	subs	r1, r5, r1
    z4 = (INT32) wsptr[7];
 8010d12:	f850 6c04 	ldr.w	r6, [r0, #-4]
    tmp21 = tmp11 + tmp14;
 8010d16:	9404      	str	r4, [sp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8010d18:	f242 6452 	movw	r4, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 8010d1c:	9105      	str	r1, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8010d1e:	eb08 0103 	add.w	r1, r8, r3
    tmp24 = tmp12 - tmp15;
 8010d22:	eba8 0303 	sub.w	r3, r8, r3
    z2 = (INT32) wsptr[3];
 8010d26:	f850 8c14 	ldr.w	r8, [r0, #-20]
    tmp22 = tmp12 + tmp15;
 8010d2a:	9106      	str	r1, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010d2c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8010d30:	9307      	str	r3, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8010d32:	f640 6ef2 	movw	lr, #3826	; 0xef2
    z1 = (INT32) wsptr[1];
 8010d36:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    tmp14 = z1 + z3;
 8010d3a:	eb03 0b0c 	add.w	fp, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010d3e:	eb03 0508 	add.w	r5, r3, r8
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8010d42:	fb04 f40b 	mul.w	r4, r4, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010d46:	434d      	muls	r5, r1
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8010d48:	4941      	ldr	r1, [pc, #260]	; (8010e50 <jpeg_idct_14x14+0x3e0>)
 8010d4a:	192f      	adds	r7, r5, r4
 8010d4c:	eb07 3746 	add.w	r7, r7, r6, lsl #13
 8010d50:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8010d54:	f641 0114 	movw	r1, #6164	; 0x1814
 8010d58:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8010d5c:	493d      	ldr	r1, [pc, #244]	; (8010e54 <jpeg_idct_14x14+0x3e4>)
 8010d5e:	fb01 b103 	mla	r1, r1, r3, fp
    z1    -= z2;
 8010d62:	eba3 0308 	sub.w	r3, r3, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8010d66:	fb0e fe03 	mul.w	lr, lr, r3
    z1    -= z2;
 8010d6a:	9308      	str	r3, [sp, #32]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8010d6c:	ebae 3e46 	sub.w	lr, lr, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8010d70:	4b3b      	ldr	r3, [pc, #236]	; (8010e60 <jpeg_idct_14x14+0x3f0>)
    tmp16 += tmp15;
 8010d72:	4471      	add	r1, lr
 8010d74:	9109      	str	r1, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8010d76:	eb08 010c 	add.w	r1, r8, ip
 8010d7a:	fb0a f101 	mul.w	r1, sl, r1
 8010d7e:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8010d82:	fb03 1a08 	mla	sl, r3, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8010d86:	4b34      	ldr	r3, [pc, #208]	; (8010e58 <jpeg_idct_14x14+0x3e8>)
 8010d88:	fb03 110c 	mla	r1, r3, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8010d8c:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010d8e:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010d92:	4b32      	ldr	r3, [pc, #200]	; (8010e5c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8010d94:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010d96:	ebac 0408 	sub.w	r4, ip, r8
 8010d9a:	436c      	muls	r4, r5
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010d9c:	eb04 3546 	add.w	r5, r4, r6, lsl #13
 8010da0:	fb03 550c 	mla	r5, r3, ip, r5
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8010da4:	9b08      	ldr	r3, [sp, #32]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010da6:	445d      	add	r5, fp
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8010da8:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8010dac:	f241 5b99 	movw	fp, #5529	; 0x1599
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8010db0:	035b      	lsls	r3, r3, #13
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8010db2:	fb0b 4408 	mla	r4, fp, r8, r4
 8010db6:	4474      	add	r4, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8010db8:	eb03 3e46 	add.w	lr, r3, r6, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010dbc:	9e02      	ldr	r6, [sp, #8]
 8010dbe:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8010dc0:	eb06 0c07 	add.w	ip, r6, r7
 8010dc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			     & RANGE_MASK];
 8010dc6:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010dca:	f819 c00c 	ldrb.w	ip, [r9, ip]
 8010dce:	f806 c003 	strb.w	ip, [r6, r3]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010dd2:	9b02      	ldr	r3, [sp, #8]
 8010dd4:	1bde      	subs	r6, r3, r7
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010dd6:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8010dd8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010ddc:	f819 6006 	ldrb.w	r6, [r9, r6]
 8010de0:	7356      	strb	r6, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010de2:	eb03 060a 	add.w	r6, r3, sl
			     & RANGE_MASK];
 8010de6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010dea:	f819 6006 	ldrb.w	r6, [r9, r6]
 8010dee:	7056      	strb	r6, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010df0:	eba3 060a 	sub.w	r6, r3, sl
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010df4:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8010df6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010dfa:	f819 6006 	ldrb.w	r6, [r9, r6]
 8010dfe:	7316      	strb	r6, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010e00:	185e      	adds	r6, r3, r1
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010e02:	1a59      	subs	r1, r3, r1
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010e04:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8010e06:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8010e0a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010e0e:	f819 6006 	ldrb.w	r6, [r9, r6]
 8010e12:	7096      	strb	r6, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010e14:	f819 1001 	ldrb.w	r1, [r9, r1]
 8010e18:	72d1      	strb	r1, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010e1a:	eb03 010e 	add.w	r1, r3, lr
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010e1e:	eba3 030e 	sub.w	r3, r3, lr
			     & RANGE_MASK];
 8010e22:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 8010e26:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010e2a:	f819 1001 	ldrb.w	r1, [r9, r1]
 8010e2e:	70d1      	strb	r1, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010e30:	f819 3003 	ldrb.w	r3, [r9, r3]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8010e34:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010e36:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010e38:	9b07      	ldr	r3, [sp, #28]
 8010e3a:	442b      	add	r3, r5
			     & RANGE_MASK];
 8010e3c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010e40:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010e44:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010e46:	9b07      	ldr	r3, [sp, #28]
 8010e48:	1b5b      	subs	r3, r3, r5
 8010e4a:	e00b      	b.n	8010e64 <jpeg_idct_14x14+0x3f4>
 8010e4c:	ffffc8fc 	.word	0xffffc8fc
 8010e50:	ffffdbf0 	.word	0xffffdbf0
 8010e54:	ffffde0b 	.word	0xffffde0b
 8010e58:	ffffb409 	.word	0xffffb409
 8010e5c:	ffffc9e6 	.word	0xffffc9e6
 8010e60:	fffff26e 	.word	0xfffff26e
			     & RANGE_MASK];
 8010e64:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010e68:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010e6c:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010e6e:	9b05      	ldr	r3, [sp, #20]
 8010e70:	4423      	add	r3, r4
			     & RANGE_MASK];
 8010e72:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010e76:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010e7a:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010e7c:	9b05      	ldr	r3, [sp, #20]
 8010e7e:	1b1b      	subs	r3, r3, r4
			     & RANGE_MASK];
 8010e80:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010e84:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010e88:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8010e8a:	9b03      	ldr	r3, [sp, #12]
 8010e8c:	440b      	add	r3, r1
			     & RANGE_MASK];
 8010e8e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8010e92:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010e96:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8010e98:	9b03      	ldr	r3, [sp, #12]
 8010e9a:	1a5b      	subs	r3, r3, r1
			     & RANGE_MASK];
 8010e9c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8010ea0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010ea4:	71d3      	strb	r3, [r2, #7]
  for (ctr = 0; ctr < 14; ctr++) {
 8010ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ea8:	9a00      	ldr	r2, [sp, #0]
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	f47f aeed 	bne.w	8010c8a <jpeg_idct_14x14+0x21a>
  }
}
 8010eb0:	b07d      	add	sp, #500	; 0x1f4
 8010eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb6:	bf00      	nop

08010eb8 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ebc:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8010ec0:	f1a2 0a02 	sub.w	sl, r2, #2
 8010ec4:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010ec6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010eca:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8010ecc:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010ed0:	1f03      	subs	r3, r0, #4
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	f102 030e 	add.w	r3, r2, #14
 8010ed8:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8010eda:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010edc:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8010ede:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ee2:	f93a 5f02 	ldrsh.w	r5, [sl, #2]!
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8010ee6:	f241 2b68 	movw	fp, #4712	; 0x1268
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010eea:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8010eee:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ef2:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010ef6:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ef8:	9100      	str	r1, [sp, #0]
 8010efa:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010efc:	9a00      	ldr	r2, [sp, #0]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010efe:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8010f02:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f04:	f9ba 1020 	ldrsh.w	r1, [sl, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f08:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010f0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f10:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f12:	f9ba 2040 	ldrsh.w	r2, [sl, #64]	; 0x40
 8010f16:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010f18:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8010f1c:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010f20:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8010f22:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8010f26:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8010f2a:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8010f2e:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8010f30:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8010f34:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8010f36:	eba4 040c 	sub.w	r4, r4, ip
 8010f3a:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8010f3e:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8010f40:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8010f42:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8010f46:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8010f48:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8010f4c:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8010f50:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8010f54:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010f58:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8010f5a:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010f5e:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8010f60:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8010f64:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010f66:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8010f68:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8010f6c:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8010f70:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010f72:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8010f74:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8010f78:	443c      	add	r4, r7
 8010f7a:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8010f7e:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8010f82:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8010f86:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8010f88:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8010f8a:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8010f8c:	f641 114c 	movw	r1, #6476	; 0x194c
 8010f90:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8010f92:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8010f96:	440f      	add	r7, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8010f98:	436a      	muls	r2, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8010f9a:	1a76      	subs	r6, r6, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8010f9c:	18b8      	adds	r0, r7, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8010f9e:	18b2      	adds	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010fa0:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 8010fa4:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8010fa6:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8010fa8:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8010fac:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010fae:	f9ba 5030 	ldrsh.w	r5, [sl, #48]	; 0x30
    tmp11 += tmp11;
 8010fb2:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8010fb4:	9908      	ldr	r1, [sp, #32]
 8010fb6:	9a01      	ldr	r2, [sp, #4]
 8010fb8:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010fba:	9900      	ldr	r1, [sp, #0]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8010fbc:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010fbe:	6a09      	ldr	r1, [r1, #32]
 8010fc0:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
 8010fc4:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010fc6:	9900      	ldr	r1, [sp, #0]
 8010fc8:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8010fca:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010fcc:	9900      	ldr	r1, [sp, #0]
 8010fce:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010fd2:	f9ba e070 	ldrsh.w	lr, [sl, #112]	; 0x70
 8010fd6:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010fd8:	434e      	muls	r6, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8010fda:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010fde:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8010fe2:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010fe4:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp13 = z2 - z4;
 8010fe8:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8010fec:	1917      	adds	r7, r2, r4
 8010fee:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8010ff2:	f241 0c71 	movw	ip, #4209	; 0x1071
 8010ff6:	fb0c 7002 	mla	r0, ip, r2, r7
    z2 = z1 - z4;
 8010ffa:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8010ffe:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011000:	48cd      	ldr	r0, [pc, #820]	; (8011338 <jpeg_idct_15x15+0x480>)
 8011002:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011006:	48cd      	ldr	r0, [pc, #820]	; (801133c <jpeg_idct_15x15+0x484>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011008:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801100c:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801100e:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011012:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011014:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011018:	48c9      	ldr	r0, [pc, #804]	; (8011340 <jpeg_idct_15x15+0x488>)
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801101a:	eb02 010e 	add.w	r1, r2, lr
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801101e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011022:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011024:	f200 7071 	addw	r0, r0, #1905	; 0x771
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011028:	fb0b f101 	mul.w	r1, fp, r1
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801102c:	f640 7b39 	movw	fp, #3897	; 0xf39
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011030:	fb00 4402 	mla	r4, r0, r2, r4
 8011034:	980b      	ldr	r0, [sp, #44]	; 0x2c
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011036:	fb0b 1202 	mla	r2, fp, r2, r1
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801103a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801103e:	4404      	add	r4, r0
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011040:	ebac 0c06 	sub.w	ip, ip, r6
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011044:	1b92      	subs	r2, r2, r6
 8011046:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011048:	48be      	ldr	r0, [pc, #760]	; (8011344 <jpeg_idct_15x15+0x48c>)
 801104a:	fb00 110e 	mla	r1, r0, lr, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801104e:	9802      	ldr	r0, [sp, #8]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011050:	4431      	add	r1, r6
 8011052:	4429      	add	r1, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011054:	eb00 0508 	add.w	r5, r0, r8
 8011058:	12ed      	asrs	r5, r5, #11
 801105a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801105e:	eba0 0508 	sub.w	r5, r0, r8
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011062:	9806      	ldr	r0, [sp, #24]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011064:	12ed      	asrs	r5, r5, #11
 8011066:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801106a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801106c:	1945      	adds	r5, r0, r5
 801106e:	12ed      	asrs	r5, r5, #11
 8011070:	61dd      	str	r5, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011072:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011074:	1b45      	subs	r5, r0, r5
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011076:	9809      	ldr	r0, [sp, #36]	; 0x24
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011078:	12ed      	asrs	r5, r5, #11
 801107a:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801107e:	eb00 050c 	add.w	r5, r0, ip
 8011082:	12ed      	asrs	r5, r5, #11
 8011084:	63dd      	str	r5, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011086:	eba0 050c 	sub.w	r5, r0, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801108a:	9803      	ldr	r0, [sp, #12]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801108c:	12ed      	asrs	r5, r5, #11
 801108e:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011092:	1885      	adds	r5, r0, r2
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011094:	1a82      	subs	r2, r0, r2
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011096:	12ed      	asrs	r5, r5, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011098:	12d2      	asrs	r2, r2, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801109a:	65dd      	str	r5, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801109c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80110a0:	9a07      	ldr	r2, [sp, #28]
 80110a2:	443a      	add	r2, r7
 80110a4:	12d2      	asrs	r2, r2, #11
 80110a6:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80110a8:	9a07      	ldr	r2, [sp, #28]
 80110aa:	1bd2      	subs	r2, r2, r7
 80110ac:	12d2      	asrs	r2, r2, #11
 80110ae:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80110b2:	9a04      	ldr	r2, [sp, #16]
 80110b4:	440a      	add	r2, r1
 80110b6:	12d2      	asrs	r2, r2, #11
 80110b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80110bc:	9a04      	ldr	r2, [sp, #16]
 80110be:	1a52      	subs	r2, r2, r1
 80110c0:	12d2      	asrs	r2, r2, #11
 80110c2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80110c6:	9a05      	ldr	r2, [sp, #20]
 80110c8:	4422      	add	r2, r4
 80110ca:	12d2      	asrs	r2, r2, #11
 80110cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80110d0:	9a05      	ldr	r2, [sp, #20]
 80110d2:	1b12      	subs	r2, r2, r4
 80110d4:	12d2      	asrs	r2, r2, #11
 80110d6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80110da:	9a01      	ldr	r2, [sp, #4]
 80110dc:	9908      	ldr	r1, [sp, #32]
 80110de:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 80110e2:	12d2      	asrs	r2, r2, #11
 80110e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80110e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110ea:	4552      	cmp	r2, sl
 80110ec:	f47f aef6 	bne.w	8010edc <jpeg_idct_15x15+0x24>
 80110f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110f2:	3b04      	subs	r3, #4
 80110f4:	9301      	str	r3, [sp, #4]
 80110f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110f8:	3338      	adds	r3, #56	; 0x38
 80110fa:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 80110fc:	ab0e      	add	r3, sp, #56	; 0x38
 80110fe:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011100:	9b01      	ldr	r3, [sp, #4]

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011102:	f640 51fc 	movw	r1, #3580	; 0xdfc
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011106:	f44f 74bb 	mov.w	r4, #374	; 0x176
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801110a:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 801110e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[5];
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011112:	f242 7a31 	movw	sl, #10033	; 0x2731
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011116:	f241 0871 	movw	r8, #4209	; 0x1071
    outptr = output_buf[ctr] + output_col;
 801111a:	920c      	str	r2, [sp, #48]	; 0x30
 801111c:	9301      	str	r3, [sp, #4]
 801111e:	4613      	mov	r3, r2
 8011120:	9a90      	ldr	r2, [sp, #576]	; 0x240
 8011122:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011124:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[2];
 8011126:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8011128:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801112a:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 801112c:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801112e:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011130:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011134:	f242 419d 	movw	r1, #9373	; 0x249d
 8011138:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 801113a:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 801113e:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011142:	eba2 020c 	sub.w	r2, r2, ip
 8011146:	0052      	lsls	r2, r2, #1
 8011148:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 801114c:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 801114e:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011150:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011154:	9202      	str	r2, [sp, #8]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011156:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801115a:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801115e:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8011160:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011164:	1a8a      	subs	r2, r1, r2
 8011166:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8011168:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801116c:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011170:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 8011172:	9403      	str	r4, [sp, #12]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011174:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011178:	9204      	str	r2, [sp, #16]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801117a:	f241 1282 	movw	r2, #4482	; 0x1182
 801117e:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8011180:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011184:	440a      	add	r2, r1
 8011186:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 801118a:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801118e:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8011190:	9405      	str	r4, [sp, #20]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011192:	4c69      	ldr	r4, [pc, #420]	; (8011338 <jpeg_idct_15x15+0x480>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011194:	9206      	str	r2, [sp, #24]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8011196:	f641 124c 	movw	r2, #6476	; 0x194c
 801119a:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801119c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp24 = tmp13 - tmp10 + tmp11;
 80111a0:	1a3f      	subs	r7, r7, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80111a2:	4372      	muls	r2, r6
    tmp21 = tmp12 + tmp10 + tmp11;
 80111a4:	4401      	add	r1, r0
 80111a6:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80111a8:	18ba      	adds	r2, r7, r2
 80111aa:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80111ac:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 80111b0:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80111b2:	f641 269a 	movw	r6, #6810	; 0x1a9a
    tmp11 += tmp11;
 80111b6:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80111b8:	9808      	ldr	r0, [sp, #32]
 80111ba:	9a02      	ldr	r2, [sp, #8]
 80111bc:	eb02 0b00 	add.w	fp, r2, r0
    z2 = (INT32) wsptr[3];
 80111c0:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 80111c2:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[3];
 80111c4:	68c7      	ldr	r7, [r0, #12]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80111c6:	6940      	ldr	r0, [r0, #20]
    z1 = (INT32) wsptr[1];
 80111c8:	6852      	ldr	r2, [r2, #4]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80111ca:	fb0a fc00 	mul.w	ip, sl, r0
    z4 = (INT32) wsptr[7];
 80111ce:	9800      	ldr	r0, [sp, #0]
 80111d0:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 80111d4:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80111d8:	1950      	adds	r0, r2, r5
 80111da:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80111dc:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80111e0:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80111e4:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 80111e8:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80111ec:	4c56      	ldr	r4, [pc, #344]	; (8011348 <jpeg_idct_15x15+0x490>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80111ee:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80111f0:	4852      	ldr	r0, [pc, #328]	; (801133c <jpeg_idct_15x15+0x484>)
 80111f2:	4378      	muls	r0, r7
 80111f4:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80111f6:	4852      	ldr	r0, [pc, #328]	; (8011340 <jpeg_idct_15x15+0x488>)
 80111f8:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80111fa:	f642 5002 	movw	r0, #11522	; 0x2d02
 80111fe:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011202:	fb0a f505 	mul.w	r5, sl, r5
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011206:	f241 2a68 	movw	sl, #4712	; 0x1268
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801120a:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801120e:	fb04 0002 	mla	r0, r4, r2, r0
 8011212:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011214:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011216:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801121a:	4420      	add	r0, r4
 801121c:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801121e:	eb02 000e 	add.w	r0, r2, lr
 8011222:	fb0a f000 	mul.w	r0, sl, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011226:	f640 7a39 	movw	sl, #3897	; 0xf39
 801122a:	fb0a 0202 	mla	r2, sl, r2, r0
 801122e:	eba2 020c 	sub.w	r2, r2, ip
 8011232:	eb02 0a04 	add.w	sl, r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011236:	4c43      	ldr	r4, [pc, #268]	; (8011344 <jpeg_idct_15x15+0x48c>)
 8011238:	fb04 000e 	mla	r0, r4, lr, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801123c:	9c03      	ldr	r4, [sp, #12]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801123e:	4460      	add	r0, ip
 8011240:	4438      	add	r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011242:	19a7      	adds	r7, r4, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011244:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011248:	f819 7007 	ldrb.w	r7, [r9, r7]
 801124c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801124e:	9a90      	ldr	r2, [sp, #576]	; 0x240
 8011250:	54a7      	strb	r7, [r4, r2]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011252:	9a03      	ldr	r2, [sp, #12]
 8011254:	1b96      	subs	r6, r2, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011256:	9a04      	ldr	r2, [sp, #16]
			     & RANGE_MASK];
 8011258:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801125c:	f819 6006 	ldrb.w	r6, [r9, r6]
 8011260:	739e      	strb	r6, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011262:	eb01 0608 	add.w	r6, r1, r8
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011266:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 801126a:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 801126e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011272:	f819 6006 	ldrb.w	r6, [r9, r6]
 8011276:	705e      	strb	r6, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011278:	f819 1001 	ldrb.w	r1, [r9, r1]
 801127c:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801127e:	eb0b 0105 	add.w	r1, fp, r5
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011282:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8011286:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 801128a:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801128e:	f819 1001 	ldrb.w	r1, [r9, r1]
 8011292:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011294:	f819 100b 	ldrb.w	r1, [r9, fp]
 8011298:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801129a:	eb02 010a 	add.w	r1, r2, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801129e:	eba2 020a 	sub.w	r2, r2, sl
			     & RANGE_MASK];
 80112a2:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80112a6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80112aa:	f819 1001 	ldrb.w	r1, [r9, r1]
 80112ae:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80112b0:	f819 2002 	ldrb.w	r2, [r9, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80112b4:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80112b6:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80112b8:	9a07      	ldr	r2, [sp, #28]
 80112ba:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80112bc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80112c0:	f819 2002 	ldrb.w	r2, [r9, r2]
 80112c4:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80112c6:	9a07      	ldr	r2, [sp, #28]
 80112c8:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80112ca:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80112ce:	f819 2002 	ldrb.w	r2, [r9, r2]
 80112d2:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80112d4:	9a05      	ldr	r2, [sp, #20]
 80112d6:	4402      	add	r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80112d8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80112dc:	f819 2002 	ldrb.w	r2, [r9, r2]
 80112e0:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80112e2:	9a05      	ldr	r2, [sp, #20]
 80112e4:	1a12      	subs	r2, r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80112e6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80112ea:	f819 2002 	ldrb.w	r2, [r9, r2]
 80112ee:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80112f0:	9a06      	ldr	r2, [sp, #24]
 80112f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112f4:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80112f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80112fa:	f819 2002 	ldrb.w	r2, [r9, r2]
 80112fe:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011300:	9a06      	ldr	r2, [sp, #24]
 8011302:	1a52      	subs	r2, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011304:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011306:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801130a:	f819 2002 	ldrb.w	r2, [r9, r2]
 801130e:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011310:	9a02      	ldr	r2, [sp, #8]
 8011312:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011316:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 801131a:	f819 2002 	ldrb.w	r2, [r9, r2]
 801131e:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 8011320:	9b00      	ldr	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8011322:	9a01      	ldr	r2, [sp, #4]
    wsptr += 8;		/* advance pointer to next row */
 8011324:	3320      	adds	r3, #32
 8011326:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8011328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801132a:	4293      	cmp	r3, r2
 801132c:	f47f aee8 	bne.w	8011100 <jpeg_idct_15x15+0x248>
  }
}
 8011330:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8011334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011338:	ffffba5c 	.word	0xffffba5c
 801133c:	ffffe566 	.word	0xffffe566
 8011340:	ffffd4f6 	.word	0xffffd4f6
 8011344:	ffffe42f 	.word	0xffffe42f
 8011348:	ffffdc67 	.word	0xffffdc67

0801134c <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011350:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8011354:	f1a2 0b02 	sub.w	fp, r2, #2
 8011358:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801135a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801135e:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011362:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8011364:	f1a3 0a04 	sub.w	sl, r3, #4
 8011368:	f102 030e 	add.w	r3, r2, #14
 801136c:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801136e:	ab0e      	add	r3, sp, #56	; 0x38
 8011370:	9300      	str	r3, [sp, #0]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011372:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011376:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801137a:	f85a 1f04 	ldr.w	r1, [sl, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801137e:	f642 4563 	movw	r5, #11363	; 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011382:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011386:	f245 2e03 	movw	lr, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801138a:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801138c:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011390:	f9bb c060 	ldrsh.w	ip, [fp, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011394:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8011396:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011398:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801139c:	4bcd      	ldr	r3, [pc, #820]	; (80116d4 <jpeg_idct_16x16+0x388>)
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 801139e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80113a2:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80113a4:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80113a6:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 80113aa:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80113ac:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80113ae:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80113b0:	1a52      	subs	r2, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80113b2:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 80113b6:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80113ba:	f8da 10c0 	ldr.w	r1, [sl, #192]	; 0xc0
 80113be:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80113c2:	f640 01d4 	movw	r1, #2260	; 0x8d4
    z3 = z1 - z2;
 80113c6:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80113ca:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80113cc:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80113ce:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80113d2:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80113d6:	fb03 4409 	mla	r4, r3, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80113da:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80113de:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80113e2:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80113e6:	fb03 110c 	mla	r1, r3, ip, r1
    tmp20 = tmp10 + tmp0;
 80113ea:	eb07 030e 	add.w	r3, r7, lr
 80113ee:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80113f0:	eba7 030e 	sub.w	r3, r7, lr
 80113f4:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80113f6:	1973      	adds	r3, r6, r5
 80113f8:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80113fa:	1b73      	subs	r3, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80113fc:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8011400:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8011402:	1913      	adds	r3, r2, r4
 8011404:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8011406:	1b13      	subs	r3, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011408:	f8da 2020 	ldr.w	r2, [sl, #32]
    tmp25 = tmp13 - tmp2;
 801140c:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801140e:	1843      	adds	r3, r0, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011410:	f8da 40e0 	ldr.w	r4, [sl, #224]	; 0xe0
    tmp23 = tmp11 + tmp3;
 8011414:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8011416:	1a43      	subs	r3, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011418:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801141c:	f8da 0060 	ldr.w	r0, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011420:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011422:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
    tmp24 = tmp11 - tmp3;
 8011426:	9308      	str	r3, [sp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011428:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801142a:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 801142e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011430:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011434:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011436:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011438:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 801143c:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801143e:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011440:	eb01 0e00 	add.w	lr, r1, r0
 8011444:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8011448:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801144c:	fb09 f907 	mul.w	r9, r9, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011450:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8011454:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8011458:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801145c:	f241 5455 	movw	r4, #5461	; 0x1555
 8011460:	fb04 f307 	mul.w	r3, r4, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011464:	1a8c      	subs	r4, r1, r2
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011466:	eb06 0709 	add.w	r7, r6, r9
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801146a:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801146c:	f640 5323 	movw	r3, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011470:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011472:	435c      	muls	r4, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011474:	4b98      	ldr	r3, [pc, #608]	; (80116d8 <jpeg_idct_16x16+0x38c>)
 8011476:	fb03 7701 	mla	r7, r3, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801147a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801147c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801147e:	eb0c 0403 	add.w	r4, ip, r3
 8011482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011484:	441c      	add	r4, r3
 8011486:	4b95      	ldr	r3, [pc, #596]	; (80116dc <jpeg_idct_16x16+0x390>)
 8011488:	fb03 4101 	mla	r1, r3, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801148c:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801148e:	4b94      	ldr	r3, [pc, #592]	; (80116e0 <jpeg_idct_16x16+0x394>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011490:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011492:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8011496:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8011498:	f240 214d 	movw	r1, #589	; 0x24d
 801149c:	fb01 4102 	mla	r1, r1, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80114a0:	fb03 4405 	mla	r4, r3, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80114a4:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80114a8:	440e      	add	r6, r1
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80114aa:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80114ac:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80114ae:	f642 5909 	movw	r9, #11529	; 0x2d09
 80114b2:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80114b6:	fb03 1905 	mla	r9, r3, r5, r1
 80114ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114bc:	4499      	add	r9, r3
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80114be:	f643 731a 	movw	r3, #16154	; 0x3f1a
 80114c2:	fb03 1102 	mla	r1, r3, r2, r1
 80114c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    z2    += z4;
 80114c8:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80114ca:	18cb      	adds	r3, r1, r3
 80114cc:	9309      	str	r3, [sp, #36]	; 0x24
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80114ce:	4b85      	ldr	r3, [pc, #532]	; (80116e4 <jpeg_idct_16x16+0x398>)
 80114d0:	fb03 f102 	mul.w	r1, r3, r2
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80114d4:	f242 2318 	movw	r3, #8728	; 0x2218
    tmp1  += z1;
 80114d8:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80114da:	fb03 1100 	mla	r1, r3, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80114de:	4b82      	ldr	r3, [pc, #520]	; (80116e8 <jpeg_idct_16x16+0x39c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80114e0:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80114e2:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80114e6:	435a      	muls	r2, r3
    tmp12 += z2;
 80114e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80114ea:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 80114ee:	441a      	add	r2, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80114f0:	4b7e      	ldr	r3, [pc, #504]	; (80116ec <jpeg_idct_16x16+0x3a0>)
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80114f2:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80114f4:	eb05 0c00 	add.w	ip, r5, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80114f8:	1b40      	subs	r0, r0, r5
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80114fa:	fb03 fc0c 	mul.w	ip, r3, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80114fe:	f640 5323 	movw	r3, #3363	; 0xd23
 8011502:	4358      	muls	r0, r3
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8011504:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 8011506:	4464      	add	r4, ip
    tmp3  += z2;
 8011508:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801150a:	19dd      	adds	r5, r3, r7
 801150c:	9b00      	ldr	r3, [sp, #0]
    tmp10 += z2;
 801150e:	4486      	add	lr, r0
    tmp11 += z2;
 8011510:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8011512:	12ed      	asrs	r5, r5, #11
 8011514:	601d      	str	r5, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8011516:	9b01      	ldr	r3, [sp, #4]
 8011518:	1bdd      	subs	r5, r3, r7
 801151a:	9b00      	ldr	r3, [sp, #0]
 801151c:	12ed      	asrs	r5, r5, #11
 801151e:	f8c3 51e0 	str.w	r5, [r3, #480]	; 0x1e0
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8011522:	9b03      	ldr	r3, [sp, #12]
 8011524:	199d      	adds	r5, r3, r6
 8011526:	9b00      	ldr	r3, [sp, #0]
 8011528:	12ed      	asrs	r5, r5, #11
 801152a:	621d      	str	r5, [r3, #32]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801152c:	9b03      	ldr	r3, [sp, #12]
 801152e:	1b9d      	subs	r5, r3, r6
 8011530:	9b00      	ldr	r3, [sp, #0]
 8011532:	12ed      	asrs	r5, r5, #11
 8011534:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8011538:	9b05      	ldr	r3, [sp, #20]
 801153a:	191d      	adds	r5, r3, r4
 801153c:	9b00      	ldr	r3, [sp, #0]
 801153e:	12ed      	asrs	r5, r5, #11
 8011540:	641d      	str	r5, [r3, #64]	; 0x40
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8011542:	9b05      	ldr	r3, [sp, #20]
 8011544:	1b1c      	subs	r4, r3, r4
 8011546:	9b00      	ldr	r3, [sp, #0]
 8011548:	12e4      	asrs	r4, r4, #11
 801154a:	f8c3 41a0 	str.w	r4, [r3, #416]	; 0x1a0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801154e:	9b07      	ldr	r3, [sp, #28]
 8011550:	185c      	adds	r4, r3, r1
 8011552:	9b00      	ldr	r3, [sp, #0]
 8011554:	12e4      	asrs	r4, r4, #11
 8011556:	661c      	str	r4, [r3, #96]	; 0x60
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8011558:	9b07      	ldr	r3, [sp, #28]
 801155a:	1a59      	subs	r1, r3, r1
 801155c:	9b00      	ldr	r3, [sp, #0]
 801155e:	12c9      	asrs	r1, r1, #11
 8011560:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8011564:	9b08      	ldr	r3, [sp, #32]
 8011566:	eb03 010e 	add.w	r1, r3, lr
 801156a:	9b00      	ldr	r3, [sp, #0]
 801156c:	12c9      	asrs	r1, r1, #11
 801156e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8011572:	9b08      	ldr	r3, [sp, #32]
 8011574:	eba3 010e 	sub.w	r1, r3, lr
 8011578:	9b00      	ldr	r3, [sp, #0]
 801157a:	12c9      	asrs	r1, r1, #11
 801157c:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8011580:	9b06      	ldr	r3, [sp, #24]
 8011582:	1819      	adds	r1, r3, r0
 8011584:	9b00      	ldr	r3, [sp, #0]
 8011586:	12c9      	asrs	r1, r1, #11
 8011588:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801158c:	9b06      	ldr	r3, [sp, #24]
 801158e:	1a19      	subs	r1, r3, r0
 8011590:	9b00      	ldr	r3, [sp, #0]
 8011592:	12c9      	asrs	r1, r1, #11
 8011594:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8011598:	9b04      	ldr	r3, [sp, #16]
 801159a:	1899      	adds	r1, r3, r2
 801159c:	9b00      	ldr	r3, [sp, #0]
 801159e:	12c9      	asrs	r1, r1, #11
 80115a0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80115a4:	9b04      	ldr	r3, [sp, #16]
 80115a6:	1a9a      	subs	r2, r3, r2
 80115a8:	9b00      	ldr	r3, [sp, #0]
 80115aa:	12d2      	asrs	r2, r2, #11
 80115ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80115b0:	9b02      	ldr	r3, [sp, #8]
 80115b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115b4:	189a      	adds	r2, r3, r2
 80115b6:	9b00      	ldr	r3, [sp, #0]
 80115b8:	12d2      	asrs	r2, r2, #11
 80115ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80115be:	9b02      	ldr	r3, [sp, #8]
 80115c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115c2:	1a9a      	subs	r2, r3, r2
 80115c4:	9b00      	ldr	r3, [sp, #0]
 80115c6:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80115c8:	3304      	adds	r3, #4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80115ca:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115d2:	455b      	cmp	r3, fp
 80115d4:	f47f aecd 	bne.w	8011372 <jpeg_idct_16x16+0x26>
 80115d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115da:	3b04      	subs	r3, #4
 80115dc:	9301      	str	r3, [sp, #4]
 80115de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115e0:	333c      	adds	r3, #60	; 0x3c
 80115e2:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 80115e4:	ab0e      	add	r3, sp, #56	; 0x38
 80115e6:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80115e8:	9b01      	ldr	r3, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80115ea:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80115ee:	f642 14cf 	movw	r4, #10703	; 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80115f2:	f642 4663 	movw	r6, #11363	; 0x2c63
    outptr = output_buf[ctr] + output_col;
 80115f6:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80115fa:	f245 2703 	movw	r7, #20995	; 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80115fe:	4d35      	ldr	r5, [pc, #212]	; (80116d4 <jpeg_idct_16x16+0x388>)
    outptr = output_buf[ctr] + output_col;
 8011600:	920c      	str	r2, [sp, #48]	; 0x30
 8011602:	9301      	str	r3, [sp, #4]
 8011604:	4613      	mov	r3, r2
 8011606:	9a98      	ldr	r2, [sp, #608]	; 0x260
 8011608:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801160a:	9b00      	ldr	r3, [sp, #0]
    z1 = (INT32) wsptr[4];
 801160c:	9a00      	ldr	r2, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801160e:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8011610:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011612:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011614:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011616:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011618:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp10 = tmp0 + tmp1;
 801161c:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8011620:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8011624:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8011628:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 801162c:	9b00      	ldr	r3, [sp, #0]
 801162e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 8011632:	f8d3 a018 	ldr.w	sl, [r3, #24]
    z3 = z1 - z2;
 8011636:	eba9 030a 	sub.w	r3, r9, sl
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801163a:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801163c:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801163e:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011642:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8011646:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801164a:	f205 25ee 	addw	r5, r5, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801164e:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8011652:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8011656:	fb05 000a 	mla	r0, r5, sl, r0
    tmp20 = tmp10 + tmp0;
 801165a:	eb0e 0507 	add.w	r5, lr, r7
 801165e:	9502      	str	r5, [sp, #8]
    tmp27 = tmp10 - tmp0;
 8011660:	ebae 0507 	sub.w	r5, lr, r7
 8011664:	9503      	str	r5, [sp, #12]
    tmp21 = tmp12 + tmp1;
 8011666:	eb0c 0506 	add.w	r5, ip, r6
 801166a:	9504      	str	r5, [sp, #16]
    tmp26 = tmp12 - tmp1;
 801166c:	ebac 0506 	sub.w	r5, ip, r6
 8011670:	9505      	str	r5, [sp, #20]
    tmp22 = tmp13 + tmp2;
 8011672:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8011674:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 8011676:	9506      	str	r5, [sp, #24]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011678:	f640 5523 	movw	r5, #3363	; 0xd23
    tmp25 = tmp13 - tmp2;
 801167c:	9307      	str	r3, [sp, #28]
    tmp23 = tmp11 + tmp3;
 801167e:	1823      	adds	r3, r4, r0
 8011680:	9308      	str	r3, [sp, #32]
    tmp24 = tmp11 - tmp3;
 8011682:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 8011684:	9800      	ldr	r0, [sp, #0]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011686:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp24 = tmp11 - tmp3;
 801168a:	9309      	str	r3, [sp, #36]	; 0x24
    z1 = (INT32) wsptr[1];
 801168c:	9b00      	ldr	r3, [sp, #0]
    z3 = (INT32) wsptr[5];
 801168e:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 8011690:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8011692:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8011694:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8011696:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801169a:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801169c:	eba2 0b03 	sub.w	fp, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80116a0:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80116a4:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80116a8:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80116aa:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80116ae:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80116b2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80116b6:	f641 44b6 	movw	r4, #7350	; 0x1cb6
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80116ba:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80116be:	4d06      	ldr	r5, [pc, #24]	; (80116d8 <jpeg_idct_16x16+0x38c>)
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80116c0:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80116c4:	f241 5455 	movw	r4, #5461	; 0x1555
 80116c8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp0  = tmp1 + tmp2 + tmp3 -
 80116cc:	eb06 0409 	add.w	r4, r6, r9
 80116d0:	4474      	add	r4, lr
 80116d2:	e00d      	b.n	80116f0 <jpeg_idct_16x16+0x3a4>
 80116d4:	ffffecc2 	.word	0xffffecc2
 80116d8:	ffffb6d6 	.word	0xffffb6d6
 80116dc:	ffffc542 	.word	0xffffc542
 80116e0:	ffffdbfa 	.word	0xffffdbfa
 80116e4:	ffffeaab 	.word	0xffffeaab
 80116e8:	ffffd817 	.word	0xffffd817
 80116ec:	ffffd4b2 	.word	0xffffd4b2
 80116f0:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80116f4:	f605 656c 	addw	r5, r5, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80116f8:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80116fa:	eb0c 040a 	add.w	r4, ip, sl
 80116fe:	445c      	add	r4, fp
 8011700:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011704:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011706:	4d5e      	ldr	r5, [pc, #376]	; (8011880 <jpeg_idct_16x16+0x534>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011708:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801170a:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801170e:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8011710:	f240 224d 	movw	r2, #589	; 0x24d
 8011714:	fb02 4203 	mla	r2, r2, r3, r4
 8011718:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801171a:	4a5a      	ldr	r2, [pc, #360]	; (8011884 <jpeg_idct_16x16+0x538>)
 801171c:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8011720:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011722:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8011724:	f642 5909 	movw	r9, #11529	; 0x2d09
 8011728:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801172c:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
    z2    += z4;
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8011730:	f6a5 7563 	subw	r5, r5, #3939	; 0xf63
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011734:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8011736:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801173a:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 801173e:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8011740:	eb02 0a0b 	add.w	sl, r2, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8011744:	4a50      	ldr	r2, [pc, #320]	; (8011888 <jpeg_idct_16x16+0x53c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011746:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801174a:	435a      	muls	r2, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801174c:	436b      	muls	r3, r5
    tmp1  += z1;
 801174e:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011750:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
    tmp12 += z2;
 8011754:	449a      	add	sl, r3
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011756:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011758:	f246 4e85 	movw	lr, #25733	; 0x6485
 801175c:	fb0e 3e00 	mla	lr, lr, r0, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011760:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011764:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011766:	441d      	add	r5, r3
 8011768:	eb07 0c00 	add.w	ip, r7, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801176c:	1bc0      	subs	r0, r0, r7
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801176e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011770:	fb05 fc0c 	mul.w	ip, r5, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011774:	f640 5523 	movw	r5, #3363	; 0xd23
 8011778:	4368      	muls	r0, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801177a:	9d02      	ldr	r5, [sp, #8]
    tmp2  += z2;
 801177c:	4464      	add	r4, ip
    tmp3  += z2;
 801177e:	4462      	add	r2, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011780:	19ef      	adds	r7, r5, r7
 8011782:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    tmp10 += z2;
 8011784:	4486      	add	lr, r0
    tmp11 += z2;
 8011786:	4448      	add	r0, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011788:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801178c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8011790:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8011792:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8011794:	9b02      	ldr	r3, [sp, #8]
 8011796:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011798:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801179a:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 801179c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80117a0:	f818 7007 	ldrb.w	r7, [r8, r7]
 80117a4:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80117a6:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80117a8:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80117aa:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80117ac:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 80117b0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80117b4:	f818 7007 	ldrb.w	r7, [r8, r7]
 80117b8:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80117ba:	f818 6006 	ldrb.w	r6, [r8, r6]
 80117be:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80117c0:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80117c2:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80117c4:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80117c6:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 80117ca:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80117ce:	f818 6006 	ldrb.w	r6, [r8, r6]
 80117d2:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80117d4:	f818 4004 	ldrb.w	r4, [r8, r4]
 80117d8:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80117da:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80117dc:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80117de:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80117e0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 80117e4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80117e8:	f818 4004 	ldrb.w	r4, [r8, r4]
 80117ec:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80117ee:	f818 2002 	ldrb.w	r2, [r8, r2]
 80117f2:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80117f4:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117f8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80117fc:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011800:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8011802:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8011806:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8011808:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801180c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011810:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8011812:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011814:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8011818:	f818 2002 	ldrb.w	r2, [r8, r2]
 801181c:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801181e:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8011820:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8011822:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8011826:	f818 2002 	ldrb.w	r2, [r8, r2]
 801182a:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801182c:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8011830:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8011834:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011838:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801183c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011840:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8011842:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8011846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8011848:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801184a:	9b03      	ldr	r3, [sp, #12]
 801184c:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801184e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8011852:	f818 3003 	ldrb.w	r3, [r8, r3]
 8011856:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8011858:	9b03      	ldr	r3, [sp, #12]
 801185a:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 801185c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801185e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8011862:	f818 3003 	ldrb.w	r3, [r8, r3]
 8011866:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 8011868:	9b00      	ldr	r3, [sp, #0]
 801186a:	3320      	adds	r3, #32
 801186c:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
 801186e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011870:	4293      	cmp	r3, r2
 8011872:	f47f aeb9 	bne.w	80115e8 <jpeg_idct_16x16+0x29c>
  }
}
 8011876:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187e:	bf00      	nop
 8011880:	ffffe77a 	.word	0xffffe77a
 8011884:	ffffdbfa 	.word	0xffffdbfa
 8011888:	ffffeaab 	.word	0xffffeaab

0801188c <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011890:	b0d1      	sub	sp, #324	; 0x144
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011892:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 8011894:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8011896:	a910      	add	r1, sp, #64	; 0x40
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011898:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801189c:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80118a0:	1e93      	subs	r3, r2, #2
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	f105 0320 	add.w	r3, r5, #32
 80118a8:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80118aa:	9b01      	ldr	r3, [sp, #4]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80118ac:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80118ae:	f855 0b04 	ldr.w	r0, [r5], #4
 80118b2:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80118b4:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 80118b8:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80118bc:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 80118c0:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80118c4:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 80118c8:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80118cc:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80118d0:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80118d4:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80118d6:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80118da:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80118dc:	ea4e 0000 	orr.w	r0, lr, r0
 80118e0:	4330      	orrs	r0, r6
 80118e2:	ea48 0000 	orr.w	r0, r8, r0
 80118e6:	4320      	orrs	r0, r4
 80118e8:	ea59 0000 	orrs.w	r0, r9, r0
 80118ec:	f040 8152 	bne.w	8011b94 <jpeg_idct_16x8+0x308>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80118f0:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 80118f2:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80118f6:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 80118f8:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80118fa:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80118fc:	67cb      	str	r3, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 80118fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8011902:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8011906:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801190a:	9b05      	ldr	r3, [sp, #20]
 801190c:	42ab      	cmp	r3, r5
 801190e:	d1cc      	bne.n	80118aa <jpeg_idct_16x8+0x1e>
 8011910:	9b04      	ldr	r3, [sp, #16]
 8011912:	3b04      	subs	r3, #4
 8011914:	9302      	str	r3, [sp, #8]
 8011916:	9b04      	ldr	r3, [sp, #16]
 8011918:	331c      	adds	r3, #28
 801191a:	930f      	str	r3, [sp, #60]	; 0x3c
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 801191c:	ab10      	add	r3, sp, #64	; 0x40
 801191e:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011920:	9b02      	ldr	r3, [sp, #8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011922:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011926:	f642 14cf 	movw	r4, #10703	; 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801192a:	f642 4663 	movw	r6, #11363	; 0x2c63
    outptr = output_buf[ctr] + output_col;
 801192e:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011932:	f245 2703 	movw	r7, #20995	; 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8011936:	4dd7      	ldr	r5, [pc, #860]	; (8011c94 <jpeg_idct_16x8+0x408>)
    outptr = output_buf[ctr] + output_col;
 8011938:	920e      	str	r2, [sp, #56]	; 0x38
 801193a:	9302      	str	r3, [sp, #8]
 801193c:	4613      	mov	r3, r2
 801193e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 8011940:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011942:	9b01      	ldr	r3, [sp, #4]
    z1 = (INT32) wsptr[4];
 8011944:	9a01      	ldr	r2, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011946:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8011948:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801194a:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801194c:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801194e:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011950:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp10 = tmp0 + tmp1;
 8011954:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8011958:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 801195c:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8011960:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 8011964:	9b01      	ldr	r3, [sp, #4]
 8011966:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 801196a:	f8d3 8018 	ldr.w	r8, [r3, #24]
    z3 = z1 - z2;
 801196e:	eba9 0308 	sub.w	r3, r9, r8
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011972:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8011974:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011976:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801197a:	fb07 3708 	mla	r7, r7, r8, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801197e:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8011982:	f205 25ee 	addw	r5, r5, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011986:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801198a:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801198e:	fb05 0008 	mla	r0, r5, r8, r0
    tmp20 = tmp10 + tmp0;
 8011992:	eb0e 0507 	add.w	r5, lr, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011996:	f640 5823 	movw	r8, #3363	; 0xd23
    tmp20 = tmp10 + tmp0;
 801199a:	9503      	str	r5, [sp, #12]
    tmp27 = tmp10 - tmp0;
 801199c:	ebae 0507 	sub.w	r5, lr, r7
 80119a0:	9504      	str	r5, [sp, #16]
    tmp21 = tmp12 + tmp1;
 80119a2:	eb0c 0506 	add.w	r5, ip, r6
 80119a6:	9505      	str	r5, [sp, #20]
    tmp26 = tmp12 - tmp1;
 80119a8:	ebac 0506 	sub.w	r5, ip, r6
 80119ac:	9506      	str	r5, [sp, #24]
    tmp22 = tmp13 + tmp2;
 80119ae:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 80119b0:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 80119b2:	9507      	str	r5, [sp, #28]
    tmp25 = tmp13 - tmp2;
 80119b4:	9308      	str	r3, [sp, #32]
    tmp23 = tmp11 + tmp3;
 80119b6:	1823      	adds	r3, r4, r0
    tmp0  = tmp1 + tmp2 + tmp3 -
 80119b8:	4db7      	ldr	r5, [pc, #732]	; (8011c98 <jpeg_idct_16x8+0x40c>)
    tmp23 = tmp11 + tmp3;
 80119ba:	9309      	str	r3, [sp, #36]	; 0x24
    tmp24 = tmp11 - tmp3;
 80119bc:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 80119be:	9801      	ldr	r0, [sp, #4]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80119c0:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp24 = tmp11 - tmp3;
 80119c4:	930a      	str	r3, [sp, #40]	; 0x28
    z1 = (INT32) wsptr[1];
 80119c6:	9b01      	ldr	r3, [sp, #4]
    z3 = (INT32) wsptr[5];
 80119c8:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 80119ca:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 80119cc:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 80119ce:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 80119d0:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80119d4:	18d6      	adds	r6, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80119d6:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80119da:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80119de:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80119e0:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80119e4:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80119e8:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80119ec:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80119f0:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80119f4:	f241 5455 	movw	r4, #5461	; 0x1555
 80119f8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80119fc:	1ad4      	subs	r4, r2, r3
 80119fe:	fb08 f404 	mul.w	r4, r8, r4
 8011a02:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011a04:	eb06 0409 	add.w	r4, r6, r9
 8011a08:	4474      	add	r4, lr
 8011a0a:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011a0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011a10:	940c      	str	r4, [sp, #48]	; 0x30
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011a12:	eb0c 040a 	add.w	r4, ip, sl
 8011a16:	442c      	add	r4, r5
 8011a18:	4da0      	ldr	r5, [pc, #640]	; (8011c9c <jpeg_idct_16x8+0x410>)
 8011a1a:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011a1e:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011a20:	4d9f      	ldr	r5, [pc, #636]	; (8011ca0 <jpeg_idct_16x8+0x414>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011a22:	920d      	str	r2, [sp, #52]	; 0x34
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011a24:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8011a28:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8011a2a:	f240 224d 	movw	r2, #589	; 0x24d
 8011a2e:	fb02 4203 	mla	r2, r2, r3, r4
 8011a32:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011a34:	4a9b      	ldr	r2, [pc, #620]	; (8011ca4 <jpeg_idct_16x8+0x418>)
 8011a36:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8011a3a:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011a3c:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8011a3e:	f642 5909 	movw	r9, #11529	; 0x2d09
 8011a42:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011a46:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8011a4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011a4c:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8011a4e:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8011a52:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 8011a56:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8011a58:	eb02 0a05 	add.w	sl, r2, r5
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8011a5c:	4a92      	ldr	r2, [pc, #584]	; (8011ca8 <jpeg_idct_16x8+0x41c>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011a5e:	f242 2518 	movw	r5, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8011a62:	435a      	muls	r2, r3
    tmp1  += z1;
 8011a64:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011a66:	fb05 2200 	mla	r2, r5, r0, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8011a6a:	4d90      	ldr	r5, [pc, #576]	; (8011cac <jpeg_idct_16x8+0x420>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011a6c:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011a6e:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8011a72:	436b      	muls	r3, r5
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011a74:	fb0e 3e00 	mla	lr, lr, r0, r3
    tmp12 += z2;
 8011a78:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011a7a:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011a7e:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011a80:	eb07 0c00 	add.w	ip, r7, r0
 8011a84:	441d      	add	r5, r3
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011a86:	1bc0      	subs	r0, r0, r7
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011a88:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011a8c:	9d03      	ldr	r5, [sp, #12]
 8011a8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011a90:	fb08 f000 	mul.w	r0, r8, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011a94:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    tmp2  += z2;
 8011a96:	4464      	add	r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011a98:	19ef      	adds	r7, r5, r7
 8011a9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    tmp3  += z2;
 8011a9c:	4462      	add	r2, ip
    tmp10 += z2;
 8011a9e:	4486      	add	lr, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011aa0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp11 += z2;
 8011aa4:	4448      	add	r0, r9
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011aa6:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8011aaa:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8011aac:	9b03      	ldr	r3, [sp, #12]
 8011aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ab0:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8011ab2:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8011ab4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8011ab8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8011abc:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8011abe:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8011ac0:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8011ac2:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8011ac4:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8011ac8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8011acc:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8011ad0:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8011ad2:	f81b 6006 	ldrb.w	r6, [fp, r6]
 8011ad6:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8011ad8:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8011ada:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8011adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8011ade:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8011ae2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8011ae6:	f81b 6006 	ldrb.w	r6, [fp, r6]
 8011aea:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8011aec:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8011af0:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8011af2:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8011af4:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8011af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			     & RANGE_MASK];
 8011af8:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 8011afc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8011b00:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8011b04:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8011b06:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011b0a:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8011b0c:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011b10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8011b14:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011b18:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8011b1a:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8011b1e:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8011b20:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8011b24:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011b28:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8011b2a:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011b2c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8011b30:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011b34:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8011b36:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011b38:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8011b3c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8011b40:	9b06      	ldr	r3, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8011b42:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8011b44:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8011b48:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8011b4c:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011b50:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8011b54:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011b58:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8011b5a:	f81b 3003 	ldrb.w	r3, [fp, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8011b5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8011b60:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8011b62:	9b04      	ldr	r3, [sp, #16]
 8011b64:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011b66:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8011b6a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011b6e:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8011b70:	9b04      	ldr	r3, [sp, #16]
 8011b72:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8011b74:	9a02      	ldr	r2, [sp, #8]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011b76:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8011b7a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011b7e:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 8011b80:	9b01      	ldr	r3, [sp, #4]
 8011b82:	3320      	adds	r3, #32
 8011b84:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
 8011b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	f47f aec9 	bne.w	8011920 <jpeg_idct_16x8+0x94>
  }
}
 8011b8e:	b051      	add	sp, #324	; 0x144
 8011b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b94:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8011b96:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 8011b9a:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b9c:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b9e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011ba6:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8011ba8:	183c      	adds	r4, r7, r0
 8011baa:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8011bac:	f641 027e 	movw	r2, #6270	; 0x187e
 8011bb0:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8011bb4:	4a3e      	ldr	r2, [pc, #248]	; (8011cb0 <jpeg_idct_16x8+0x424>)
 8011bb6:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011bba:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8011bbc:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8011bbe:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8011bc2:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 8011bc6:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8011bca:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bcc:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 8011bd0:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8011bd2:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bd4:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bd6:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011bda:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bde:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011be2:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011be6:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 8011be8:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011bea:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011bee:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8011bf2:	eb08 040a 	add.w	r4, r8, sl
    tmp12 = tmp1 - tmp3;
 8011bf6:	9303      	str	r3, [sp, #12]
    tmp0 += z1 + z2;
 8011bf8:	f640 138e 	movw	r3, #2446	; 0x98e
    z2 = tmp0 + tmp2;
 8011bfc:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011c00:	1930      	adds	r0, r6, r4
 8011c02:	4350      	muls	r0, r2
    z2 += z1;
 8011c04:	4a2b      	ldr	r2, [pc, #172]	; (8011cb4 <jpeg_idct_16x8+0x428>)
 8011c06:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 8011c0a:	4a2b      	ldr	r2, [pc, #172]	; (8011cb8 <jpeg_idct_16x8+0x42c>)
 8011c0c:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8011c10:	eb09 040a 	add.w	r4, r9, sl
 8011c14:	4a29      	ldr	r2, [pc, #164]	; (8011cbc <jpeg_idct_16x8+0x430>)
 8011c16:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8011c18:	1932      	adds	r2, r6, r4
    tmp3 += z1 + z3;
 8011c1a:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8011c1c:	fb03 2909 	mla	r9, r3, r9, r2
    tmp3 += z1 + z3;
 8011c20:	f243 030b 	movw	r3, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011c24:	4a26      	ldr	r2, [pc, #152]	; (8011cc0 <jpeg_idct_16x8+0x434>)
    tmp3 += z1 + z3;
 8011c26:	fb03 440a 	mla	r4, r3, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011c2a:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8011c2e:	f244 13b3 	movw	r3, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011c32:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8011c36:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8011c38:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8011c3a:	fb03 0008 	mla	r0, r3, r8, r0
    tmp2 += z1 + z2;
 8011c3e:	f246 2854 	movw	r8, #25172	; 0x6254
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011c42:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 8011c44:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011c48:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011c4c:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011c50:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011c52:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011c56:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011c5a:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011c5e:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011c62:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011c66:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011c68:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011c6a:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011c6c:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011c6e:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011c70:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011c74:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011c76:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011c78:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011c7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011c7e:	9b02      	ldr	r3, [sp, #8]
 8011c80:	444b      	add	r3, r9
 8011c82:	12db      	asrs	r3, r3, #11
 8011c84:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8011c86:	9b02      	ldr	r3, [sp, #8]
 8011c88:	eba3 0309 	sub.w	r3, r3, r9
 8011c8c:	12db      	asrs	r3, r3, #11
 8011c8e:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8011c90:	e63b      	b.n	801190a <jpeg_idct_16x8+0x7e>
 8011c92:	bf00      	nop
 8011c94:	ffffecc2 	.word	0xffffecc2
 8011c98:	ffffb6d6 	.word	0xffffb6d6
 8011c9c:	ffffc542 	.word	0xffffc542
 8011ca0:	ffffe77a 	.word	0xffffe77a
 8011ca4:	ffffdbfa 	.word	0xffffdbfa
 8011ca8:	ffffeaab 	.word	0xffffeaab
 8011cac:	ffffd817 	.word	0xffffd817
 8011cb0:	ffffc4df 	.word	0xffffc4df
 8011cb4:	ffffc13b 	.word	0xffffc13b
 8011cb8:	fffff384 	.word	0xfffff384
 8011cbc:	ffffe333 	.word	0xffffe333
 8011cc0:	ffffadfd 	.word	0xffffadfd

08011cc4 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc8:	b0c5      	sub	sp, #276	; 0x114
 8011cca:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8011ccc:	f1a2 0c02 	sub.w	ip, r2, #2
 8011cd0:	320e      	adds	r2, #14
 8011cd2:	9303      	str	r3, [sp, #12]
 8011cd4:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011cd6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011cda:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8011cde:	9205      	str	r2, [sp, #20]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011ce0:	3380      	adds	r3, #128	; 0x80
 8011ce2:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ce4:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8011ce8:	f640 2012 	movw	r0, #2578	; 0xa12
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011cec:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8011cf0:	f642 09c6 	movw	r9, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011cf4:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011cf8:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011cfc:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011cfe:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d02:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8011d06:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011d08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d0c:	9202      	str	r2, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011d0e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011d10:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011d12:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8011d16:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d1a:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8011d1e:	4351      	muls	r1, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8011d20:	f641 4237 	movw	r2, #7223	; 0x1c37
 8011d24:	eba8 0701 	sub.w	r7, r8, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8011d28:	186b      	adds	r3, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8011d2a:	4357      	muls	r7, r2
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8011d2c:	eba5 0208 	sub.w	r2, r5, r8
 8011d30:	4342      	muls	r2, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011d32:	9802      	ldr	r0, [sp, #8]
 8011d34:	18bc      	adds	r4, r7, r2
 8011d36:	4404      	add	r4, r0
 8011d38:	48bd      	ldr	r0, [pc, #756]	; (8012030 <jpeg_idct_14x7+0x36c>)
 8011d3a:	fb00 4408 	mla	r4, r0, r8, r4
    tmp10 = z1 + z3;
 8011d3e:	1868      	adds	r0, r5, r1
 8011d40:	9004      	str	r0, [sp, #16]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8011d42:	9802      	ldr	r0, [sp, #8]
 8011d44:	fb09 0003 	mla	r0, r9, r3, r0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8011d48:	f46f 731f 	mvn.w	r3, #636	; 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011d4c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8011d50:	fb03 0101 	mla	r1, r3, r1, r0
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8011d54:	4bb7      	ldr	r3, [pc, #732]	; (8012034 <jpeg_idct_14x7+0x370>)
 8011d56:	fb03 0005 	mla	r0, r3, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d5a:	6a35      	ldr	r5, [r6, #32]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8011d5c:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d5e:	6e37      	ldr	r7, [r6, #96]	; 0x60
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8011d60:	4410      	add	r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d62:	f9bc 2010 	ldrsh.w	r2, [ip, #16]

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8011d66:	f641 53ef 	movw	r3, #7663	; 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d6a:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d6c:	f9bc 5030 	ldrsh.w	r5, [ip, #48]	; 0x30
 8011d70:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011d72:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8011d76:	eb02 0b05 	add.w	fp, r2, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011d7a:	fb07 f909 	mul.w	r9, r7, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8011d7e:	1b57      	subs	r7, r2, r5
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8011d80:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8011d84:	f240 5373 	movw	r3, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8011d88:	444a      	add	r2, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8011d8a:	444d      	add	r5, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8011d8c:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8011d8e:	4baa      	ldr	r3, [pc, #680]	; (8012038 <jpeg_idct_14x7+0x374>)
    tmp10 = tmp11 - tmp12;
 8011d90:	ebab 0a07 	sub.w	sl, fp, r7
    tmp11 += tmp12;
 8011d94:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8011d96:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8011d9a:	435d      	muls	r5, r3
    z2 -= tmp10;
 8011d9c:	9b04      	ldr	r3, [sp, #16]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8011d9e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8011da2:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8011da6:	442f      	add	r7, r5
    z2 -= tmp10;
 8011da8:	eba8 0803 	sub.w	r8, r8, r3
    tmp10 += z2;
 8011dac:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8011dae:	fb0b 2209 	mla	r2, fp, r9, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8011db2:	9b02      	ldr	r3, [sp, #8]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8011db4:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011db6:	eb01 050a 	add.w	r5, r1, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011dba:	eba1 010a 	sub.w	r1, r1, sl
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011dbe:	12ed      	asrs	r5, r5, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011dc0:	12c9      	asrs	r1, r1, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011dc2:	f84e 5c04 	str.w	r5, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011dc6:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011dca:	19e1      	adds	r1, r4, r7
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011dcc:	1be4      	subs	r4, r4, r7
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011dce:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011dd0:	12e4      	asrs	r4, r4, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011dd2:	f8ce 101c 	str.w	r1, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011dd6:	1881      	adds	r1, r0, r2
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011dd8:	1a80      	subs	r0, r0, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8011dda:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011dde:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011de0:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8011de4:	fb02 3208 	mla	r2, r2, r8, r3
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011de8:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011dea:	12c0      	asrs	r0, r0, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011dec:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8011df0:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011df2:	4563      	cmp	r3, ip
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011df4:	f8ce 007c 	str.w	r0, [lr, #124]	; 0x7c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8011df8:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011dfc:	f47f af72 	bne.w	8011ce4 <jpeg_idct_14x7+0x20>
 8011e00:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8011e02:	ac0c      	add	r4, sp, #48	; 0x30
 8011e04:	f1a3 0904 	sub.w	r9, r3, #4
 8011e08:	3318      	adds	r3, #24
 8011e0a:	930b      	str	r3, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011e0c:	f859 3f04 	ldr.w	r3, [r9, #4]!
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011e10:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8011e14:	9a4e      	ldr	r2, [sp, #312]	; 0x138

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011e16:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z4 = (INT32) wsptr[4];
 8011e1a:	6927      	ldr	r7, [r4, #16]
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011e1c:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    outptr = output_buf[ctr] + output_col;
 8011e20:	1899      	adds	r1, r3, r2
 8011e22:	930a      	str	r3, [sp, #40]	; 0x28
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011e24:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011e28:	6820      	ldr	r0, [r4, #0]
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011e2a:	3420      	adds	r4, #32
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011e2c:	fb03 f207 	mul.w	r2, r3, r7
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011e30:	f640 2312 	movw	r3, #2578	; 0xa12
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011e34:	3010      	adds	r0, #16
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011e36:	fb03 fe07 	mul.w	lr, r3, r7
    tmp10 = z1 + z2;
 8011e3a:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011e3e:	436f      	muls	r7, r5
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011e40:	4472      	add	r2, lr
    tmp11 = z1 + z3;
 8011e42:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z1 = (INT32) wsptr[2];
 8011e46:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 8011e4a:	ebc7 3540 	rsb	r5, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011e4e:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011e50:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011e54:	0052      	lsls	r2, r2, #1
 8011e56:	ebc2 3340 	rsb	r3, r2, r0, lsl #13
    z2 = (INT32) wsptr[6];
 8011e5a:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011e5e:	eb0e 0002 	add.w	r0, lr, r2
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011e62:	9302      	str	r3, [sp, #8]
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011e64:	4b75      	ldr	r3, [pc, #468]	; (801203c <jpeg_idct_14x7+0x378>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011e66:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011e68:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8011e6c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011e70:	fb03 0002 	mla	r0, r3, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011e74:	f603 23e5 	addw	r3, r3, #2789	; 0xae5
 8011e78:	435a      	muls	r2, r3
    tmp20 = tmp10 + tmp13;
 8011e7a:	eb0c 0307 	add.w	r3, ip, r7
 8011e7e:	9303      	str	r3, [sp, #12]
    tmp26 = tmp10 - tmp13;
 8011e80:	ebac 0307 	sub.w	r3, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011e84:	fb08 220e 	mla	r2, r8, lr, r2
    z3 = (INT32) wsptr[5];
 8011e88:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp26 = tmp10 - tmp13;
 8011e8c:	9304      	str	r3, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8011e8e:	1833      	adds	r3, r6, r0
    z2 = (INT32) wsptr[3];
 8011e90:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011e94:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8011e98:	9305      	str	r3, [sp, #20]
    tmp25 = tmp11 - tmp14;
 8011e9a:	1a33      	subs	r3, r6, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011e9c:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp25 = tmp11 - tmp14;
 8011ea0:	9306      	str	r3, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8011ea2:	18ab      	adds	r3, r5, r2
 8011ea4:	9307      	str	r3, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8011ea6:	1aab      	subs	r3, r5, r2
    z1 = (INT32) wsptr[1];
 8011ea8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011eac:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp24 = tmp12 - tmp15;
 8011eb0:	9308      	str	r3, [sp, #32]
    tmp14 = z1 + z3;
 8011eb2:	eb02 0b0c 	add.w	fp, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011eb6:	eb02 0608 	add.w	r6, r2, r8
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011eba:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011ebe:	4346      	muls	r6, r0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011ec0:	f641 0014 	movw	r0, #6164	; 0x1814
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011ec4:	fb05 f50b 	mul.w	r5, r5, fp
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011ec8:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011ecc:	1977      	adds	r7, r6, r5
 8011ece:	eb07 3743 	add.w	r7, r7, r3, lsl #13
 8011ed2:	4b5b      	ldr	r3, [pc, #364]	; (8012040 <jpeg_idct_14x7+0x37c>)
 8011ed4:	fb03 7702 	mla	r7, r3, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011ed8:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011edc:	fb03 b002 	mla	r0, r3, r2, fp
    z1    -= z2;
 8011ee0:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011ee4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011ee8:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011eec:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011ef0:	ebae 3e43 	sub.w	lr, lr, r3, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011ef4:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8011ef6:	eb00 030e 	add.w	r3, r0, lr
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011efa:	eb08 000c 	add.w	r0, r8, ip
    tmp16 += tmp15;
 8011efe:	9309      	str	r3, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011f00:	fb0a f000 	mul.w	r0, sl, r0
 8011f04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011f08:	eba0 3043 	sub.w	r0, r0, r3, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011f0c:	4b4d      	ldr	r3, [pc, #308]	; (8012044 <jpeg_idct_14x7+0x380>)
 8011f0e:	fb03 0a08 	mla	sl, r3, r8, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011f12:	4b4d      	ldr	r3, [pc, #308]	; (8012048 <jpeg_idct_14x7+0x384>)
 8011f14:	fb03 000c 	mla	r0, r3, ip, r0
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011f18:	44b2      	add	sl, r6
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011f1a:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011f1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011f22:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011f24:	ebac 0508 	sub.w	r5, ip, r8
 8011f28:	4375      	muls	r5, r6
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011f2a:	eb05 3643 	add.w	r6, r5, r3, lsl #13
 8011f2e:	4b47      	ldr	r3, [pc, #284]	; (801204c <jpeg_idct_14x7+0x388>)
 8011f30:	fb03 660c 	mla	r6, r3, ip, r6
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011f34:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011f38:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011f3a:	f241 5b99 	movw	fp, #5529	; 0x1599
 8011f3e:	fb0b 5508 	mla	r5, fp, r8, r5
 8011f42:	4475      	add	r5, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011f44:	eb02 3e43 	add.w	lr, r2, r3, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011f48:	9b03      	ldr	r3, [sp, #12]
 8011f4a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8011f4c:	eb03 0c07 	add.w	ip, r3, r7
 8011f50:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011f52:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011f56:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8011f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f5c:	f803 c002 	strb.w	ip, [r3, r2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011f60:	9b03      	ldr	r3, [sp, #12]
 8011f62:	1bdf      	subs	r7, r3, r7
 8011f64:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011f66:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011f6a:	5ddf      	ldrb	r7, [r3, r7]
 8011f6c:	734f      	strb	r7, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011f6e:	9b05      	ldr	r3, [sp, #20]
 8011f70:	eb03 070a 	add.w	r7, r3, sl
 8011f74:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011f76:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011f7a:	5ddf      	ldrb	r7, [r3, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011f7c:	9b05      	ldr	r3, [sp, #20]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011f7e:	704f      	strb	r7, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011f80:	eba3 070a 	sub.w	r7, r3, sl
 8011f84:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011f86:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011f8a:	5ddf      	ldrb	r7, [r3, r7]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011f8c:	9b07      	ldr	r3, [sp, #28]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011f8e:	730f      	strb	r7, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011f90:	181f      	adds	r7, r3, r0
 8011f92:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011f94:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011f98:	5ddf      	ldrb	r7, [r3, r7]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011f9a:	9b07      	ldr	r3, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011f9c:	708f      	strb	r7, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011f9e:	1a18      	subs	r0, r3, r0
 8011fa0:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011fa2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011fa6:	5c18      	ldrb	r0, [r3, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011fa8:	9b02      	ldr	r3, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011faa:	72c8      	strb	r0, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011fac:	eb03 000e 	add.w	r0, r3, lr
 8011fb0:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011fb2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011fb6:	5c18      	ldrb	r0, [r3, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011fb8:	9b02      	ldr	r3, [sp, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011fba:	70c8      	strb	r0, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011fbc:	eba3 020e 	sub.w	r2, r3, lr
 8011fc0:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011fc2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011fc6:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011fc8:	9b08      	ldr	r3, [sp, #32]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011fca:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011fcc:	199a      	adds	r2, r3, r6
 8011fce:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011fd0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011fd4:	5c9a      	ldrb	r2, [r3, r2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011fd6:	9b08      	ldr	r3, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011fd8:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011fda:	1b9a      	subs	r2, r3, r6
 8011fdc:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011fde:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011fe2:	5c9a      	ldrb	r2, [r3, r2]
 8011fe4:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011fe6:	9b06      	ldr	r3, [sp, #24]
 8011fe8:	195a      	adds	r2, r3, r5
 8011fea:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011fec:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011ff0:	5c9a      	ldrb	r2, [r3, r2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011ff2:	9b06      	ldr	r3, [sp, #24]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011ff4:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011ff6:	1b5a      	subs	r2, r3, r5
 8011ff8:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8011ffa:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011ffe:	5c9a      	ldrb	r2, [r3, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012000:	9b04      	ldr	r3, [sp, #16]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012002:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012006:	189a      	adds	r2, r3, r2
 8012008:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801200a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801200e:	5c9a      	ldrb	r2, [r3, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012010:	9b04      	ldr	r3, [sp, #16]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012012:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012016:	1a9a      	subs	r2, r3, r2
 8012018:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801201a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801201e:	5c9a      	ldrb	r2, [r3, r2]
  for (ctr = 0; ctr < 7; ctr++) {
 8012020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012022:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8012024:	454b      	cmp	r3, r9
 8012026:	f47f aef1 	bne.w	8011e0c <jpeg_idct_14x7+0x148>
  }
}
 801202a:	b045      	add	sp, #276	; 0x114
 801202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012030:	ffffc515 	.word	0xffffc515
 8012034:	ffffb0f1 	.word	0xffffb0f1
 8012038:	ffffd3e1 	.word	0xffffd3e1
 801203c:	ffffc8fc 	.word	0xffffc8fc
 8012040:	ffffdbf0 	.word	0xffffdbf0
 8012044:	fffff26e 	.word	0xfffff26e
 8012048:	ffffb409 	.word	0xffffb409
 801204c:	ffffc9e6 	.word	0xffffc9e6

08012050 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012054:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012058:	b0bb      	sub	sp, #236	; 0xec
 801205a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801205c:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801205e:	3080      	adds	r0, #128	; 0x80
 8012060:	320e      	adds	r2, #14
 8012062:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012064:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012066:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012068:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801206a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801206e:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012072:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012076:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012078:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801207c:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801207e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012082:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012086:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8012088:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801208a:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801208e:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012092:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012096:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801209a:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 801209c:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 801209e:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80120a2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80120a4:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80120a8:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80120aa:	6a28      	ldr	r0, [r5, #32]
    tmp20 = tmp11 + tmp10;
 80120ac:	eb04 0e02 	add.w	lr, r4, r2
    tmp22 = tmp11 - tmp10;
 80120b0:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80120b2:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 80120b6:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80120b8:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80120ba:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80120be:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 80120c2:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80120c6:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80120ca:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80120ce:	eb02 0c08 	add.w	ip, r2, r8
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80120d2:	eba2 0209 	sub.w	r2, r2, r9
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80120d6:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80120da:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80120de:	eba2 0208 	sub.w	r2, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80120e2:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 80120e6:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80120e8:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80120ec:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80120f0:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80120f4:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80120f8:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80120fc:	f8c7 e09c 	str.w	lr, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8012100:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8012104:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012108:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801210c:	f8c7 e01c 	str.w	lr, [r7, #28]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8012110:	67fa      	str	r2, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012112:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012116:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801211a:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801211c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801211e:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012120:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012122:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012124:	42b2      	cmp	r2, r6
 8012126:	d1a0      	bne.n	801206a <jpeg_idct_12x6+0x1a>
 8012128:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 801212c:	aa0a      	add	r2, sp, #40	; 0x28
 801212e:	3314      	adds	r3, #20
 8012130:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012132:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012136:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8012138:	9944      	ldr	r1, [sp, #272]	; 0x110
 801213a:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801213c:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8012140:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012142:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8012146:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 801214a:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801214c:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 8012150:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012154:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8012158:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 801215c:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012160:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012162:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8012166:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801216a:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 801216c:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 8012170:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8012172:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8012176:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 801217a:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801217e:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8012182:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8012186:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8012188:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801218c:	1b49      	subs	r1, r1, r5
    tmp10 = z1 + z3;
 801218e:	eb08 0b06 	add.w	fp, r8, r6
    tmp20 = tmp10 + tmp12;
 8012192:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8012194:	eba7 000c 	sub.w	r0, r7, ip
    z4 = (INT32) wsptr[7];
 8012198:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801219c:	f641 378d 	movw	r7, #7053	; 0x1b8d
    tmp25 = tmp10 - tmp12;
 80121a0:	9005      	str	r0, [sp, #20]
    tmp22 = tmp11 + tmp12;
 80121a2:	1860      	adds	r0, r4, r1
    tmp23 = tmp11 - tmp12;
 80121a4:	1a61      	subs	r1, r4, r1
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80121a6:	eb05 0c0b 	add.w	ip, r5, fp
    tmp22 = tmp11 + tmp12;
 80121aa:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80121ac:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp23 = tmp11 - tmp12;
 80121b0:	9107      	str	r1, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80121b2:	eb06 0905 	add.w	r9, r6, r5
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80121b6:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80121ba:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80121be:	f640 075b 	movw	r7, #2139	; 0x85b
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80121c2:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80121c6:	484b      	ldr	r0, [pc, #300]	; (80122f4 <jpeg_idct_12x6+0x2a4>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80121c8:	fb07 cb0b 	mla	fp, r7, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80121cc:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80121d0:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80121d2:	4849      	ldr	r0, [pc, #292]	; (80122f8 <jpeg_idct_12x6+0x2a8>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80121d4:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80121d8:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80121dc:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80121e0:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80121e4:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80121e8:	eb01 0709 	add.w	r7, r1, r9
 80121ec:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80121f0:	4842      	ldr	r0, [pc, #264]	; (80122fc <jpeg_idct_12x6+0x2ac>)
 80121f2:	fb00 1108 	mla	r1, r0, r8, r1
 80121f6:	4842      	ldr	r0, [pc, #264]	; (8012300 <jpeg_idct_12x6+0x2b0>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80121f8:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80121fa:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80121fe:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 8012202:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012206:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 801220a:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 801220e:	1b86      	subs	r6, r0, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012210:	4461      	add	r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012212:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012216:	483b      	ldr	r0, [pc, #236]	; (8012304 <jpeg_idct_12x6+0x2b4>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012218:	eb05 0c06 	add.w	ip, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801221c:	444c      	add	r4, r9
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801221e:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012222:	f641 087e 	movw	r8, #6270	; 0x187e
 8012226:	fb08 c805 	mla	r8, r8, r5, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801222a:	fb00 cc06 	mla	ip, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801222e:	9804      	ldr	r0, [sp, #16]
 8012230:	9e44      	ldr	r6, [sp, #272]	; 0x110
 8012232:	eb00 050e 	add.w	r5, r0, lr
 8012236:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012238:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801223c:	5d45      	ldrb	r5, [r0, r5]
 801223e:	9808      	ldr	r0, [sp, #32]
 8012240:	5585      	strb	r5, [r0, r6]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012242:	9804      	ldr	r0, [sp, #16]
 8012244:	eba0 050e 	sub.w	r5, r0, lr
 8012248:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801224a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801224e:	5d45      	ldrb	r5, [r0, r5]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012250:	9802      	ldr	r0, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012252:	72dd      	strb	r5, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012254:	eb00 0508 	add.w	r5, r0, r8
 8012258:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801225a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801225e:	5d45      	ldrb	r5, [r0, r5]
 8012260:	705d      	strb	r5, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012262:	9802      	ldr	r0, [sp, #8]
 8012264:	eba0 0508 	sub.w	r5, r0, r8
 8012268:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801226a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801226e:	5d45      	ldrb	r5, [r0, r5]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012270:	9806      	ldr	r0, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012272:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012274:	19c5      	adds	r5, r0, r7
 8012276:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012278:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801227c:	5d45      	ldrb	r5, [r0, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801227e:	9806      	ldr	r0, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012280:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012282:	1bc5      	subs	r5, r0, r7
 8012284:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012286:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801228a:	5d45      	ldrb	r5, [r0, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801228c:	9807      	ldr	r0, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801228e:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012290:	1905      	adds	r5, r0, r4
 8012292:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012294:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012298:	5d45      	ldrb	r5, [r0, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801229a:	9807      	ldr	r0, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801229c:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801229e:	1b04      	subs	r4, r0, r4
 80122a0:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80122a2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80122a6:	5d04      	ldrb	r4, [r0, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80122a8:	9803      	ldr	r0, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80122aa:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80122ac:	eb00 040c 	add.w	r4, r0, ip
 80122b0:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80122b2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80122b6:	5d04      	ldrb	r4, [r0, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80122b8:	9803      	ldr	r0, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80122ba:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80122bc:	eba0 040c 	sub.w	r4, r0, ip
 80122c0:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80122c2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80122c6:	5d04      	ldrb	r4, [r0, r4]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80122c8:	9805      	ldr	r0, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80122ca:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80122cc:	1844      	adds	r4, r0, r1
 80122ce:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80122d0:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80122d4:	5d04      	ldrb	r4, [r0, r4]
 80122d6:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80122d8:	9805      	ldr	r0, [sp, #20]
 80122da:	1a41      	subs	r1, r0, r1
 80122dc:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80122de:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80122e2:	5c41      	ldrb	r1, [r0, r1]
 80122e4:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 80122e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122e8:	4553      	cmp	r3, sl
 80122ea:	f47f af22 	bne.w	8012132 <jpeg_idct_12x6+0xe2>
  }
}
 80122ee:	b03b      	add	sp, #236	; 0xec
 80122f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f4:	ffffeeaf 	.word	0xffffeeaf
 80122f8:	ffffde8b 	.word	0xffffde8b
 80122fc:	ffffea5c 	.word	0xffffea5c
 8012300:	ffffc08c 	.word	0xffffc08c
 8012304:	ffffc4df 	.word	0xffffc4df

08012308 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801230c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012310:	b0b1      	sub	sp, #196	; 0xc4
 8012312:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012314:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012316:	3080      	adds	r0, #128	; 0x80
 8012318:	320e      	adds	r2, #14
 801231a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801231c:	af08      	add	r7, sp, #32
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801231e:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012322:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012326:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012328:	9202      	str	r2, [sp, #8]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801232a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801232e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012330:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012334:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012338:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801233a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 801233c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012340:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8012342:	0352      	lsls	r2, r2, #13
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012344:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012346:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801234a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801234e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012352:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012356:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801235a:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801235e:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012360:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012364:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012366:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801236a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801236e:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012372:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 8012376:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 8012378:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801237c:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8012380:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012384:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012388:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801238a:	fb00 f808 	mul.w	r8, r0, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801238e:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012392:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8012394:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8012398:	486e      	ldr	r0, [pc, #440]	; (8012554 <jpeg_idct_10x5+0x24c>)
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801239a:	9a02      	ldr	r2, [sp, #8]
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 801239c:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80123a0:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80123a4:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123a8:	42b2      	cmp	r2, r6
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80123aa:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80123ae:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80123b2:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80123b6:	f8c7 907c 	str.w	r9, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80123ba:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80123be:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80123c2:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80123c6:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80123ca:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80123ce:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123d0:	d1ab      	bne.n	801232a <jpeg_idct_10x5+0x22>
 80123d2:	f1a3 0b04 	sub.w	fp, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 80123d6:	a908      	add	r1, sp, #32
 80123d8:	3310      	adds	r3, #16
 80123da:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80123dc:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80123e0:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80123e4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80123e6:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 80123e8:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80123ec:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80123ee:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80123f2:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80123f4:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80123f8:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80123fc:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012400:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012402:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8012404:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012408:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 801240a:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 801240e:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012412:	006d      	lsls	r5, r5, #1
 8012414:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8012418:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801241c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801241e:	19eb      	adds	r3, r5, r7
 8012420:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8012422:	f241 0071 	movw	r0, #4209	; 0x1071
 8012426:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801242a:	484a      	ldr	r0, [pc, #296]	; (8012554 <jpeg_idct_10x5+0x24c>)
 801242c:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8012430:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8012434:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 8012436:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 801243a:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801243c:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 801243e:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012440:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 8012444:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 8012446:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 801244a:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 801244e:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8012452:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012454:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012458:	f641 606f 	movw	r0, #7791	; 0x1e6f
 801245c:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8012460:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8012464:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012468:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 801246c:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012470:	f240 7014 	movw	r0, #1812	; 0x714
 8012474:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012478:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801247a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801247e:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012482:	f642 0853 	movw	r8, #10323	; 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012486:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801248a:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801248c:	f241 2acf 	movw	sl, #4815	; 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012490:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012494:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012498:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801249c:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80124a0:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80124a2:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80124a6:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80124aa:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80124ac:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80124b0:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80124b4:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124b8:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80124ba:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124bc:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80124c0:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124c2:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124c6:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80124c8:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80124cc:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80124d0:	5d5d      	ldrb	r5, [r3, r5]
 80124d2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80124d4:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124d6:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124d8:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124da:	f813 500c 	ldrb.w	r5, [r3, ip]
 80124de:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124e0:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124e4:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 80124e8:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80124ec:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124f0:	5d5d      	ldrb	r5, [r3, r5]
 80124f2:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124f4:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124f6:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124f8:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124fa:	181d      	adds	r5, r3, r0
 80124fc:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80124fe:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012502:	5d5d      	ldrb	r5, [r3, r5]
 8012504:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012506:	9b02      	ldr	r3, [sp, #8]
 8012508:	1a1b      	subs	r3, r3, r0
 801250a:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 801250c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012510:	5cc3      	ldrb	r3, [r0, r3]
 8012512:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012514:	9b04      	ldr	r3, [sp, #16]
 8012516:	4413      	add	r3, r2
			    & RANGE_MASK];
 8012518:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801251c:	5cc3      	ldrb	r3, [r0, r3]
 801251e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012520:	9b04      	ldr	r3, [sp, #16]
 8012522:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 8012524:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012528:	5cc3      	ldrb	r3, [r0, r3]
 801252a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801252c:	9b03      	ldr	r3, [sp, #12]
 801252e:	4433      	add	r3, r6
			    & RANGE_MASK];
 8012530:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012534:	5cc3      	ldrb	r3, [r0, r3]
 8012536:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012538:	9b03      	ldr	r3, [sp, #12]
 801253a:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 801253c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012540:	5cc3      	ldrb	r3, [r0, r3]
 8012542:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8012544:	9b07      	ldr	r3, [sp, #28]
 8012546:	455b      	cmp	r3, fp
 8012548:	f47f af48 	bne.w	80123dc <jpeg_idct_10x5+0xd4>
  }
}
 801254c:	b031      	add	sp, #196	; 0xc4
 801254e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012552:	bf00      	nop
 8012554:	ffffba5c 	.word	0xffffba5c

08012558 <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801255c:	b0a5      	sub	sp, #148	; 0x94
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801255e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8012562:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8012564:	1e97      	subs	r7, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012566:	ac04      	add	r4, sp, #16
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012568:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801256c:	320e      	adds	r2, #14
 801256e:	3e04      	subs	r6, #4
 8012570:	4620      	mov	r0, r4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8012572:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8012576:	f641 0c7e 	movw	ip, #6270	; 0x187e
 801257a:	9200      	str	r2, [sp, #0]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801257c:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012580:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012582:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012586:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801258a:	434d      	muls	r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801258c:	6c31      	ldr	r1, [r6, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801258e:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012592:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012596:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801259a:	4a65      	ldr	r2, [pc, #404]	; (8012730 <jpeg_idct_8x4+0x1d8>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 801259c:	eb05 0901 	add.w	r9, r5, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80125a0:	1a6d      	subs	r5, r5, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125a2:	6a31      	ldr	r1, [r6, #32]
 80125a4:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80125a8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80125aa:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80125ae:	eb0a 010b 	add.w	r1, sl, fp
 80125b2:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80125b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80125ba:	fb0c 1a0a 	mla	sl, ip, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80125be:	fb02 110b 	mla	r1, r2, fp, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125c2:	9a00      	ldr	r2, [sp, #0]
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80125c4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80125c8:	12c9      	asrs	r1, r1, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125ca:	42ba      	cmp	r2, r7
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 80125cc:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80125d0:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80125d4:	eb01 0985 	add.w	r9, r1, r5, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 80125d8:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80125dc:	ebc1 0185 	rsb	r1, r1, r5, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80125e0:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80125e4:	f8c4 901c 	str.w	r9, [r4, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80125e8:	63e1      	str	r1, [r4, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125ea:	d1c7      	bne.n	801257c <jpeg_idct_8x4+0x24>
 80125ec:	f1a3 0804 	sub.w	r8, r3, #4
 80125f0:	330c      	adds	r3, #12
 80125f2:	9303      	str	r3, [sp, #12]
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80125f4:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80125f8:	f241 1551 	movw	r5, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 80125fc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 80125fe:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8012600:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8012604:	189c      	adds	r4, r3, r2
 8012606:	9302      	str	r3, [sp, #8]
    z3 = (INT32) wsptr[6];
 8012608:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = (INT32) wsptr[4];
 801260c:	f850 6c10 	ldr.w	r6, [r0, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012610:	18ca      	adds	r2, r1, r3
    tmp2 = (INT32) wsptr[3];
 8012612:	f850 cc14 	ldr.w	ip, [r0, #-20]
    tmp3 = (INT32) wsptr[1];
 8012616:	f850 9c1c 	ldr.w	r9, [r0, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801261a:	436a      	muls	r2, r5
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801261c:	f641 057e 	movw	r5, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 8012620:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012624:	fb05 2101 	mla	r1, r5, r1, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012628:	4d41      	ldr	r5, [pc, #260]	; (8012730 <jpeg_idct_8x4+0x1d8>)
 801262a:	fb05 2203 	mla	r2, r5, r3, r2
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801262e:	f850 3c20 	ldr.w	r3, [r0, #-32]
 8012632:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8012634:	199d      	adds	r5, r3, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8012636:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8012638:	eb01 3645 	add.w	r6, r1, r5, lsl #13
    tmp13 = tmp0 - tmp2;
 801263c:	ebc1 3145 	rsb	r1, r1, r5, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012640:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp12 = tmp1 - tmp3;
 8012644:	ebc2 3b43 	rsb	fp, r2, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8012648:	9100      	str	r1, [sp, #0]
    tmp11 = tmp1 + tmp3;
 801264a:	eb02 3143 	add.w	r1, r2, r3, lsl #13
    z3 = tmp1 + tmp3;
 801264e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    tmp11 = tmp1 + tmp3;
 8012652:	9101      	str	r1, [sp, #4]
    z2 = tmp0 + tmp2;
 8012654:	eb07 010c 	add.w	r1, r7, ip
    z3 = tmp1 + tmp3;
 8012658:	eb03 0209 	add.w	r2, r3, r9
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801265c:	188b      	adds	r3, r1, r2
 801265e:	436b      	muls	r3, r5
    z2 += z1;
 8012660:	4d34      	ldr	r5, [pc, #208]	; (8012734 <jpeg_idct_8x4+0x1dc>)
 8012662:	fb05 3101 	mla	r1, r5, r1, r3
    z3 += z1;
 8012666:	4d34      	ldr	r5, [pc, #208]	; (8012738 <jpeg_idct_8x4+0x1e0>)
 8012668:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801266c:	eb07 0209 	add.w	r2, r7, r9
 8012670:	4d32      	ldr	r5, [pc, #200]	; (801273c <jpeg_idct_8x4+0x1e4>)
 8012672:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8012674:	f640 158e 	movw	r5, #2446	; 0x98e
 8012678:	eb01 0a02 	add.w	sl, r1, r2
    tmp3 += z1 + z3;
 801267c:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 801267e:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012682:	f850 5c0c 	ldr.w	r5, [r0, #-12]
    tmp3 += z1 + z3;
 8012686:	f243 0a0b 	movw	sl, #12299	; 0x300b
 801268a:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801268e:	eb05 090c 	add.w	r9, r5, ip
 8012692:	4d2b      	ldr	r5, [pc, #172]	; (8012740 <jpeg_idct_8x4+0x1e8>)
    tmp1 += z1 + z3;
 8012694:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012698:	fb05 f909 	mul.w	r9, r5, r9
    tmp1 += z1 + z3;
 801269c:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 80126a0:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 80126a2:	4449      	add	r1, r9
 80126a4:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 80126a8:	fb0a 3a05 	mla	sl, sl, r5, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80126ac:	9d02      	ldr	r5, [sp, #8]
    tmp2 += z1 + z2;
 80126ae:	fb09 110c 	mla	r1, r9, ip, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80126b2:	eb06 0c02 	add.w	ip, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80126b6:	1ab6      	subs	r6, r6, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80126b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
			    & RANGE_MASK];
 80126ba:	f3cc 4c89 	ubfx	ip, ip, #18, #10
			    & RANGE_MASK];
 80126be:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80126c2:	f81e c00c 	ldrb.w	ip, [lr, ip]
 80126c6:	f805 c003 	strb.w	ip, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80126ca:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80126cc:	f81e 2006 	ldrb.w	r2, [lr, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80126d0:	1a5d      	subs	r5, r3, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80126d2:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80126d4:	185a      	adds	r2, r3, r1
			    & RANGE_MASK];
 80126d6:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80126da:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80126de:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80126e2:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80126e4:	f81e 2005 	ldrb.w	r2, [lr, r5]
 80126e8:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80126ea:	eb0b 020a 	add.w	r2, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80126ee:	ebab 0b0a 	sub.w	fp, fp, sl
			    & RANGE_MASK];
 80126f2:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80126f6:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80126fa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80126fe:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012700:	f81e 300b 	ldrb.w	r3, [lr, fp]
 8012704:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8012706:	9b00      	ldr	r3, [sp, #0]
 8012708:	443b      	add	r3, r7
			    & RANGE_MASK];
 801270a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801270e:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8012712:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8012714:	9b00      	ldr	r3, [sp, #0]
 8012716:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 8012718:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801271c:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8012720:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8012722:	9b03      	ldr	r3, [sp, #12]
 8012724:	4543      	cmp	r3, r8
 8012726:	f47f af65 	bne.w	80125f4 <jpeg_idct_8x4+0x9c>
  }
}
 801272a:	b025      	add	sp, #148	; 0x94
 801272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012730:	ffffc4df 	.word	0xffffc4df
 8012734:	ffffc13b 	.word	0xffffc13b
 8012738:	fffff384 	.word	0xfffff384
 801273c:	ffffe333 	.word	0xffffe333
 8012740:	ffffadfd 	.word	0xffffadfd

08012744 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012748:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801274a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801274e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012750:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012754:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012756:	3080      	adds	r0, #128	; 0x80
 8012758:	f102 040a 	add.w	r4, r2, #10
 801275c:	f1a1 0c04 	sub.w	ip, r1, #4
 8012760:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8012762:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8012766:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801276a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801276c:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8012770:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012772:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012776:	f9be a010 	ldrsh.w	sl, [lr, #16]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801277a:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801277c:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012780:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8012784:	f9be 6020 	ldrsh.w	r6, [lr, #32]
    tmp0 <<= CONST_BITS;
 8012788:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801278c:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012790:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012794:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012798:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801279c:	fb09 f606 	mul.w	r6, r9, r6
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80127a0:	fb08 fa0a 	mul.w	sl, r8, sl
    tmp10 = tmp0 + tmp12;
 80127a4:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 80127a8:	eba1 0146 	sub.w	r1, r1, r6, lsl #1

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80127ac:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80127b0:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80127b4:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80127b8:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80127bc:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80127c0:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80127c2:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80127c6:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80127c8:	d1d0      	bne.n	801276c <jpeg_idct_6x3+0x28>
 80127ca:	f1a3 0e04 	sub.w	lr, r3, #4
 80127ce:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80127d2:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80127d6:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 80127da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80127dc:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80127de:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 80127e2:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 80127e4:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80127e8:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80127ec:	fb00 f401 	mul.w	r4, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80127f0:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80127f4:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80127f8:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = tmp0 + tmp10;
 80127fc:	eb04 3143 	add.w	r1, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8012800:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 8012804:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8012808:	f852 4c10 	ldr.w	r4, [r2, #-16]
 801280c:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012810:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp1 + tmp0;
 8012814:	eb01 0604 	add.w	r6, r1, r4
    tmp12 = tmp1 - tmp0;
 8012818:	eba1 0104 	sub.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 801281c:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012820:	eb04 0508 	add.w	r5, r4, r8
 8012824:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8012828:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 801282c:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8012830:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8012834:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012838:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801283a:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801283e:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8012842:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012846:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801284a:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 801284e:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8012852:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012856:	f810 8008 	ldrb.w	r8, [r0, r8]
 801285a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801285c:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012860:	9801      	ldr	r0, [sp, #4]
 8012862:	5d86      	ldrb	r6, [r0, r6]
 8012864:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012866:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801286a:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 801286e:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8012872:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012876:	5d86      	ldrb	r6, [r0, r6]
 8012878:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801287a:	5cc3      	ldrb	r3, [r0, r3]
 801287c:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801287e:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012882:	eba1 0105 	sub.w	r1, r1, r5
			    & RANGE_MASK];
 8012886:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 801288a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801288e:	5cc3      	ldrb	r3, [r0, r3]
 8012890:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012892:	5c43      	ldrb	r3, [r0, r1]
 8012894:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8012896:	d19c      	bne.n	80127d2 <jpeg_idct_6x3+0x8e>
  }
}
 8012898:	b015      	add	sp, #84	; 0x54
 801289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080128a0 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80128a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a4:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80128a6:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 80128aa:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 80128ac:	1e97      	subs	r7, r2, #2
 80128ae:	f10d 0c08 	add.w	ip, sp, #8
 80128b2:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80128b4:	3e04      	subs	r6, #4
 80128b6:	3206      	adds	r2, #6
 80128b8:	4660      	mov	r0, ip
{
 80128ba:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80128bc:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
 80128c0:	f856 4f04 	ldr.w	r4, [r6, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80128c4:	42ba      	cmp	r2, r7
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80128c6:	fb04 f101 	mul.w	r1, r4, r1

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80128ca:	6a33      	ldr	r3, [r6, #32]
 80128cc:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 80128d0:	fb03 f404 	mul.w	r4, r3, r4

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 80128d4:	eb01 0e04 	add.w	lr, r1, r4
    wsptr[4*1] = tmp10 - tmp0;
 80128d8:	eba1 0104 	sub.w	r1, r1, r4
    wsptr[4*0] = tmp10 + tmp0;
 80128dc:	f84c eb04 	str.w	lr, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 80128e0:	f8cc 100c 	str.w	r1, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80128e4:	d1ea      	bne.n	80128bc <jpeg_idct_4x2+0x1c>
 80128e6:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80128e8:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80128ec:	f641 097e 	movw	r9, #6270	; 0x187e
 80128f0:	f1a3 0c04 	sub.w	ip, r3, #4
    tmp0 = wsptr[0] + (ONE << 2);
 80128f4:	6804      	ldr	r4, [r0, #0]
 80128f6:	46e0      	mov	r8, ip
    tmp2 = wsptr[2];
 80128f8:	6882      	ldr	r2, [r0, #8]
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 80128fa:	3010      	adds	r0, #16
    z3 = wsptr[3];
 80128fc:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp0 = wsptr[0] + (ONE << 2);
 8012900:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8012902:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8012906:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801290a:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801290c:	19ca      	adds	r2, r1, r7
    outptr = output_buf[ctr] + output_col;
 801290e:	f85c ef04 	ldr.w	lr, [ip, #4]!
 8012912:	9b14      	ldr	r3, [sp, #80]	; 0x50
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8012914:	fb0a f202 	mul.w	r2, sl, r2
    outptr = output_buf[ctr] + output_col;
 8012918:	eb0e 0603 	add.w	r6, lr, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801291c:	4b12      	ldr	r3, [pc, #72]	; (8012968 <jpeg_idct_4x2+0xc8>)
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801291e:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8012922:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012928:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801292c:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8012930:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8012934:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012938:	5def      	ldrb	r7, [r5, r7]
 801293a:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801293e:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8012940:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012942:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8012944:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012948:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 801294c:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 801294e:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8012952:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8012956:	5c69      	ldrb	r1, [r5, r1]
 8012958:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801295a:	5caa      	ldrb	r2, [r5, r2]
 801295c:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 801295e:	d1c9      	bne.n	80128f4 <jpeg_idct_4x2+0x54>
  }
}
 8012960:	b00b      	add	sp, #44	; 0x2c
 8012962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012966:	bf00      	nop
 8012968:	ffffc4df 	.word	0xffffc4df

0801296c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801296c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801296e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012972:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8012974:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012976:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8012978:	f9b2 3000 	ldrsh.w	r3, [r2]
 801297c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801297e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8012982:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8012984:	437b      	muls	r3, r7
{
 8012986:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8012988:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801298a:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 801298c:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801298e:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8012990:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8012992:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8012996:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801299a:	5c41      	ldrb	r1, [r0, r1]
 801299c:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 801299e:	5cc3      	ldrb	r3, [r0, r3]
 80129a0:	7073      	strb	r3, [r6, #1]
}
 80129a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080129a4 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80129a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80129ac:	f1a2 0b02 	sub.w	fp, r2, #2
 80129b0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80129b2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80129b6:	3380      	adds	r3, #128	; 0x80
 80129b8:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129ba:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80129bc:	f1a3 0804 	sub.w	r8, r3, #4
 80129c0:	f102 030e 	add.w	r3, r2, #14
 80129c4:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 80129c6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129c8:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129cc:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129d0:	f858 1f04 	ldr.w	r1, [r8, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80129d4:	f642 4563 	movw	r5, #11363	; 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129d8:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80129dc:	f245 2e03 	movw	lr, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129e0:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129e2:	f8d8 1080 	ldr.w	r1, [r8, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80129e6:	f9bb c060 	ldrsh.w	ip, [fp, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129ea:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129ec:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 80129ee:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129f0:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80129f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129f8:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129fa:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80129fc:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 8012a00:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8012a02:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8012a04:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8012a06:	eba2 0a01 	sub.w	sl, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a0a:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012a0e:	4acf      	ldr	r2, [pc, #828]	; (8012d4c <jpeg_idct_8x16+0x3a8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a10:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a14:	f8d8 10c0 	ldr.w	r1, [r8, #192]	; 0xc0
 8012a18:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012a1c:	f640 01d4 	movw	r1, #2260	; 0x8d4
    z3 = z1 - z2;
 8012a20:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012a24:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012a26:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a28:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012a2c:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012a30:	fb02 4409 	mla	r4, r2, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a34:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a38:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012a3c:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a40:	fb02 110c 	mla	r1, r2, ip, r1
    tmp20 = tmp10 + tmp0;
 8012a44:	eb07 020e 	add.w	r2, r7, lr
 8012a48:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012a4a:	eba7 020e 	sub.w	r2, r7, lr
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012a4e:	f640 5723 	movw	r7, #3363	; 0xd23
    tmp27 = tmp10 - tmp0;
 8012a52:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012a54:	1972      	adds	r2, r6, r5
 8012a56:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012a58:	1b72      	subs	r2, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a5a:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8012a5e:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012a60:	eb0a 0204 	add.w	r2, sl, r4
 8012a64:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012a66:	ebaa 0204 	sub.w	r2, sl, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a6a:	f8d8 40e0 	ldr.w	r4, [r8, #224]	; 0xe0
    tmp25 = tmp13 - tmp2;
 8012a6e:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012a70:	1842      	adds	r2, r0, r1
 8012a72:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012a74:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a76:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = tmp11 - tmp3;
 8012a7a:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a7c:	f8d8 2020 	ldr.w	r2, [r8, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a80:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a84:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a86:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
 8012a8a:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a8c:	f8d8 00a0 	ldr.w	r0, [r8, #160]	; 0xa0
 8012a90:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a92:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a96:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a98:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a9a:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 8012a9e:	eb01 0a05 	add.w	sl, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012aa2:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012aa4:	eb01 0e00 	add.w	lr, r1, r0
 8012aa8:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012aac:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012ab0:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012ab4:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012ab8:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012abc:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012ac0:	f241 5455 	movw	r4, #5461	; 0x1555
 8012ac4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012ac8:	1a8c      	subs	r4, r1, r2
 8012aca:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012acc:	eb06 0709 	add.w	r7, r6, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012ad0:	9409      	str	r4, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ad2:	4477      	add	r7, lr
 8012ad4:	4c9e      	ldr	r4, [pc, #632]	; (8012d50 <jpeg_idct_8x16+0x3ac>)
 8012ad6:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012adc:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012ade:	eb0c 040a 	add.w	r4, ip, sl
 8012ae2:	443c      	add	r4, r7
 8012ae4:	4f9b      	ldr	r7, [pc, #620]	; (8012d54 <jpeg_idct_8x16+0x3b0>)
 8012ae6:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012aea:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012aec:	4f9a      	ldr	r7, [pc, #616]	; (8012d58 <jpeg_idct_8x16+0x3b4>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012aee:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012af0:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8012af4:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012af6:	f240 214d 	movw	r1, #589	; 0x24d
 8012afa:	fb01 4102 	mla	r1, r1, r2, r4
 8012afe:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012b00:	4996      	ldr	r1, [pc, #600]	; (8012d5c <jpeg_idct_8x16+0x3b8>)
 8012b02:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012b06:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012b08:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012b0a:	f642 5909 	movw	r9, #11529	; 0x2d09
 8012b0e:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012b12:	fb07 1905 	mla	r9, r7, r5, r1
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012b16:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012b18:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012b1a:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012b1e:	fb0a 1102 	mla	r1, sl, r2, r1
    z2    += z4;
 8012b22:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012b24:	eb01 0a07 	add.w	sl, r1, r7
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012b28:	498d      	ldr	r1, [pc, #564]	; (8012d60 <jpeg_idct_8x16+0x3bc>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b2a:	f242 2718 	movw	r7, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012b2e:	4351      	muls	r1, r2
    tmp1  += z1;
 8012b30:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b32:	fb07 1100 	mla	r1, r7, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012b36:	4f8b      	ldr	r7, [pc, #556]	; (8012d64 <jpeg_idct_8x16+0x3c0>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b38:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b3a:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012b3e:	437a      	muls	r2, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b40:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 8012b44:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b46:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b4a:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b4c:	eb05 0c00 	add.w	ip, r5, r0
 8012b50:	4457      	add	r7, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b52:	1b40      	subs	r0, r0, r5
 8012b54:	f640 5523 	movw	r5, #3363	; 0xd23
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b58:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b5e:	4368      	muls	r0, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b60:	9d01      	ldr	r5, [sp, #4]
    tmp2  += z2;
 8012b62:	4464      	add	r4, ip
    tmp3  += z2;
 8012b64:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b66:	443d      	add	r5, r7
    tmp10 += z2;
 8012b68:	4486      	add	lr, r0
    tmp11 += z2;
 8012b6a:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b6c:	12ed      	asrs	r5, r5, #11
 8012b6e:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012b72:	9d01      	ldr	r5, [sp, #4]
 8012b74:	1bed      	subs	r5, r5, r7
 8012b76:	12ed      	asrs	r5, r5, #11
 8012b78:	f8c3 51dc 	str.w	r5, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012b7c:	9d03      	ldr	r5, [sp, #12]
 8012b7e:	4435      	add	r5, r6
 8012b80:	12ed      	asrs	r5, r5, #11
 8012b82:	61dd      	str	r5, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012b84:	9d03      	ldr	r5, [sp, #12]
 8012b86:	1bad      	subs	r5, r5, r6
 8012b88:	12ed      	asrs	r5, r5, #11
 8012b8a:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012b8e:	9d05      	ldr	r5, [sp, #20]
 8012b90:	4425      	add	r5, r4
 8012b92:	12ed      	asrs	r5, r5, #11
 8012b94:	63dd      	str	r5, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012b96:	9d05      	ldr	r5, [sp, #20]
 8012b98:	1b2c      	subs	r4, r5, r4
 8012b9a:	12e4      	asrs	r4, r4, #11
 8012b9c:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012ba0:	9c07      	ldr	r4, [sp, #28]
 8012ba2:	440c      	add	r4, r1
 8012ba4:	12e4      	asrs	r4, r4, #11
 8012ba6:	65dc      	str	r4, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8012ba8:	9c07      	ldr	r4, [sp, #28]
 8012baa:	1a61      	subs	r1, r4, r1
 8012bac:	12c9      	asrs	r1, r1, #11
 8012bae:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012bb2:	9908      	ldr	r1, [sp, #32]
 8012bb4:	4471      	add	r1, lr
 8012bb6:	12c9      	asrs	r1, r1, #11
 8012bb8:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012bba:	9908      	ldr	r1, [sp, #32]
 8012bbc:	eba1 010e 	sub.w	r1, r1, lr
 8012bc0:	12c9      	asrs	r1, r1, #11
 8012bc2:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8012bc6:	9906      	ldr	r1, [sp, #24]
 8012bc8:	4401      	add	r1, r0
 8012bca:	12c9      	asrs	r1, r1, #11
 8012bcc:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012bd0:	9906      	ldr	r1, [sp, #24]
 8012bd2:	1a09      	subs	r1, r1, r0
 8012bd4:	12c9      	asrs	r1, r1, #11
 8012bd6:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012bda:	9904      	ldr	r1, [sp, #16]
 8012bdc:	4411      	add	r1, r2
 8012bde:	12c9      	asrs	r1, r1, #11
 8012be0:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012be4:	9904      	ldr	r1, [sp, #16]
 8012be6:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012bea:	12d2      	asrs	r2, r2, #11
 8012bec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012bf0:	9a02      	ldr	r2, [sp, #8]
 8012bf2:	440a      	add	r2, r1
 8012bf4:	12d2      	asrs	r2, r2, #11
 8012bf6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012bfa:	9a02      	ldr	r2, [sp, #8]
 8012bfc:	1a52      	subs	r2, r2, r1
 8012bfe:	12d2      	asrs	r2, r2, #11
 8012c00:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012c04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c06:	455a      	cmp	r2, fp
 8012c08:	f47f aede 	bne.w	80129c8 <jpeg_idct_8x16+0x24>
 8012c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8012c0e:	a80e      	add	r0, sp, #56	; 0x38
 8012c10:	f1a3 0904 	sub.w	r9, r3, #4
 8012c14:	333c      	adds	r3, #60	; 0x3c
 8012c16:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012c18:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012c1c:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8012c20:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8012c22:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8012c24:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8012c28:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8012c2a:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8012c2e:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012c30:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8012c32:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp0 = (INT32) wsptr[7];
 8012c36:	f850 bc04 	ldr.w	fp, [r0, #-4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012c3a:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012c3c:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp1 = (INT32) wsptr[5];
 8012c40:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012c44:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012c48:	4c47      	ldr	r4, [pc, #284]	; (8012d68 <jpeg_idct_8x16+0x3c4>)
    tmp2 = (INT32) wsptr[3];
 8012c4a:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012c4e:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c52:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp3 = (INT32) wsptr[1];
 8012c56:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c5a:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8012c5c:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8012c5e:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8012c60:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8012c64:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 8012c68:	eb0b 040e 	add.w	r4, fp, lr
    tmp11 = tmp1 + tmp3;
 8012c6c:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012c70:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8012c72:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8012c76:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 8012c7a:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012c7c:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8012c80:	1862      	adds	r2, r4, r1
 8012c82:	435a      	muls	r2, r3
    z2 += z1;
 8012c84:	4b39      	ldr	r3, [pc, #228]	; (8012d6c <jpeg_idct_8x16+0x3c8>)
 8012c86:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 8012c8a:	4b39      	ldr	r3, [pc, #228]	; (8012d70 <jpeg_idct_8x16+0x3cc>)
 8012c8c:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8012c90:	eb0b 010a 	add.w	r1, fp, sl
 8012c94:	4b37      	ldr	r3, [pc, #220]	; (8012d74 <jpeg_idct_8x16+0x3d0>)
 8012c96:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 8012c98:	f640 138e 	movw	r3, #2446	; 0x98e
 8012c9c:	eb04 0c01 	add.w	ip, r4, r1
    tmp3 += z1 + z3;
 8012ca0:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8012ca2:	fb03 cc0b 	mla	ip, r3, fp, ip
    tmp3 += z1 + z3;
 8012ca6:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012caa:	4b33      	ldr	r3, [pc, #204]	; (8012d78 <jpeg_idct_8x16+0x3d4>)
    tmp3 += z1 + z3;
 8012cac:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012cb0:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8012cb4:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012cb8:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012cbc:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8012cbe:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8012cc0:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 8012cc2:	fb0b 2b08 	mla	fp, fp, r8, r2
    tmp2 += z1 + z2;
 8012cc6:	f246 2854 	movw	r8, #25172	; 0x6254
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012cca:	9a98      	ldr	r2, [sp, #608]	; 0x260
    tmp2 += z1 + z2;
 8012ccc:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012cd0:	eb07 0e01 	add.w	lr, r7, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012cd4:	1a7f      	subs	r7, r7, r1
			    & RANGE_MASK];
 8012cd6:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8012cda:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012cde:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012ce2:	9b03      	ldr	r3, [sp, #12]
 8012ce4:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012ce8:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012cea:	9a00      	ldr	r2, [sp, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012cec:	5dd9      	ldrb	r1, [r3, r7]
 8012cee:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012cf0:	1931      	adds	r1, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012cf2:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 8012cf4:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8012cf8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012cfc:	5c59      	ldrb	r1, [r3, r1]
 8012cfe:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012d00:	5d99      	ldrb	r1, [r3, r6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012d02:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012d04:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012d06:	eb03 010b 	add.w	r1, r3, fp
 8012d0a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8012d0c:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012d10:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012d12:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012d14:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012d16:	eba3 030b 	sub.w	r3, r3, fp
			    & RANGE_MASK];
 8012d1a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012d1e:	5cd3      	ldrb	r3, [r2, r3]
 8012d20:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8012d22:	9b01      	ldr	r3, [sp, #4]
 8012d24:	4463      	add	r3, ip
			    & RANGE_MASK];
 8012d26:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8012d2a:	5cd3      	ldrb	r3, [r2, r3]
 8012d2c:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	eba3 030c 	sub.w	r3, r3, ip
			    & RANGE_MASK];
 8012d34:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8012d38:	5cd3      	ldrb	r3, [r2, r3]
 8012d3a:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8012d3c:	9b04      	ldr	r3, [sp, #16]
 8012d3e:	454b      	cmp	r3, r9
 8012d40:	f47f af6a 	bne.w	8012c18 <jpeg_idct_8x16+0x274>
  }
}
 8012d44:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d4c:	ffffecc2 	.word	0xffffecc2
 8012d50:	ffffb6d6 	.word	0xffffb6d6
 8012d54:	ffffc542 	.word	0xffffc542
 8012d58:	ffffe77a 	.word	0xffffe77a
 8012d5c:	ffffdbfa 	.word	0xffffdbfa
 8012d60:	ffffeaab 	.word	0xffffeaab
 8012d64:	ffffd817 	.word	0xffffd817
 8012d68:	ffffc4df 	.word	0xffffc4df
 8012d6c:	ffffc13b 	.word	0xffffc13b
 8012d70:	fffff384 	.word	0xfffff384
 8012d74:	ffffe333 	.word	0xffffe333
 8012d78:	ffffadfd 	.word	0xffffadfd

08012d7c <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d80:	b0ef      	sub	sp, #444	; 0x1bc
 8012d82:	f1a2 0e02 	sub.w	lr, r2, #2
 8012d86:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012d88:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012d8c:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8012d8e:	3380      	adds	r3, #128	; 0x80
 8012d90:	3804      	subs	r0, #4
 8012d92:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8012d94:	f102 030c 	add.w	r3, r2, #12
 8012d98:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8012d9a:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d9c:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012da0:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012da4:	f850 1f04 	ldr.w	r1, [r0, #4]!
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012da8:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012dac:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8012db0:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012db2:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012db4:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8012db8:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012dba:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8012dbe:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012dc0:	fb01 f704 	mul.w	r7, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012dc4:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012dcc:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012dd0:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8012dd4:	19d6      	adds	r6, r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012dd6:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012dd8:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8012dda:	eb02 050c 	add.w	r5, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012dde:	f9be c020 	ldrsh.w	ip, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012de2:	1b3f      	subs	r7, r7, r4
    tmp12 = z1 - z4;
 8012de4:	eba2 0904 	sub.w	r9, r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012de8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012dec:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012df0:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012df4:	49b4      	ldr	r1, [pc, #720]	; (80130c8 <jpeg_idct_7x14+0x34c>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012df6:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012df8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012dfa:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012dfe:	f9be 2060 	ldrsh.w	r2, [lr, #96]	; 0x60
 8012e02:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012e04:	eb0c 0402 	add.w	r4, ip, r2
 8012e08:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012e0a:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8012e0e:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012e12:	fb01 4402 	mla	r4, r1, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012e16:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8012e1a:	434a      	muls	r2, r1
    tmp20 = tmp10 + tmp13;
 8012e1c:	19f1      	adds	r1, r6, r7
 8012e1e:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8012e20:	1bf1      	subs	r1, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012e22:	fb08 220c 	mla	r2, r8, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012e26:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp26 = tmp10 - tmp13;
 8012e2a:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8012e2c:	1929      	adds	r1, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e2e:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp21 = tmp11 + tmp14;
 8012e32:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8012e34:	1b29      	subs	r1, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e36:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012e3a:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 8012e3e:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8012e40:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 8012e44:	eba9 0202 	sub.w	r2, r9, r2
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012e48:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8012e4c:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8012e4e:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e50:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e52:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e56:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012e58:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8012e5a:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e5c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8012e60:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e62:	f9be 2070 	ldrsh.w	r2, [lr, #112]	; 0x70
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012e66:	eb04 0c07 	add.w	ip, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e6a:	434a      	muls	r2, r1
    tmp14 = z1 + z3;
 8012e6c:	eb04 0b06 	add.w	fp, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012e70:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012e74:	fb05 f50b 	mul.w	r5, r5, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012e78:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012e7c:	4993      	ldr	r1, [pc, #588]	; (80130cc <jpeg_idct_7x14+0x350>)
 8012e7e:	eb0c 0805 	add.w	r8, ip, r5
 8012e82:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 8012e86:	fb01 8804 	mla	r8, r1, r4, r8
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012e8a:	f641 0114 	movw	r1, #6164	; 0x1814
 8012e8e:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012e92:	498f      	ldr	r1, [pc, #572]	; (80130d0 <jpeg_idct_7x14+0x354>)
 8012e94:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8012e98:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012e9a:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 8012e9e:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012ea0:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012ea4:	4c8b      	ldr	r4, [pc, #556]	; (80130d4 <jpeg_idct_7x14+0x358>)
    tmp16 += tmp15;
 8012ea6:	4449      	add	r1, r9
 8012ea8:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012eaa:	19b9      	adds	r1, r7, r6
 8012eac:	fb0a f101 	mul.w	r1, sl, r1
 8012eb0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012eb4:	fb04 1a07 	mla	sl, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012eb8:	4c87      	ldr	r4, [pc, #540]	; (80130d8 <jpeg_idct_7x14+0x35c>)
 8012eba:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012ebe:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012ec0:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ec4:	4c85      	ldr	r4, [pc, #532]	; (80130dc <jpeg_idct_7x14+0x360>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012ec6:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012ec8:	1bf5      	subs	r5, r6, r7
 8012eca:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ece:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8012ed2:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8012ed6:	9c07      	ldr	r4, [sp, #28]
 8012ed8:	4422      	add	r2, r4

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012eda:	9c01      	ldr	r4, [sp, #4]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012edc:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012ede:	f241 5b99 	movw	fp, #5529	; 0x1599
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012ee2:	4444      	add	r4, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8012ee4:	1b92      	subs	r2, r2, r6
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012ee6:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012eea:	12e4      	asrs	r4, r4, #11
    tmp13 = (z1 - z3) << PASS1_BITS;
 8012eec:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012eee:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012ef0:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012ef4:	9c01      	ldr	r4, [sp, #4]
 8012ef6:	eba4 0408 	sub.w	r4, r4, r8
 8012efa:	12e4      	asrs	r4, r4, #11
 8012efc:	f8c3 4168 	str.w	r4, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012f00:	9c03      	ldr	r4, [sp, #12]
 8012f02:	4454      	add	r4, sl
 8012f04:	12e4      	asrs	r4, r4, #11
 8012f06:	619c      	str	r4, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012f08:	9c03      	ldr	r4, [sp, #12]
 8012f0a:	eba4 040a 	sub.w	r4, r4, sl
 8012f0e:	12e4      	asrs	r4, r4, #11
 8012f10:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012f14:	9c05      	ldr	r4, [sp, #20]
 8012f16:	440c      	add	r4, r1
 8012f18:	12e4      	asrs	r4, r4, #11
 8012f1a:	635c      	str	r4, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012f1c:	9c05      	ldr	r4, [sp, #20]
 8012f1e:	1a61      	subs	r1, r4, r1
 8012f20:	12c9      	asrs	r1, r1, #11
 8012f22:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8012f26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f28:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 8012f2c:	6519      	str	r1, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8012f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f30:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012f34:	9908      	ldr	r1, [sp, #32]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8012f36:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012f3a:	9a06      	ldr	r2, [sp, #24]
 8012f3c:	4462      	add	r2, ip
 8012f3e:	12d2      	asrs	r2, r2, #11
 8012f40:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012f42:	9a06      	ldr	r2, [sp, #24]
 8012f44:	eba2 020c 	sub.w	r2, r2, ip
 8012f48:	12d2      	asrs	r2, r2, #11
 8012f4a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012f4e:	9a04      	ldr	r2, [sp, #16]
 8012f50:	442a      	add	r2, r5
 8012f52:	12d2      	asrs	r2, r2, #11
 8012f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012f58:	9a04      	ldr	r2, [sp, #16]
 8012f5a:	1b52      	subs	r2, r2, r5
 8012f5c:	12d2      	asrs	r2, r2, #11
 8012f5e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012f62:	9a02      	ldr	r2, [sp, #8]
 8012f64:	440a      	add	r2, r1
 8012f66:	12d2      	asrs	r2, r2, #11
 8012f68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012f6c:	9a02      	ldr	r2, [sp, #8]
 8012f6e:	1a52      	subs	r2, r2, r1
 8012f70:	12d2      	asrs	r2, r2, #11
 8012f72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8012f76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f78:	4572      	cmp	r2, lr
 8012f7a:	f47f af0f 	bne.w	8012d9c <jpeg_idct_7x14+0x20>
 8012f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8012f80:	ac0c      	add	r4, sp, #48	; 0x30
 8012f82:	f1a3 0904 	sub.w	r9, r3, #4
 8012f86:	3334      	adds	r3, #52	; 0x34
 8012f88:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012f8a:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8012f8e:	341c      	adds	r4, #28
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f90:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 8012f94:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
 8012f96:	9303      	str	r3, [sp, #12]
 8012f98:	189e      	adds	r6, r3, r2
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f9a:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 8012f9e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012fa2:	9301      	str	r3, [sp, #4]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012fa4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 8012fa8:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012fac:	eba3 0c01 	sub.w	ip, r3, r1
 8012fb0:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012fb4:	4f4a      	ldr	r7, [pc, #296]	; (80130e0 <jpeg_idct_7x14+0x364>)
    tmp10 = z1 + z3;
 8012fb6:	eb05 0801 	add.w	r8, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012fba:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012fbe:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8012fc2:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012fc6:	1aea      	subs	r2, r5, r3
 8012fc8:	f640 2312 	movw	r3, #2578	; 0xa12
    z3 = (INT32) wsptr[5];
 8012fcc:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012fd0:	435a      	muls	r2, r3
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012fd2:	9b01      	ldr	r3, [sp, #4]
 8012fd4:	eb0c 0002 	add.w	r0, ip, r2
 8012fd8:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 8012fdc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012fe0:	fb07 0003 	mla	r0, r7, r3, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012fe4:	f642 03c6 	movw	r3, #10438	; 0x28c6
 8012fe8:	9f01      	ldr	r7, [sp, #4]
 8012fea:	fb03 f308 	mul.w	r3, r3, r8
 8012fee:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012ff2:	f46f 771f 	mvn.w	r7, #636	; 0x27c
 8012ff6:	fb07 3101 	mla	r1, r7, r1, r3
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012ffa:	4f3a      	ldr	r7, [pc, #232]	; (80130e4 <jpeg_idct_7x14+0x368>)
 8012ffc:	fb07 3305 	mla	r3, r7, r5, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013000:	f240 5773 	movw	r7, #1395	; 0x573
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013004:	4461      	add	r1, ip
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013006:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 8013008:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801300c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801300e:	eb02 0b0a 	add.w	fp, r2, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013012:	eba2 050a 	sub.w	r5, r2, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013016:	f641 53ef 	movw	r3, #7663	; 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801301a:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801301c:	44f2      	add	sl, lr
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801301e:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013022:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013024:	437d      	muls	r5, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013026:	4f30      	ldr	r7, [pc, #192]	; (80130e8 <jpeg_idct_7x14+0x36c>)
    tmp10 = tmp11 - tmp12;
 8013028:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 801302c:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801302e:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013032:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013036:	9f00      	ldr	r7, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013038:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801303c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8013040:	4455      	add	r5, sl
    tmp10 += z2;
 8013042:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013044:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013048:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801304c:	eba1 010c 	sub.w	r1, r1, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013050:	4452      	add	r2, sl
			    & RANGE_MASK];
 8013052:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8013056:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801305a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801305e:	9f03      	ldr	r7, [sp, #12]
 8013060:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013064:	9b00      	ldr	r3, [sp, #0]
 8013066:	5c59      	ldrb	r1, [r3, r1]
 8013068:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801306a:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801306c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 801306e:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8013072:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013076:	5c59      	ldrb	r1, [r3, r1]
 8013078:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801307a:	5c19      	ldrb	r1, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801307c:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801307e:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013080:	1899      	adds	r1, r3, r2
 8013082:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013084:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013088:	5c59      	ldrb	r1, [r3, r1]
 801308a:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801308c:	9b02      	ldr	r3, [sp, #8]
 801308e:	1a9b      	subs	r3, r3, r2
 8013090:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 8013092:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013096:	5cd3      	ldrb	r3, [r2, r3]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013098:	f642 5241 	movw	r2, #11585	; 0x2d41
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801309c:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 801309e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80130a2:	eba3 0308 	sub.w	r3, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80130a6:	4353      	muls	r3, r2
 80130a8:	9a01      	ldr	r2, [sp, #4]
 80130aa:	eb03 3342 	add.w	r3, r3, r2, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80130ae:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 80130b0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80130b4:	5cd3      	ldrb	r3, [r2, r3]
 80130b6:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 80130b8:	9b04      	ldr	r3, [sp, #16]
 80130ba:	454b      	cmp	r3, r9
 80130bc:	f47f af65 	bne.w	8012f8a <jpeg_idct_7x14+0x20e>
  }
}
 80130c0:	b06f      	add	sp, #444	; 0x1bc
 80130c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c6:	bf00      	nop
 80130c8:	ffffc8fc 	.word	0xffffc8fc
 80130cc:	ffffdbf0 	.word	0xffffdbf0
 80130d0:	ffffde0b 	.word	0xffffde0b
 80130d4:	fffff26e 	.word	0xfffff26e
 80130d8:	ffffb409 	.word	0xffffb409
 80130dc:	ffffc9e6 	.word	0xffffc9e6
 80130e0:	ffffc515 	.word	0xffffc515
 80130e4:	ffffb0f1 	.word	0xffffb0f1
 80130e8:	ffffd3e1 	.word	0xffffd3e1

080130ec <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80130ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f0:	b0d3      	sub	sp, #332	; 0x14c
 80130f2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80130f4:	f1a2 0902 	sub.w	r9, r2, #2
 80130f8:	9308      	str	r3, [sp, #32]
 80130fa:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80130fc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013100:	3380      	adds	r3, #128	; 0x80
 8013102:	9300      	str	r3, [sp, #0]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013104:	f102 030a 	add.w	r3, r2, #10
 8013108:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 801310a:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801310c:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013110:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013112:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013116:	f9b9 4060 	ldrsh.w	r4, [r9, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801311a:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801311e:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013120:	f9b9 2040 	ldrsh.w	r2, [r9, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013124:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    z3 <<= CONST_BITS;
 8013128:	037f      	lsls	r7, r7, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801312a:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801312c:	f242 7031 	movw	r0, #10033	; 0x2731
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013130:	f9b9 6020 	ldrsh.w	r6, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013134:	436c      	muls	r4, r5
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013136:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013138:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801313a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 <<= CONST_BITS;
 801313e:	0364      	lsls	r4, r4, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013140:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 8013142:	eb07 0c02 	add.w	ip, r7, r2
    tmp11 = z3 - z4;
 8013146:	eba7 0e02 	sub.w	lr, r7, r2

    tmp12 = z1 - z2;
 801314a:	ebc4 3546 	rsb	r5, r4, r6, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801314e:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 8013152:	fb02 f006 	mul.w	r0, r2, r6

    tmp21 = z3 + tmp12;
 8013156:	197a      	adds	r2, r7, r5
 8013158:	9201      	str	r2, [sp, #4]
    tmp24 = z3 - tmp12;
 801315a:	1b7a      	subs	r2, r7, r5

    tmp12 = z4 + z2;
 801315c:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 801315e:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 8013162:	9202      	str	r2, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013164:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8013168:	eb0c 0205 	add.w	r2, ip, r5
    tmp12 = z4 - z1 - z2;
 801316c:	1b00      	subs	r0, r0, r4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801316e:	4f87      	ldr	r7, [pc, #540]	; (801338c <jpeg_idct_6x12+0x2a0>)
    tmp20 = tmp10 + tmp12;
 8013170:	9203      	str	r2, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8013172:	ebac 0205 	sub.w	r2, ip, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013176:	f9b9 c010 	ldrsh.w	ip, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801317a:	9204      	str	r2, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801317c:	eb0e 0200 	add.w	r2, lr, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013180:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    tmp22 = tmp11 + tmp12;
 8013184:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 8013186:	ebae 0200 	sub.w	r2, lr, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801318a:	f9b9 e030 	ldrsh.w	lr, [r9, #48]	; 0x30
    tmp23 = tmp11 - tmp12;
 801318e:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013190:	6a0a      	ldr	r2, [r1, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013192:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013196:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801319a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 801319c:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80131a0:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 80131a4:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80131a6:	f9b9 2070 	ldrsh.w	r2, [r9, #112]	; 0x70
    tmp10 = z1 + z3;
 80131aa:	eb0c 0b05 	add.w	fp, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80131ae:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80131b0:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80131b4:	eb02 080b 	add.w	r8, r2, fp
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80131b8:	fb00 f40e 	mul.w	r4, r0, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80131bc:	4874      	ldr	r0, [pc, #464]	; (8013390 <jpeg_idct_6x12+0x2a4>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80131be:	fb06 f808 	mul.w	r8, r6, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80131c2:	f640 065b 	movw	r6, #2139	; 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80131c6:	fb00 f00e 	mul.w	r0, r0, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80131ca:	fb06 8b0b 	mla	fp, r6, fp, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80131ce:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80131d2:	eb04 0a0b 	add.w	sl, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80131d6:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80131da:	fb06 a60c 	mla	r6, r6, ip, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80131de:	eb05 0a02 	add.w	sl, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80131e2:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80131e4:	4e6b      	ldr	r6, [pc, #428]	; (8013394 <jpeg_idct_6x12+0x2a8>)
 80131e6:	fb06 fa0a 	mul.w	sl, r6, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80131ea:	eb00 060a 	add.w	r6, r0, sl
 80131ee:	fb07 6605 	mla	r6, r7, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80131f2:	4f69      	ldr	r7, [pc, #420]	; (8013398 <jpeg_idct_6x12+0x2ac>)
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80131f4:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80131f8:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80131fc:	445e      	add	r6, fp
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80131fe:	fb07 000c 	mla	r0, r7, ip, r0
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013202:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013206:	4f65      	ldr	r7, [pc, #404]	; (801339c <jpeg_idct_6x12+0x2b0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013208:	fb0b 4402 	mla	r4, fp, r2, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801320c:	fb07 0002 	mla	r0, r7, r2, r0
    z1 -= z4;
 8013210:	ebac 0202 	sub.w	r2, ip, r2
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013214:	4454      	add	r4, sl
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013216:	eb02 0c05 	add.w	ip, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801321a:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801321c:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013220:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8013224:	fb0e ce02 	mla	lr, lr, r2, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013228:	4a5d      	ldr	r2, [pc, #372]	; (80133a0 <jpeg_idct_6x12+0x2b4>)
 801322a:	fb02 cc05 	mla	ip, r2, r5, ip

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801322e:	9d03      	ldr	r5, [sp, #12]
 8013230:	9a07      	ldr	r2, [sp, #28]
 8013232:	442a      	add	r2, r5
 8013234:	12d2      	asrs	r2, r2, #11
 8013236:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801323a:	9a07      	ldr	r2, [sp, #28]
 801323c:	1aaf      	subs	r7, r5, r2
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801323e:	9a01      	ldr	r2, [sp, #4]
 8013240:	4472      	add	r2, lr
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013242:	12ff      	asrs	r7, r7, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013244:	12d2      	asrs	r2, r2, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013246:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801324a:	615a      	str	r2, [r3, #20]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801324c:	9a01      	ldr	r2, [sp, #4]
 801324e:	eba2 020e 	sub.w	r2, r2, lr
 8013252:	12d2      	asrs	r2, r2, #11
 8013254:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013258:	9a05      	ldr	r2, [sp, #20]
 801325a:	4432      	add	r2, r6
 801325c:	12d2      	asrs	r2, r2, #11
 801325e:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013260:	9a05      	ldr	r2, [sp, #20]
 8013262:	1b92      	subs	r2, r2, r6
 8013264:	12d2      	asrs	r2, r2, #11
 8013266:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801326a:	9a06      	ldr	r2, [sp, #24]
 801326c:	4422      	add	r2, r4
 801326e:	12d2      	asrs	r2, r2, #11
 8013270:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013272:	9a06      	ldr	r2, [sp, #24]
 8013274:	1b12      	subs	r2, r2, r4
 8013276:	12d2      	asrs	r2, r2, #11
 8013278:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801327c:	9a02      	ldr	r2, [sp, #8]
 801327e:	4462      	add	r2, ip
 8013280:	12d2      	asrs	r2, r2, #11
 8013282:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013284:	9a02      	ldr	r2, [sp, #8]
 8013286:	eba2 020c 	sub.w	r2, r2, ip
 801328a:	12d2      	asrs	r2, r2, #11
 801328c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013290:	9a04      	ldr	r2, [sp, #16]
 8013292:	4402      	add	r2, r0
 8013294:	12d2      	asrs	r2, r2, #11
 8013296:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013298:	9a04      	ldr	r2, [sp, #16]
 801329a:	1a12      	subs	r2, r2, r0
 801329c:	12d2      	asrs	r2, r2, #11
 801329e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80132a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132a4:	454a      	cmp	r2, r9
 80132a6:	f47f af31 	bne.w	801310c <jpeg_idct_6x12+0x20>
 80132aa:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80132ac:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80132ae:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 80132b2:	f1a3 0c04 	sub.w	ip, r3, #4
 80132b6:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 80132ba:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    tmp11 = tmp10 + tmp20;
    tmp21 = tmp10 - tmp20 - tmp20;
    tmp20 = (INT32) wsptr[2];
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80132be:	f242 7431 	movw	r4, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 80132c2:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80132c4:	f640 37b6 	movw	r7, #2998	; 0xbb6
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80132c8:	690a      	ldr	r2, [r1, #16]
  for (ctr = 0; ctr < 12; ctr++) {
 80132ca:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 80132cc:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80132d0:	680b      	ldr	r3, [r1, #0]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80132d2:	fb0b f002 	mul.w	r0, fp, r2
    z3 = (INT32) wsptr[5];
 80132d6:	f8d1 e014 	ldr.w	lr, [r1, #20]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80132da:	f103 0310 	add.w	r3, r3, #16
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80132de:	f101 0118 	add.w	r1, r1, #24
    tmp11 = tmp10 + tmp20;
 80132e2:	eb00 3243 	add.w	r2, r0, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 80132e6:	ebc0 3343 	rsb	r3, r0, r3, lsl #13
 80132ea:	eba3 0300 	sub.w	r3, r3, r0
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80132ee:	f851 0c10 	ldr.w	r0, [r1, #-16]
 80132f2:	fb04 f000 	mul.w	r0, r4, r0
    tmp21 = tmp10 - tmp20 - tmp20;
 80132f6:	9301      	str	r3, [sp, #4]
    tmp20 = tmp11 + tmp10;
 80132f8:	eb02 0500 	add.w	r5, r2, r0
    tmp22 = tmp11 - tmp10;
 80132fc:	eba2 0200 	sub.w	r2, r2, r0
    z1 = (INT32) wsptr[1];
 8013300:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013304:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013308:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801330c:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013310:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013314:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8013318:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 801331a:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801331e:	9b00      	ldr	r3, [sp, #0]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013320:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8013324:	eba0 000e 	sub.w	r0, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013328:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801332c:	eb05 0e07 	add.w	lr, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013330:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8013334:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8013338:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801333c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013340:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8013342:	f809 e003 	strb.w	lr, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013346:	9b00      	ldr	r3, [sp, #0]
 8013348:	5d5d      	ldrb	r5, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801334a:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801334c:	7175      	strb	r5, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801334e:	eb03 3540 	add.w	r5, r3, r0, lsl #13
 8013352:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013354:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013358:	5d5d      	ldrb	r5, [r3, r5]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801335a:	9b01      	ldr	r3, [sp, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801335c:	7075      	strb	r5, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801335e:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
 8013362:	9800      	ldr	r0, [sp, #0]
			    & RANGE_MASK];
 8013364:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013368:	5cc3      	ldrb	r3, [r0, r3]
 801336a:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801336c:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013370:	eba2 0204 	sub.w	r2, r2, r4
			    & RANGE_MASK];
 8013374:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013378:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801337c:	5cc3      	ldrb	r3, [r0, r3]
 801337e:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013380:	5c83      	ldrb	r3, [r0, r2]
 8013382:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8013384:	d199      	bne.n	80132ba <jpeg_idct_6x12+0x1ce>
  }
}
 8013386:	b053      	add	sp, #332	; 0x14c
 8013388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801338c:	ffffd0b0 	.word	0xffffd0b0
 8013390:	ffffeeaf 	.word	0xffffeeaf
 8013394:	ffffde8b 	.word	0xffffde8b
 8013398:	ffffea5c 	.word	0xffffea5c
 801339c:	ffffc08c 	.word	0xffffc08c
 80133a0:	ffffc4df 	.word	0xffffc4df

080133a4 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80133a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a8:	b0b9      	sub	sp, #228	; 0xe4
 80133aa:	1e94      	subs	r4, r2, #2
 80133ac:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80133ae:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80133b2:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80133b4:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80133b6:	3380      	adds	r3, #128	; 0x80
 80133b8:	3804      	subs	r0, #4
 80133ba:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80133bc:	f102 0308 	add.w	r3, r2, #8
 80133c0:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80133c2:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80133c6:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80133c8:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80133cc:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80133d0:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80133d2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80133d6:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80133d8:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 80133dc:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80133de:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80133e2:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80133e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80133ea:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80133ec:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 80133f0:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80133f2:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 80133f4:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80133f8:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80133fc:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013400:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8013404:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013406:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013408:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801340a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 801340e:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013410:	19f3      	adds	r3, r6, r7
 8013412:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013414:	f241 0271 	movw	r2, #4209	; 0x1071
 8013418:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801341c:	4a6e      	ldr	r2, [pc, #440]	; (80135d8 <jpeg_idct_5x10+0x234>)
 801341e:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 8013422:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8013424:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013428:	6e05      	ldr	r5, [r0, #96]	; 0x60
    tmp21 = tmp11 + tmp13;
 801342a:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 801342e:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8013432:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8013434:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013436:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 801343a:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801343c:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013440:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013442:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013446:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801344a:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801344c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 8013450:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013454:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8013458:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801345a:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 801345e:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8013462:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013464:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013468:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801346c:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013470:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013472:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013476:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 801347a:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801347e:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013480:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013484:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013486:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801348a:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801348e:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013490:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013492:	f241 2acf 	movw	sl, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8013496:	eba3 030e 	sub.w	r3, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801349a:	f642 0e53 	movw	lr, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801349e:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80134a2:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80134a6:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80134aa:	009b      	lsls	r3, r3, #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80134ac:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80134b0:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80134b4:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80134b8:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80134bc:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80134be:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80134c2:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80134c6:	12ed      	asrs	r5, r5, #11
 80134c8:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80134cc:	ea4f 25ec 	mov.w	r5, ip, asr #11
 80134d0:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80134d4:	eb07 050e 	add.w	r5, r7, lr
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80134d8:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80134dc:	12ed      	asrs	r5, r5, #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80134de:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80134e0:	610d      	str	r5, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80134e2:	9d04      	ldr	r5, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80134e4:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80134e8:	eb03 25e5 	add.w	r5, r3, r5, asr #11
 80134ec:	624d      	str	r5, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80134ee:	9d04      	ldr	r5, [sp, #16]
 80134f0:	ebc3 23e5 	rsb	r3, r3, r5, asr #11
 80134f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80134f8:	9b02      	ldr	r3, [sp, #8]
 80134fa:	4413      	add	r3, r2
 80134fc:	12db      	asrs	r3, r3, #11
 80134fe:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013500:	9b02      	ldr	r3, [sp, #8]
 8013502:	1a9b      	subs	r3, r3, r2
 8013504:	12db      	asrs	r3, r3, #11
 8013506:	674b      	str	r3, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	4433      	add	r3, r6
 801350c:	12db      	asrs	r3, r3, #11
 801350e:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013510:	9b01      	ldr	r3, [sp, #4]
 8013512:	1b9b      	subs	r3, r3, r6
 8013514:	12db      	asrs	r3, r3, #11
 8013516:	660b      	str	r3, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013518:	9b05      	ldr	r3, [sp, #20]
 801351a:	42a3      	cmp	r3, r4
 801351c:	f47f af51 	bne.w	80133c2 <jpeg_idct_5x10+0x1e>
 8013520:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8013522:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013524:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013528:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 801352c:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013530:	f641 289a 	movw	r8, #6810	; 0x1a9a
 8013534:	3324      	adds	r3, #36	; 0x24
 8013536:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8013538:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 801353c:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 801353e:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8013540:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8013544:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8013548:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801354c:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013550:	1898      	adds	r0, r3, r2
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013552:	1a9b      	subs	r3, r3, r2
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013554:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 8013556:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801355a:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 801355e:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013562:	fb0a f000 	mul.w	r0, sl, r0
    z3 = tmp12 + z2;
 8013566:	eb03 3247 	add.w	r2, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801356a:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801356c:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8013570:	1884      	adds	r4, r0, r2
    tmp11 = z3 - z1;
 8013572:	1a12      	subs	r2, r2, r0
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013574:	eb05 000b 	add.w	r0, r5, fp
 8013578:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801357c:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8013580:	4b15      	ldr	r3, [pc, #84]	; (80135d8 <jpeg_idct_5x10+0x234>)
 8013582:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8013586:	eb04 0b05 	add.w	fp, r4, r5
 801358a:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 801358c:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 801358e:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8013592:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8013596:	f813 b00b 	ldrb.w	fp, [r3, fp]
 801359a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801359c:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80135a0:	9b00      	ldr	r3, [sp, #0]
 80135a2:	5d1c      	ldrb	r4, [r3, r4]
 80135a4:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80135a6:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80135a8:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 80135aa:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80135ae:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80135b2:	5d1c      	ldrb	r4, [r3, r4]
 80135b4:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80135b6:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 80135b8:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80135ba:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 80135bc:	009b      	lsls	r3, r3, #2
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80135be:	9a00      	ldr	r2, [sp, #0]
    tmp12 -= z2 << 2;
 80135c0:	ebc3 3347 	rsb	r3, r3, r7, lsl #13
			    & RANGE_MASK];
 80135c4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80135c8:	5cd3      	ldrb	r3, [r2, r3]
 80135ca:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 80135cc:	9b02      	ldr	r3, [sp, #8]
 80135ce:	4563      	cmp	r3, ip
 80135d0:	d1b2      	bne.n	8013538 <jpeg_idct_5x10+0x194>
  }
}
 80135d2:	b039      	add	sp, #228	; 0xe4
 80135d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d8:	ffffba5c 	.word	0xffffba5c

080135dc <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80135dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e0:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80135e2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 80135e4:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80135e6:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80135e8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80135ec:	3380      	adds	r3, #128	; 0x80
 80135ee:	9302      	str	r3, [sp, #8]
  for (ctr = 4; ctr > 0; ctr--) {
 80135f0:	1e93      	subs	r3, r2, #2
 80135f2:	9301      	str	r3, [sp, #4]
 80135f4:	f105 0310 	add.w	r3, r5, #16
 80135f8:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80135fa:	9b01      	ldr	r3, [sp, #4]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80135fc:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80135fe:	f855 0b04 	ldr.w	r0, [r5], #4
 8013602:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013604:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8013608:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801360c:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 8013610:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013614:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 8013618:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801361c:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8013620:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8013624:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8013626:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801362a:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801362c:	ea4e 0000 	orr.w	r0, lr, r0
 8013630:	4330      	orrs	r0, r6
 8013632:	ea48 0000 	orr.w	r0, r8, r0
 8013636:	4320      	orrs	r0, r4
 8013638:	ea59 0000 	orrs.w	r0, r9, r0
 801363c:	d155      	bne.n	80136ea <jpeg_idct_4x8+0x10e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801363e:	009b      	lsls	r3, r3, #2
      wsptr[4*0] = dcval;
 8013640:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[4*1] = dcval;
 8013644:	60cb      	str	r3, [r1, #12]
      wsptr[4*2] = dcval;
 8013646:	61cb      	str	r3, [r1, #28]
      wsptr[4*3] = dcval;
 8013648:	62cb      	str	r3, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 801364a:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 801364c:	64cb      	str	r3, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 801364e:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8013650:	66cb      	str	r3, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8013652:	9b05      	ldr	r3, [sp, #20]
 8013654:	42ab      	cmp	r3, r5
 8013656:	d1d0      	bne.n	80135fa <jpeg_idct_4x8+0x1e>
 8013658:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801365a:	a806      	add	r0, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801365c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013660:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8013664:	1f1c      	subs	r4, r3, #4
 8013666:	f103 0b1c 	add.w	fp, r3, #28
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801366a:	f8df c174 	ldr.w	ip, [pc, #372]	; 80137e0 <jpeg_idct_4x8+0x204>
    outptr = output_buf[ctr] + output_col;
 801366e:	f854 6f04 	ldr.w	r6, [r4, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8013672:	3010      	adds	r0, #16
    outptr = output_buf[ctr] + output_col;
 8013674:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013676:	f850 1c10 	ldr.w	r1, [r0, #-16]
  for (ctr = 0; ctr < 8; ctr++) {
 801367a:	45a3      	cmp	fp, r4
    outptr = output_buf[ctr] + output_col;
 801367c:	eb06 0503 	add.w	r5, r6, r3
    z3 = (INT32) wsptr[3];
 8013680:	f850 ac04 	ldr.w	sl, [r0, #-4]
    tmp2 = (INT32) wsptr[2];
 8013684:	f850 3c08 	ldr.w	r3, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013688:	f101 0110 	add.w	r1, r1, #16
    z2 = (INT32) wsptr[1];
 801368c:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013690:	eb01 0903 	add.w	r9, r1, r3
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013694:	eba1 0103 	sub.w	r1, r1, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013698:	eb02 030a 	add.w	r3, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801369c:	9f02      	ldr	r7, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801369e:	fb08 f303 	mul.w	r3, r8, r3
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80136a2:	fb0e 3202 	mla	r2, lr, r2, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80136a6:	fb0c 330a 	mla	r3, ip, sl, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80136aa:	eb02 3a49 	add.w	sl, r2, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80136ae:	ebc2 3249 	rsb	r2, r2, r9, lsl #13
			    & RANGE_MASK];
 80136b2:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80136b6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80136ba:	f817 a00a 	ldrb.w	sl, [r7, sl]
 80136be:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 80136c0:	f806 a007 	strb.w	sl, [r6, r7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80136c4:	9e02      	ldr	r6, [sp, #8]
 80136c6:	5cb2      	ldrb	r2, [r6, r2]
 80136c8:	70ea      	strb	r2, [r5, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80136ca:	eb03 3241 	add.w	r2, r3, r1, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80136ce:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
			    & RANGE_MASK];
 80136d2:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80136d6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80136da:	5cb2      	ldrb	r2, [r6, r2]
 80136dc:	706a      	strb	r2, [r5, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80136de:	5cf3      	ldrb	r3, [r6, r3]
 80136e0:	70ab      	strb	r3, [r5, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 80136e2:	d1c4      	bne.n	801366e <jpeg_idct_4x8+0x92>
  }
}
 80136e4:	b027      	add	sp, #156	; 0x9c
 80136e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136ea:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136ec:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 80136f0:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136f2:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80136f4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80136f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80136fc:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136fe:	183c      	adds	r4, r7, r0
 8013700:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013702:	f641 027e 	movw	r2, #6270	; 0x187e
 8013706:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801370a:	4a35      	ldr	r2, [pc, #212]	; (80137e0 <jpeg_idct_4x8+0x204>)
 801370c:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013710:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8013712:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8013714:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8013718:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 801371c:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8013720:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013722:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 8013726:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8013728:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801372a:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801372c:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013730:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013734:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013738:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801373c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 801373e:	9203      	str	r2, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013740:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013744:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8013748:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 801374c:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013750:	1930      	adds	r0, r6, r4
 8013752:	4350      	muls	r0, r2
    z2 += z1;
 8013754:	4a23      	ldr	r2, [pc, #140]	; (80137e4 <jpeg_idct_4x8+0x208>)
 8013756:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 801375a:	4a23      	ldr	r2, [pc, #140]	; (80137e8 <jpeg_idct_4x8+0x20c>)
 801375c:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013760:	eb09 040a 	add.w	r4, r9, sl
 8013764:	4a21      	ldr	r2, [pc, #132]	; (80137ec <jpeg_idct_4x8+0x210>)
 8013766:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8013768:	f640 128e 	movw	r2, #2446	; 0x98e
 801376c:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8013770:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8013772:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 8013776:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801377a:	4a1d      	ldr	r2, [pc, #116]	; (80137f0 <jpeg_idct_4x8+0x214>)
    tmp3 += z1 + z3;
 801377c:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013780:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8013784:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013788:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 801378c:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801378e:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8013790:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8013794:	f246 2854 	movw	r8, #25172	; 0x6254
 8013798:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801379c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80137a0:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80137a4:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80137a6:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80137aa:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80137ae:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80137b0:	eb07 040e 	add.w	r4, r7, lr
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80137b4:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80137b8:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80137ba:	12ff      	asrs	r7, r7, #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80137bc:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80137be:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80137c0:	1a1b      	subs	r3, r3, r0
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80137c2:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80137c4:	12e4      	asrs	r4, r4, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80137c6:	12db      	asrs	r3, r3, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80137c8:	61cc      	str	r4, [r1, #28]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80137ca:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80137cc:	9b03      	ldr	r3, [sp, #12]
 80137ce:	444b      	add	r3, r9
 80137d0:	12db      	asrs	r3, r3, #11
 80137d2:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80137d4:	9b03      	ldr	r3, [sp, #12]
 80137d6:	eba3 0309 	sub.w	r3, r3, r9
 80137da:	12db      	asrs	r3, r3, #11
 80137dc:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 80137de:	e738      	b.n	8013652 <jpeg_idct_4x8+0x76>
 80137e0:	ffffc4df 	.word	0xffffc4df
 80137e4:	ffffc13b 	.word	0xffffc13b
 80137e8:	fffff384 	.word	0xfffff384
 80137ec:	ffffe333 	.word	0xffffe333
 80137f0:	ffffadfd 	.word	0xffffadfd

080137f4 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80137f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80137f8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80137fc:	b095      	sub	sp, #84	; 0x54
 80137fe:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8013800:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013802:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8013806:	3204      	adds	r2, #4
 8013808:	3c04      	subs	r4, #4
  wsptr = workspace;
 801380a:	ae02      	add	r6, sp, #8
{
 801380c:	9300      	str	r3, [sp, #0]
 801380e:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013810:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013814:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013818:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801381c:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801381e:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013822:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013824:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013828:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801382c:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 801382e:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013830:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013834:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013838:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801383c:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013840:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8013842:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8013844:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801384a:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801384c:	f242 7731 	movw	r7, #10033	; 0x2731
 8013850:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013852:	6a27      	ldr	r7, [r4, #32]
    tmp10 = tmp1 + tmp0;
 8013854:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8013858:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801385a:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 801385e:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013860:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8013862:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013866:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 801386a:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801386e:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013872:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8013876:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801387a:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801387e:	435f      	muls	r7, r3
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8013880:	eba2 0208 	sub.w	r2, r2, r8
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8013884:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013886:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801388a:	0092      	lsls	r2, r2, #2
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801388c:	42ab      	cmp	r3, r5

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801388e:	eb0c 080a 	add.w	r8, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013892:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013896:	eb07 374b 	add.w	r7, r7, fp, lsl #13
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801389a:	ea4f 2cec 	mov.w	ip, ip, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801389e:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80138a2:	f8c6 c038 	str.w	ip, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 80138a6:	eb02 2ce1 	add.w	ip, r2, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 80138aa:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80138ae:	f846 8c04 	str.w	r8, [r6, #-4]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 80138b2:	f8c6 c008 	str.w	ip, [r6, #8]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 80138b6:	62f2      	str	r2, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80138b8:	eb00 0207 	add.w	r2, r0, r7
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80138bc:	eba0 0007 	sub.w	r0, r0, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80138c0:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80138c4:	ea4f 20e0 	mov.w	r0, r0, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80138c8:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80138ca:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80138cc:	d1a0      	bne.n	8013810 <jpeg_idct_3x6+0x1c>
 80138ce:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 80138d0:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80138d2:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80138d6:	f242 7b31 	movw	fp, #10033	; 0x2731
 80138da:	1f1d      	subs	r5, r3, #4
 80138dc:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 80138de:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 80138e2:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 80138e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80138e6:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 80138ea:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 80138ec:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80138f0:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80138f4:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80138f8:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80138fc:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013900:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013902:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8013906:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 801390a:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801390e:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013912:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8013916:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 801391a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 801391e:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8013922:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013926:	f81e a00a 	ldrb.w	sl, [lr, sl]
 801392a:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801392e:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8013932:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8013934:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013938:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 801393a:	d1d0      	bne.n	80138de <jpeg_idct_3x6+0xea>
  }
}
 801393c:	b015      	add	sp, #84	; 0x54
 801393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013944 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013948:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 801394c:	b08b      	sub	sp, #44	; 0x2c
 801394e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8013950:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013952:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013956:	ad02      	add	r5, sp, #8
 8013958:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801395a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801395e:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013962:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013964:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8013968:	46b4      	mov	ip, r6
 801396a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801396e:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013970:	4f29      	ldr	r7, [pc, #164]	; (8013a18 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8013972:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013974:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013978:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 801397c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801397e:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013982:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013986:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801398a:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801398e:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013992:	6a21      	ldr	r1, [r4, #32]
 8013994:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013998:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801399a:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801399e:	eb0a 010b 	add.w	r1, sl, fp
 80139a2:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80139a6:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80139aa:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 80139ae:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80139b2:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 80139b6:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 80139ba:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 80139be:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80139c2:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 80139c6:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 80139ca:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80139cc:	d1ca      	bne.n	8013964 <jpeg_idct_2x4+0x20>
 80139ce:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80139d0:	a902      	add	r1, sp, #8
 80139d2:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80139d4:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 80139d8:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 80139da:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 80139dc:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 80139e0:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 80139e2:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80139e6:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80139ea:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80139ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80139f0:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80139f4:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 80139f8:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 80139fc:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8013a00:	5d3c      	ldrb	r4, [r7, r4]
 8013a02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013a04:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8013a06:	9c01      	ldr	r4, [sp, #4]
 8013a08:	5ca2      	ldrb	r2, [r4, r2]
 8013a0a:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8013a0e:	d1e1      	bne.n	80139d4 <jpeg_idct_2x4+0x90>
  }
}
 8013a10:	b00b      	add	sp, #44	; 0x2c
 8013a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a16:	bf00      	nop
 8013a18:	ffffc4df 	.word	0xffffc4df

08013a1c <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013a1c:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013a1e:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013a20:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013a24:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013a26:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8013a2a:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013a2c:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013a2e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013a32:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 8013a34:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013a36:	3080      	adds	r0, #128	; 0x80
{
 8013a38:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8013a3a:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8013a3c:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8013a3e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8013a42:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8013a46:	5d06      	ldrb	r6, [r0, r4]
 8013a48:	681c      	ldr	r4, [r3, #0]
 8013a4a:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8013a4c:	5c42      	ldrb	r2, [r0, r1]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	555a      	strb	r2, [r3, r5]
}
 8013a52:	bd70      	pop	{r4, r5, r6, pc}

08013a54 <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8013a54:	6803      	ldr	r3, [r0, #0]
 8013a56:	2238      	movs	r2, #56	; 0x38
 8013a58:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	4718      	bx	r3

08013a60 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8013a60:	688b      	ldr	r3, [r1, #8]
{
 8013a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8013a66:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8013a6a:	698b      	ldr	r3, [r1, #24]
{
 8013a6c:	b085      	sub	sp, #20
 8013a6e:	4681      	mov	r9, r0
 8013a70:	460c      	mov	r4, r1
 8013a72:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8013a74:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013a78:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8013a7a:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013a7e:	6922      	ldr	r2, [r4, #16]
 8013a80:	42b2      	cmp	r2, r6
 8013a82:	dc02      	bgt.n	8013a8a <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8013a84:	b005      	add	sp, #20
 8013a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8013a8a:	1b92      	subs	r2, r2, r6
 8013a8c:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8013a8e:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8013a90:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8013a92:	6865      	ldr	r5, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8013a94:	4430      	add	r0, r6
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8013a96:	bfa8      	it	ge
 8013a98:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8013a9a:	69e1      	ldr	r1, [r4, #28]
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8013a9c:	1a2d      	subs	r5, r5, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8013a9e:	1a09      	subs	r1, r1, r0
 8013aa0:	4291      	cmp	r1, r2
 8013aa2:	bfa8      	it	ge
 8013aa4:	4611      	movge	r1, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8013aa6:	428d      	cmp	r5, r1
 8013aa8:	bfa8      	it	ge
 8013aaa:	460d      	movge	r5, r1
    if (rows <= 0)		/* this chunk might be past end of file! */
 8013aac:	2d00      	cmp	r5, #0
 8013aae:	dde9      	ble.n	8013a84 <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 8013ab0:	fb05 f308 	mul.w	r3, r5, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8013ab4:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8013ab6:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8013ab8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8013abc:	f1ba 0f00 	cmp.w	sl, #0
 8013ac0:	d00a      	beq.n	8013ad8 <do_barray_io+0x78>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8013ac2:	9300      	str	r3, [sp, #0]
 8013ac4:	4659      	mov	r1, fp
 8013ac6:	463b      	mov	r3, r7
 8013ac8:	4648      	mov	r0, r9
 8013aca:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8013acc:	47a8      	blx	r5
    file_offset += byte_count;
 8013ace:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013ad0:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8013ad2:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013ad4:	4416      	add	r6, r2
 8013ad6:	e7d2      	b.n	8013a7e <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8013ad8:	9b03      	ldr	r3, [sp, #12]
 8013ada:	4659      	mov	r1, fp
 8013adc:	4648      	mov	r0, r9
 8013ade:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013ae0:	9300      	str	r3, [sp, #0]
 8013ae2:	463b      	mov	r3, r7
 8013ae4:	e7f2      	b.n	8013acc <do_barray_io+0x6c>
	...

08013ae8 <alloc_small>:
{
 8013ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8013aec:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8013af0:	4606      	mov	r6, r0
 8013af2:	460d      	mov	r5, r1
 8013af4:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8013af6:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013af8:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8013afa:	d902      	bls.n	8013b02 <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8013afc:	2101      	movs	r1, #1
 8013afe:	f7ff ffa9 	bl	8013a54 <out_of_memory>
  if (odd_bytes > 0)
 8013b02:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8013b06:	bf1c      	itt	ne
 8013b08:	3408      	addne	r4, #8
 8013b0a:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8013b0c:	2d01      	cmp	r5, #1
 8013b0e:	d906      	bls.n	8013b1e <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013b10:	6833      	ldr	r3, [r6, #0]
 8013b12:	220f      	movs	r2, #15
 8013b14:	4630      	mov	r0, r6
 8013b16:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8013b1e:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8013b22:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8013b26:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8013b2a:	b9e8      	cbnz	r0, 8013b68 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8013b2c:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8013b30:	f1ba 0f00 	cmp.w	sl, #0
 8013b34:	d11e      	bne.n	8013b74 <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8013b36:	4b1d      	ldr	r3, [pc, #116]	; (8013bac <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8013b38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8013b3c:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8013b40:	429d      	cmp	r5, r3
 8013b42:	bf28      	it	cs
 8013b44:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8013b46:	eb05 0b09 	add.w	fp, r5, r9
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	4659      	mov	r1, fp
 8013b4e:	f000 fbd1 	bl	80142f4 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8013b52:	b988      	cbnz	r0, 8013b78 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8013b54:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8013b56:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8013b5a:	d803      	bhi.n	8013b64 <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8013b5c:	2102      	movs	r1, #2
 8013b5e:	4630      	mov	r0, r6
 8013b60:	f7ff ff78 	bl	8013a54 <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8013b64:	465d      	mov	r5, fp
 8013b66:	e7ee      	b.n	8013b46 <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8013b68:	6883      	ldr	r3, [r0, #8]
 8013b6a:	42a3      	cmp	r3, r4
 8013b6c:	d211      	bcs.n	8013b92 <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8013b6e:	4682      	mov	sl, r0
 8013b70:	6800      	ldr	r0, [r0, #0]
 8013b72:	e7da      	b.n	8013b2a <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8013b74:	4b0e      	ldr	r3, [pc, #56]	; (8013bb0 <alloc_small+0xc8>)
 8013b76:	e7df      	b.n	8013b38 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8013b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8013b7a:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8013b7c:	445b      	add	r3, fp
 8013b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8013b80:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8013b82:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8013b84:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8013b88:	f1ba 0f00 	cmp.w	sl, #0
 8013b8c:	d10b      	bne.n	8013ba6 <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8013b8e:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8013b92:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8013b94:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8013b96:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8013b98:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8013b9a:	6882      	ldr	r2, [r0, #8]
 8013b9c:	1b12      	subs	r2, r2, r4
 8013b9e:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8013ba0:	4418      	add	r0, r3
}
 8013ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8013ba6:	f8ca 0000 	str.w	r0, [sl]
 8013baa:	e7f2      	b.n	8013b92 <alloc_small+0xaa>
 8013bac:	08023904 	.word	0x08023904
 8013bb0:	080238fc 	.word	0x080238fc

08013bb4 <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8013bb4:	2901      	cmp	r1, #1
{
 8013bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bba:	4604      	mov	r4, r0
 8013bbc:	460d      	mov	r5, r1
 8013bbe:	4616      	mov	r6, r2
 8013bc0:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013bc2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8013bc6:	d005      	beq.n	8013bd4 <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013bc8:	6803      	ldr	r3, [r0, #0]
 8013bca:	220f      	movs	r2, #15
 8013bcc:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8013bd4:	223c      	movs	r2, #60	; 0x3c
 8013bd6:	4629      	mov	r1, r5
 8013bd8:	4620      	mov	r0, r4
 8013bda:	f7ff ff85 	bl	8013ae8 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013bde:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8013be0:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013be2:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8013be4:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8013be6:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8013bea:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8013bec:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8013bee:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8013bf2:	9a07      	ldr	r2, [sp, #28]
 8013bf4:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8013bf6:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8013bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bfe <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8013bfe:	2901      	cmp	r1, #1
{
 8013c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c04:	4604      	mov	r4, r0
 8013c06:	460d      	mov	r5, r1
 8013c08:	4616      	mov	r6, r2
 8013c0a:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013c0c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8013c10:	d005      	beq.n	8013c1e <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013c12:	6803      	ldr	r3, [r0, #0]
 8013c14:	220f      	movs	r2, #15
 8013c16:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8013c1e:	223c      	movs	r2, #60	; 0x3c
 8013c20:	4629      	mov	r1, r5
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7ff ff60 	bl	8013ae8 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013c28:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8013c2a:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013c2c:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8013c2e:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8013c30:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8013c34:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8013c36:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8013c38:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8013c3c:	9a07      	ldr	r2, [sp, #28]
 8013c3e:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8013c40:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8013c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c48 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8013c48:	2901      	cmp	r1, #1
{
 8013c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c4e:	4606      	mov	r6, r0
 8013c50:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013c52:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8013c54:	d910      	bls.n	8013c78 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013c56:	6803      	ldr	r3, [r0, #0]
 8013c58:	220f      	movs	r2, #15
 8013c5a:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8013c62:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8013c66:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8013c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8013c6a:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8013c6c:	bb0b      	cbnz	r3, 8013cb2 <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8013c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8013c70:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 8013c72:	bb69      	cbnz	r1, 8013cd0 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8013c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8013c78:	d1f3      	bne.n	8013c62 <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013c7a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8013c7c:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013c7e:	b924      	cbnz	r4, 8013c8a <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013c80:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 8013c82:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013c84:	b95f      	cbnz	r7, 8013c9e <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8013c86:	64af      	str	r7, [r5, #72]	; 0x48
 8013c88:	e7eb      	b.n	8013c62 <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8013c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013c8c:	b12b      	cbz	r3, 8013c9a <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8013c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013c90:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013c94:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8013c96:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8013c98:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013c9a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8013c9c:	e7ef      	b.n	8013c7e <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8013c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca0:	b12b      	cbz	r3, 8013cae <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8013ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ca4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013ca8:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8013caa:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8013cac:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013cae:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8013cb0:	e7e8      	b.n	8013c84 <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8013cb2:	e9d3 8700 	ldrd	r8, r7, [r3]
 8013cb6:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8013cb8:	4619      	mov	r1, r3
 8013cba:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8013cbc:	4417      	add	r7, r2
 8013cbe:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8013cc0:	463a      	mov	r2, r7
 8013cc2:	f000 fb20 	bl	8014306 <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8013cc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8013cc8:	1bdb      	subs	r3, r3, r7
 8013cca:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8013ccc:	4643      	mov	r3, r8
 8013cce:	e7cd      	b.n	8013c6c <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8013cd0:	688b      	ldr	r3, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8013cd2:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8013cd4:	e9d1 7400 	ldrd	r7, r4, [r1]
 8013cd8:	441c      	add	r4, r3
 8013cda:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8013cdc:	4622      	mov	r2, r4
 8013cde:	f000 fb0c 	bl	80142fa <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8013ce2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8013ce4:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8013ce6:	1b1b      	subs	r3, r3, r4
 8013ce8:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8013cea:	e7c2      	b.n	8013c72 <free_pool+0x2a>

08013cec <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8013cec:	b510      	push	{r4, lr}
 8013cee:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8013cf0:	2101      	movs	r1, #1
 8013cf2:	f7ff ffa9 	bl	8013c48 <free_pool>
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f7ff ffa5 	bl	8013c48 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8013cfe:	4620      	mov	r0, r4
 8013d00:	6861      	ldr	r1, [r4, #4]
 8013d02:	2254      	movs	r2, #84	; 0x54
 8013d04:	f000 faf9 	bl	80142fa <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8013d08:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8013d0a:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8013d0c:	6063      	str	r3, [r4, #4]
}
 8013d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8013d12:	f000 bb04 	b.w	801431e <jpeg_mem_term>

08013d16 <access_virt_barray>:
{
 8013d16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8013d1a:	18d7      	adds	r7, r2, r3
{
 8013d1c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8013d1e:	684a      	ldr	r2, [r1, #4]
{
 8013d20:	460c      	mov	r4, r1
 8013d22:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8013d26:	42ba      	cmp	r2, r7
 8013d28:	d304      	bcc.n	8013d34 <access_virt_barray+0x1e>
 8013d2a:	68ca      	ldr	r2, [r1, #12]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d301      	bcc.n	8013d34 <access_virt_barray+0x1e>
 8013d30:	680b      	ldr	r3, [r1, #0]
 8013d32:	b933      	cbnz	r3, 8013d42 <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8013d34:	6803      	ldr	r3, [r0, #0]
 8013d36:	2217      	movs	r2, #23
 8013d38:	9001      	str	r0, [sp, #4]
 8013d3a:	615a      	str	r2, [r3, #20]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	4798      	blx	r3
 8013d40:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 8013d42:	69a3      	ldr	r3, [r4, #24]
 8013d44:	42ab      	cmp	r3, r5
 8013d46:	d803      	bhi.n	8013d50 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8013d48:	6922      	ldr	r2, [r4, #16]
 8013d4a:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8013d4c:	42bb      	cmp	r3, r7
 8013d4e:	d221      	bcs.n	8013d94 <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8013d50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d52:	b933      	cbnz	r3, 8013d62 <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8013d54:	6803      	ldr	r3, [r0, #0]
 8013d56:	2247      	movs	r2, #71	; 0x47
 8013d58:	9001      	str	r0, [sp, #4]
 8013d5a:	615a      	str	r2, [r3, #20]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	4798      	blx	r3
 8013d60:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 8013d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d64:	b13b      	cbz	r3, 8013d76 <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8013d66:	2201      	movs	r2, #1
 8013d68:	4621      	mov	r1, r4
 8013d6a:	9001      	str	r0, [sp, #4]
 8013d6c:	f7ff fe78 	bl	8013a60 <do_barray_io>
      ptr->dirty = FALSE;
 8013d70:	2300      	movs	r3, #0
 8013d72:	9801      	ldr	r0, [sp, #4]
 8013d74:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8013d76:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8013d78:	2200      	movs	r2, #0
 8013d7a:	4621      	mov	r1, r4
 8013d7c:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8013d7e:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8013d80:	bf29      	itett	cs
 8013d82:	6923      	ldrcs	r3, [r4, #16]
 8013d84:	462b      	movcc	r3, r5
 8013d86:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8013d88:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8013d8c:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8013d8e:	f7ff fe67 	bl	8013a60 <do_barray_io>
 8013d92:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8013d94:	69e6      	ldr	r6, [r4, #28]
 8013d96:	42be      	cmp	r6, r7
 8013d98:	d21c      	bcs.n	8013dd4 <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8013d9a:	42ae      	cmp	r6, r5
 8013d9c:	d20c      	bcs.n	8013db8 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8013d9e:	f1b8 0f00 	cmp.w	r8, #0
 8013da2:	d01b      	beq.n	8013ddc <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8013da4:	6803      	ldr	r3, [r0, #0]
 8013da6:	2217      	movs	r2, #23
 8013da8:	9001      	str	r0, [sp, #4]
 8013daa:	462e      	mov	r6, r5
 8013dac:	615a      	str	r2, [r3, #20]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	4798      	blx	r3
    if (writable)
 8013db2:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8013db4:	61e7      	str	r7, [r4, #28]
 8013db6:	e002      	b.n	8013dbe <access_virt_barray+0xa8>
    if (writable)
 8013db8:	f1b8 0f00 	cmp.w	r8, #0
 8013dbc:	d1fa      	bne.n	8013db4 <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8013dbe:	6a22      	ldr	r2, [r4, #32]
 8013dc0:	b1b2      	cbz	r2, 8013df0 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8013dc2:	68a2      	ldr	r2, [r4, #8]
 8013dc4:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8013dc8:	69a2      	ldr	r2, [r4, #24]
 8013dca:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8013dcc:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8013dce:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8013dd0:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8013dd2:	d305      	bcc.n	8013de0 <access_virt_barray+0xca>
  if (writable)
 8013dd4:	f1b8 0f00 	cmp.w	r8, #0
 8013dd8:	d10d      	bne.n	8013df6 <access_virt_barray+0xe0>
 8013dda:	e00e      	b.n	8013dfa <access_virt_barray+0xe4>
 8013ddc:	462e      	mov	r6, r5
 8013dde:	e7ee      	b.n	8013dbe <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8013de0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013de4:	464a      	mov	r2, r9
 8013de6:	2100      	movs	r1, #0
	undef_row++;
 8013de8:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8013dea:	f00b fb25 	bl	801f438 <memset>
	undef_row++;
 8013dee:	e7ee      	b.n	8013dce <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8013df0:	f1b8 0f00 	cmp.w	r8, #0
 8013df4:	d009      	beq.n	8013e0a <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 8013df6:	2301      	movs	r3, #1
 8013df8:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8013dfa:	69a3      	ldr	r3, [r4, #24]
 8013dfc:	6820      	ldr	r0, [r4, #0]
 8013dfe:	1aed      	subs	r5, r5, r3
}
 8013e00:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8013e04:	b003      	add	sp, #12
 8013e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8013e0a:	6803      	ldr	r3, [r0, #0]
 8013e0c:	2217      	movs	r2, #23
 8013e0e:	615a      	str	r2, [r3, #20]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	4798      	blx	r3
  if (writable)
 8013e14:	e7f1      	b.n	8013dfa <access_virt_barray+0xe4>

08013e16 <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8013e16:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8013e1a:	429a      	cmp	r2, r3
{
 8013e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e20:	4606      	mov	r6, r0
 8013e22:	4688      	mov	r8, r1
 8013e24:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013e26:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8013e28:	d902      	bls.n	8013e30 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8013e2a:	2103      	movs	r1, #3
 8013e2c:	f7ff fe12 	bl	8013a54 <out_of_memory>
  if (odd_bytes > 0)
 8013e30:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8013e34:	bf1c      	itt	ne
 8013e36:	3408      	addne	r4, #8
 8013e38:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8013e3a:	f1b8 0f01 	cmp.w	r8, #1
 8013e3e:	d906      	bls.n	8013e4e <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013e40:	6833      	ldr	r3, [r6, #0]
 8013e42:	220f      	movs	r2, #15
 8013e44:	4630      	mov	r0, r6
 8013e46:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8013e4e:	f104 0110 	add.w	r1, r4, #16
 8013e52:	4630      	mov	r0, r6
 8013e54:	f000 fa54 	bl	8014300 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8013e58:	4605      	mov	r5, r0
 8013e5a:	b918      	cbnz	r0, 8013e64 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8013e5c:	2104      	movs	r1, #4
 8013e5e:	4630      	mov	r0, r6
 8013e60:	f7ff fdf8 	bl	8013a54 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8013e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e66:	eb07 0188 	add.w	r1, r7, r8, lsl #2
}
 8013e6a:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8013e6e:	3310      	adds	r3, #16
 8013e70:	4423      	add	r3, r4
 8013e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8013e74:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8013e76:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8013e7e:	63cd      	str	r5, [r1, #60]	; 0x3c
}
 8013e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e84 <alloc_barray>:
{
 8013e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8013e88:	01d7      	lsls	r7, r2, #7
{
 8013e8a:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013e8c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8013e90:	4680      	mov	r8, r0
 8013e92:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013e94:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8013e96:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013e98:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8013e9c:	d904      	bls.n	8013ea8 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8013e9e:	6803      	ldr	r3, [r0, #0]
 8013ea0:	2248      	movs	r2, #72	; 0x48
 8013ea2:	615a      	str	r2, [r3, #20]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8013ea8:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8013eaa:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8013eae:	4651      	mov	r1, sl
 8013eb0:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8013eb2:	bfa8      	it	ge
 8013eb4:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8013eb6:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8013eb8:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8013eba:	f7ff fe15 	bl	8013ae8 <alloc_small>
 8013ebe:	4681      	mov	r9, r0
  while (currow < numrows) {
 8013ec0:	42ae      	cmp	r6, r5
 8013ec2:	d302      	bcc.n	8013eca <alloc_barray+0x46>
}
 8013ec4:	4648      	mov	r0, r9
 8013ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013eca:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8013ecc:	4651      	mov	r1, sl
 8013ece:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013ed0:	429c      	cmp	r4, r3
 8013ed2:	bf28      	it	cs
 8013ed4:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8013ed6:	fb04 f207 	mul.w	r2, r4, r7
 8013eda:	f7ff ff9c 	bl	8013e16 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8013ede:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8013ee2:	4426      	add	r6, r4
 8013ee4:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	d0e9      	beq.n	8013ec0 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8013eec:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8013ef0:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8013ef2:	e7f9      	b.n	8013ee8 <alloc_barray+0x64>

08013ef4 <alloc_sarray>:
{
 8013ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef8:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013efa:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8013efe:	4607      	mov	r7, r0
 8013f00:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8013f02:	429a      	cmp	r2, r3
{
 8013f04:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013f06:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013f08:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8013f0c:	d904      	bls.n	8013f18 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8013f0e:	6803      	ldr	r3, [r0, #0]
 8013f10:	2248      	movs	r2, #72	; 0x48
 8013f12:	615a      	str	r2, [r3, #20]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8013f18:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8013f1a:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8013f1e:	4651      	mov	r1, sl
 8013f20:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8013f22:	bfa8      	it	ge
 8013f24:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8013f26:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8013f28:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8013f2a:	f7ff fddd 	bl	8013ae8 <alloc_small>
 8013f2e:	4681      	mov	r9, r0
  while (currow < numrows) {
 8013f30:	42ae      	cmp	r6, r5
 8013f32:	d302      	bcc.n	8013f3a <alloc_sarray+0x46>
}
 8013f34:	4648      	mov	r0, r9
 8013f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013f3a:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8013f3c:	4651      	mov	r1, sl
 8013f3e:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013f40:	429c      	cmp	r4, r3
 8013f42:	bf28      	it	cs
 8013f44:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8013f46:	fb04 f208 	mul.w	r2, r4, r8
 8013f4a:	f7ff ff64 	bl	8013e16 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8013f4e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8013f52:	4426      	add	r6, r4
 8013f54:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8013f58:	4293      	cmp	r3, r2
 8013f5a:	d0e9      	beq.n	8013f30 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8013f5c:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8013f60:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8013f62:	e7f9      	b.n	8013f58 <alloc_sarray+0x64>

08013f64 <realize_virt_arrays>:
{
 8013f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013f68:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8013f6c:	2500      	movs	r5, #0
{
 8013f6e:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013f70:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8013f74:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013f76:	bb03      	cbnz	r3, 8013fba <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013f78:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8013f7c:	bb43      	cbnz	r3, 8013fd0 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8013f7e:	2e00      	cmp	r6, #0
 8013f80:	dd19      	ble.n	8013fb6 <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8013f82:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8013f86:	462a      	mov	r2, r5
 8013f88:	4631      	mov	r1, r6
 8013f8a:	4638      	mov	r0, r7
 8013f8c:	f000 f9be 	bl	801430c <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8013f90:	4285      	cmp	r5, r0
 8013f92:	dd2a      	ble.n	8013fea <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8013f94:	fb90 f6f6 	sdiv	r6, r0, r6
 8013f98:	2e01      	cmp	r6, #1
 8013f9a:	bfb8      	it	lt
 8013f9c:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013f9e:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8013fa2:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8013fa6:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013fa8:	bb0c      	cbnz	r4, 8013fee <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013faa:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8013fae:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013fb2:	2d00      	cmp	r5, #0
 8013fb4:	d141      	bne.n	801403a <realize_virt_arrays+0xd6>
}
 8013fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	b932      	cbnz	r2, 8013fcc <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8013fbe:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8013fc2:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8013fc6:	6859      	ldr	r1, [r3, #4]
 8013fc8:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fce:	e7d2      	b.n	8013f76 <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	b942      	cbnz	r2, 8013fe6 <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 8013fd4:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8013fd8:	4351      	muls	r1, r2
 8013fda:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8013fde:	6859      	ldr	r1, [r3, #4]
 8013fe0:	434a      	muls	r2, r1
 8013fe2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe8:	e7c8      	b.n	8013f7c <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8013fea:	4e27      	ldr	r6, [pc, #156]	; (8014088 <realize_virt_arrays+0x124>)
 8013fec:	e7d7      	b.n	8013f9e <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	b9b3      	cbnz	r3, 8014020 <realize_virt_arrays+0xbc>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8013ff2:	6862      	ldr	r2, [r4, #4]
				(long) sptr->samplesperrow *
 8013ff4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8013ff8:	1e53      	subs	r3, r2, #1
 8013ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ffe:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8014000:	429e      	cmp	r6, r3
 8014002:	db0f      	blt.n	8014024 <realize_virt_arrays+0xc0>
	sptr->rows_in_mem = sptr->rows_in_array;
 8014004:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014006:	6923      	ldr	r3, [r4, #16]
 8014008:	2101      	movs	r1, #1
 801400a:	68a2      	ldr	r2, [r4, #8]
 801400c:	4638      	mov	r0, r7
 801400e:	f7ff ff71 	bl	8013ef4 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8014012:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014016:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8014018:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 801401a:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 801401c:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014020:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014022:	e7c1      	b.n	8013fa8 <realize_virt_arrays+0x44>
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8014024:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8014026:	4342      	muls	r2, r0
 8014028:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801402a:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801402c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014030:	f000 f96e 	bl	8014310 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8014034:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8014038:	e7e5      	b.n	8014006 <realize_virt_arrays+0xa2>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801403a:	682b      	ldr	r3, [r5, #0]
 801403c:	b9b3      	cbnz	r3, 801406c <realize_virt_arrays+0x108>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 801403e:	6868      	ldr	r0, [r5, #4]
				(long) bptr->blocksperrow *
 8014040:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8014044:	1e43      	subs	r3, r0, #1
 8014046:	fbb3 f3f1 	udiv	r3, r3, r1
 801404a:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 801404c:	429e      	cmp	r6, r3
 801404e:	db0f      	blt.n	8014070 <realize_virt_arrays+0x10c>
	bptr->rows_in_mem = bptr->rows_in_array;
 8014050:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014052:	692b      	ldr	r3, [r5, #16]
 8014054:	2101      	movs	r1, #1
 8014056:	68aa      	ldr	r2, [r5, #8]
 8014058:	4638      	mov	r0, r7
 801405a:	f7ff ff13 	bl	8013e84 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 801405e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014062:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8014064:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8014066:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8014068:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801406c:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 801406e:	e7a0      	b.n	8013fb2 <realize_virt_arrays+0x4e>
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014070:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 8014072:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014074:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014076:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014078:	f105 0130 	add.w	r1, r5, #48	; 0x30
 801407c:	01d2      	lsls	r2, r2, #7
 801407e:	f000 f947 	bl	8014310 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8014082:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8014086:	e7e4      	b.n	8014052 <realize_virt_arrays+0xee>
 8014088:	3b9aca00 	.word	0x3b9aca00

0801408c <access_virt_sarray>:
{
 801408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8014090:	eb02 0803 	add.w	r8, r2, r3
{
 8014094:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014096:	684a      	ldr	r2, [r1, #4]
{
 8014098:	b087      	sub	sp, #28
 801409a:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801409c:	4542      	cmp	r2, r8
{
 801409e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80140a2:	d304      	bcc.n	80140ae <access_virt_sarray+0x22>
 80140a4:	68ca      	ldr	r2, [r1, #12]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d301      	bcc.n	80140ae <access_virt_sarray+0x22>
 80140aa:	680b      	ldr	r3, [r1, #0]
 80140ac:	b933      	cbnz	r3, 80140bc <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80140ae:	6803      	ldr	r3, [r0, #0]
 80140b0:	2217      	movs	r2, #23
 80140b2:	9003      	str	r0, [sp, #12]
 80140b4:	615a      	str	r2, [r3, #20]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	4798      	blx	r3
 80140ba:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 80140bc:	69a3      	ldr	r3, [r4, #24]
 80140be:	42ab      	cmp	r3, r5
 80140c0:	d80c      	bhi.n	80140dc <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80140c2:	6922      	ldr	r2, [r4, #16]
 80140c4:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80140c6:	4543      	cmp	r3, r8
 80140c8:	d308      	bcc.n	80140dc <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 80140ca:	69e6      	ldr	r6, [r4, #28]
 80140cc:	4546      	cmp	r6, r8
 80140ce:	f0c0 8083 	bcc.w	80141d8 <access_virt_sarray+0x14c>
  if (writable)
 80140d2:	f1ba 0f00 	cmp.w	sl, #0
 80140d6:	f040 80aa 	bne.w	801422e <access_virt_sarray+0x1a2>
 80140da:	e0aa      	b.n	8014232 <access_virt_sarray+0x1a6>
    if (! ptr->b_s_open)
 80140dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80140de:	b933      	cbnz	r3, 80140ee <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80140e0:	6803      	ldr	r3, [r0, #0]
 80140e2:	2247      	movs	r2, #71	; 0x47
 80140e4:	9003      	str	r0, [sp, #12]
 80140e6:	615a      	str	r2, [r3, #20]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	4798      	blx	r3
 80140ec:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 80140ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140f0:	b17b      	cbz	r3, 8014112 <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80140f2:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80140f6:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 80140fa:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80140fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8014100:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014104:	6922      	ldr	r2, [r4, #16]
 8014106:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014108:	e9d4 7e06 	ldrd	r7, lr, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801410c:	dc3d      	bgt.n	801418a <access_virt_sarray+0xfe>
      ptr->dirty = FALSE;
 801410e:	2300      	movs	r3, #0
 8014110:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8014112:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014114:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014118:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801411a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 801411e:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8014120:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014124:	bf2a      	itet	cs
 8014126:	eba8 0303 	subcs.w	r3, r8, r3
 801412a:	462b      	movcc	r3, r5
      ptr->cur_start_row = (JDIMENSION) ltemp;
 801412c:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8014130:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 8014132:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014136:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014138:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801413a:	454a      	cmp	r2, r9
 801413c:	ddc5      	ble.n	80140ca <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801413e:	eba2 0209 	sub.w	r2, r2, r9
 8014142:	6967      	ldr	r7, [r4, #20]
 8014144:	42ba      	cmp	r2, r7
 8014146:	bfa8      	it	ge
 8014148:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 801414a:	69a7      	ldr	r7, [r4, #24]
 801414c:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801414e:	eba6 0c07 	sub.w	ip, r6, r7
 8014152:	4594      	cmp	ip, r2
 8014154:	bfa8      	it	ge
 8014156:	4694      	movge	ip, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014158:	6862      	ldr	r2, [r4, #4]
 801415a:	1bd6      	subs	r6, r2, r7
 801415c:	4566      	cmp	r6, ip
 801415e:	bfa8      	it	ge
 8014160:	4666      	movge	r6, ip
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014162:	2e00      	cmp	r6, #0
 8014164:	ddb1      	ble.n	80140ca <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 8014166:	fb06 f60b 	mul.w	r6, r6, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801416a:	6822      	ldr	r2, [r4, #0]
 801416c:	6b27      	ldr	r7, [r4, #48]	; 0x30
 801416e:	9600      	str	r6, [sp, #0]
 8014170:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8014174:	9305      	str	r3, [sp, #20]
 8014176:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801417a:	47b8      	blx	r7
    file_offset += byte_count;
 801417c:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801417e:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014180:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014182:	4491      	add	r9, r2
 8014184:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8014188:	e7d5      	b.n	8014136 <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801418a:	eba2 0209 	sub.w	r2, r2, r9
 801418e:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8014190:	eb07 0c09 	add.w	ip, r7, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014194:	42b2      	cmp	r2, r6
 8014196:	bfa8      	it	ge
 8014198:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801419a:	ebae 060c 	sub.w	r6, lr, ip
 801419e:	4296      	cmp	r6, r2
 80141a0:	bfa8      	it	ge
 80141a2:	4616      	movge	r6, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80141a4:	6862      	ldr	r2, [r4, #4]
 80141a6:	eba2 070c 	sub.w	r7, r2, ip
 80141aa:	42b7      	cmp	r7, r6
 80141ac:	bfa8      	it	ge
 80141ae:	4637      	movge	r7, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 80141b0:	2f00      	cmp	r7, #0
 80141b2:	ddac      	ble.n	801410e <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 80141b4:	fb07 f70b 	mul.w	r7, r7, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80141b8:	6822      	ldr	r2, [r4, #0]
 80141ba:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80141bc:	9700      	str	r7, [sp, #0]
 80141be:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80141c2:	9305      	str	r3, [sp, #20]
 80141c4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80141c8:	47b0      	blx	r6
    file_offset += byte_count;
 80141ca:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80141cc:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80141ce:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80141d0:	4491      	add	r9, r2
 80141d2:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80141d6:	e795      	b.n	8014104 <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 80141d8:	42ae      	cmp	r6, r5
 80141da:	d20d      	bcs.n	80141f8 <access_virt_sarray+0x16c>
      if (writable)		/* writer skipped over a section of array */
 80141dc:	f1ba 0f00 	cmp.w	sl, #0
 80141e0:	d020      	beq.n	8014224 <access_virt_sarray+0x198>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80141e2:	6803      	ldr	r3, [r0, #0]
 80141e4:	2217      	movs	r2, #23
 80141e6:	9003      	str	r0, [sp, #12]
 80141e8:	462e      	mov	r6, r5
 80141ea:	615a      	str	r2, [r3, #20]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	4798      	blx	r3
    if (writable)
 80141f0:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 80141f2:	f8c4 801c 	str.w	r8, [r4, #28]
 80141f6:	e002      	b.n	80141fe <access_virt_sarray+0x172>
    if (writable)
 80141f8:	f1ba 0f00 	cmp.w	sl, #0
 80141fc:	d1f9      	bne.n	80141f2 <access_virt_sarray+0x166>
    if (ptr->pre_zero) {
 80141fe:	6a22      	ldr	r2, [r4, #32]
 8014200:	b192      	cbz	r2, 8014228 <access_virt_sarray+0x19c>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014202:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8014204:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014206:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 8014208:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 801420c:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801420e:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8014210:	f4bf af5f 	bcs.w	80140d2 <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014214:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014218:	463a      	mov	r2, r7
 801421a:	2100      	movs	r1, #0
	undef_row++;
 801421c:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801421e:	f00b f90b 	bl	801f438 <memset>
	undef_row++;
 8014222:	e7f3      	b.n	801420c <access_virt_sarray+0x180>
 8014224:	462e      	mov	r6, r5
 8014226:	e7ea      	b.n	80141fe <access_virt_sarray+0x172>
      if (! writable)		/* reader looking at undefined data */
 8014228:	f1ba 0f00 	cmp.w	sl, #0
 801422c:	d009      	beq.n	8014242 <access_virt_sarray+0x1b6>
    ptr->dirty = TRUE;
 801422e:	2301      	movs	r3, #1
 8014230:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8014232:	69a3      	ldr	r3, [r4, #24]
 8014234:	6820      	ldr	r0, [r4, #0]
 8014236:	1aed      	subs	r5, r5, r3
}
 8014238:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801423c:	b007      	add	sp, #28
 801423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014242:	6803      	ldr	r3, [r0, #0]
 8014244:	2217      	movs	r2, #23
 8014246:	615a      	str	r2, [r3, #20]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4798      	blx	r3
  if (writable)
 801424c:	e7f1      	b.n	8014232 <access_virt_sarray+0x1a6>
	...

08014250 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8014250:	2300      	movs	r3, #0
{
 8014252:	b570      	push	{r4, r5, r6, lr}
 8014254:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 8014256:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8014258:	f000 f85f 	bl	801431a <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 801425c:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801425e:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8014260:	4628      	mov	r0, r5
 8014262:	f000 f847 	bl	80142f4 <jpeg_get_small>

  if (mem == NULL) {
 8014266:	4604      	mov	r4, r0
 8014268:	b948      	cbnz	r0, 801427e <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801426a:	4628      	mov	r0, r5
 801426c:	f000 f857 	bl	801431e <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8014270:	682b      	ldr	r3, [r5, #0]
 8014272:	2238      	movs	r2, #56	; 0x38
 8014274:	4628      	mov	r0, r5
 8014276:	e9c3 2405 	strd	r2, r4, [r3, #20]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 801427e:	4b12      	ldr	r3, [pc, #72]	; (80142c8 <jinit_memory_mgr+0x78>)
 8014280:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8014282:	4b12      	ldr	r3, [pc, #72]	; (80142cc <jinit_memory_mgr+0x7c>)
 8014284:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 8014286:	4b12      	ldr	r3, [pc, #72]	; (80142d0 <jinit_memory_mgr+0x80>)
 8014288:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 801428a:	4b12      	ldr	r3, [pc, #72]	; (80142d4 <jinit_memory_mgr+0x84>)
 801428c:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 801428e:	4b12      	ldr	r3, [pc, #72]	; (80142d8 <jinit_memory_mgr+0x88>)
 8014290:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8014292:	4b12      	ldr	r3, [pc, #72]	; (80142dc <jinit_memory_mgr+0x8c>)
 8014294:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 8014296:	4b12      	ldr	r3, [pc, #72]	; (80142e0 <jinit_memory_mgr+0x90>)
 8014298:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801429a:	4b12      	ldr	r3, [pc, #72]	; (80142e4 <jinit_memory_mgr+0x94>)
 801429c:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 801429e:	4b12      	ldr	r3, [pc, #72]	; (80142e8 <jinit_memory_mgr+0x98>)
 80142a0:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 80142a2:	4b12      	ldr	r3, [pc, #72]	; (80142ec <jinit_memory_mgr+0x9c>)
 80142a4:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 80142a6:	4b12      	ldr	r3, [pc, #72]	; (80142f0 <jinit_memory_mgr+0xa0>)
 80142a8:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 80142aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 80142ae:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 80142b2:	2300      	movs	r3, #0
 80142b4:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 80142b6:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 80142b8:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 80142ba:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 80142bc:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 80142c0:	2354      	movs	r3, #84	; 0x54
 80142c2:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 80142c4:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 80142c6:	bd70      	pop	{r4, r5, r6, pc}
 80142c8:	08013ae9 	.word	0x08013ae9
 80142cc:	08013e17 	.word	0x08013e17
 80142d0:	08013ef5 	.word	0x08013ef5
 80142d4:	08013e85 	.word	0x08013e85
 80142d8:	08013bff 	.word	0x08013bff
 80142dc:	08013bb5 	.word	0x08013bb5
 80142e0:	08013f65 	.word	0x08013f65
 80142e4:	0801408d 	.word	0x0801408d
 80142e8:	08013d17 	.word	0x08013d17
 80142ec:	08013c49 	.word	0x08013c49
 80142f0:	08013ced 	.word	0x08013ced

080142f4 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 80142f4:	4608      	mov	r0, r1
 80142f6:	f7f2 be29 	b.w	8006f4c <pvPortMalloc>

080142fa <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 80142fa:	4608      	mov	r0, r1
 80142fc:	f7f2 bebc 	b.w	8007078 <vPortFree>

08014300 <jpeg_get_large>:
 8014300:	4608      	mov	r0, r1
 8014302:	f7f2 be23 	b.w	8006f4c <pvPortMalloc>

08014306 <jpeg_free_large>:
 8014306:	4608      	mov	r0, r1
 8014308:	f7f2 beb6 	b.w	8007078 <vPortFree>

0801430c <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 801430c:	4610      	mov	r0, r2
 801430e:	4770      	bx	lr

08014310 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8014310:	6803      	ldr	r3, [r0, #0]
 8014312:	2233      	movs	r2, #51	; 0x33
 8014314:	615a      	str	r2, [r3, #20]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4718      	bx	r3

0801431a <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 801431a:	2000      	movs	r0, #0
 801431c:	4770      	bx	lr

0801431e <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 801431e:	4770      	bx	lr

08014320 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8014320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8014324:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8014328:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801432a:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 801432e:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8014330:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014332:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 8014336:	bf16      	itet	ne
 8014338:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 801433a:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 801433e:	461e      	movne	r6, r3
 8014340:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8014342:	6843      	ldr	r3, [r0, #4]
 8014344:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8014348:	689f      	ldr	r7, [r3, #8]
 801434a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 801434c:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 801434e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8014352:	f105 0e1c 	add.w	lr, r5, #28

  for (i = 0; i < cinfo->out_color_components; i++) {
 8014356:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8014358:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801435a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801435c:	429a      	cmp	r2, r3
 801435e:	dc01      	bgt.n	8014364 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8014360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8014364:	f85e 1f04 	ldr.w	r1, [lr, #4]!
      cquantize->colorindex[i] += MAXJSAMPLE;
 8014368:	009f      	lsls	r7, r3, #2
 801436a:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 801436c:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8014370:	b126      	cbz	r6, 801437c <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8014372:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014376:	32ff      	adds	r2, #255	; 0xff
 8014378:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 801437c:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014380:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8014384:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 8014386:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014388:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 801438c:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801438e:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8014392:	428f      	cmp	r7, r1
 8014394:	db0a      	blt.n	80143ac <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 8014396:	fb10 fb0c 	smulbb	fp, r0, ip
 801439a:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 801439e:	3101      	adds	r1, #1
 80143a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80143a4:	d1f5      	bne.n	8014392 <create_colorindex+0x72>
    if (pad)
 80143a6:	b93e      	cbnz	r6, 80143b8 <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80143a8:	3301      	adds	r3, #1
 80143aa:	e7d6      	b.n	801435a <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 80143ac:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80143ae:	fb08 a700 	mla	r7, r8, r0, sl
 80143b2:	fb97 f7f9 	sdiv	r7, r7, r9
 80143b6:	e7ec      	b.n	8014392 <create_colorindex+0x72>
 80143b8:	4611      	mov	r1, r2
 80143ba:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 80143be:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 80143c2:	f892 9000 	ldrb.w	r9, [r2]
 80143c6:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80143ca:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 80143cc:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 80143d0:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80143d4:	d1f5      	bne.n	80143c2 <create_colorindex+0xa2>
 80143d6:	e7e7      	b.n	80143a8 <create_colorindex+0x88>

080143d8 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 80143d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 80143dc:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 80143e0:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 80143e2:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80143e6:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 80143ea:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 80143ee:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80143f0:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 80143f2:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80143f4:	4540      	cmp	r0, r8
 80143f6:	db02      	blt.n	80143fe <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80143f8:	b003      	add	sp, #12
 80143fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 80143fe:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8014402:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8014404:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8014408:	eb04 0a03 	add.w	sl, r4, r3
 801440c:	4554      	cmp	r4, sl
 801440e:	d10f      	bne.n	8014430 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8014410:	3001      	adds	r0, #1
 8014412:	e7ef      	b.n	80143f4 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8014414:	f815 b003 	ldrb.w	fp, [r5, r3]
 8014418:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 801441c:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 801441e:	f817 700b 	ldrb.w	r7, [r7, fp]
 8014422:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8014424:	4563      	cmp	r3, ip
 8014426:	dbf5      	blt.n	8014414 <color_quantize+0x3c>
 8014428:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 801442a:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 801442e:	e7ed      	b.n	801440c <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8014430:	2300      	movs	r3, #0
      pixcode = 0;
 8014432:	461e      	mov	r6, r3
 8014434:	e7f6      	b.n	8014424 <color_quantize+0x4c>

08014436 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8014436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801443a:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801443e:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8014442:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8014444:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8014446:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801444a:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 801444e:	4298      	cmp	r0, r3
 8014450:	db01      	blt.n	8014456 <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8014452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8014456:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801445a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 801445e:	eb05 0a09 	add.w	sl, r5, r9
 8014462:	4555      	cmp	r5, sl
 8014464:	f104 0403 	add.w	r4, r4, #3
 8014468:	d101      	bne.n	801446e <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 801446a:	3001      	adds	r0, #1
 801446c:	e7ef      	b.n	801444e <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 801446e:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8014472:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8014476:	f81c 6006 	ldrb.w	r6, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801447a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801447e:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8014480:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8014484:	f818 6006 	ldrb.w	r6, [r8, r6]
 8014488:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 801448a:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 801448e:	e7e8      	b.n	8014462 <color_quantize3+0x2c>

08014490 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8014490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014494:	469a      	mov	sl, r3
 8014496:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014498:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801449c:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80144a0:	699a      	ldr	r2, [r3, #24]
 80144a2:	6811      	ldr	r1, [r2, #0]
 80144a4:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80144a6:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80144a8:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80144aa:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 80144ac:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80144ae:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 80144b0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80144b2:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80144b4:	4551      	cmp	r1, sl
 80144b6:	db02      	blt.n	80144be <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 80144b8:	b00b      	add	sp, #44	; 0x2c
 80144ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 80144be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 80144c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144c2:	9c07      	ldr	r4, [sp, #28]
 80144c4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 80144c8:	0190      	lsls	r0, r2, #6
 80144ca:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80144ce:	9002      	str	r0, [sp, #8]
 80144d0:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 80144d4:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 80144d6:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 80144d8:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 80144dc:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 80144de:	9808      	ldr	r0, [sp, #32]
 80144e0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80144e4:	4575      	cmp	r5, lr
 80144e6:	f100 0003 	add.w	r0, r0, #3
 80144ea:	d106      	bne.n	80144fa <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 80144ec:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80144ee:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80144f0:	3201      	adds	r2, #1
 80144f2:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 80144f6:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80144f8:	e7dc      	b.n	80144b4 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80144fa:	9e02      	ldr	r6, [sp, #8]
 80144fc:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8014500:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8014504:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 8014506:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8014508:	f858 7006 	ldr.w	r7, [r8, r6]
 801450c:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801450e:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8014510:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8014514:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8014518:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 801451c:	f859 7006 	ldr.w	r7, [r9, r6]
 8014520:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8014522:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8014524:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8014528:	5996      	ldr	r6, [r2, r6]
 801452a:	f810 cc01 	ldrb.w	ip, [r0, #-1]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801452e:	445f      	add	r7, fp
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8014530:	9a06      	ldr	r2, [sp, #24]
 8014532:	4494      	add	ip, r2
 8014534:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8014538:	443e      	add	r6, r7
      *output_ptr++ = (JSAMPLE) pixcode;
 801453a:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 801453e:	e7d1      	b.n	80144e4 <quantize3_ord_dither+0x54>

08014540 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014540:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8014542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014544:	3202      	adds	r2, #2
 8014546:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 801454a:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 801454c:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801454e:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014550:	3640      	adds	r6, #64	; 0x40
 8014552:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014554:	42bb      	cmp	r3, r7
 8014556:	dc00      	bgt.n	801455a <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8014558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801455a:	6863      	ldr	r3, [r4, #4]
 801455c:	462a      	mov	r2, r5
 801455e:	2101      	movs	r1, #1
 8014560:	4620      	mov	r0, r4
 8014562:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014564:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8014566:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8014568:	f846 0f04 	str.w	r0, [r6, #4]!
  for (i = 0; i < cinfo->out_color_components; i++) {
 801456c:	e7f1      	b.n	8014552 <alloc_fs_workspace+0x12>

0801456e <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 801456e:	4770      	bx	lr

08014570 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8014570:	6803      	ldr	r3, [r0, #0]
 8014572:	222f      	movs	r2, #47	; 0x2f
 8014574:	615a      	str	r2, [r3, #20]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	4718      	bx	r3
	...

0801457c <start_pass_1_quant>:
{
 801457c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014580:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8014584:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8014586:	692b      	ldr	r3, [r5, #16]
 8014588:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 801458c:	696b      	ldr	r3, [r5, #20]
 801458e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8014592:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8014596:	2b01      	cmp	r3, #1
 8014598:	d00b      	beq.n	80145b2 <start_pass_1_quant+0x36>
 801459a:	2b02      	cmp	r3, #2
 801459c:	d05e      	beq.n	801465c <start_pass_1_quant+0xe0>
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d174      	bne.n	801468c <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 80145a2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80145a4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 80145a6:	bf0c      	ite	eq
 80145a8:	4b3c      	ldreq	r3, [pc, #240]	; (801469c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 80145aa:	4b3d      	ldrne	r3, [pc, #244]	; (80146a0 <start_pass_1_quant+0x124>)
 80145ac:	606b      	str	r3, [r5, #4]
}
 80145ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 80145b2:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 80145b4:	4b3b      	ldr	r3, [pc, #236]	; (80146a4 <start_pass_1_quant+0x128>)
 80145b6:	4a3c      	ldr	r2, [pc, #240]	; (80146a8 <start_pass_1_quant+0x12c>)
 80145b8:	2903      	cmp	r1, #3
 80145ba:	bf18      	it	ne
 80145bc:	4613      	movne	r3, r2
 80145be:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 80145c0:	2300      	movs	r3, #0
 80145c2:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 80145c4:	69eb      	ldr	r3, [r5, #28]
 80145c6:	b90b      	cbnz	r3, 80145cc <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 80145c8:	f7ff feaa 	bl	8014320 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 80145cc:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80145ce:	2d00      	cmp	r5, #0
 80145d0:	d1ed      	bne.n	80145ae <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80145d2:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 80145d6:	f107 081c 	add.w	r8, r7, #28
 80145da:	4646      	mov	r6, r8
 80145dc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80145de:	429d      	cmp	r5, r3
 80145e0:	dae5      	bge.n	80145ae <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80145e2:	f856 9f04 	ldr.w	r9, [r6, #4]!
    for (j = 0; j < i; j++) {
 80145e6:	4642      	mov	r2, r8
 80145e8:	2300      	movs	r3, #0
 80145ea:	429d      	cmp	r5, r3
 80145ec:	d007      	beq.n	80145fe <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 80145ee:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80145f2:	4589      	cmp	r9, r1
 80145f4:	d130      	bne.n	8014658 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 80145f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80145fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 80145fc:	bb48      	cbnz	r0, 8014652 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80145fe:	6863      	ldr	r3, [r4, #4]
 8014600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014604:	2101      	movs	r1, #1
 8014606:	4620      	mov	r0, r4
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 801460c:	f109 32ff 	add.w	r2, r9, #4294967295
 8014610:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8014614:	f8df c098 	ldr.w	ip, [pc, #152]	; 80146b0 <start_pass_1_quant+0x134>
 8014618:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 801461a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 801461e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8014622:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8014624:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014628:	005b      	lsls	r3, r3, #1
 801462a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 801462e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8014632:	bf45      	ittet	mi
 8014634:	425b      	negmi	r3, r3
 8014636:	fb93 f3f2 	sdivmi	r3, r3, r2
 801463a:	fb93 f3f2 	sdivpl	r3, r3, r2
 801463e:	425b      	negmi	r3, r3
 8014640:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8014644:	458e      	cmp	lr, r1
 8014646:	d1ed      	bne.n	8014624 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8014648:	3140      	adds	r1, #64	; 0x40
 801464a:	f10c 0c10 	add.w	ip, ip, #16
 801464e:	458a      	cmp	sl, r1
 8014650:	d1e5      	bne.n	801461e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014652:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8014654:	6170      	str	r0, [r6, #20]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014656:	e7c1      	b.n	80145dc <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8014658:	3301      	adds	r3, #1
 801465a:	e7c6      	b.n	80145ea <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 801465c:	4b13      	ldr	r3, [pc, #76]	; (80146ac <start_pass_1_quant+0x130>)
 801465e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8014660:	2300      	movs	r3, #0
 8014662:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8014664:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8014666:	b90b      	cbnz	r3, 801466c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8014668:	f7ff ff6a 	bl	8014540 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801466c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801466e:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < cinfo->out_color_components; i++)
 8014670:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014672:	3202      	adds	r2, #2
 8014674:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8014676:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014678:	42bb      	cmp	r3, r7
 801467a:	dd98      	ble.n	80145ae <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801467c:	4632      	mov	r2, r6
 801467e:	2100      	movs	r1, #0
 8014680:	f855 0f04 	ldr.w	r0, [r5, #4]!
    for (i = 0; i < cinfo->out_color_components; i++)
 8014684:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8014686:	f00a fed7 	bl	801f438 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 801468a:	e7f4      	b.n	8014676 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 801468c:	6803      	ldr	r3, [r0, #0]
 801468e:	2231      	movs	r2, #49	; 0x31
}
 8014690:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8014694:	615a      	str	r2, [r3, #20]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	4718      	bx	r3
 801469a:	bf00      	nop
 801469c:	08014437 	.word	0x08014437
 80146a0:	080143d9 	.word	0x080143d9
 80146a4:	08014491 	.word	0x08014491
 80146a8:	080147ed 	.word	0x080147ed
 80146ac:	080146b5 	.word	0x080146b5
 80146b0:	08023918 	.word	0x08023918

080146b4 <quantize_fs_dither>:
{
 80146b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b8:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 80146ba:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 80146bc:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 80146c0:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80146c4:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 80146c8:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80146cc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80146d0:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80146d2:	1e6b      	subs	r3, r5, #1
 80146d4:	9305      	str	r3, [sp, #20]
 80146d6:	fb03 f309 	mul.w	r3, r3, r9
 80146da:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80146dc:	1c6b      	adds	r3, r5, #1
 80146de:	005b      	lsls	r3, r3, #1
 80146e0:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 80146e2:	2300      	movs	r3, #0
 80146e4:	9300      	str	r3, [sp, #0]
 80146e6:	9a00      	ldr	r2, [sp, #0]
 80146e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146ea:	429a      	cmp	r2, r3
 80146ec:	db02      	blt.n	80146f4 <quantize_fs_dither+0x40>
}
 80146ee:	b011      	add	sp, #68	; 0x44
 80146f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80146f4:	2100      	movs	r1, #0
 80146f6:	462a      	mov	r2, r5
 80146f8:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 80146fc:	f00a fe9c 	bl	801f438 <memset>
    for (ci = 0; ci < nc; ci++) {
 8014700:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8014704:	2100      	movs	r1, #0
 8014706:	9304      	str	r3, [sp, #16]
	dirnc = -nc;
 8014708:	f1c9 0300 	rsb	r3, r9, #0
 801470c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 801470e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8014710:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8014712:	db06      	blt.n	8014722 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8014714:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8014718:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801471a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 801471c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801471e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8014720:	e7e0      	b.n	80146e4 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8014722:	9800      	ldr	r0, [sp, #0]
 8014724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014726:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 801472a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 801472e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8014732:	9b04      	ldr	r3, [sp, #16]
 8014734:	f853 cf04 	ldr.w	ip, [r3, #4]!
 8014738:	9304      	str	r3, [sp, #16]
      if (cquantize->on_odd_row) {
 801473a:	b312      	cbz	r2, 8014782 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 801473c:	9b08      	ldr	r3, [sp, #32]
 801473e:	449e      	add	lr, r3
	output_ptr += width-1;
 8014740:	9b05      	ldr	r3, [sp, #20]
 8014742:	4418      	add	r0, r3
	dirnc = -nc;
 8014744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014746:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8014748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801474a:	449c      	add	ip, r3
	dir = -1;
 801474c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8014750:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8014752:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8014754:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8014756:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8014758:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801475c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 801475e:	6923      	ldr	r3, [r4, #16]
 8014760:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014764:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8014766:	9b02      	ldr	r3, [sp, #8]
 8014768:	005b      	lsls	r3, r3, #1
 801476a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 801476c:	2300      	movs	r3, #0
      cur = 0;
 801476e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8014770:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8014772:	9a03      	ldr	r2, [sp, #12]
 8014774:	b94a      	cbnz	r2, 801478a <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8014776:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8014778:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801477a:	436a      	muls	r2, r5
 801477c:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8014780:	e7c5      	b.n	801470e <quantize_fs_dither+0x5a>
	dir = 1;
 8014782:	2301      	movs	r3, #1
 8014784:	f8cd 901c 	str.w	r9, [sp, #28]
 8014788:	e7e2      	b.n	8014750 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801478a:	9a01      	ldr	r2, [sp, #4]
 801478c:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8014790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8014792:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8014794:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8014798:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 801479c:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80147a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 80147a2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80147a6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80147aa:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80147ae:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80147b0:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80147b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 80147b4:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80147b8:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 80147bc:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80147be:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 80147c2:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 80147c4:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 80147c6:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 80147ca:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 80147cc:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80147ce:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 80147d0:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80147d4:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80147d6:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 80147d8:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 80147da:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 80147dc:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 80147de:	4443      	add	r3, r8
	belowerr = bnexterr;
 80147e0:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 80147e4:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80147e8:	4417      	add	r7, r2
 80147ea:	e7c2      	b.n	8014772 <quantize_fs_dither+0xbe>

080147ec <quantize_ord_dither>:
{
 80147ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f0:	b089      	sub	sp, #36	; 0x24
 80147f2:	4688      	mov	r8, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80147f4:	f8d0 91e0 	ldr.w	r9, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 80147f8:	1f14      	subs	r4, r2, #4
{
 80147fa:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80147fc:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 80147fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8014800:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8014804:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8014806:	9b07      	ldr	r3, [sp, #28]
 8014808:	429f      	cmp	r7, r3
 801480a:	db02      	blt.n	8014812 <quantize_ord_dither+0x26>
}
 801480c:	b009      	add	sp, #36	; 0x24
 801480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8014812:	4652      	mov	r2, sl
 8014814:	2100      	movs	r1, #0
 8014816:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801481a:	f00a fe0d 	bl	801f438 <memset>
    row_index = cquantize->row_index;
 801481e:	4649      	mov	r1, r9
    for (ci = 0; ci < nc; ci++) {
 8014820:	2000      	movs	r0, #0
    row_index = cquantize->row_index;
 8014822:	f851 3f30 	ldr.w	r3, [r1, #48]!
      dither = cquantize->odither[ci][row_index];
 8014826:	019a      	lsls	r2, r3, #6
 8014828:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 801482a:	9a01      	ldr	r2, [sp, #4]
 801482c:	4290      	cmp	r0, r2
 801482e:	db06      	blt.n	801483e <quantize_ord_dither+0x52>
    row_index = (row_index + 1) & ODITHER_MASK;
 8014830:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8014832:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8014834:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8014838:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801483c:	e7e3      	b.n	8014806 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 801483e:	f8d9 2018 	ldr.w	r2, [r9, #24]
      col_index = 0;
 8014842:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8014844:	f858 5027 	ldr.w	r5, [r8, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8014848:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
      input_ptr = input_buf[row] + ci;
 801484c:	eb05 0c00 	add.w	ip, r5, r0
      colorindex_ci = cquantize->colorindex[ci];
 8014850:	6825      	ldr	r5, [r4, #0]
 8014852:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8014854:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014858:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 801485a:	eb0a 0205 	add.w	r2, sl, r5
 801485e:	9206      	str	r2, [sp, #24]
 8014860:	9a06      	ldr	r2, [sp, #24]
 8014862:	4295      	cmp	r5, r2
 8014864:	d101      	bne.n	801486a <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8014866:	3001      	adds	r0, #1
 8014868:	e7df      	b.n	801482a <quantize_ord_dither+0x3e>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801486a:	782a      	ldrb	r2, [r5, #0]
 801486c:	f89c e000 	ldrb.w	lr, [ip]
 8014870:	9204      	str	r2, [sp, #16]
 8014872:	9a02      	ldr	r2, [sp, #8]
 8014874:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8014878:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 801487a:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801487c:	f85b b002 	ldr.w	fp, [fp, r2]
 8014880:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8014882:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8014886:	4496      	add	lr, r2
 8014888:	9a04      	ldr	r2, [sp, #16]
 801488a:	f81e e00b 	ldrb.w	lr, [lr, fp]
 801488e:	4472      	add	r2, lr
 8014890:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8014894:	9a01      	ldr	r2, [sp, #4]
 8014896:	4494      	add	ip, r2
      for (col = width; col > 0; col--) {
 8014898:	e7e2      	b.n	8014860 <quantize_ord_dither+0x74>
	...

0801489c <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801489c:	6843      	ldr	r3, [r0, #4]
 801489e:	2258      	movs	r2, #88	; 0x58
 80148a0:	2101      	movs	r1, #1
 80148a2:	681b      	ldr	r3, [r3, #0]
{
 80148a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a8:	b085      	sub	sp, #20
 80148aa:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80148ac:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 80148ae:	4b68      	ldr	r3, [pc, #416]	; (8014a50 <jinit_1pass_quantizer+0x1b4>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80148b0:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 80148b4:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 80148b6:	4b67      	ldr	r3, [pc, #412]	; (8014a54 <jinit_1pass_quantizer+0x1b8>)
 80148b8:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 80148ba:	4b67      	ldr	r3, [pc, #412]	; (8014a58 <jinit_1pass_quantizer+0x1bc>)
 80148bc:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 80148be:	2300      	movs	r3, #0
 80148c0:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 80148c2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 80148c4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80148c6:	2b04      	cmp	r3, #4
 80148c8:	dd07      	ble.n	80148da <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 80148ca:	6823      	ldr	r3, [r4, #0]
 80148cc:	2039      	movs	r0, #57	; 0x39
 80148ce:	2204      	movs	r2, #4
 80148d0:	e9c3 0205 	strd	r0, r2, [r3, #20]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	4620      	mov	r0, r4
 80148d8:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 80148da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80148dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148e0:	dd08      	ble.n	80148f4 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 80148e2:	6823      	ldr	r3, [r4, #0]
 80148e4:	213b      	movs	r1, #59	; 0x3b
 80148e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80148ea:	4620      	mov	r0, r4
 80148ec:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80148f4:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 80148f8:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 80148fa:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 80148fe:	f106 0920 	add.w	r9, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8014902:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    iroot++;
 8014906:	469b      	mov	fp, r3
 8014908:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 801490a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 801490c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 801490e:	4588      	cmp	r8, r1
 8014910:	dc49      	bgt.n	80149a6 <jinit_1pass_quantizer+0x10a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8014912:	4592      	cmp	sl, r2
 8014914:	daf7      	bge.n	8014906 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8014916:	f1bb 0f01 	cmp.w	fp, #1
 801491a:	d106      	bne.n	801492a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 801491c:	6823      	ldr	r3, [r4, #0]
 801491e:	213a      	movs	r1, #58	; 0x3a
 8014920:	4620      	mov	r0, r4
 8014922:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	4798      	blx	r3
 801492a:	f106 071c 	add.w	r7, r6, #28
    for (i = 1; i < nc; i++)
 801492e:	2300      	movs	r3, #0
 8014930:	2501      	movs	r5, #1
 8014932:	463a      	mov	r2, r7
  for (i = 0; i < nc; i++) {
 8014934:	4598      	cmp	r8, r3
 8014936:	dc39      	bgt.n	80149ac <jinit_1pass_quantizer+0x110>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8014938:	f8df c120 	ldr.w	ip, [pc, #288]	; 8014a5c <jinit_1pass_quantizer+0x1c0>
    changed = FALSE;
 801493c:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 801493e:	460b      	mov	r3, r1
 8014940:	4598      	cmp	r8, r3
 8014942:	dc39      	bgt.n	80149b8 <jinit_1pass_quantizer+0x11c>
  } while (changed);
 8014944:	2900      	cmp	r1, #0
 8014946:	d1f9      	bne.n	801493c <jinit_1pass_quantizer+0xa0>
  if (cinfo->out_color_components == 3)
 8014948:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801494a:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 801494c:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801494e:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8014950:	d149      	bne.n	80149e6 <jinit_1pass_quantizer+0x14a>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8014952:	619d      	str	r5, [r3, #24]
 8014954:	6a31      	ldr	r1, [r6, #32]
 8014956:	61d9      	str	r1, [r3, #28]
 8014958:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801495a:	6219      	str	r1, [r3, #32]
 801495c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 801495e:	6259      	str	r1, [r3, #36]	; 0x24
 8014960:	2160      	movs	r1, #96	; 0x60
 8014962:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8014964:	2101      	movs	r1, #1
 8014966:	4620      	mov	r0, r4
 8014968:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 801496a:	6863      	ldr	r3, [r4, #4]
 801496c:	462a      	mov	r2, r5
 801496e:	2101      	movs	r1, #1
 8014970:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8014974:	4620      	mov	r0, r4
 8014976:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014978:	47c0      	blx	r8
  for (i = 0; i < cinfo->out_color_components; i++) {
 801497a:	46a8      	mov	r8, r5
 801497c:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 801497e:	9001      	str	r0, [sp, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014980:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014982:	429a      	cmp	r2, r3
 8014984:	db33      	blt.n	80149ee <jinit_1pass_quantizer+0x152>
  cquantize->sv_colormap = colormap;
 8014986:	9b01      	ldr	r3, [sp, #4]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8014988:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 801498a:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 801498e:	f7ff fcc7 	bl	8014320 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8014992:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8014996:	2b02      	cmp	r3, #2
 8014998:	d156      	bne.n	8014a48 <jinit_1pass_quantizer+0x1ac>
    alloc_fs_workspace(cinfo);
 801499a:	4620      	mov	r0, r4
}
 801499c:	b005      	add	sp, #20
 801499e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 80149a2:	f7ff bdcd 	b.w	8014540 <alloc_fs_workspace>
      temp *= iroot;
 80149a6:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 80149a8:	3101      	adds	r1, #1
 80149aa:	e7b0      	b.n	801490e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 80149ac:	fb0b f505 	mul.w	r5, fp, r5
  for (i = 0; i < nc; i++) {
 80149b0:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 80149b2:	f842 bf04 	str.w	fp, [r2, #4]!
  for (i = 0; i < nc; i++) {
 80149b6:	e7bd      	b.n	8014934 <jinit_1pass_quantizer+0x98>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80149b8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80149bc:	2a02      	cmp	r2, #2
 80149be:	bf0c      	ite	eq
 80149c0:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 80149c4:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 80149c6:	f859 b020 	ldr.w	fp, [r9, r0, lsl #2]
 80149ca:	fb95 f2fb 	sdiv	r2, r5, fp
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 80149ce:	fb0b 2202 	mla	r2, fp, r2, r2
 80149d2:	f10b 0e01 	add.w	lr, fp, #1
      if (temp > (long) max_colors)
 80149d6:	4592      	cmp	sl, r2
 80149d8:	dbb4      	blt.n	8014944 <jinit_1pass_quantizer+0xa8>
    for (i = 0; i < nc; i++) {
 80149da:	3301      	adds	r3, #1
 80149dc:	4615      	mov	r5, r2
      changed = TRUE;
 80149de:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 80149e0:	f849 e020 	str.w	lr, [r9, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 80149e4:	e7ac      	b.n	8014940 <jinit_1pass_quantizer+0xa4>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 80149e6:	2161      	movs	r1, #97	; 0x61
 80149e8:	e9c3 1505 	strd	r1, r5, [r3, #20]
 80149ec:	e7ba      	b.n	8014964 <jinit_1pass_quantizer+0xc8>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80149ee:	f857 af04 	ldr.w	sl, [r7, #4]!
      val = output_value(cinfo, i, j, nci-1);
 80149f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80149f6:	9302      	str	r3, [sp, #8]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80149f8:	105b      	asrs	r3, r3, #1
    blksize = blkdist / nci;
 80149fa:	fb98 f9fa 	sdiv	r9, r8, sl
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80149fe:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8014a00:	2300      	movs	r3, #0
 8014a02:	469b      	mov	fp, r3
 8014a04:	459a      	cmp	sl, r3
 8014a06:	dc02      	bgt.n	8014a0e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014a08:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8014a0a:	46c8      	mov	r8, r9
 8014a0c:	e7b8      	b.n	8014980 <jinit_1pass_quantizer+0xe4>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8014a0e:	9803      	ldr	r0, [sp, #12]
 8014a10:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8014a14:	46dc      	mov	ip, fp
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8014a16:	4401      	add	r1, r0
 8014a18:	9802      	ldr	r0, [sp, #8]
 8014a1a:	fb91 f1f0 	sdiv	r1, r1, r0
 8014a1e:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8014a20:	45ac      	cmp	ip, r5
 8014a22:	db0e      	blt.n	8014a42 <jinit_1pass_quantizer+0x1a6>
    for (j = 0; j < nci; j++) {
 8014a24:	3301      	adds	r3, #1
 8014a26:	44cb      	add	fp, r9
 8014a28:	e7ec      	b.n	8014a04 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8014a2a:	9901      	ldr	r1, [sp, #4]
 8014a2c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a30:	4471      	add	r1, lr
	for (k = 0; k < blksize; k++)
 8014a32:	f10e 0e01 	add.w	lr, lr, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8014a36:	f801 000c 	strb.w	r0, [r1, ip]
	for (k = 0; k < blksize; k++)
 8014a3a:	45f1      	cmp	r9, lr
 8014a3c:	dcf5      	bgt.n	8014a2a <jinit_1pass_quantizer+0x18e>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8014a3e:	44c4      	add	ip, r8
 8014a40:	e7ee      	b.n	8014a20 <jinit_1pass_quantizer+0x184>
	for (k = 0; k < blksize; k++)
 8014a42:	f04f 0e00 	mov.w	lr, #0
 8014a46:	e7f8      	b.n	8014a3a <jinit_1pass_quantizer+0x19e>
}
 8014a48:	b005      	add	sp, #20
 8014a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a4e:	bf00      	nop
 8014a50:	0801457d 	.word	0x0801457d
 8014a54:	0801456f 	.word	0x0801456f
 8014a58:	08014571 	.word	0x08014571
 8014a5c:	0802390c 	.word	0x0802390c

08014a60 <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8014a60:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8014a64:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
{
 8014a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  register hist3d histogram = cquantize->histogram;
 8014a6c:	6997      	ldr	r7, [r2, #24]

  for (row = 0; row < num_rows; row++) {
 8014a6e:	2500      	movs	r5, #0
 8014a70:	f04f 0e02 	mov.w	lr, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
 8014a74:	f64f 78ff 	movw	r8, #65535	; 0xffff
  for (row = 0; row < num_rows; row++) {
 8014a78:	429d      	cmp	r5, r3
 8014a7a:	db01      	blt.n	8014a80 <prescan_quantize+0x20>
      ptr += 3;
    }
  }
}
 8014a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (col = width; col > 0; col--) {
 8014a80:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 8014a84:	4666      	mov	r6, ip
 8014a86:	3003      	adds	r0, #3
 8014a88:	b90e      	cbnz	r6, 8014a8e <prescan_quantize+0x2e>
  for (row = 0; row < num_rows; row++) {
 8014a8a:	3501      	adds	r5, #1
 8014a8c:	e7f4      	b.n	8014a78 <prescan_quantize+0x18>
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8014a8e:	f810 2c02 	ldrb.w	r2, [r0, #-2]
    for (col = width; col > 0; col--) {
 8014a92:	3e01      	subs	r6, #1
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8014a94:	f810 9c03 	ldrb.w	r9, [r0, #-3]
 8014a98:	3003      	adds	r0, #3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8014a9a:	f810 4c04 	ldrb.w	r4, [r0, #-4]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8014a9e:	0892      	lsrs	r2, r2, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8014aa0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8014aa4:	0192      	lsls	r2, r2, #6
 8014aa6:	08e4      	lsrs	r4, r4, #3
 8014aa8:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8014aac:	fb1e 2404 	smlabb	r4, lr, r4, r2
      if (++(*histp) <= 0)
 8014ab0:	f839 2004 	ldrh.w	r2, [r9, r4]
 8014ab4:	3201      	adds	r2, #1
 8014ab6:	b292      	uxth	r2, r2
	(*histp)--;
 8014ab8:	2a00      	cmp	r2, #0
 8014aba:	bf08      	it	eq
 8014abc:	4642      	moveq	r2, r8
 8014abe:	f829 2004 	strh.w	r2, [r9, r4]
    for (col = width; col > 0; col--) {
 8014ac2:	e7e1      	b.n	8014a88 <prescan_quantize+0x28>

08014ac4 <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8014ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac8:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 8014acc:	4680      	mov	r8, r0
  for (i = 0; i < numcolors; i++) {
 8014ace:	2500      	movs	r5, #0
{
 8014ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8014ad2:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8014ad6:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8014ad8:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8014ada:	0140      	lsls	r0, r0, #5
{
 8014adc:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  c0 >>= BOX_C0_LOG;
 8014ae0:	1089      	asrs	r1, r1, #2
  hist3d histogram = cquantize->histogram;
 8014ae2:	9306      	str	r3, [sp, #24]
  c2 >>= BOX_C2_LOG;
 8014ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8014ae6:	f100 0a02 	add.w	sl, r0, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8014aea:	0149      	lsls	r1, r1, #5
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8014aec:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8014aee:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8014af0:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8014af4:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8014af8:	311c      	adds	r1, #28
  int numcolors = cinfo->actual_number_of_colors;
 8014afa:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8014afc:	0164      	lsls	r4, r4, #5
  centerc0 = (minc0 + maxc0) >> 1;
 8014afe:	eb09 0301 	add.w	r3, r9, r1
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8014b02:	f104 0b04 	add.w	fp, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8014b06:	341c      	adds	r4, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8014b08:	105b      	asrs	r3, r3, #1
 8014b0a:	9303      	str	r3, [sp, #12]
  centerc1 = (minc1 + maxc1) >> 1;
 8014b0c:	eb0a 0300 	add.w	r3, sl, r0
 8014b10:	105b      	asrs	r3, r3, #1
 8014b12:	9304      	str	r3, [sp, #16]
  centerc2 = (minc2 + maxc2) >> 1;
 8014b14:	eb0b 0304 	add.w	r3, fp, r4
 8014b18:	105b      	asrs	r3, r3, #1
 8014b1a:	9305      	str	r3, [sp, #20]
  minmaxdist = 0x7FFFFFFFL;
 8014b1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014b20:	9301      	str	r3, [sp, #4]
  for (i = 0; i < numcolors; i++) {
 8014b22:	9b02      	ldr	r3, [sp, #8]
 8014b24:	42ab      	cmp	r3, r5
 8014b26:	dc43      	bgt.n	8014bb0 <fill_inverse_cmap+0xec>
  ncolors = 0;
 8014b28:	2200      	movs	r2, #0
 8014b2a:	a972      	add	r1, sp, #456	; 0x1c8
      colorlist[ncolors++] = (JSAMPLE) i;
 8014b2c:	a832      	add	r0, sp, #200	; 0xc8
  for (i = 0; i < numcolors; i++) {
 8014b2e:	4613      	mov	r3, r2
 8014b30:	9c02      	ldr	r4, [sp, #8]
 8014b32:	429c      	cmp	r4, r3
 8014b34:	f300 809d 	bgt.w	8014c72 <fill_inverse_cmap+0x1ae>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8014b38:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8014b3a:	a972      	add	r1, sp, #456	; 0x1c8
    *bptr++ = 0x7FFFFFFFL;
 8014b3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8014b40:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8014b42:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8014b46:	d1fb      	bne.n	8014b40 <fill_inverse_cmap+0x7c>
 8014b48:	a932      	add	r1, sp, #200	; 0xc8
 8014b4a:	9108      	str	r1, [sp, #32]
  for (i = 0; i < numcolors; i++) {
 8014b4c:	9301      	str	r3, [sp, #4]
 8014b4e:	9b01      	ldr	r3, [sp, #4]
 8014b50:	4293      	cmp	r3, r2
 8014b52:	f040 8097 	bne.w	8014c84 <fill_inverse_cmap+0x1c0>
  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8014b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
  cptr = bestcolor;
 8014b58:	a912      	add	r1, sp, #72	; 0x48
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8014b5a:	f023 0003 	bic.w	r0, r3, #3
 8014b5e:	9b06      	ldr	r3, [sp, #24]
 8014b60:	eb03 0580 	add.w	r5, r3, r0, lsl #2
  c2 <<= BOX_C2_LOG;
 8014b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b66:	f023 0203 	bic.w	r2, r3, #3
  c1 <<= BOX_C1_LOG;
 8014b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	f023 0307 	bic.w	r3, r3, #7
 8014b72:	3010      	adds	r0, #16
 8014b74:	019b      	lsls	r3, r3, #6
 8014b76:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8014b7a:	f855 4b04 	ldr.w	r4, [r5], #4
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8014b7e:	f101 0720 	add.w	r7, r1, #32
 8014b82:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8014b84:	4626      	mov	r6, r4
 8014b86:	460a      	mov	r2, r1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8014b88:	f101 0c04 	add.w	ip, r1, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8014b8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014b90:	3101      	adds	r1, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8014b92:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8014b94:	f826 1b02 	strh.w	r1, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8014b98:	d1f8      	bne.n	8014b8c <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8014b9a:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8014b9c:	4611      	mov	r1, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8014b9e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8014ba2:	d1ef      	bne.n	8014b84 <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8014ba4:	4285      	cmp	r5, r0
 8014ba6:	d1e8      	bne.n	8014b7a <fill_inverse_cmap+0xb6>
      }
    }
  }
}
 8014ba8:	f20d 5dcc 	addw	sp, sp, #1484	; 0x5cc
 8014bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8014bb0:	f8d8 7088 	ldr.w	r7, [r8, #136]	; 0x88
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8014bb8:	4591      	cmp	r9, r2
 8014bba:	dd2b      	ble.n	8014c14 <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8014bbc:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8014bc0:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8014bc2:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8014bc6:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8014bcc:	459a      	cmp	sl, r3
 8014bce:	dd34      	ble.n	8014c3a <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8014bd0:	eba3 0e0a 	sub.w	lr, r3, sl
 8014bd4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8014bd8:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8014bdc:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8014bde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8014be2:	fb03 2303 	mla	r3, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8014be6:	68ba      	ldr	r2, [r7, #8]
 8014be8:	5d52      	ldrb	r2, [r2, r5]
    if (x < minc2) {
 8014bea:	4593      	cmp	fp, r2
 8014bec:	dd34      	ble.n	8014c58 <fill_inverse_cmap+0x194>
      tdist = (x - minc2) * C2_SCALE;
 8014bee:	eba2 070b 	sub.w	r7, r2, fp
 8014bf2:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8014bf4:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8014bf8:	1b12      	subs	r2, r2, r4
	tdist = (x - minc2) * C2_SCALE;
 8014bfa:	0052      	lsls	r2, r2, #1
	max_dist += tdist*tdist;
 8014bfc:	fb02 3302 	mla	r3, r2, r2, r3
    mindist[i] = min_dist;	/* save away the results */
 8014c00:	aa72      	add	r2, sp, #456	; 0x1c8
 8014c02:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8014c06:	3501      	adds	r5, #1
 8014c08:	9a01      	ldr	r2, [sp, #4]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	bfa8      	it	ge
 8014c0e:	461a      	movge	r2, r3
 8014c10:	9201      	str	r2, [sp, #4]
 8014c12:	e786      	b.n	8014b22 <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8014c14:	4291      	cmp	r1, r2
 8014c16:	da06      	bge.n	8014c26 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8014c18:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8014c1c:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8014c20:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8014c24:	e7cf      	b.n	8014bc6 <fill_inverse_cmap+0x102>
      if (x <= centerc0) {
 8014c26:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 8014c28:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8014c2c:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8014c2e:	bfac      	ite	ge
 8014c30:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8014c32:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8014c36:	4352      	muls	r2, r2
 8014c38:	e7c6      	b.n	8014bc8 <fill_inverse_cmap+0x104>
    } else if (x > maxc1) {
 8014c3a:	4298      	cmp	r0, r3
 8014c3c:	da08      	bge.n	8014c50 <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8014c3e:	eba3 0e00 	sub.w	lr, r3, r0
 8014c42:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8014c46:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8014c4a:	eba3 030a 	sub.w	r3, r3, sl
 8014c4e:	e7c6      	b.n	8014bde <fill_inverse_cmap+0x11a>
      if (x <= centerc1) {
 8014c50:	9e04      	ldr	r6, [sp, #16]
 8014c52:	429e      	cmp	r6, r3
 8014c54:	dbf9      	blt.n	8014c4a <fill_inverse_cmap+0x186>
 8014c56:	e7c1      	b.n	8014bdc <fill_inverse_cmap+0x118>
    } else if (x > maxc2) {
 8014c58:	4294      	cmp	r4, r2
 8014c5a:	da06      	bge.n	8014c6a <fill_inverse_cmap+0x1a6>
      tdist = (x - maxc2) * C2_SCALE;
 8014c5c:	1b17      	subs	r7, r2, r4
 8014c5e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8014c60:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8014c64:	eba2 020b 	sub.w	r2, r2, fp
 8014c68:	e7c7      	b.n	8014bfa <fill_inverse_cmap+0x136>
      if (x <= centerc2) {
 8014c6a:	9e05      	ldr	r6, [sp, #20]
 8014c6c:	4296      	cmp	r6, r2
 8014c6e:	dbf9      	blt.n	8014c64 <fill_inverse_cmap+0x1a0>
 8014c70:	e7c2      	b.n	8014bf8 <fill_inverse_cmap+0x134>
    if (mindist[i] <= minmaxdist)
 8014c72:	f851 4b04 	ldr.w	r4, [r1], #4
 8014c76:	9d01      	ldr	r5, [sp, #4]
 8014c78:	42a5      	cmp	r5, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8014c7a:	bfa4      	itt	ge
 8014c7c:	5483      	strbge	r3, [r0, r2]
 8014c7e:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8014c80:	3301      	adds	r3, #1
 8014c82:	e755      	b.n	8014b30 <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8014c84:	9b08      	ldr	r3, [sp, #32]
    cptr = bestcolor;
 8014c86:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8014c8a:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
    icolor = GETJSAMPLE(colorlist[i]);
 8014c8e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8014c92:	9308      	str	r3, [sp, #32]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8014c94:	680b      	ldr	r3, [r1, #0]
 8014c96:	5d1d      	ldrb	r5, [r3, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014c98:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014c9a:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8014c9c:	eba9 0505 	sub.w	r5, r9, r5
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014ca0:	5d18      	ldrb	r0, [r3, r4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014ca2:	5d09      	ldrb	r1, [r1, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014ca4:	ebaa 0000 	sub.w	r0, sl, r0
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014ca8:	ebab 0101 	sub.w	r1, fp, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014cac:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014cb0:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8014cb2:	435b      	muls	r3, r3
 8014cb4:	fb05 3305 	mla	r3, r5, r5, r3
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8014cb8:	3504      	adds	r5, #4
    dist0 += inc2*inc2;
 8014cba:	fb01 3301 	mla	r3, r1, r1, r3
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8014cbe:	3108      	adds	r1, #8
    dist0 += inc2*inc2;
 8014cc0:	9304      	str	r3, [sp, #16]
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8014cc2:	012b      	lsls	r3, r5, #4
 8014cc4:	930c      	str	r3, [sp, #48]	; 0x30
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8014cc6:	2348      	movs	r3, #72	; 0x48
 8014cc8:	4358      	muls	r0, r3
 8014cca:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8014cce:	930d      	str	r3, [sp, #52]	; 0x34
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8014cd0:	014b      	lsls	r3, r1, #5
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	9307      	str	r3, [sp, #28]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8014cd6:	f500 6319 	add.w	r3, r0, #2448	; 0x990
 8014cda:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cdc:	9b07      	ldr	r3, [sp, #28]
 8014cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8014ce4:	ab72      	add	r3, sp, #456	; 0x1c8
	xx2 = inc2;
 8014ce6:	46f4      	mov	ip, lr
      xx1 = inc1;
 8014ce8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014cea:	440b      	add	r3, r1
 8014cec:	9305      	str	r3, [sp, #20]
 8014cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cf0:	440b      	add	r3, r1
 8014cf2:	9310      	str	r3, [sp, #64]	; 0x40
 8014cf4:	9b04      	ldr	r3, [sp, #16]
 8014cf6:	9303      	str	r3, [sp, #12]
 8014cf8:	e023      	b.n	8014d42 <fill_inverse_cmap+0x27e>
	  if (dist2 < *bptr) {
 8014cfa:	463b      	mov	r3, r7
 8014cfc:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8014d00:	9711      	str	r7, [sp, #68]	; 0x44
 8014d02:	461f      	mov	r7, r3
 8014d04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d06:	42ab      	cmp	r3, r5
	    *bptr = dist2;
 8014d08:	bfc4      	itt	gt
 8014d0a:	463b      	movgt	r3, r7
 8014d0c:	601d      	strgt	r5, [r3, #0]
	  dist2 += xx2;
 8014d0e:	4435      	add	r5, r6
	    *cptr = (JSAMPLE) icolor;
 8014d10:	bfc8      	it	gt
 8014d12:	9b02      	ldrgt	r3, [sp, #8]
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8014d14:	f506 7600 	add.w	r6, r6, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8014d18:	bfc8      	it	gt
 8014d1a:	701c      	strbgt	r4, [r3, #0]
	  cptr++;
 8014d1c:	9b02      	ldr	r3, [sp, #8]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	9302      	str	r3, [sp, #8]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8014d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d24:	42b3      	cmp	r3, r6
 8014d26:	d1e8      	bne.n	8014cfa <fill_inverse_cmap+0x236>
	  bptr++;
 8014d28:	9b05      	ldr	r3, [sp, #20]
	  cptr++;
 8014d2a:	f10c 0c04 	add.w	ip, ip, #4
	  bptr++;
 8014d2e:	3310      	adds	r3, #16
 8014d30:	9305      	str	r3, [sp, #20]
	dist1 += xx1;
 8014d32:	9b03      	ldr	r3, [sp, #12]
 8014d34:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8014d36:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8014d3a:	9303      	str	r3, [sp, #12]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8014d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d3e:	4298      	cmp	r0, r3
 8014d40:	d007      	beq.n	8014d52 <fill_inverse_cmap+0x28e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8014d42:	9b05      	ldr	r3, [sp, #20]
	xx2 = inc2;
 8014d44:	9e07      	ldr	r6, [sp, #28]
 8014d46:	3b04      	subs	r3, #4
 8014d48:	9d03      	ldr	r5, [sp, #12]
 8014d4a:	f8cd c008 	str.w	ip, [sp, #8]
 8014d4e:	461f      	mov	r7, r3
 8014d50:	e7d3      	b.n	8014cfa <fill_inverse_cmap+0x236>
      dist0 += xx0;
 8014d52:	9804      	ldr	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8014d54:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8014d56:	9b10      	ldr	r3, [sp, #64]	; 0x40
	  cptr++;
 8014d58:	f10e 0e20 	add.w	lr, lr, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8014d5c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
      dist0 += xx0;
 8014d60:	4418      	add	r0, r3
 8014d62:	9004      	str	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8014d64:	d1be      	bne.n	8014ce4 <fill_inverse_cmap+0x220>
  for (i = 0; i < numcolors; i++) {
 8014d66:	9b01      	ldr	r3, [sp, #4]
 8014d68:	3301      	adds	r3, #1
 8014d6a:	e6ef      	b.n	8014b4c <fill_inverse_cmap+0x88>

08014d6c <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8014d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d70:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8014d72:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8014d76:	b085      	sub	sp, #20
 8014d78:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8014d7a:	699b      	ldr	r3, [r3, #24]
{
 8014d7c:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8014d7e:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8014d80:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8014d82:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8014d84:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8014d86:	4555      	cmp	r5, sl
 8014d88:	db02      	blt.n	8014d90 <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8014d8a:	b005      	add	sp, #20
 8014d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8014d90:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8014d94:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8014d98:	9b01      	ldr	r3, [sp, #4]
 8014d9a:	3403      	adds	r4, #3
 8014d9c:	eb06 0b03 	add.w	fp, r6, r3
 8014da0:	455e      	cmp	r6, fp
 8014da2:	d101      	bne.n	8014da8 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8014da4:	3501      	adds	r5, #1
 8014da6:	e7ee      	b.n	8014d86 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8014da8:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8014dac:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8014db0:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8014db4:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8014db6:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8014dba:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 8014dbe:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8014dc2:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8014dc4:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8014dc8:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8014dcc:	f1bc 0f00 	cmp.w	ip, #0
 8014dd0:	d106      	bne.n	8014de0 <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8014dd2:	4672      	mov	r2, lr
 8014dd4:	9303      	str	r3, [sp, #12]
 8014dd6:	9002      	str	r0, [sp, #8]
 8014dd8:	f7ff fe74 	bl	8014ac4 <fill_inverse_cmap>
 8014ddc:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8014de0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8014de4:	3403      	adds	r4, #3
 8014de6:	3b01      	subs	r3, #1
 8014de8:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8014dec:	e7d8      	b.n	8014da0 <pass2_no_dither+0x34>

08014dee <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 8014dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014df2:	f8d0 a1e0 	ldr.w	sl, [r0, #480]	; 0x1e0
{
 8014df6:	b09f      	sub	sp, #124	; 0x7c
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8014df8:	f8d0 b070 	ldr.w	fp, [r0, #112]	; 0x70
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 8014dfc:	f04f 0900 	mov.w	r9, #0
{
 8014e00:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8014e02:	f8da 3018 	ldr.w	r3, [sl, #24]
 8014e06:	9315      	str	r3, [sp, #84]	; 0x54
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8014e08:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014e0c:	9308      	str	r3, [sp, #32]
  int *error_limit = cquantize->error_limiter;
 8014e0e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8014e12:	9309      	str	r3, [sp, #36]	; 0x24
  JSAMPROW colormap0 = cinfo->colormap[0];
 8014e14:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8014e18:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8014e20:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8014e22:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8014e24:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 8014e26:	9318      	str	r3, [sp, #96]	; 0x60
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8014e28:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8014e2c:	3b03      	subs	r3, #3
 8014e2e:	9310      	str	r3, [sp, #64]	; 0x40
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014e30:	2306      	movs	r3, #6
 8014e32:	fb0b 3303 	mla	r3, fp, r3, r3
 8014e36:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8014e38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e3a:	4599      	cmp	r9, r3
 8014e3c:	db02      	blt.n	8014e44 <pass2_fs_dither+0x56>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8014e3e:	b01f      	add	sp, #124	; 0x7c
 8014e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8014e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e46:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8014e4a:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8014e4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014e4e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8014e52:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014e54:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014e58:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 8014e5a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d036      	beq.n	8014ed0 <pass2_fs_dither+0xe2>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8014e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e64:	9a01      	ldr	r2, [sp, #4]
 8014e66:	441a      	add	r2, r3
      outptr += width-1;
 8014e68:	f10b 33ff 	add.w	r3, fp, #4294967295
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8014e6c:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8014e6e:	9a03      	ldr	r2, [sp, #12]
 8014e70:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014e72:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8014e74:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014e76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e78:	4413      	add	r3, r2
      dir3 = -3;
 8014e7a:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014e7e:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8014e80:	2300      	movs	r3, #0
      dir3 = -3;
 8014e82:	9206      	str	r2, [sp, #24]
      dir = -1;
 8014e84:	f04f 32ff 	mov.w	r2, #4294967295
 8014e88:	920d      	str	r2, [sp, #52]	; 0x34
 8014e8a:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8014e8e:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014e90:	9b06      	ldr	r3, [sp, #24]
 8014e92:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8014e94:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014e96:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 8014e98:	4622      	mov	r2, r4
    for (col = width; col > 0; col--) {
 8014e9a:	f8cd b01c 	str.w	fp, [sp, #28]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014e9e:	1cab      	adds	r3, r5, #2
    belowerr0 = belowerr1 = belowerr2 = 0;
 8014ea0:	940a      	str	r4, [sp, #40]	; 0x28
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014ea2:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014ea4:	1d2b      	adds	r3, r5, #4
 8014ea6:	9314      	str	r3, [sp, #80]	; 0x50
    cur0 = cur1 = cur2 = 0;
 8014ea8:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8014eaa:	e9cd 4404 	strd	r4, r4, [sp, #16]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8014eae:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    for (col = width; col > 0; col--) {
 8014eb2:	9f07      	ldr	r7, [sp, #28]
 8014eb4:	b98f      	cbnz	r7, 8014eda <pass2_fs_dither+0xec>
 8014eb6:	fb0b f505 	mul.w	r5, fp, r5
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8014eba:	9a02      	ldr	r2, [sp, #8]
 8014ebc:	9b02      	ldr	r3, [sp, #8]
  for (row = 0; row < num_rows; row++) {
 8014ebe:	f109 0901 	add.w	r9, r9, #1
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8014ec2:	9904      	ldr	r1, [sp, #16]
 8014ec4:	442b      	add	r3, r5
 8014ec6:	5351      	strh	r1, [r2, r5]
    errorptr[1] = (FSERROR) bpreverr1;
 8014ec8:	9a05      	ldr	r2, [sp, #20]
    errorptr[2] = (FSERROR) bpreverr2;
 8014eca:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8014ecc:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8014ece:	e7b3      	b.n	8014e38 <pass2_fs_dither+0x4a>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8014ed0:	2301      	movs	r3, #1
      dir3 = 3;
 8014ed2:	2203      	movs	r2, #3
      dir = 1;
 8014ed4:	930d      	str	r3, [sp, #52]	; 0x34
      dir3 = 3;
 8014ed6:	9206      	str	r2, [sp, #24]
 8014ed8:	e7d7      	b.n	8014e8a <pass2_fs_dither+0x9c>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014eda:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8014ede:	1977      	adds	r7, r6, r5
 8014ee0:	449c      	add	ip, r3
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014ee2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ee4:	9711      	str	r7, [sp, #68]	; 0x44
 8014ee6:	5ef3      	ldrsh	r3, [r6, r3]
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014ee8:	f10c 0c08 	add.w	ip, ip, #8
      cur0 = error_limit[cur0];
 8014eec:	9f09      	ldr	r7, [sp, #36]	; 0x24
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014eee:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014ef0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ef2:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014ef4:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014ef6:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014ef8:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014efa:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014efe:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8014f00:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8014f04:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014f08:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 8014f0a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8014f0e:	9f01      	ldr	r7, [sp, #4]
 8014f10:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8014f14:	9f08      	ldr	r7, [sp, #32]
 8014f16:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8014f18:	443a      	add	r2, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8014f1a:	f811 100c 	ldrb.w	r1, [r1, ip]
 8014f1e:	910e      	str	r1, [sp, #56]	; 0x38
      cur1 += GETJSAMPLE(inptr[1]);
 8014f20:	9901      	ldr	r1, [sp, #4]
 8014f22:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8014f24:	5c52      	ldrb	r2, [r2, r1]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8014f26:	9908      	ldr	r1, [sp, #32]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8014f28:	4617      	mov	r7, r2
      cur2 += GETJSAMPLE(inptr[2]);
 8014f2a:	9a01      	ldr	r2, [sp, #4]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8014f2c:	440b      	add	r3, r1
      cur2 += GETJSAMPLE(inptr[2]);
 8014f2e:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8014f30:	5c9b      	ldrb	r3, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8014f32:	10ba      	asrs	r2, r7, #2
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8014f34:	930f      	str	r3, [sp, #60]	; 0x3c
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8014f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f38:	10d9      	asrs	r1, r3, #3
 8014f3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f40:	eb03 1882 	add.w	r8, r3, r2, lsl #6
 8014f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f46:	10db      	asrs	r3, r3, #3
      if (*cachep == 0)
 8014f48:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8014f4c:	f1bc 0f00 	cmp.w	ip, #0
 8014f50:	d105      	bne.n	8014f5e <pass2_fs_dither+0x170>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8014f52:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 8014f56:	f7ff fdb5 	bl	8014ac4 <fill_inverse_cmap>
 8014f5a:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8014f5e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8014f62:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8014f64:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8014f66:	9905      	ldr	r1, [sp, #20]
	*outptr = (JSAMPLE) pixcode;
 8014f68:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8014f6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f6c:	f812 c003 	ldrb.w	ip, [r2, r3]
 8014f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f72:	eba2 0c0c 	sub.w	ip, r2, ip
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8014f76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f78:	f812 e003 	ldrb.w	lr, [r2, r3]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8014f7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8014f7e:	eba7 0e0e 	sub.w	lr, r7, lr
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014f82:	9f01      	ldr	r7, [sp, #4]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8014f84:	f812 8003 	ldrb.w	r8, [r2, r3]
 8014f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8014f8a:	9a04      	ldr	r2, [sp, #16]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8014f8c:	eba3 0808 	sub.w	r8, r3, r8
	cur0 += delta;		/* form error * 3 */
 8014f90:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8014f94:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8014f96:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8014f9a:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8014f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f9e:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8014fa0:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8014fa4:	9204      	str	r2, [sp, #16]
	cur1 += delta;		/* form error * 3 */
 8014fa6:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8014faa:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8014fac:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8014fb0:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8014fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fb4:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8014fb6:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8014fba:	9105      	str	r1, [sp, #20]
	cur2 += delta;		/* form error * 3 */
 8014fbc:	eb08 0148 	add.w	r1, r8, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8014fc0:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8014fc2:	eb01 0148 	add.w	r1, r1, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8014fc6:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014fc8:	9e06      	ldr	r6, [sp, #24]
	bpreverr2 = belowerr2 + cur2;
 8014fca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014fcc:	4437      	add	r7, r6
      outptr += dir;
 8014fce:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8014fd0:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8014fd2:	eb01 0148 	add.w	r1, r1, r8, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014fd6:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8014fd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014fda:	443e      	add	r6, r7
 8014fdc:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 8014fde:	9e07      	ldr	r6, [sp, #28]
 8014fe0:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8014fe2:	e9cd e80b 	strd	lr, r8, [sp, #44]	; 0x2c
    for (col = width; col > 0; col--) {
 8014fe6:	9607      	str	r6, [sp, #28]
 8014fe8:	9e11      	ldr	r6, [sp, #68]	; 0x44
	belowerr0 = bnexterr;
 8014fea:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8014fee:	e760      	b.n	8014eb2 <pass2_fs_dither+0xc4>

08014ff0 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8014ff0:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8014ff2:	6843      	ldr	r3, [r0, #4]
 8014ff4:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8014ff8:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014ffa:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8015002:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8015006:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 801500a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 801500e:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015010:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8015012:	425c      	negs	r4, r3
 8015014:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015018:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 801501a:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 801501e:	2b10      	cmp	r3, #16
 8015020:	d1f7      	bne.n	8015012 <init_error_limit+0x22>
 8015022:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8015026:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 801502a:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 801502e:	425d      	negs	r5, r3
 8015030:	f844 3f04 	str.w	r3, [r4, #4]!
 8015034:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8015038:	f002 0501 	and.w	r5, r2, #1
 801503c:	3a01      	subs	r2, #1
 801503e:	442b      	add	r3, r5
 8015040:	f112 0f32 	cmn.w	r2, #50	; 0x32
 8015044:	d1f3      	bne.n	801502e <init_error_limit+0x3e>
 8015046:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 801504a:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 801504e:	425c      	negs	r4, r3
 8015050:	f841 3f04 	str.w	r3, [r1, #4]!
 8015054:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8015058:	4282      	cmp	r2, r0
 801505a:	d1f9      	bne.n	8015050 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 801505c:	bd38      	pop	{r3, r4, r5, pc}

0801505e <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 801505e:	4770      	bx	lr

08015060 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8015060:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8015064:	2201      	movs	r2, #1
 8015066:	61da      	str	r2, [r3, #28]
}
 8015068:	4770      	bx	lr
	...

0801506c <start_pass_2_quant>:
{
 801506c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801506e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015072:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 8015074:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8015078:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 801507a:	2b00      	cmp	r3, #0
 801507c:	d050      	beq.n	8015120 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 801507e:	2302      	movs	r3, #2
 8015080:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 8015084:	b189      	cbz	r1, 80150aa <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 8015086:	4b28      	ldr	r3, [pc, #160]	; (8015128 <start_pass_2_quant+0xbc>)
 8015088:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 801508a:	4b28      	ldr	r3, [pc, #160]	; (801512c <start_pass_2_quant+0xc0>)
 801508c:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 801508e:	1f34      	subs	r4, r6, #4
 8015090:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 8015092:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801509a:	2100      	movs	r1, #0
 801509c:	f00a f9cc 	bl	801f438 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 80150a0:	42a6      	cmp	r6, r4
 80150a2:	d1f6      	bne.n	8015092 <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 80150a4:	2300      	movs	r3, #0
 80150a6:	61eb      	str	r3, [r5, #28]
}
 80150a8:	e02f      	b.n	801510a <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 80150aa:	4b21      	ldr	r3, [pc, #132]	; (8015130 <start_pass_2_quant+0xc4>)
 80150ac:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 80150ae:	4b21      	ldr	r3, [pc, #132]	; (8015134 <start_pass_2_quant+0xc8>)
 80150b0:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 80150b2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	dc29      	bgt.n	801510e <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 80150ba:	223a      	movs	r2, #58	; 0x3a
 80150bc:	6823      	ldr	r3, [r4, #0]
 80150be:	615a      	str	r2, [r3, #20]
 80150c0:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80150c2:	619a      	str	r2, [r3, #24]
 80150c4:	4620      	mov	r0, r4
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 80150ca:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80150ce:	2b02      	cmp	r3, #2
 80150d0:	d118      	bne.n	8015104 <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80150d2:	2306      	movs	r3, #6
 80150d4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80150d6:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 80150d8:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 80150da:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 80150dc:	b93b      	cbnz	r3, 80150ee <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80150de:	6863      	ldr	r3, [r4, #4]
 80150e0:	2101      	movs	r1, #1
 80150e2:	4620      	mov	r0, r4
 80150e4:	9201      	str	r2, [sp, #4]
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	4798      	blx	r3
 80150ea:	9a01      	ldr	r2, [sp, #4]
 80150ec:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 80150ee:	2100      	movs	r1, #0
 80150f0:	6a28      	ldr	r0, [r5, #32]
 80150f2:	f00a f9a1 	bl	801f438 <memset>
      if (cquantize->error_limiter == NULL)
 80150f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80150f8:	b913      	cbnz	r3, 8015100 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 80150fa:	4620      	mov	r0, r4
 80150fc:	f7ff ff78 	bl	8014ff0 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8015100:	2300      	movs	r3, #0
 8015102:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 8015104:	69eb      	ldr	r3, [r5, #28]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d1c1      	bne.n	801508e <start_pass_2_quant+0x22>
}
 801510a:	b002      	add	sp, #8
 801510c:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 801510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015112:	ddda      	ble.n	80150ca <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8015114:	223b      	movs	r2, #59	; 0x3b
 8015116:	6823      	ldr	r3, [r4, #0]
 8015118:	615a      	str	r2, [r3, #20]
 801511a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801511e:	e7d0      	b.n	80150c2 <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8015120:	2900      	cmp	r1, #0
 8015122:	d1b0      	bne.n	8015086 <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 8015124:	4b04      	ldr	r3, [pc, #16]	; (8015138 <start_pass_2_quant+0xcc>)
 8015126:	e7c1      	b.n	80150ac <start_pass_2_quant+0x40>
 8015128:	08014a61 	.word	0x08014a61
 801512c:	08015367 	.word	0x08015367
 8015130:	08014def 	.word	0x08014def
 8015134:	0801505f 	.word	0x0801505f
 8015138:	08014d6d 	.word	0x08014d6d

0801513c <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801513c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hist3d histogram = cquantize->histogram;
 8015140:	f8d0 c018 	ldr.w	ip, [r0, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015144:	690b      	ldr	r3, [r1, #16]
 8015146:	694d      	ldr	r5, [r1, #20]
 8015148:	ea4f 0843 	mov.w	r8, r3, lsl #1
 801514c:	9301      	str	r3, [sp, #4]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 801514e:	e9d1 7000 	ldrd	r7, r0, [r1]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015152:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
  if (c0max > c0min)
 8015156:	4287      	cmp	r7, r0
 8015158:	463b      	mov	r3, r7
 801515a:	db34      	blt.n	80151c6 <update_box.isra.0+0x8a>
  if (c1max > c1min)
 801515c:	45a6      	cmp	lr, r4
 801515e:	4672      	mov	r2, lr
 8015160:	db6e      	blt.n	8015240 <update_box.isra.0+0x104>
  if (c2max > c2min)
 8015162:	9e01      	ldr	r6, [sp, #4]
 8015164:	42ae      	cmp	r6, r5
 8015166:	f2c0 80c1 	blt.w	80152ec <update_box.isra.0+0x1b0>
 have_c2min:
 801516a:	46b6      	mov	lr, r6
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801516c:	1aa6      	subs	r6, r4, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801516e:	1ac7      	subs	r7, r0, r3
 8015170:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8015174:	ea4f 08c6 	mov.w	r8, r6, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8015178:	00ff      	lsls	r7, r7, #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801517a:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 801517e:	eba5 060e 	sub.w	r6, r5, lr
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015182:	fb08 f808 	mul.w	r8, r8, r8
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8015186:	0136      	lsls	r6, r6, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015188:	fb07 8707 	mla	r7, r7, r7, r8
  ccount = 0;
 801518c:	f04f 0800 	mov.w	r8, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015190:	fb06 7606 	mla	r6, r6, r6, r7
 8015194:	618e      	str	r6, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 8015196:	4298      	cmp	r0, r3
 8015198:	f280 80e3 	bge.w	8015362 <update_box.isra.0+0x226>
  boxp->colorcount = ccount;
 801519c:	f8c1 801c 	str.w	r8, [r1, #28]
}
 80151a0:	b003      	add	sp, #12
 80151a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	histp = & histogram[c0][c1][c2min];
 80151a6:	eb08 1a89 	add.w	sl, r8, r9, lsl #6
 80151aa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80151ae:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80151b0:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (c2 = c2min; c2 <= c2max; c2++)
 80151b4:	4555      	cmp	r5, sl
 80151b6:	da08      	bge.n	80151ca <update_box.isra.0+0x8e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80151b8:	f109 0901 	add.w	r9, r9, #1
 80151bc:	454c      	cmp	r4, r9
 80151be:	daf2      	bge.n	80151a6 <update_box.isra.0+0x6a>
    for (c0 = c0min; c0 <= c0max; c0++)
 80151c0:	3301      	adds	r3, #1
 80151c2:	4298      	cmp	r0, r3
 80151c4:	db0f      	blt.n	80151e6 <update_box.isra.0+0xaa>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80151c6:	46f1      	mov	r9, lr
 80151c8:	e7f8      	b.n	80151bc <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 80151ca:	f832 bb02 	ldrh.w	fp, [r2], #2
 80151ce:	f1bb 0f00 	cmp.w	fp, #0
 80151d2:	d005      	beq.n	80151e0 <update_box.isra.0+0xa4>
  if (c0max > c0min)
 80151d4:	4298      	cmp	r0, r3
	    boxp->c0min = c0min = c0;
 80151d6:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 80151d8:	ddc0      	ble.n	801515c <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80151da:	4607      	mov	r7, r0
 80151dc:	46f1      	mov	r9, lr
 80151de:	e00f      	b.n	8015200 <update_box.isra.0+0xc4>
	for (c2 = c2min; c2 <= c2max; c2++)
 80151e0:	f10a 0a01 	add.w	sl, sl, #1
 80151e4:	e7e6      	b.n	80151b4 <update_box.isra.0+0x78>
 have_c0min:
 80151e6:	463b      	mov	r3, r7
 80151e8:	e7f7      	b.n	80151da <update_box.isra.0+0x9e>
	histp = & histogram[c0][c1][c2min];
 80151ea:	eb08 1a89 	add.w	sl, r8, r9, lsl #6
 80151ee:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 80151f2:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80151f4:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (c2 = c2min; c2 <= c2max; c2++)
 80151f8:	4555      	cmp	r5, sl
 80151fa:	da07      	bge.n	801520c <update_box.isra.0+0xd0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80151fc:	f109 0901 	add.w	r9, r9, #1
 8015200:	454c      	cmp	r4, r9
 8015202:	daf2      	bge.n	80151ea <update_box.isra.0+0xae>
    for (c0 = c0max; c0 >= c0min; c0--)
 8015204:	3f01      	subs	r7, #1
 8015206:	429f      	cmp	r7, r3
 8015208:	dba8      	blt.n	801515c <update_box.isra.0+0x20>
 801520a:	e7e7      	b.n	80151dc <update_box.isra.0+0xa0>
	  if (*histp++ != 0) {
 801520c:	f832 bb02 	ldrh.w	fp, [r2], #2
 8015210:	f1bb 0f00 	cmp.w	fp, #0
 8015214:	d002      	beq.n	801521c <update_box.isra.0+0xe0>
	    goto have_c0max;
 8015216:	4638      	mov	r0, r7
	    boxp->c0max = c0max = c0;
 8015218:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 801521a:	e79f      	b.n	801515c <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 801521c:	f10a 0a01 	add.w	sl, sl, #1
 8015220:	e7ea      	b.n	80151f8 <update_box.isra.0+0xbc>
	histp = & histogram[c0][c1][c2min];
 8015222:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015226:	f8dd a004 	ldr.w	sl, [sp, #4]
	histp = & histogram[c0][c1][c2min];
 801522a:	eb07 060b 	add.w	r6, r7, fp
	for (c2 = c2min; c2 <= c2max; c2++)
 801522e:	4555      	cmp	r5, sl
 8015230:	da0a      	bge.n	8015248 <update_box.isra.0+0x10c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015232:	f109 0901 	add.w	r9, r9, #1
 8015236:	4581      	cmp	r9, r0
 8015238:	ddf3      	ble.n	8015222 <update_box.isra.0+0xe6>
    for (c1 = c1min; c1 <= c1max; c1++)
 801523a:	3201      	adds	r2, #1
 801523c:	4294      	cmp	r4, r2
 801523e:	db11      	blt.n	8015264 <update_box.isra.0+0x128>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015240:	4699      	mov	r9, r3
	histp = & histogram[c0][c1][c2min];
 8015242:	eb08 1b82 	add.w	fp, r8, r2, lsl #6
 8015246:	e7f6      	b.n	8015236 <update_box.isra.0+0xfa>
	  if (*histp++ != 0) {
 8015248:	f836 7b02 	ldrh.w	r7, [r6], #2
 801524c:	b13f      	cbz	r7, 801525e <update_box.isra.0+0x122>
  if (c1max > c1min)
 801524e:	4294      	cmp	r4, r2
	    boxp->c1min = c1min = c1;
 8015250:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8015252:	dd86      	ble.n	8015162 <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015254:	46a6      	mov	lr, r4
 8015256:	4699      	mov	r9, r3
	histp = & histogram[c0][c1][c2min];
 8015258:	eb08 1b8e 	add.w	fp, r8, lr, lsl #6
 801525c:	e00e      	b.n	801527c <update_box.isra.0+0x140>
	for (c2 = c2min; c2 <= c2max; c2++)
 801525e:	f10a 0a01 	add.w	sl, sl, #1
 8015262:	e7e4      	b.n	801522e <update_box.isra.0+0xf2>
 have_c1min:
 8015264:	4672      	mov	r2, lr
 8015266:	e7f5      	b.n	8015254 <update_box.isra.0+0x118>
	histp = & histogram[c0][c1][c2min];
 8015268:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801526c:	f8dd a004 	ldr.w	sl, [sp, #4]
	histp = & histogram[c0][c1][c2min];
 8015270:	eb07 060b 	add.w	r6, r7, fp
	for (c2 = c2min; c2 <= c2max; c2++)
 8015274:	4555      	cmp	r5, sl
 8015276:	da09      	bge.n	801528c <update_box.isra.0+0x150>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015278:	f109 0901 	add.w	r9, r9, #1
 801527c:	4548      	cmp	r0, r9
 801527e:	daf3      	bge.n	8015268 <update_box.isra.0+0x12c>
    for (c1 = c1max; c1 >= c1min; c1--)
 8015280:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015284:	4596      	cmp	lr, r2
 8015286:	f6ff af6c 	blt.w	8015162 <update_box.isra.0+0x26>
 801528a:	e7e4      	b.n	8015256 <update_box.isra.0+0x11a>
	  if (*histp++ != 0) {
 801528c:	f836 7b02 	ldrh.w	r7, [r6], #2
 8015290:	b11f      	cbz	r7, 801529a <update_box.isra.0+0x15e>
	    goto have_c1max;
 8015292:	4674      	mov	r4, lr
	    boxp->c1max = c1max = c1;
 8015294:	f8c1 e00c 	str.w	lr, [r1, #12]
	    goto have_c1max;
 8015298:	e763      	b.n	8015162 <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 801529a:	f10a 0a01 	add.w	sl, sl, #1
 801529e:	e7e9      	b.n	8015274 <update_box.isra.0+0x138>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80152a0:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
 80152a4:	4691      	mov	r9, r2
 80152a6:	4457      	add	r7, sl
 80152a8:	45a1      	cmp	r9, r4
 80152aa:	dd0b      	ble.n	80152c4 <update_box.isra.0+0x188>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80152ac:	f108 0801 	add.w	r8, r8, #1
 80152b0:	4540      	cmp	r0, r8
 80152b2:	daf5      	bge.n	80152a0 <update_box.isra.0+0x164>
    for (c2 = c2min; c2 <= c2max; c2++)
 80152b4:	f10e 0e01 	add.w	lr, lr, #1
 80152b8:	4575      	cmp	r5, lr
 80152ba:	db1a      	blt.n	80152f2 <update_box.isra.0+0x1b6>
 80152bc:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80152c0:	4698      	mov	r8, r3
 80152c2:	e7f5      	b.n	80152b0 <update_box.isra.0+0x174>
	  if (*histp != 0) {
 80152c4:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 80152c8:	f837 b00b 	ldrh.w	fp, [r7, fp]
 80152cc:	f1bb 0f00 	cmp.w	fp, #0
 80152d0:	d009      	beq.n	80152e6 <update_box.isra.0+0x1aa>
  if (c2max > c2min)
 80152d2:	4575      	cmp	r5, lr
	    boxp->c2min = c2min = c2;
 80152d4:	f8c1 e010 	str.w	lr, [r1, #16]
  if (c2max > c2min)
 80152d8:	f77f af48 	ble.w	801516c <update_box.isra.0+0x30>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80152dc:	462f      	mov	r7, r5
 80152de:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80152e2:	4698      	mov	r8, r3
 80152e4:	e010      	b.n	8015308 <update_box.isra.0+0x1cc>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80152e6:	f109 0901 	add.w	r9, r9, #1
 80152ea:	e7dd      	b.n	80152a8 <update_box.isra.0+0x16c>
 80152ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80152f0:	e7e4      	b.n	80152bc <update_box.isra.0+0x180>
 have_c2min:
 80152f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80152f6:	e7f1      	b.n	80152dc <update_box.isra.0+0x1a0>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80152f8:	f85c 6028 	ldr.w	r6, [ip, r8, lsl #2]
 80152fc:	4691      	mov	r9, r2
 80152fe:	4456      	add	r6, sl
 8015300:	454c      	cmp	r4, r9
 8015302:	da08      	bge.n	8015316 <update_box.isra.0+0x1da>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015304:	f108 0801 	add.w	r8, r8, #1
 8015308:	4540      	cmp	r0, r8
 801530a:	daf5      	bge.n	80152f8 <update_box.isra.0+0x1bc>
    for (c2 = c2max; c2 >= c2min; c2--)
 801530c:	3f01      	subs	r7, #1
 801530e:	4577      	cmp	r7, lr
 8015310:	f6ff af2c 	blt.w	801516c <update_box.isra.0+0x30>
 8015314:	e7e3      	b.n	80152de <update_box.isra.0+0x1a2>
	  if (*histp != 0) {
 8015316:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 801531a:	f836 b00b 	ldrh.w	fp, [r6, fp]
 801531e:	f1bb 0f00 	cmp.w	fp, #0
 8015322:	d002      	beq.n	801532a <update_box.isra.0+0x1ee>
	    goto have_c2max;
 8015324:	463d      	mov	r5, r7
	    boxp->c2max = c2max = c2;
 8015326:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 8015328:	e720      	b.n	801516c <update_box.isra.0+0x30>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801532a:	f109 0901 	add.w	r9, r9, #1
 801532e:	e7e7      	b.n	8015300 <update_box.isra.0+0x1c4>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8015330:	eb0a 1987 	add.w	r9, sl, r7, lsl #6
 8015334:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8015338:	f1a9 0902 	sub.w	r9, r9, #2
 801533c:	444e      	add	r6, r9
 801533e:	46f1      	mov	r9, lr
 8015340:	454d      	cmp	r5, r9
 8015342:	da04      	bge.n	801534e <update_box.isra.0+0x212>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8015344:	3701      	adds	r7, #1
 8015346:	42bc      	cmp	r4, r7
 8015348:	daf2      	bge.n	8015330 <update_box.isra.0+0x1f4>
  for (c0 = c0min; c0 <= c0max; c0++)
 801534a:	3301      	adds	r3, #1
 801534c:	e723      	b.n	8015196 <update_box.isra.0+0x5a>
	if (*histp != 0) {
 801534e:	f836 bf02 	ldrh.w	fp, [r6, #2]!
 8015352:	f1bb 0f00 	cmp.w	fp, #0
 8015356:	d001      	beq.n	801535c <update_box.isra.0+0x220>
	  ccount++;
 8015358:	f108 0801 	add.w	r8, r8, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801535c:	f109 0901 	add.w	r9, r9, #1
 8015360:	e7ee      	b.n	8015340 <update_box.isra.0+0x204>
 8015362:	4617      	mov	r7, r2
 8015364:	e7ef      	b.n	8015346 <update_box.isra.0+0x20a>

08015366 <finish_pass1>:
{
 8015366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801536a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801536e:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015370:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 8015372:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015376:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8015378:	691b      	ldr	r3, [r3, #16]
{
 801537a:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 801537c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 8015380:	9b02      	ldr	r3, [sp, #8]
 8015382:	695b      	ldr	r3, [r3, #20]
 8015384:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015386:	9a01      	ldr	r2, [sp, #4]
 8015388:	6843      	ldr	r3, [r0, #4]
 801538a:	0152      	lsls	r2, r2, #5
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8015390:	2300      	movs	r3, #0
 8015392:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8015394:	213f      	movs	r1, #63	; 0x3f
  boxlist[0].c1min = 0;
 8015396:	6083      	str	r3, [r0, #8]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015398:	4604      	mov	r4, r0
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 801539a:	6142      	str	r2, [r0, #20]
 801539c:	46a0      	mov	r8, r4
  update_box(cinfo, & boxlist[0]);
 801539e:	4627      	mov	r7, r4
  boxlist[0].c2min = 0;
 80153a0:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80153a4:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 80153a8:	9b00      	ldr	r3, [sp, #0]
 80153aa:	4601      	mov	r1, r0
 80153ac:	f8d3 a1e0 	ldr.w	sl, [r3, #480]	; 0x1e0
 80153b0:	4650      	mov	r0, sl
 80153b2:	f7ff fec3 	bl	801513c <update_box.isra.0>
  while (numboxes < desired_colors) {
 80153b6:	9b01      	ldr	r3, [sp, #4]
 80153b8:	455b      	cmp	r3, fp
 80153ba:	dc24      	bgt.n	8015406 <finish_pass1+0xa0>
 80153bc:	2100      	movs	r1, #0
  hist3d histogram = cquantize->histogram;
 80153be:	9b00      	ldr	r3, [sp, #0]
 80153c0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80153c4:	699b      	ldr	r3, [r3, #24]
 80153c6:	9303      	str	r3, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80153c8:	e9d8 7300 	ldrd	r7, r3, [r8]
 80153cc:	9304      	str	r3, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80153ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153d2:	9305      	str	r3, [sp, #20]
 80153d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80153d8:	9306      	str	r3, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80153da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80153de:	9301      	str	r3, [sp, #4]
 80153e0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80153e4:	9307      	str	r3, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 80153e6:	9b01      	ldr	r3, [sp, #4]
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	9309      	str	r3, [sp, #36]	; 0x24
  long c2total = 0;
 80153ec:	2300      	movs	r3, #0
  long c1total = 0;
 80153ee:	469a      	mov	sl, r3
  long c0total = 0;
 80153f0:	4699      	mov	r9, r3
  long total = 0;
 80153f2:	461a      	mov	r2, r3
  for (c0 = c0min; c0 <= c0max; c0++)
 80153f4:	9804      	ldr	r0, [sp, #16]
 80153f6:	42b8      	cmp	r0, r7
 80153f8:	f2c0 8097 	blt.w	801552a <finish_pass1+0x1c4>
 80153fc:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 80153fe:	9e05      	ldr	r6, [sp, #20]
 8015400:	3004      	adds	r0, #4
 8015402:	9008      	str	r0, [sp, #32]
 8015404:	e07b      	b.n	80154fe <finish_pass1+0x198>
    if (numboxes*2 <= desired_colors) {
 8015406:	9b01      	ldr	r3, [sp, #4]
 8015408:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 801540c:	db4e      	blt.n	80154ac <finish_pass1+0x146>
  boxptr which = NULL;
 801540e:	2100      	movs	r1, #0
 8015410:	4622      	mov	r2, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015412:	4608      	mov	r0, r1
  register long maxc = 0;
 8015414:	460e      	mov	r6, r1
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 8015416:	69d3      	ldr	r3, [r2, #28]
 8015418:	42b3      	cmp	r3, r6
 801541a:	dd04      	ble.n	8015426 <finish_pass1+0xc0>
 801541c:	6995      	ldr	r5, [r2, #24]
 801541e:	2d00      	cmp	r5, #0
 8015420:	bfc4      	itt	gt
 8015422:	4611      	movgt	r1, r2
 8015424:	461e      	movgt	r6, r3
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015426:	3001      	adds	r0, #1
 8015428:	3220      	adds	r2, #32
 801542a:	4583      	cmp	fp, r0
 801542c:	d1f3      	bne.n	8015416 <finish_pass1+0xb0>
    if (b1 == NULL)		/* no splittable boxes left! */
 801542e:	2900      	cmp	r1, #0
 8015430:	d0c5      	beq.n	80153be <finish_pass1+0x58>
    b2 = &boxlist[numboxes];	/* where new box will go */
 8015432:	f107 0320 	add.w	r3, r7, #32
 8015436:	ee07 3a90 	vmov	s15, r3
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 801543a:	684b      	ldr	r3, [r1, #4]
 801543c:	627b      	str	r3, [r7, #36]	; 0x24
 801543e:	68ca      	ldr	r2, [r1, #12]
 8015440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015442:	694a      	ldr	r2, [r1, #20]
 8015444:	637a      	str	r2, [r7, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8015446:	680a      	ldr	r2, [r1, #0]
 8015448:	623a      	str	r2, [r7, #32]
 801544a:	688a      	ldr	r2, [r1, #8]
 801544c:	62ba      	str	r2, [r7, #40]	; 0x28
 801544e:	6908      	ldr	r0, [r1, #16]
 8015450:	6338      	str	r0, [r7, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8015452:	680a      	ldr	r2, [r1, #0]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8015454:	688e      	ldr	r6, [r1, #8]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8015456:	9203      	str	r2, [sp, #12]
 8015458:	1a9a      	subs	r2, r3, r2
 801545a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 801545e:	68ca      	ldr	r2, [r1, #12]
 8015460:	9204      	str	r2, [sp, #16]
 8015462:	1b92      	subs	r2, r2, r6
 8015464:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8015468:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801546c:	694a      	ldr	r2, [r1, #20]
 801546e:	eba2 0e00 	sub.w	lr, r2, r0
    if (c2 > cmax) { cmax = c2; n = 2; }
 8015472:	ebbc 1f0e 	cmp.w	ip, lr, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8015476:	ea4f 150e 	mov.w	r5, lr, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 801547a:	f2c0 808a 	blt.w	8015592 <finish_pass1+0x22c>
    if (c0 > cmax) { n = 0; }
 801547e:	45e1      	cmp	r9, ip
 8015480:	dd23      	ble.n	80154ca <finish_pass1+0x164>
      lb = (b1->c0max + b1->c0min) / 2;
 8015482:	9a03      	ldr	r2, [sp, #12]
 8015484:	4413      	add	r3, r2
 8015486:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801548a:	105b      	asrs	r3, r3, #1
      b1->c0max = lb;
 801548c:	604b      	str	r3, [r1, #4]
      b2->c0min = lb+1;
 801548e:	3301      	adds	r3, #1
 8015490:	623b      	str	r3, [r7, #32]
    update_box(cinfo, b1);
 8015492:	4650      	mov	r0, sl
    numboxes++;
 8015494:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8015498:	f7ff fe50 	bl	801513c <update_box.isra.0>
    update_box(cinfo, b2);
 801549c:	ee17 1a90 	vmov	r1, s15
 80154a0:	4650      	mov	r0, sl
    numboxes++;
 80154a2:	ee17 7a90 	vmov	r7, s15
    update_box(cinfo, b2);
 80154a6:	f7ff fe49 	bl	801513c <update_box.isra.0>
    numboxes++;
 80154aa:	e784      	b.n	80153b6 <finish_pass1+0x50>
  boxptr which = NULL;
 80154ac:	2100      	movs	r1, #0
 80154ae:	4623      	mov	r3, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80154b0:	460a      	mov	r2, r1
  register INT32 maxv = 0;
 80154b2:	4608      	mov	r0, r1
    if (boxp->volume > maxv) {
 80154b4:	699e      	ldr	r6, [r3, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80154b6:	3201      	adds	r2, #1
    if (boxp->volume > maxv) {
 80154b8:	4286      	cmp	r6, r0
 80154ba:	bfc4      	itt	gt
 80154bc:	4619      	movgt	r1, r3
 80154be:	4630      	movgt	r0, r6
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80154c0:	4593      	cmp	fp, r2
 80154c2:	f103 0320 	add.w	r3, r3, #32
 80154c6:	d1f5      	bne.n	80154b4 <finish_pass1+0x14e>
 80154c8:	e7b1      	b.n	801542e <finish_pass1+0xc8>
      lb = (b1->c1max + b1->c1min) / 2;
 80154ca:	9b04      	ldr	r3, [sp, #16]
 80154cc:	4433      	add	r3, r6
 80154ce:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 80154d2:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 80154d4:	60ce      	str	r6, [r1, #12]
      b2->c1min = lb+1;
 80154d6:	3601      	adds	r6, #1
 80154d8:	62be      	str	r6, [r7, #40]	; 0x28
      break;
 80154da:	e7da      	b.n	8015492 <finish_pass1+0x12c>
      histp = & histogram[c0][c1][c2min];
 80154dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154de:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80154e2:	9c03      	ldr	r4, [sp, #12]
 80154e4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80154e8:	f10e 0e02 	add.w	lr, lr, #2
 80154ec:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 80154f0:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 80154f4:	4420      	add	r0, r4
      for (c2 = c2min; c2 <= c2max; c2++) {
 80154f6:	9c07      	ldr	r4, [sp, #28]
 80154f8:	4564      	cmp	r4, ip
 80154fa:	da05      	bge.n	8015508 <finish_pass1+0x1a2>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80154fc:	3601      	adds	r6, #1
 80154fe:	9806      	ldr	r0, [sp, #24]
 8015500:	42b0      	cmp	r0, r6
 8015502:	daeb      	bge.n	80154dc <finish_pass1+0x176>
  for (c0 = c0min; c0 <= c0max; c0++)
 8015504:	3701      	adds	r7, #1
 8015506:	e775      	b.n	80153f4 <finish_pass1+0x8e>
	if ((count = *histp++) != 0) {
 8015508:	f830 4b02 	ldrh.w	r4, [r0], #2
 801550c:	b154      	cbz	r4, 8015524 <finish_pass1+0x1be>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 801550e:	9d08      	ldr	r5, [sp, #32]
	  total += count;
 8015510:	4422      	add	r2, r4
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8015512:	fb0e aa04 	mla	sl, lr, r4, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8015516:	fb05 9904 	mla	r9, r5, r4, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 801551a:	ea4f 05cc 	mov.w	r5, ip, lsl #3
 801551e:	3504      	adds	r5, #4
 8015520:	fb04 3305 	mla	r3, r4, r5, r3
      for (c2 = c2min; c2 <= c2max; c2++) {
 8015524:	f10c 0c01 	add.w	ip, ip, #1
 8015528:	e7e5      	b.n	80154f6 <finish_pass1+0x190>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801552a:	9800      	ldr	r0, [sp, #0]
 801552c:	eb09 0962 	add.w	r9, r9, r2, asr #1
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8015530:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
  for (i = 0; i < numboxes; i++)
 8015534:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8015538:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 801553c:	eb03 0362 	add.w	r3, r3, r2, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8015540:	fb99 f9f2 	sdiv	r9, r9, r2
 8015544:	6800      	ldr	r0, [r0, #0]
 8015546:	f800 9001 	strb.w	r9, [r0, r1]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801554a:	9800      	ldr	r0, [sp, #0]
 801554c:	fb9a faf2 	sdiv	sl, sl, r2
 8015550:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8015554:	6840      	ldr	r0, [r0, #4]
 8015556:	f800 a001 	strb.w	sl, [r0, r1]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 801555a:	9800      	ldr	r0, [sp, #0]
 801555c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015560:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8015564:	6880      	ldr	r0, [r0, #8]
 8015566:	5443      	strb	r3, [r0, r1]
  for (i = 0; i < numboxes; i++)
 8015568:	3101      	adds	r1, #1
 801556a:	4559      	cmp	r1, fp
 801556c:	f47f af27 	bne.w	80153be <finish_pass1+0x58>
  cinfo->actual_number_of_colors = numboxes;
 8015570:	9b00      	ldr	r3, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8015572:	2262      	movs	r2, #98	; 0x62
 8015574:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8015576:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	2101      	movs	r1, #1
 8015584:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8015586:	2301      	movs	r3, #1
 8015588:	9a02      	ldr	r2, [sp, #8]
 801558a:	61d3      	str	r3, [r2, #28]
}
 801558c:	b00b      	add	sp, #44	; 0x2c
 801558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8015592:	45a9      	cmp	r9, r5
 8015594:	f73f af75 	bgt.w	8015482 <finish_pass1+0x11c>
      lb = (b1->c2max + b1->c2min) / 2;
 8015598:	4402      	add	r2, r0
 801559a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801559e:	1052      	asrs	r2, r2, #1
      b1->c2max = lb;
 80155a0:	614a      	str	r2, [r1, #20]
      b2->c2min = lb+1;
 80155a2:	3201      	adds	r2, #1
 80155a4:	633a      	str	r2, [r7, #48]	; 0x30
      break;
 80155a6:	e774      	b.n	8015492 <finish_pass1+0x12c>

080155a8 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 80155a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80155aa:	6843      	ldr	r3, [r0, #4]
 80155ac:	222c      	movs	r2, #44	; 0x2c
 80155ae:	2101      	movs	r1, #1
{
 80155b0:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 80155b6:	4b30      	ldr	r3, [pc, #192]	; (8015678 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80155b8:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80155bc:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 80155be:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 80155c0:	4b2e      	ldr	r3, [pc, #184]	; (801567c <jinit_2pass_quantizer+0xd4>)
 80155c2:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 80155c4:	2300      	movs	r3, #0
 80155c6:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 80155c8:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 80155ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80155cc:	2b03      	cmp	r3, #3
 80155ce:	d005      	beq.n	80155dc <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 80155d0:	6823      	ldr	r3, [r4, #0]
 80155d2:	2230      	movs	r2, #48	; 0x30
 80155d4:	4620      	mov	r0, r4
 80155d6:	615a      	str	r2, [r3, #20]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 80155dc:	6863      	ldr	r3, [r4, #4]
 80155de:	2600      	movs	r6, #0
 80155e0:	2280      	movs	r2, #128	; 0x80
 80155e2:	2101      	movs	r1, #1
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	4620      	mov	r0, r4
 80155e8:	4798      	blx	r3
 80155ea:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 80155ec:	6863      	ldr	r3, [r4, #4]
 80155ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80155f2:	69af      	ldr	r7, [r5, #24]
 80155f4:	2101      	movs	r1, #1
 80155f6:	685b      	ldr	r3, [r3, #4]
 80155f8:	4620      	mov	r0, r4
 80155fa:	4798      	blx	r3
 80155fc:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 80155fe:	3604      	adds	r6, #4
 8015600:	2e80      	cmp	r6, #128	; 0x80
 8015602:	d1f3      	bne.n	80155ec <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8015604:	2301      	movs	r3, #1
 8015606:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8015608:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801560a:	2b00      	cmp	r3, #0
 801560c:	d031      	beq.n	8015672 <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 801560e:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8015610:	2e07      	cmp	r6, #7
 8015612:	dc25      	bgt.n	8015660 <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8015614:	223a      	movs	r2, #58	; 0x3a
 8015616:	6823      	ldr	r3, [r4, #0]
 8015618:	615a      	str	r2, [r3, #20]
 801561a:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801561c:	619a      	str	r2, [r3, #24]
 801561e:	4620      	mov	r0, r4
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8015624:	6863      	ldr	r3, [r4, #4]
 8015626:	4632      	mov	r2, r6
 8015628:	2101      	movs	r1, #1
 801562a:	4620      	mov	r0, r4
 801562c:	689f      	ldr	r7, [r3, #8]
 801562e:	2303      	movs	r3, #3
 8015630:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8015632:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8015636:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801563a:	b1e3      	cbz	r3, 8015676 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 801563c:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801563e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015640:	4620      	mov	r0, r4
 8015642:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8015644:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8015648:	2306      	movs	r3, #6
 801564a:	435a      	muls	r2, r3
 801564c:	6863      	ldr	r3, [r4, #4]
 801564e:	320c      	adds	r2, #12
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	4798      	blx	r3
 8015654:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8015656:	4620      	mov	r0, r4
  }
}
 8015658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 801565c:	f7ff bcc8 	b.w	8014ff0 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8015660:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8015664:	ddde      	ble.n	8015624 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8015666:	223b      	movs	r2, #59	; 0x3b
 8015668:	6823      	ldr	r3, [r4, #0]
 801566a:	615a      	str	r2, [r3, #20]
 801566c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015670:	e7d4      	b.n	801561c <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8015672:	612b      	str	r3, [r5, #16]
 8015674:	e7df      	b.n	8015636 <jinit_2pass_quantizer+0x8e>
}
 8015676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015678:	0801506d 	.word	0x0801506d
 801567c:	08015061 	.word	0x08015061

08015680 <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8015680:	1843      	adds	r3, r0, r1
 8015682:	3b01      	subs	r3, #1
}
 8015684:	fb93 f0f1 	sdiv	r0, r3, r1
 8015688:	4770      	bx	lr

0801568a <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 801568a:	1e4b      	subs	r3, r1, #1
 801568c:	4418      	add	r0, r3
  return a - (a % b);
 801568e:	fb90 f3f1 	sdiv	r3, r0, r1
 8015692:	fb01 0313 	mls	r3, r1, r3, r0
}
 8015696:	1ac0      	subs	r0, r0, r3
 8015698:	4770      	bx	lr

0801569a <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 801569a:	b570      	push	{r4, r5, r6, lr}
 801569c:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 801569e:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 80156a2:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 80156a6:	2e00      	cmp	r6, #0
 80156a8:	dc00      	bgt.n	80156ac <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 80156aa:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 80156ac:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 80156ae:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 80156b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80156b4:	f855 0b04 	ldr.w	r0, [r5], #4
 80156b8:	f009 ff9f 	bl	801f5fa <memcpy>
  for (row = num_rows; row > 0; row--) {
 80156bc:	e7f3      	b.n	80156a6 <jcopy_sample_rows+0xc>

080156be <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 80156be:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 80156c0:	01d2      	lsls	r2, r2, #7
 80156c2:	4601      	mov	r1, r0
 80156c4:	4618      	mov	r0, r3
 80156c6:	f009 bf98 	b.w	801f5fa <memcpy>

080156ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80156ca:	6803      	ldr	r3, [r0, #0]
 80156cc:	b513      	push	{r0, r1, r4, lr}
 80156ce:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80156d2:	2300      	movs	r3, #0
 80156d4:	e9cd 3300 	strd	r3, r3, [sp]
 80156d8:	466b      	mov	r3, sp
 80156da:	47a0      	blx	r4
 80156dc:	b002      	add	sp, #8
 80156de:	bd10      	pop	{r4, pc}

080156e0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80156e0:	2301      	movs	r3, #1
 80156e2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80156e6:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80156ea:	4770      	bx	lr

080156ec <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80156ec:	2301      	movs	r3, #1
 80156ee:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80156f2:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80156f6:	4770      	bx	lr

080156f8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80156f8:	6843      	ldr	r3, [r0, #4]
 80156fa:	2201      	movs	r2, #1
 80156fc:	725a      	strb	r2, [r3, #9]
 80156fe:	6840      	ldr	r0, [r0, #4]
 8015700:	6803      	ldr	r3, [r0, #0]
 8015702:	691b      	ldr	r3, [r3, #16]
 8015704:	4718      	bx	r3

08015706 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015706:	6840      	ldr	r0, [r0, #4]
 8015708:	6803      	ldr	r3, [r0, #0]
 801570a:	689b      	ldr	r3, [r3, #8]
 801570c:	4718      	bx	r3

0801570e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801570e:	b530      	push	{r4, r5, lr}
 8015710:	b08b      	sub	sp, #44	; 0x2c
 8015712:	6804      	ldr	r4, [r0, #0]
 8015714:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8015718:	9509      	str	r5, [sp, #36]	; 0x24
 801571a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801571e:	9508      	str	r5, [sp, #32]
 8015720:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015724:	9507      	str	r5, [sp, #28]
 8015726:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801572a:	9506      	str	r5, [sp, #24]
 801572c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015730:	9505      	str	r5, [sp, #20]
 8015732:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015736:	9504      	str	r5, [sp, #16]
 8015738:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801573c:	9503      	str	r5, [sp, #12]
 801573e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015742:	9502      	str	r5, [sp, #8]
 8015744:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015748:	e9cd 3500 	strd	r3, r5, [sp]
 801574c:	4613      	mov	r3, r2
 801574e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8015750:	2200      	movs	r2, #0
 8015752:	47a0      	blx	r4
 8015754:	b00b      	add	sp, #44	; 0x2c
 8015756:	bd30      	pop	{r4, r5, pc}

08015758 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015758:	4b04      	ldr	r3, [pc, #16]	; (801576c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	b123      	cbz	r3, 8015768 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801575e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8015762:	f080 0001 	eor.w	r0, r0, #1
 8015766:	4770      	bx	lr
 8015768:	2001      	movs	r0, #1
 801576a:	4770      	bx	lr
 801576c:	2001468e 	.word	0x2001468e

08015770 <_ZN8touchgfx3HAL8endFrameEv>:
 8015770:	b510      	push	{r4, lr}
 8015772:	4604      	mov	r4, r0
 8015774:	6840      	ldr	r0, [r0, #4]
 8015776:	6803      	ldr	r3, [r0, #0]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	4798      	blx	r3
 801577c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8015780:	b113      	cbz	r3, 8015788 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015782:	2301      	movs	r3, #1
 8015784:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8015788:	bd10      	pop	{r4, pc}

0801578a <_ZN8touchgfx3HAL10initializeEv>:
 801578a:	b510      	push	{r4, lr}
 801578c:	4604      	mov	r4, r0
 801578e:	f7ec fccf 	bl	8002130 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015792:	f7ec fbb9 	bl	8001f08 <_ZN8touchgfx4GPIO4initEv>
 8015796:	6860      	ldr	r0, [r4, #4]
 8015798:	6803      	ldr	r3, [r0, #0]
 801579a:	68db      	ldr	r3, [r3, #12]
 801579c:	4798      	blx	r3
 801579e:	68e0      	ldr	r0, [r4, #12]
 80157a0:	6803      	ldr	r3, [r0, #0]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	4798      	blx	r3
 80157a6:	6823      	ldr	r3, [r4, #0]
 80157a8:	4620      	mov	r0, r4
 80157aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157b0:	4718      	bx	r3

080157b2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80157b2:	b508      	push	{r3, lr}
 80157b4:	6803      	ldr	r3, [r0, #0]
 80157b6:	4604      	mov	r4, r0
 80157b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157bc:	4798      	blx	r3
 80157be:	6823      	ldr	r3, [r4, #0]
 80157c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157c2:	4620      	mov	r0, r4
 80157c4:	4798      	blx	r3
 80157c6:	f7ec fcff 	bl	80021c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80157ca:	6823      	ldr	r3, [r4, #0]
 80157cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157ce:	e7f8      	b.n	80157c2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080157d0 <_ZN8touchgfx3HAL4tickEv>:
 80157d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80157d2:	6803      	ldr	r3, [r0, #0]
 80157d4:	4604      	mov	r4, r0
 80157d6:	4d5b      	ldr	r5, [pc, #364]	; (8015944 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80157d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80157dc:	4798      	blx	r3
 80157de:	2800      	cmp	r0, #0
 80157e0:	f000 8095 	beq.w	801590e <_ZN8touchgfx3HAL4tickEv+0x13e>
 80157e4:	2001      	movs	r0, #1
 80157e6:	2600      	movs	r6, #0
 80157e8:	f7ec faf4 	bl	8001dd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80157ec:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80157f0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80157f4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80157f8:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80157fc:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8015800:	b133      	cbz	r3, 8015810 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015802:	6823      	ldr	r3, [r4, #0]
 8015804:	4620      	mov	r0, r4
 8015806:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801580a:	4798      	blx	r3
 801580c:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8015810:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015814:	2601      	movs	r6, #1
 8015816:	6862      	ldr	r2, [r4, #4]
 8015818:	f083 0301 	eor.w	r3, r3, #1
 801581c:	702e      	strb	r6, [r5, #0]
 801581e:	7253      	strb	r3, [r2, #9]
 8015820:	f004 f822 	bl	8019868 <_ZN8touchgfx11Application11getInstanceEv>
 8015824:	6803      	ldr	r3, [r0, #0]
 8015826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015828:	4798      	blx	r3
 801582a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801582e:	b90b      	cbnz	r3, 8015834 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015830:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8015834:	f004 f818 	bl	8019868 <_ZN8touchgfx11Application11getInstanceEv>
 8015838:	6803      	ldr	r3, [r0, #0]
 801583a:	695b      	ldr	r3, [r3, #20]
 801583c:	4798      	blx	r3
 801583e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8015840:	6803      	ldr	r3, [r0, #0]
 8015842:	691b      	ldr	r3, [r3, #16]
 8015844:	4798      	blx	r3
 8015846:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801584a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801584e:	3b01      	subs	r3, #1
 8015850:	b2db      	uxtb	r3, r3
 8015852:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015856:	b10a      	cbz	r2, 801585c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015858:	2b00      	cmp	r3, #0
 801585a:	d1eb      	bne.n	8015834 <_ZN8touchgfx3HAL4tickEv+0x64>
 801585c:	4a3a      	ldr	r2, [pc, #232]	; (8015948 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801585e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8015862:	7813      	ldrb	r3, [r2, #0]
 8015864:	3301      	adds	r3, #1
 8015866:	b25b      	sxtb	r3, r3
 8015868:	4299      	cmp	r1, r3
 801586a:	7013      	strb	r3, [r2, #0]
 801586c:	dc10      	bgt.n	8015890 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801586e:	2300      	movs	r3, #0
 8015870:	68e0      	ldr	r0, [r4, #12]
 8015872:	a902      	add	r1, sp, #8
 8015874:	7013      	strb	r3, [r2, #0]
 8015876:	aa03      	add	r2, sp, #12
 8015878:	6803      	ldr	r3, [r0, #0]
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	4798      	blx	r3
 801587e:	6823      	ldr	r3, [r4, #0]
 8015880:	2800      	cmp	r0, #0
 8015882:	d050      	beq.n	8015926 <_ZN8touchgfx3HAL4tickEv+0x156>
 8015884:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015888:	4620      	mov	r0, r4
 801588a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801588e:	4798      	blx	r3
 8015890:	2300      	movs	r3, #0
 8015892:	6960      	ldr	r0, [r4, #20]
 8015894:	f88d 3007 	strb.w	r3, [sp, #7]
 8015898:	b158      	cbz	r0, 80158b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801589a:	6803      	ldr	r3, [r0, #0]
 801589c:	f10d 0107 	add.w	r1, sp, #7
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	4798      	blx	r3
 80158a4:	b128      	cbz	r0, 80158b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80158a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80158a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80158ac:	6803      	ldr	r3, [r0, #0]
 80158ae:	68db      	ldr	r3, [r3, #12]
 80158b0:	4798      	blx	r3
 80158b2:	f104 001c 	add.w	r0, r4, #28
 80158b6:	f007 fd67 	bl	801d388 <_ZN8touchgfx8Gestures4tickEv>
 80158ba:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80158be:	b30b      	cbz	r3, 8015904 <_ZN8touchgfx3HAL4tickEv+0x134>
 80158c0:	6920      	ldr	r0, [r4, #16]
 80158c2:	6803      	ldr	r3, [r0, #0]
 80158c4:	691b      	ldr	r3, [r3, #16]
 80158c6:	4798      	blx	r3
 80158c8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80158ca:	4606      	mov	r6, r0
 80158cc:	b903      	cbnz	r3, 80158d0 <_ZN8touchgfx3HAL4tickEv+0x100>
 80158ce:	6760      	str	r0, [r4, #116]	; 0x74
 80158d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80158d2:	4a1e      	ldr	r2, [pc, #120]	; (801594c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80158d4:	1af3      	subs	r3, r6, r3
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d914      	bls.n	8015904 <_ZN8touchgfx3HAL4tickEv+0x134>
 80158da:	6920      	ldr	r0, [r4, #16]
 80158dc:	6803      	ldr	r3, [r0, #0]
 80158de:	699b      	ldr	r3, [r3, #24]
 80158e0:	4798      	blx	r3
 80158e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80158e4:	2264      	movs	r2, #100	; 0x64
 80158e6:	1af3      	subs	r3, r6, r3
 80158e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80158ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80158f0:	2800      	cmp	r0, #0
 80158f2:	dc1d      	bgt.n	8015930 <_ZN8touchgfx3HAL4tickEv+0x160>
 80158f4:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 80158f8:	6920      	ldr	r0, [r4, #16]
 80158fa:	2100      	movs	r1, #0
 80158fc:	6803      	ldr	r3, [r0, #0]
 80158fe:	69db      	ldr	r3, [r3, #28]
 8015900:	4798      	blx	r3
 8015902:	6766      	str	r6, [r4, #116]	; 0x74
 8015904:	f003 ffb0 	bl	8019868 <_ZN8touchgfx11Application11getInstanceEv>
 8015908:	6803      	ldr	r3, [r0, #0]
 801590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801590c:	4798      	blx	r3
 801590e:	6823      	ldr	r3, [r4, #0]
 8015910:	4620      	mov	r0, r4
 8015912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015916:	4798      	blx	r3
 8015918:	2001      	movs	r0, #1
 801591a:	f7ec fa8b 	bl	8001e34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801591e:	2300      	movs	r3, #0
 8015920:	702b      	strb	r3, [r5, #0]
 8015922:	b004      	add	sp, #16
 8015924:	bd70      	pop	{r4, r5, r6, pc}
 8015926:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801592a:	4620      	mov	r0, r4
 801592c:	4798      	blx	r3
 801592e:	e7af      	b.n	8015890 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015930:	2863      	cmp	r0, #99	; 0x63
 8015932:	bfcb      	itete	gt
 8015934:	2300      	movgt	r3, #0
 8015936:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801593a:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 801593e:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8015942:	e7d9      	b.n	80158f8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8015944:	20014694 	.word	0x20014694
 8015948:	20014695 	.word	0x20014695
 801594c:	05f5e100 	.word	0x05f5e100

08015950 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015950:	b510      	push	{r4, lr}
 8015952:	4604      	mov	r4, r0
 8015954:	f7ec fc1c 	bl	8002190 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8015958:	2200      	movs	r2, #0
 801595a:	6863      	ldr	r3, [r4, #4]
 801595c:	729a      	strb	r2, [r3, #10]
 801595e:	bd10      	pop	{r4, pc}

08015960 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015960:	65c1      	str	r1, [r0, #92]	; 0x5c
 8015962:	301c      	adds	r0, #28
 8015964:	f007 bd0e 	b.w	801d384 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015968 <_ZN8touchgfx3HAL5touchEll>:
 8015968:	b530      	push	{r4, r5, lr}
 801596a:	b087      	sub	sp, #28
 801596c:	4604      	mov	r4, r0
 801596e:	a804      	add	r0, sp, #16
 8015970:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015974:	f003 fec4 	bl	8019700 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015978:	9b04      	ldr	r3, [sp, #16]
 801597a:	a906      	add	r1, sp, #24
 801597c:	a803      	add	r0, sp, #12
 801597e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015982:	9b05      	ldr	r3, [sp, #20]
 8015984:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015988:	f003 ff0c 	bl	80197a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801598c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8015990:	f104 001c 	add.w	r0, r4, #28
 8015994:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015998:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801599c:	b189      	cbz	r1, 80159c2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801599e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	4613      	mov	r3, r2
 80159a6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80159aa:	462a      	mov	r2, r5
 80159ac:	f007 fcfa 	bl	801d3a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80159b0:	b128      	cbz	r0, 80159be <_ZN8touchgfx3HAL5touchEll+0x56>
 80159b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80159b6:	6623      	str	r3, [r4, #96]	; 0x60
 80159b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80159bc:	6663      	str	r3, [r4, #100]	; 0x64
 80159be:	b007      	add	sp, #28
 80159c0:	bd30      	pop	{r4, r5, pc}
 80159c2:	f007 fd2f 	bl	801d424 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80159c6:	2301      	movs	r3, #1
 80159c8:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80159cc:	e7f1      	b.n	80159b2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080159ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80159ce:	b510      	push	{r4, lr}
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d046      	beq.n	8015a62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80159d4:	ea81 0002 	eor.w	r0, r1, r2
 80159d8:	07c4      	lsls	r4, r0, #31
 80159da:	d508      	bpl.n	80159ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80159dc:	440b      	add	r3, r1
 80159de:	3a01      	subs	r2, #1
 80159e0:	428b      	cmp	r3, r1
 80159e2:	d93e      	bls.n	8015a62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80159e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80159e8:	f801 0b01 	strb.w	r0, [r1], #1
 80159ec:	e7f8      	b.n	80159e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80159ee:	07d0      	lsls	r0, r2, #31
 80159f0:	bf42      	ittt	mi
 80159f2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80159f6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80159fa:	f801 0b01 	strbmi.w	r0, [r1], #1
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d911      	bls.n	8015a26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015a02:	ea81 0402 	eor.w	r4, r1, r2
 8015a06:	4610      	mov	r0, r2
 8015a08:	07a4      	lsls	r4, r4, #30
 8015a0a:	d022      	beq.n	8015a52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015a0c:	f023 0401 	bic.w	r4, r3, #1
 8015a10:	440c      	add	r4, r1
 8015a12:	428c      	cmp	r4, r1
 8015a14:	4602      	mov	r2, r0
 8015a16:	d904      	bls.n	8015a22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015a18:	8812      	ldrh	r2, [r2, #0]
 8015a1a:	3002      	adds	r0, #2
 8015a1c:	f821 2b02 	strh.w	r2, [r1], #2
 8015a20:	e7f7      	b.n	8015a12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015a22:	f003 0301 	and.w	r3, r3, #1
 8015a26:	f023 0003 	bic.w	r0, r3, #3
 8015a2a:	4408      	add	r0, r1
 8015a2c:	4288      	cmp	r0, r1
 8015a2e:	4614      	mov	r4, r2
 8015a30:	d904      	bls.n	8015a3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015a32:	6824      	ldr	r4, [r4, #0]
 8015a34:	3204      	adds	r2, #4
 8015a36:	f841 4b04 	str.w	r4, [r1], #4
 8015a3a:	e7f7      	b.n	8015a2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015a3c:	f003 0303 	and.w	r3, r3, #3
 8015a40:	3a01      	subs	r2, #1
 8015a42:	440b      	add	r3, r1
 8015a44:	428b      	cmp	r3, r1
 8015a46:	d90c      	bls.n	8015a62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015a48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015a4c:	f801 0b01 	strb.w	r0, [r1], #1
 8015a50:	e7f8      	b.n	8015a44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015a52:	0790      	lsls	r0, r2, #30
 8015a54:	d0e7      	beq.n	8015a26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015a56:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015a5a:	3b02      	subs	r3, #2
 8015a5c:	f821 0b02 	strh.w	r0, [r1], #2
 8015a60:	e7e1      	b.n	8015a26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015a62:	2001      	movs	r0, #1
 8015a64:	bd10      	pop	{r4, pc}

08015a66 <_ZN8touchgfx3HAL7noTouchEv>:
 8015a66:	b510      	push	{r4, lr}
 8015a68:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8015a6c:	4604      	mov	r4, r0
 8015a6e:	b153      	cbz	r3, 8015a86 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015a70:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8015a74:	2101      	movs	r1, #1
 8015a76:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8015a7a:	301c      	adds	r0, #28
 8015a7c:	f007 fcd2 	bl	801d424 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015a80:	2300      	movs	r3, #0
 8015a82:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8015a86:	bd10      	pop	{r4, pc}

08015a88 <_ZN8touchgfx4RectaNERKS0_>:
 8015a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a8c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015a90:	888c      	ldrh	r4, [r1, #4]
 8015a92:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015a96:	443c      	add	r4, r7
 8015a98:	b2a4      	uxth	r4, r4
 8015a9a:	fa0f f884 	sxth.w	r8, r4
 8015a9e:	45c1      	cmp	r9, r8
 8015aa0:	da2f      	bge.n	8015b02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015aa2:	8882      	ldrh	r2, [r0, #4]
 8015aa4:	444a      	add	r2, r9
 8015aa6:	b292      	uxth	r2, r2
 8015aa8:	fa0f fe82 	sxth.w	lr, r2
 8015aac:	4577      	cmp	r7, lr
 8015aae:	da28      	bge.n	8015b02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015ab0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015ab4:	88cb      	ldrh	r3, [r1, #6]
 8015ab6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015aba:	442b      	add	r3, r5
 8015abc:	b21b      	sxth	r3, r3
 8015abe:	429e      	cmp	r6, r3
 8015ac0:	da1f      	bge.n	8015b02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015ac2:	88c3      	ldrh	r3, [r0, #6]
 8015ac4:	4433      	add	r3, r6
 8015ac6:	b29b      	uxth	r3, r3
 8015ac8:	fa0f fc83 	sxth.w	ip, r3
 8015acc:	4565      	cmp	r5, ip
 8015ace:	da18      	bge.n	8015b02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015ad0:	454f      	cmp	r7, r9
 8015ad2:	bfb8      	it	lt
 8015ad4:	464f      	movlt	r7, r9
 8015ad6:	42b5      	cmp	r5, r6
 8015ad8:	bfb8      	it	lt
 8015ada:	4635      	movlt	r5, r6
 8015adc:	45f0      	cmp	r8, lr
 8015ade:	bfd8      	it	le
 8015ae0:	4622      	movle	r2, r4
 8015ae2:	1bd2      	subs	r2, r2, r7
 8015ae4:	8082      	strh	r2, [r0, #4]
 8015ae6:	884a      	ldrh	r2, [r1, #2]
 8015ae8:	88c9      	ldrh	r1, [r1, #6]
 8015aea:	8007      	strh	r7, [r0, #0]
 8015aec:	440a      	add	r2, r1
 8015aee:	8045      	strh	r5, [r0, #2]
 8015af0:	b292      	uxth	r2, r2
 8015af2:	b211      	sxth	r1, r2
 8015af4:	458c      	cmp	ip, r1
 8015af6:	bfa8      	it	ge
 8015af8:	4613      	movge	r3, r2
 8015afa:	1b5b      	subs	r3, r3, r5
 8015afc:	80c3      	strh	r3, [r0, #6]
 8015afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b02:	2300      	movs	r3, #0
 8015b04:	8003      	strh	r3, [r0, #0]
 8015b06:	8043      	strh	r3, [r0, #2]
 8015b08:	8083      	strh	r3, [r0, #4]
 8015b0a:	80c3      	strh	r3, [r0, #6]
 8015b0c:	e7f7      	b.n	8015afe <_ZN8touchgfx4RectaNERKS0_+0x76>

08015b0e <_ZN8touchgfx8Drawable5setXYEss>:
 8015b0e:	b570      	push	{r4, r5, r6, lr}
 8015b10:	6803      	ldr	r3, [r0, #0]
 8015b12:	4604      	mov	r4, r0
 8015b14:	4615      	mov	r5, r2
 8015b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b18:	4798      	blx	r3
 8015b1a:	6823      	ldr	r3, [r4, #0]
 8015b1c:	4629      	mov	r1, r5
 8015b1e:	4620      	mov	r0, r4
 8015b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b26:	4718      	bx	r3

08015b28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b2c:	b085      	sub	sp, #20
 8015b2e:	4604      	mov	r4, r0
 8015b30:	2000      	movs	r0, #0
 8015b32:	4699      	mov	r9, r3
 8015b34:	ad04      	add	r5, sp, #16
 8015b36:	460f      	mov	r7, r1
 8015b38:	4690      	mov	r8, r2
 8015b3a:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015b3e:	69a0      	ldr	r0, [r4, #24]
 8015b40:	6806      	ldr	r6, [r0, #0]
 8015b42:	9501      	str	r5, [sp, #4]
 8015b44:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015b48:	9500      	str	r5, [sp, #0]
 8015b4a:	6835      	ldr	r5, [r6, #0]
 8015b4c:	47a8      	blx	r5
 8015b4e:	4d10      	ldr	r5, [pc, #64]	; (8015b90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015b50:	4606      	mov	r6, r0
 8015b52:	f8a5 9000 	strh.w	r9, [r5]
 8015b56:	f7ed fd01 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 8015b5a:	6803      	ldr	r3, [r0, #0]
 8015b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b5e:	4798      	blx	r3
 8015b60:	b128      	cbz	r0, 8015b6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015b62:	2801      	cmp	r0, #1
 8015b64:	d00b      	beq.n	8015b7e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015b66:	4630      	mov	r0, r6
 8015b68:	b005      	add	sp, #20
 8015b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b6e:	882b      	ldrh	r3, [r5, #0]
 8015b70:	fb08 7203 	mla	r2, r8, r3, r7
 8015b74:	9b03      	ldr	r3, [sp, #12]
 8015b76:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015b7a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015b7c:	e7f3      	b.n	8015b66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015b7e:	882a      	ldrh	r2, [r5, #0]
 8015b80:	9b03      	ldr	r3, [sp, #12]
 8015b82:	fb08 7202 	mla	r2, r8, r2, r7
 8015b86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015b8a:	1a9a      	subs	r2, r3, r2
 8015b8c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015b8e:	e7ea      	b.n	8015b66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015b90:	2001468a 	.word	0x2001468a

08015b94 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b96:	b08b      	sub	sp, #44	; 0x2c
 8015b98:	4617      	mov	r7, r2
 8015b9a:	4604      	mov	r4, r0
 8015b9c:	460e      	mov	r6, r1
 8015b9e:	461d      	mov	r5, r3
 8015ba0:	f7ed fcdc 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 8015ba4:	6803      	ldr	r3, [r0, #0]
 8015ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ba8:	4798      	blx	r3
 8015baa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015bae:	9007      	str	r0, [sp, #28]
 8015bb0:	4631      	mov	r1, r6
 8015bb2:	6822      	ldr	r2, [r4, #0]
 8015bb4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015bb8:	4b0c      	ldr	r3, [pc, #48]	; (8015bec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015bba:	4620      	mov	r0, r4
 8015bbc:	881b      	ldrh	r3, [r3, #0]
 8015bbe:	9306      	str	r3, [sp, #24]
 8015bc0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015bc4:	9305      	str	r3, [sp, #20]
 8015bc6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015bca:	9304      	str	r3, [sp, #16]
 8015bcc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015bd0:	9303      	str	r3, [sp, #12]
 8015bd2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015bd6:	9302      	str	r3, [sp, #8]
 8015bd8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015bdc:	e9cd 5300 	strd	r5, r3, [sp]
 8015be0:	463b      	mov	r3, r7
 8015be2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8015be4:	2200      	movs	r2, #0
 8015be6:	47a8      	blx	r5
 8015be8:	b00b      	add	sp, #44	; 0x2c
 8015bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bec:	2001468a 	.word	0x2001468a

08015bf0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bf4:	4698      	mov	r8, r3
 8015bf6:	6803      	ldr	r3, [r0, #0]
 8015bf8:	b08b      	sub	sp, #44	; 0x2c
 8015bfa:	4617      	mov	r7, r2
 8015bfc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8015bfe:	460e      	mov	r6, r1
 8015c00:	4b13      	ldr	r3, [pc, #76]	; (8015c50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8015c02:	4604      	mov	r4, r0
 8015c04:	f8b3 9000 	ldrh.w	r9, [r3]
 8015c08:	f7ed fca8 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 8015c0c:	6803      	ldr	r3, [r0, #0]
 8015c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c10:	4798      	blx	r3
 8015c12:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015c16:	2200      	movs	r2, #0
 8015c18:	4631      	mov	r1, r6
 8015c1a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015c1e:	2302      	movs	r3, #2
 8015c20:	4620      	mov	r0, r4
 8015c22:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015c26:	2301      	movs	r3, #1
 8015c28:	9305      	str	r3, [sp, #20]
 8015c2a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015c2e:	9304      	str	r3, [sp, #16]
 8015c30:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015c34:	9303      	str	r3, [sp, #12]
 8015c36:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015c3a:	9302      	str	r3, [sp, #8]
 8015c3c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015c40:	e9cd 8300 	strd	r8, r3, [sp]
 8015c44:	463b      	mov	r3, r7
 8015c46:	47a8      	blx	r5
 8015c48:	b00b      	add	sp, #44	; 0x2c
 8015c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c4e:	bf00      	nop
 8015c50:	2001468a 	.word	0x2001468a

08015c54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8015c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c58:	4698      	mov	r8, r3
 8015c5a:	6803      	ldr	r3, [r0, #0]
 8015c5c:	b087      	sub	sp, #28
 8015c5e:	460e      	mov	r6, r1
 8015c60:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8015c62:	4617      	mov	r7, r2
 8015c64:	4b0f      	ldr	r3, [pc, #60]	; (8015ca4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8015c66:	4604      	mov	r4, r0
 8015c68:	f8b3 9000 	ldrh.w	r9, [r3]
 8015c6c:	f7ed fc76 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 8015c70:	6803      	ldr	r3, [r0, #0]
 8015c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c74:	4798      	blx	r3
 8015c76:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8015c7a:	463a      	mov	r2, r7
 8015c7c:	4631      	mov	r1, r6
 8015c7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8015c82:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8015c86:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	9302      	str	r3, [sp, #8]
 8015c8e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015c92:	9301      	str	r3, [sp, #4]
 8015c94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	4643      	mov	r3, r8
 8015c9c:	47a8      	blx	r5
 8015c9e:	b007      	add	sp, #28
 8015ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ca4:	2001468a 	.word	0x2001468a

08015ca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cac:	4604      	mov	r4, r0
 8015cae:	b08f      	sub	sp, #60	; 0x3c
 8015cb0:	4610      	mov	r0, r2
 8015cb2:	460d      	mov	r5, r1
 8015cb4:	4691      	mov	r9, r2
 8015cb6:	461e      	mov	r6, r3
 8015cb8:	f005 fa84 	bl	801b1c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	f000 809d 	beq.w	8015dfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8015cc2:	6823      	ldr	r3, [r4, #0]
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	f8df b198 	ldr.w	fp, [pc, #408]	; 8015e60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8015cca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8015cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cd0:	4798      	blx	r3
 8015cd2:	6823      	ldr	r3, [r4, #0]
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8015e64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8015cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cdc:	4798      	blx	r3
 8015cde:	f8bb 3000 	ldrh.w	r3, [fp]
 8015ce2:	4f5c      	ldr	r7, [pc, #368]	; (8015e54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015ce4:	9301      	str	r3, [sp, #4]
 8015ce6:	f8ba 3000 	ldrh.w	r3, [sl]
 8015cea:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8015cee:	4640      	mov	r0, r8
 8015cf0:	9302      	str	r3, [sp, #8]
 8015cf2:	883b      	ldrh	r3, [r7, #0]
 8015cf4:	9303      	str	r3, [sp, #12]
 8015cf6:	4b58      	ldr	r3, [pc, #352]	; (8015e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015cf8:	881a      	ldrh	r2, [r3, #0]
 8015cfa:	9305      	str	r3, [sp, #20]
 8015cfc:	9204      	str	r2, [sp, #16]
 8015cfe:	f005 fa6d 	bl	801b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d02:	8038      	strh	r0, [r7, #0]
 8015d04:	4640      	mov	r0, r8
 8015d06:	f005 fa9d 	bl	801b244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d0a:	9b05      	ldr	r3, [sp, #20]
 8015d0c:	b280      	uxth	r0, r0
 8015d0e:	8018      	strh	r0, [r3, #0]
 8015d10:	4b52      	ldr	r3, [pc, #328]	; (8015e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d174      	bne.n	8015e02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015d18:	883b      	ldrh	r3, [r7, #0]
 8015d1a:	f8aa 0000 	strh.w	r0, [sl]
 8015d1e:	f8ab 3000 	strh.w	r3, [fp]
 8015d22:	4648      	mov	r0, r9
 8015d24:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8015d28:	f005 fa4c 	bl	801b1c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8015d32:	4611      	mov	r1, r2
 8015d34:	4628      	mov	r0, r5
 8015d36:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015d3a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015d3e:	f7ff fee6 	bl	8015b0e <_ZN8touchgfx8Drawable5setXYEss>
 8015d42:	2301      	movs	r3, #1
 8015d44:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8015d48:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8015d4c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	dd5c      	ble.n	8015e0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015d54:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	dd58      	ble.n	8015e0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015d5c:	462a      	mov	r2, r5
 8015d5e:	ab0a      	add	r3, sp, #40	; 0x28
 8015d60:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015d64:	6851      	ldr	r1, [r2, #4]
 8015d66:	c303      	stmia	r3!, {r0, r1}
 8015d68:	4631      	mov	r1, r6
 8015d6a:	a80a      	add	r0, sp, #40	; 0x28
 8015d6c:	f7ff fe8c 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 8015d70:	4b38      	ldr	r3, [pc, #224]	; (8015e54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015d72:	2100      	movs	r1, #0
 8015d74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d78:	4b37      	ldr	r3, [pc, #220]	; (8015e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015d7a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015d7e:	aa0a      	add	r2, sp, #40	; 0x28
 8015d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d84:	910c      	str	r1, [sp, #48]	; 0x30
 8015d86:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015d8a:	ab08      	add	r3, sp, #32
 8015d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d90:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d94:	4618      	mov	r0, r3
 8015d96:	a90c      	add	r1, sp, #48	; 0x30
 8015d98:	f7ff fe76 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 8015d9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d13c      	bne.n	8015e1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8015da2:	2000      	movs	r0, #0
 8015da4:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8015da8:	2600      	movs	r6, #0
 8015daa:	696b      	ldr	r3, [r5, #20]
 8015dac:	a908      	add	r1, sp, #32
 8015dae:	682a      	ldr	r2, [r5, #0]
 8015db0:	4628      	mov	r0, r5
 8015db2:	9305      	str	r3, [sp, #20]
 8015db4:	616e      	str	r6, [r5, #20]
 8015db6:	6892      	ldr	r2, [r2, #8]
 8015db8:	4790      	blx	r2
 8015dba:	9b05      	ldr	r3, [sp, #20]
 8015dbc:	4652      	mov	r2, sl
 8015dbe:	4649      	mov	r1, r9
 8015dc0:	616b      	str	r3, [r5, #20]
 8015dc2:	4628      	mov	r0, r5
 8015dc4:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8015dc8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8015dcc:	f7ff fe9f 	bl	8015b0e <_ZN8touchgfx8Drawable5setXYEss>
 8015dd0:	9a01      	ldr	r2, [sp, #4]
 8015dd2:	4b23      	ldr	r3, [pc, #140]	; (8015e60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	801a      	strh	r2, [r3, #0]
 8015dd8:	9a02      	ldr	r2, [sp, #8]
 8015dda:	4b22      	ldr	r3, [pc, #136]	; (8015e64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015ddc:	801a      	strh	r2, [r3, #0]
 8015dde:	9a03      	ldr	r2, [sp, #12]
 8015de0:	4b1c      	ldr	r3, [pc, #112]	; (8015e54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015de2:	801a      	strh	r2, [r3, #0]
 8015de4:	4b1c      	ldr	r3, [pc, #112]	; (8015e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015de6:	9a04      	ldr	r2, [sp, #16]
 8015de8:	801a      	strh	r2, [r3, #0]
 8015dea:	6823      	ldr	r3, [r4, #0]
 8015dec:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8015df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015df2:	4798      	blx	r3
 8015df4:	6823      	ldr	r3, [r4, #0]
 8015df6:	4620      	mov	r0, r4
 8015df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dfa:	4798      	blx	r3
 8015dfc:	b00f      	add	sp, #60	; 0x3c
 8015dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e02:	883b      	ldrh	r3, [r7, #0]
 8015e04:	f8ab 0000 	strh.w	r0, [fp]
 8015e08:	f8aa 3000 	strh.w	r3, [sl]
 8015e0c:	e789      	b.n	8015d22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8015e0e:	462a      	mov	r2, r5
 8015e10:	ab0a      	add	r3, sp, #40	; 0x28
 8015e12:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015e16:	6851      	ldr	r1, [r2, #4]
 8015e18:	c303      	stmia	r3!, {r0, r1}
 8015e1a:	e7a9      	b.n	8015d70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8015e1c:	a807      	add	r0, sp, #28
 8015e1e:	f005 fb4d 	bl	801b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e22:	4606      	mov	r6, r0
 8015e24:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015e26:	6803      	ldr	r3, [r0, #0]
 8015e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e2a:	4798      	blx	r3
 8015e2c:	4286      	cmp	r6, r0
 8015e2e:	d1b8      	bne.n	8015da2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015e30:	f7ed fb94 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 8015e34:	6803      	ldr	r3, [r0, #0]
 8015e36:	4606      	mov	r6, r0
 8015e38:	a807      	add	r0, sp, #28
 8015e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e3c:	9305      	str	r3, [sp, #20]
 8015e3e:	f005 fb3d 	bl	801b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e42:	9b05      	ldr	r3, [sp, #20]
 8015e44:	4601      	mov	r1, r0
 8015e46:	4630      	mov	r0, r6
 8015e48:	4798      	blx	r3
 8015e4a:	f080 0001 	eor.w	r0, r0, #1
 8015e4e:	b2c0      	uxtb	r0, r0
 8015e50:	e7a8      	b.n	8015da4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8015e52:	bf00      	nop
 8015e54:	20014684 	.word	0x20014684
 8015e58:	20014686 	.word	0x20014686
 8015e5c:	20014688 	.word	0x20014688
 8015e60:	2001468a 	.word	0x2001468a
 8015e64:	2001468c 	.word	0x2001468c

08015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015e68:	4b07      	ldr	r3, [pc, #28]	; (8015e88 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015e6a:	b510      	push	{r4, lr}
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	4604      	mov	r4, r0
 8015e70:	b13b      	cbz	r3, 8015e82 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015e72:	6803      	ldr	r3, [r0, #0]
 8015e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e76:	4798      	blx	r3
 8015e78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015e7a:	4283      	cmp	r3, r0
 8015e7c:	d101      	bne.n	8015e82 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015e7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015e80:	bd10      	pop	{r4, pc}
 8015e82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015e84:	e7fc      	b.n	8015e80 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015e86:	bf00      	nop
 8015e88:	2001468e 	.word	0x2001468e

08015e8c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e90:	461d      	mov	r5, r3
 8015e92:	b08a      	sub	sp, #40	; 0x28
 8015e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e98:	4690      	mov	r8, r2
 8015e9a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015e9e:	2400      	movs	r4, #0
 8015ea0:	4607      	mov	r7, r0
 8015ea2:	fb06 8505 	mla	r5, r6, r5, r8
 8015ea6:	9404      	str	r4, [sp, #16]
 8015ea8:	f88d 4020 	strb.w	r4, [sp, #32]
 8015eac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015eb0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015eb4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015eb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015ebc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015ec0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015ec4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015ec8:	f7ff ffce 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ecc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015ed6:	a901      	add	r1, sp, #4
 8015ed8:	9505      	str	r5, [sp, #20]
 8015eda:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015ede:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8015ee2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015ee6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015eea:	6803      	ldr	r3, [r0, #0]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	4798      	blx	r3
 8015ef0:	b00a      	add	sp, #40	; 0x28
 8015ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ef6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015ef6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015efa:	b08b      	sub	sp, #44	; 0x2c
 8015efc:	2400      	movs	r4, #0
 8015efe:	4691      	mov	r9, r2
 8015f00:	461d      	mov	r5, r3
 8015f02:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8015f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f0a:	4688      	mov	r8, r1
 8015f0c:	4607      	mov	r7, r0
 8015f0e:	9404      	str	r4, [sp, #16]
 8015f10:	fb06 9505 	mla	r5, r6, r5, r9
 8015f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f18:	f7ff ffa6 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015f20:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f2a:	a901      	add	r1, sp, #4
 8015f2c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015f30:	9505      	str	r5, [sp, #20]
 8015f32:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f36:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015f3a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015f3e:	f8cd 8010 	str.w	r8, [sp, #16]
 8015f42:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015f46:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015f4a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015f4e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015f52:	6803      	ldr	r3, [r0, #0]
 8015f54:	685b      	ldr	r3, [r3, #4]
 8015f56:	4798      	blx	r3
 8015f58:	b00b      	add	sp, #44	; 0x2c
 8015f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015f60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f64:	b08a      	sub	sp, #40	; 0x28
 8015f66:	4698      	mov	r8, r3
 8015f68:	2300      	movs	r3, #0
 8015f6a:	4606      	mov	r6, r0
 8015f6c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015f70:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8015f74:	2d0b      	cmp	r5, #11
 8015f76:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8015f7a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8015f7e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8015f82:	9304      	str	r3, [sp, #16]
 8015f84:	d137      	bne.n	8015ff6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015f86:	2380      	movs	r3, #128	; 0x80
 8015f88:	f88d 0020 	strb.w	r0, [sp, #32]
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	9203      	str	r2, [sp, #12]
 8015f90:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015f94:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015f98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015fa0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015fa4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015fa8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015fac:	f7ff ff5c 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015fb0:	2c0b      	cmp	r4, #11
 8015fb2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015fb6:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015fba:	bf94      	ite	ls
 8015fbc:	4b19      	ldrls	r3, [pc, #100]	; (8016024 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015fbe:	2100      	movhi	r1, #0
 8015fc0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8015fc4:	bf98      	it	ls
 8015fc6:	5d19      	ldrbls	r1, [r3, r4]
 8015fc8:	fb02 8307 	mla	r3, r2, r7, r8
 8015fcc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015fd0:	10c9      	asrs	r1, r1, #3
 8015fd2:	fb01 0003 	mla	r0, r1, r3, r0
 8015fd6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8015fda:	a901      	add	r1, sp, #4
 8015fdc:	9005      	str	r0, [sp, #20]
 8015fde:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	6870      	ldr	r0, [r6, #4]
 8015fe6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015fea:	6803      	ldr	r3, [r0, #0]
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	4798      	blx	r3
 8015ff0:	b00a      	add	sp, #40	; 0x28
 8015ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ff6:	2d02      	cmp	r5, #2
 8015ff8:	d109      	bne.n	801600e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8015ffa:	28ff      	cmp	r0, #255	; 0xff
 8015ffc:	d105      	bne.n	801600a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8015ffe:	f1bc 0f00 	cmp.w	ip, #0
 8016002:	bf14      	ite	ne
 8016004:	2340      	movne	r3, #64	; 0x40
 8016006:	2320      	moveq	r3, #32
 8016008:	e7be      	b.n	8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801600a:	2340      	movs	r3, #64	; 0x40
 801600c:	e7bc      	b.n	8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801600e:	28ff      	cmp	r0, #255	; 0xff
 8016010:	d105      	bne.n	801601e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8016012:	f1bc 0f00 	cmp.w	ip, #0
 8016016:	bf14      	ite	ne
 8016018:	2304      	movne	r3, #4
 801601a:	2301      	moveq	r3, #1
 801601c:	e7b4      	b.n	8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801601e:	2304      	movs	r3, #4
 8016020:	e7b2      	b.n	8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016022:	bf00      	nop
 8016024:	08023f04 	.word	0x08023f04

08016028 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801602c:	b08b      	sub	sp, #44	; 0x2c
 801602e:	461d      	mov	r5, r3
 8016030:	2400      	movs	r4, #0
 8016032:	4688      	mov	r8, r1
 8016034:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8016038:	4693      	mov	fp, r2
 801603a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801603e:	4607      	mov	r7, r0
 8016040:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016044:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8016048:	9404      	str	r4, [sp, #16]
 801604a:	bf14      	ite	ne
 801604c:	2308      	movne	r3, #8
 801604e:	2302      	moveq	r3, #2
 8016050:	fb05 b50a 	mla	r5, r5, sl, fp
 8016054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016058:	f7ff ff06 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801605c:	2e0b      	cmp	r6, #11
 801605e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016062:	a901      	add	r1, sp, #4
 8016064:	bf98      	it	ls
 8016066:	4b13      	ldrls	r3, [pc, #76]	; (80160b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8016068:	f8ad a01e 	strh.w	sl, [sp, #30]
 801606c:	bf98      	it	ls
 801606e:	5d9c      	ldrbls	r4, [r3, r6]
 8016070:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016074:	10e4      	asrs	r4, r4, #3
 8016076:	f8cd 8010 	str.w	r8, [sp, #16]
 801607a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801607e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016082:	fb04 0405 	mla	r4, r4, r5, r0
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f8ad 301a 	strh.w	r3, [sp, #26]
 801608c:	2300      	movs	r3, #0
 801608e:	9405      	str	r4, [sp, #20]
 8016090:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016094:	f88d 9020 	strb.w	r9, [sp, #32]
 8016098:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801609c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80160a0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80160a4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80160a8:	6803      	ldr	r3, [r0, #0]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	4798      	blx	r3
 80160ae:	b00b      	add	sp, #44	; 0x2c
 80160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b4:	08023f04 	.word	0x08023f04

080160b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80160b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160bc:	461e      	mov	r6, r3
 80160be:	4b0a      	ldr	r3, [pc, #40]	; (80160e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80160c0:	460f      	mov	r7, r1
 80160c2:	4690      	mov	r8, r2
 80160c4:	881d      	ldrh	r5, [r3, #0]
 80160c6:	f7ed fa49 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 80160ca:	6803      	ldr	r3, [r0, #0]
 80160cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160ce:	4798      	blx	r3
 80160d0:	280b      	cmp	r0, #11
 80160d2:	bf96      	itet	ls
 80160d4:	4b05      	ldrls	r3, [pc, #20]	; (80160ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80160d6:	2400      	movhi	r4, #0
 80160d8:	5c1c      	ldrbls	r4, [r3, r0]
 80160da:	fb08 7005 	mla	r0, r8, r5, r7
 80160de:	10e4      	asrs	r4, r4, #3
 80160e0:	fb04 6000 	mla	r0, r4, r0, r6
 80160e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160e8:	2001468a 	.word	0x2001468a
 80160ec:	08023f04 	.word	0x08023f04

080160f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80160f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160f2:	b08b      	sub	sp, #44	; 0x2c
 80160f4:	461f      	mov	r7, r3
 80160f6:	4604      	mov	r4, r0
 80160f8:	4616      	mov	r6, r2
 80160fa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80160fe:	2500      	movs	r5, #0
 8016100:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016104:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016108:	9504      	str	r5, [sp, #16]
 801610a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801610e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016112:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016116:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801611a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801611e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016122:	f88d 3020 	strb.w	r3, [sp, #32]
 8016126:	f7ff fe9f 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801612a:	463a      	mov	r2, r7
 801612c:	4631      	mov	r1, r6
 801612e:	4603      	mov	r3, r0
 8016130:	4620      	mov	r0, r4
 8016132:	f7ff ffc1 	bl	80160b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016136:	4b0e      	ldr	r3, [pc, #56]	; (8016170 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8016138:	9005      	str	r0, [sp, #20]
 801613a:	881b      	ldrh	r3, [r3, #0]
 801613c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016140:	f7ed fa0c 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 8016144:	6803      	ldr	r3, [r0, #0]
 8016146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016148:	4798      	blx	r3
 801614a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801614c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016150:	a901      	add	r1, sp, #4
 8016152:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016156:	9304      	str	r3, [sp, #16]
 8016158:	6860      	ldr	r0, [r4, #4]
 801615a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801615e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8016162:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016166:	6803      	ldr	r3, [r0, #0]
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	4798      	blx	r3
 801616c:	b00b      	add	sp, #44	; 0x2c
 801616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016170:	2001468a 	.word	0x2001468a

08016174 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016176:	b08d      	sub	sp, #52	; 0x34
 8016178:	2501      	movs	r5, #1
 801617a:	4604      	mov	r4, r0
 801617c:	466b      	mov	r3, sp
 801617e:	9503      	str	r5, [sp, #12]
 8016180:	e883 0006 	stmia.w	r3, {r1, r2}
 8016184:	2300      	movs	r3, #0
 8016186:	f8bd 6000 	ldrh.w	r6, [sp]
 801618a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801618e:	9306      	str	r3, [sp, #24]
 8016190:	6803      	ldr	r3, [r0, #0]
 8016192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016194:	4798      	blx	r3
 8016196:	463a      	mov	r2, r7
 8016198:	4631      	mov	r1, r6
 801619a:	4603      	mov	r3, r0
 801619c:	4620      	mov	r0, r4
 801619e:	f7ff ff8b 	bl	80160b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80161a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80161a4:	9004      	str	r0, [sp, #16]
 80161a6:	9307      	str	r3, [sp, #28]
 80161a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80161ac:	f8ad 3020 	strh.w	r3, [sp, #32]
 80161b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80161b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80161b8:	4b0e      	ldr	r3, [pc, #56]	; (80161f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80161ba:	881b      	ldrh	r3, [r3, #0]
 80161bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80161c0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80161c4:	f7ed f9ca 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 80161c8:	6803      	ldr	r3, [r0, #0]
 80161ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161cc:	4798      	blx	r3
 80161ce:	23ff      	movs	r3, #255	; 0xff
 80161d0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80161d4:	a903      	add	r1, sp, #12
 80161d6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80161da:	6860      	ldr	r0, [r4, #4]
 80161dc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80161e0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80161e4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80161e8:	6803      	ldr	r3, [r0, #0]
 80161ea:	685b      	ldr	r3, [r3, #4]
 80161ec:	4798      	blx	r3
 80161ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80161f0:	b00d      	add	sp, #52	; 0x34
 80161f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161f4:	2001468a 	.word	0x2001468a

080161f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80161f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161fc:	b08c      	sub	sp, #48	; 0x30
 80161fe:	461e      	mov	r6, r3
 8016200:	2300      	movs	r3, #0
 8016202:	4604      	mov	r4, r0
 8016204:	466d      	mov	r5, sp
 8016206:	9306      	str	r3, [sp, #24]
 8016208:	6803      	ldr	r3, [r0, #0]
 801620a:	e885 0006 	stmia.w	r5, {r1, r2}
 801620e:	2501      	movs	r5, #1
 8016210:	f8bd 7000 	ldrh.w	r7, [sp]
 8016214:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8016218:	9503      	str	r5, [sp, #12]
 801621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801621c:	4798      	blx	r3
 801621e:	4642      	mov	r2, r8
 8016220:	4639      	mov	r1, r7
 8016222:	4603      	mov	r3, r0
 8016224:	4620      	mov	r0, r4
 8016226:	f7ff ff47 	bl	80160b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801622a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801622e:	9004      	str	r0, [sp, #16]
 8016230:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016234:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016238:	9607      	str	r6, [sp, #28]
 801623a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801623e:	4b10      	ldr	r3, [pc, #64]	; (8016280 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016240:	881b      	ldrh	r3, [r3, #0]
 8016242:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016246:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016248:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801624c:	f7ed f986 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 8016250:	6803      	ldr	r3, [r0, #0]
 8016252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016254:	4798      	blx	r3
 8016256:	23ff      	movs	r3, #255	; 0xff
 8016258:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801625c:	a903      	add	r1, sp, #12
 801625e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016262:	6860      	ldr	r0, [r4, #4]
 8016264:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016268:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801626c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016270:	6803      	ldr	r3, [r0, #0]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	4798      	blx	r3
 8016276:	4630      	mov	r0, r6
 8016278:	b00c      	add	sp, #48	; 0x30
 801627a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801627e:	bf00      	nop
 8016280:	2001468a 	.word	0x2001468a

08016284 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8016284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016286:	b085      	sub	sp, #20
 8016288:	4605      	mov	r5, r0
 801628a:	ac02      	add	r4, sp, #8
 801628c:	e884 0006 	stmia.w	r4, {r1, r2}
 8016290:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8016294:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8016298:	f7ff fde6 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801629c:	4631      	mov	r1, r6
 801629e:	4603      	mov	r3, r0
 80162a0:	463a      	mov	r2, r7
 80162a2:	4628      	mov	r0, r5
 80162a4:	f7ff ff08 	bl	80160b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80162a8:	4a05      	ldr	r2, [pc, #20]	; (80162c0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80162aa:	682b      	ldr	r3, [r5, #0]
 80162ac:	8812      	ldrh	r2, [r2, #0]
 80162ae:	9200      	str	r2, [sp, #0]
 80162b0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80162b2:	4603      	mov	r3, r0
 80162b4:	4628      	mov	r0, r5
 80162b6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80162ba:	47b0      	blx	r6
 80162bc:	b005      	add	sp, #20
 80162be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162c0:	2001468a 	.word	0x2001468a

080162c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80162c4:	b570      	push	{r4, r5, r6, lr}
 80162c6:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 80162ca:	4604      	mov	r4, r0
 80162cc:	b19b      	cbz	r3, 80162f6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80162ce:	2002      	movs	r0, #2
 80162d0:	f7eb fde0 	bl	8001e94 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80162d4:	2300      	movs	r3, #0
 80162d6:	4620      	mov	r0, r4
 80162d8:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80162dc:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 80162e0:	6823      	ldr	r3, [r4, #0]
 80162e2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80162e6:	f7ff fdbf 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162ea:	4601      	mov	r1, r0
 80162ec:	4620      	mov	r0, r4
 80162ee:	462b      	mov	r3, r5
 80162f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162f4:	4718      	bx	r3
 80162f6:	bd70      	pop	{r4, r5, r6, pc}

080162f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80162f8:	b538      	push	{r3, r4, r5, lr}
 80162fa:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 80162fe:	4604      	mov	r4, r0
 8016300:	460d      	mov	r5, r1
 8016302:	428b      	cmp	r3, r1
 8016304:	d006      	beq.n	8016314 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8016306:	6803      	ldr	r3, [r0, #0]
 8016308:	b929      	cbnz	r1, 8016316 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801630a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801630e:	4798      	blx	r3
 8016310:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8016314:	bd38      	pop	{r3, r4, r5, pc}
 8016316:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801631a:	e7f8      	b.n	801630e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801631c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801631c:	4b0d      	ldr	r3, [pc, #52]	; (8016354 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801631e:	b510      	push	{r4, lr}
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	4604      	mov	r4, r0
 8016324:	b95b      	cbnz	r3, 801633e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016326:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801632a:	2b02      	cmp	r3, #2
 801632c:	d007      	beq.n	801633e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801632e:	6840      	ldr	r0, [r0, #4]
 8016330:	f000 f92c 	bl	801658c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016334:	b118      	cbz	r0, 801633e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016336:	6862      	ldr	r2, [r4, #4]
 8016338:	7a53      	ldrb	r3, [r2, #9]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d0fc      	beq.n	8016338 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801633e:	f7eb ff1f 	bl	8002180 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016342:	4620      	mov	r0, r4
 8016344:	2100      	movs	r1, #0
 8016346:	f7ff ffd7 	bl	80162f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801634a:	4620      	mov	r0, r4
 801634c:	f7ff fd8c 	bl	8015e68 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016350:	bd10      	pop	{r4, pc}
 8016352:	bf00      	nop
 8016354:	2001468e 	.word	0x2001468e

08016358 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8016358:	b570      	push	{r4, r5, r6, lr}
 801635a:	4604      	mov	r4, r0
 801635c:	6803      	ldr	r3, [r0, #0]
 801635e:	b919      	cbnz	r1, 8016368 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8016360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016366:	4718      	bx	r3
 8016368:	2200      	movs	r2, #0
 801636a:	f890 607b 	ldrb.w	r6, [r0, #123]	; 0x7b
 801636e:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
 8016372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016374:	4798      	blx	r3
 8016376:	6863      	ldr	r3, [r4, #4]
 8016378:	2101      	movs	r1, #1
 801637a:	4605      	mov	r5, r0
 801637c:	4620      	mov	r0, r4
 801637e:	7299      	strb	r1, [r3, #10]
 8016380:	f884 607b 	strb.w	r6, [r4, #123]	; 0x7b
 8016384:	f7ff ffb8 	bl	80162f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016388:	4628      	mov	r0, r5
 801638a:	bd70      	pop	{r4, r5, r6, pc}

0801638c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801638c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016390:	1a13      	subs	r3, r2, r0
 8016392:	4258      	negs	r0, r3
 8016394:	4158      	adcs	r0, r3
 8016396:	4770      	bx	lr

08016398 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016398:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801639c:	1a9b      	subs	r3, r3, r2
 801639e:	2b00      	cmp	r3, #0
 80163a0:	bfdc      	itt	le
 80163a2:	6882      	ldrle	r2, [r0, #8]
 80163a4:	189b      	addle	r3, r3, r2
 80163a6:	2b01      	cmp	r3, #1
 80163a8:	bfcc      	ite	gt
 80163aa:	2000      	movgt	r0, #0
 80163ac:	2001      	movle	r0, #1
 80163ae:	4770      	bx	lr

080163b0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80163b0:	6902      	ldr	r2, [r0, #16]
 80163b2:	6843      	ldr	r3, [r0, #4]
 80163b4:	2024      	movs	r0, #36	; 0x24
 80163b6:	fb00 3002 	mla	r0, r0, r2, r3
 80163ba:	4770      	bx	lr

080163bc <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80163bc:	6803      	ldr	r3, [r0, #0]
 80163be:	691b      	ldr	r3, [r3, #16]
 80163c0:	4718      	bx	r3

080163c2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80163c2:	2301      	movs	r3, #1
 80163c4:	b570      	push	{r4, r5, r6, lr}
 80163c6:	7203      	strb	r3, [r0, #8]
 80163c8:	4604      	mov	r4, r0
 80163ca:	6840      	ldr	r0, [r0, #4]
 80163cc:	6803      	ldr	r3, [r0, #0]
 80163ce:	699b      	ldr	r3, [r3, #24]
 80163d0:	4798      	blx	r3
 80163d2:	6803      	ldr	r3, [r0, #0]
 80163d4:	4605      	mov	r5, r0
 80163d6:	2b40      	cmp	r3, #64	; 0x40
 80163d8:	d00c      	beq.n	80163f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80163da:	d810      	bhi.n	80163fe <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80163dc:	2b04      	cmp	r3, #4
 80163de:	d01d      	beq.n	801641c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80163e0:	d804      	bhi.n	80163ec <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80163e2:	2b01      	cmp	r3, #1
 80163e4:	d006      	beq.n	80163f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80163e6:	2b02      	cmp	r3, #2
 80163e8:	d02c      	beq.n	8016444 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80163ea:	bd70      	pop	{r4, r5, r6, pc}
 80163ec:	2b08      	cmp	r3, #8
 80163ee:	d01d      	beq.n	801642c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80163f0:	2b20      	cmp	r3, #32
 80163f2:	d1fa      	bne.n	80163ea <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80163f4:	6823      	ldr	r3, [r4, #0]
 80163f6:	4620      	mov	r0, r4
 80163f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163fa:	4798      	blx	r3
 80163fc:	e013      	b.n	8016426 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80163fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016402:	d0f7      	beq.n	80163f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016404:	d804      	bhi.n	8016410 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8016406:	2b80      	cmp	r3, #128	; 0x80
 8016408:	d0f4      	beq.n	80163f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801640a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801640e:	e7f0      	b.n	80163f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8016410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016414:	d0ee      	beq.n	80163f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801641a:	e7e5      	b.n	80163e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801641c:	6823      	ldr	r3, [r4, #0]
 801641e:	7f01      	ldrb	r1, [r0, #28]
 8016420:	4620      	mov	r0, r4
 8016422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016424:	4798      	blx	r3
 8016426:	6823      	ldr	r3, [r4, #0]
 8016428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801642a:	e006      	b.n	801643a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801642c:	6823      	ldr	r3, [r4, #0]
 801642e:	7f01      	ldrb	r1, [r0, #28]
 8016430:	4620      	mov	r0, r4
 8016432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016434:	4798      	blx	r3
 8016436:	6823      	ldr	r3, [r4, #0]
 8016438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801643a:	4629      	mov	r1, r5
 801643c:	4620      	mov	r0, r4
 801643e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016442:	4718      	bx	r3
 8016444:	6823      	ldr	r3, [r4, #0]
 8016446:	4620      	mov	r0, r4
 8016448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801644a:	4798      	blx	r3
 801644c:	e7f3      	b.n	8016436 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801644e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801644e:	4770      	bx	lr

08016450 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016450:	4770      	bx	lr

08016452 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8016452:	4770      	bx	lr

08016454 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016454:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8016458:	b510      	push	{r4, lr}
 801645a:	1ad2      	subs	r2, r2, r3
 801645c:	2a00      	cmp	r2, #0
 801645e:	bfdc      	itt	le
 8016460:	6884      	ldrle	r4, [r0, #8]
 8016462:	1912      	addle	r2, r2, r4
 8016464:	2a01      	cmp	r2, #1
 8016466:	dd16      	ble.n	8016496 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8016468:	6842      	ldr	r2, [r0, #4]
 801646a:	2424      	movs	r4, #36	; 0x24
 801646c:	fb04 2303 	mla	r3, r4, r3, r2
 8016470:	f101 0220 	add.w	r2, r1, #32
 8016474:	f851 4b04 	ldr.w	r4, [r1], #4
 8016478:	4291      	cmp	r1, r2
 801647a:	f843 4b04 	str.w	r4, [r3], #4
 801647e:	d1f9      	bne.n	8016474 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016480:	780a      	ldrb	r2, [r1, #0]
 8016482:	701a      	strb	r2, [r3, #0]
 8016484:	68c3      	ldr	r3, [r0, #12]
 8016486:	6882      	ldr	r2, [r0, #8]
 8016488:	f3bf 8f5b 	dmb	ish
 801648c:	3301      	adds	r3, #1
 801648e:	429a      	cmp	r2, r3
 8016490:	bfd8      	it	le
 8016492:	1a9b      	suble	r3, r3, r2
 8016494:	60c3      	str	r3, [r0, #12]
 8016496:	bd10      	pop	{r4, pc}

08016498 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016498:	6903      	ldr	r3, [r0, #16]
 801649a:	6882      	ldr	r2, [r0, #8]
 801649c:	f3bf 8f5b 	dmb	ish
 80164a0:	3301      	adds	r3, #1
 80164a2:	429a      	cmp	r2, r3
 80164a4:	bfd8      	it	le
 80164a6:	1a9b      	suble	r3, r3, r2
 80164a8:	6103      	str	r3, [r0, #16]
 80164aa:	4770      	bx	lr

080164ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80164ac:	b570      	push	{r4, r5, r6, lr}
 80164ae:	4604      	mov	r4, r0
 80164b0:	460e      	mov	r6, r1
 80164b2:	6860      	ldr	r0, [r4, #4]
 80164b4:	6803      	ldr	r3, [r0, #0]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	4798      	blx	r3
 80164ba:	2800      	cmp	r0, #0
 80164bc:	d1f9      	bne.n	80164b2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80164be:	4d0d      	ldr	r5, [pc, #52]	; (80164f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80164c0:	6828      	ldr	r0, [r5, #0]
 80164c2:	6803      	ldr	r3, [r0, #0]
 80164c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80164c6:	4798      	blx	r3
 80164c8:	f7eb fe68 	bl	800219c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80164cc:	6828      	ldr	r0, [r5, #0]
 80164ce:	2101      	movs	r1, #1
 80164d0:	f7ff ff12 	bl	80162f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80164d4:	6860      	ldr	r0, [r4, #4]
 80164d6:	4631      	mov	r1, r6
 80164d8:	6803      	ldr	r3, [r0, #0]
 80164da:	689b      	ldr	r3, [r3, #8]
 80164dc:	4798      	blx	r3
 80164de:	6823      	ldr	r3, [r4, #0]
 80164e0:	4620      	mov	r0, r4
 80164e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164e4:	4798      	blx	r3
 80164e6:	6828      	ldr	r0, [r5, #0]
 80164e8:	6803      	ldr	r3, [r0, #0]
 80164ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80164f0:	4718      	bx	r3
 80164f2:	bf00      	nop
 80164f4:	20014690 	.word	0x20014690

080164f8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80164f8:	b508      	push	{r3, lr}
 80164fa:	f7eb fe41 	bl	8002180 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80164fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016502:	f7eb be45 	b.w	8002190 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016506 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016506:	b510      	push	{r4, lr}
 8016508:	4604      	mov	r4, r0
 801650a:	2114      	movs	r1, #20
 801650c:	f007 fd34 	bl	801df78 <_ZdlPvj>
 8016510:	4620      	mov	r0, r4
 8016512:	bd10      	pop	{r4, pc}

08016514 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016514:	b510      	push	{r4, lr}
 8016516:	4604      	mov	r4, r0
 8016518:	6840      	ldr	r0, [r0, #4]
 801651a:	6803      	ldr	r3, [r0, #0]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	4798      	blx	r3
 8016520:	b948      	cbnz	r0, 8016536 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016522:	7a63      	ldrb	r3, [r4, #9]
 8016524:	b13b      	cbz	r3, 8016536 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016526:	7a23      	ldrb	r3, [r4, #8]
 8016528:	b92b      	cbnz	r3, 8016536 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801652a:	6823      	ldr	r3, [r4, #0]
 801652c:	4620      	mov	r0, r4
 801652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016534:	4718      	bx	r3
 8016536:	bd10      	pop	{r4, pc}

08016538 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016538:	b570      	push	{r4, r5, r6, lr}
 801653a:	4604      	mov	r4, r0
 801653c:	6840      	ldr	r0, [r0, #4]
 801653e:	6803      	ldr	r3, [r0, #0]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	4798      	blx	r3
 8016544:	4605      	mov	r5, r0
 8016546:	b930      	cbnz	r0, 8016556 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016548:	7a23      	ldrb	r3, [r4, #8]
 801654a:	b123      	cbz	r3, 8016556 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801654c:	6860      	ldr	r0, [r4, #4]
 801654e:	6803      	ldr	r3, [r0, #0]
 8016550:	695b      	ldr	r3, [r3, #20]
 8016552:	4798      	blx	r3
 8016554:	7225      	strb	r5, [r4, #8]
 8016556:	6860      	ldr	r0, [r4, #4]
 8016558:	6803      	ldr	r3, [r0, #0]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	4798      	blx	r3
 801655e:	b928      	cbnz	r0, 801656c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016560:	6823      	ldr	r3, [r4, #0]
 8016562:	4620      	mov	r0, r4
 8016564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801656a:	4718      	bx	r3
 801656c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016570:	f7eb be1c 	b.w	80021ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016574 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016574:	b510      	push	{r4, lr}
 8016576:	6082      	str	r2, [r0, #8]
 8016578:	2200      	movs	r2, #0
 801657a:	4c03      	ldr	r4, [pc, #12]	; (8016588 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801657c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016580:	e9c0 4100 	strd	r4, r1, [r0]
 8016584:	bd10      	pop	{r4, pc}
 8016586:	bf00      	nop
 8016588:	08023f18 	.word	0x08023f18

0801658c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801658c:	6840      	ldr	r0, [r0, #4]
 801658e:	6803      	ldr	r3, [r0, #0]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	4718      	bx	r3
 8016594:	0000      	movs	r0, r0
	...

08016598 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8016598:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 801659c:	fb80 0101 	smull	r0, r1, r0, r1
 80165a0:	4f21      	ldr	r7, [pc, #132]	; (8016628 <_ZN8touchgfxL10applyNoiseEiihhh+0x90>)
 80165a2:	461c      	mov	r4, r3
 80165a4:	4616      	mov	r6, r2
 80165a6:	fba0 bc07 	umull	fp, ip, r0, r7
 80165aa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80165ae:	fb07 cc01 	mla	ip, r7, r1, ip
 80165b2:	fbab 010b 	umull	r0, r1, fp, fp
 80165b6:	fb0b f70c 	mul.w	r7, fp, ip
 80165ba:	fb00 f30c 	mul.w	r3, r0, ip
 80165be:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80165c2:	fb0b 3301 	mla	r3, fp, r1, r3
 80165c6:	fba0 010b 	umull	r0, r1, r0, fp
 80165ca:	4419      	add	r1, r3
 80165cc:	a314      	add	r3, pc, #80	; (adr r3, 8016620 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 80165ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d2:	f7ea fa8b 	bl	8000aec <__aeabi_ldivmod>
 80165d6:	2ef7      	cmp	r6, #247	; 0xf7
 80165d8:	b290      	uxth	r0, r2
 80165da:	bf9e      	ittt	ls
 80165dc:	f002 0207 	andls.w	r2, r2, #7
 80165e0:	18b6      	addls	r6, r6, r2
 80165e2:	b2f6      	uxtbls	r6, r6
 80165e4:	2cfb      	cmp	r4, #251	; 0xfb
 80165e6:	bf9e      	ittt	ls
 80165e8:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 80165ec:	18e4      	addls	r4, r4, r3
 80165ee:	b2e4      	uxtbls	r4, r4
 80165f0:	2df7      	cmp	r5, #247	; 0xf7
 80165f2:	bf98      	it	ls
 80165f4:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 80165f8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80165fc:	bf98      	it	ls
 80165fe:	182d      	addls	r5, r5, r0
 8016600:	480a      	ldr	r0, [pc, #40]	; (801662c <_ZN8touchgfxL10applyNoiseEiihhh+0x94>)
 8016602:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8016606:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 801660a:	bf98      	it	ls
 801660c:	b2ed      	uxtbls	r5, r5
 801660e:	4304      	orrs	r4, r0
 8016610:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8016614:	b280      	uxth	r0, r0
 8016616:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801661a:	bf00      	nop
 801661c:	f3af 8000 	nop.w
 8016620:	797a8d77 	.word	0x797a8d77
 8016624:	00000000 	.word	0x00000000
 8016628:	00ec4ba7 	.word	0x00ec4ba7
 801662c:	fffff800 	.word	0xfffff800

08016630 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8016630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016634:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8016638:	4605      	mov	r5, r0
 801663a:	ed2d 8b02 	vpush	{d8}
 801663e:	b087      	sub	sp, #28
 8016640:	7c41      	ldrb	r1, [r0, #17]
 8016642:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 8016646:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 801664a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 801664e:	2900      	cmp	r1, #0
 8016650:	f000 809a 	beq.w	8016788 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 8016654:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016658:	ed90 7a08 	vldr	s14, [r0, #32]
 801665c:	454a      	cmp	r2, r9
 801665e:	68c0      	ldr	r0, [r0, #12]
 8016660:	db25      	blt.n	80166ae <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 8016662:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016666:	f640 72fc 	movw	r2, #4092	; 0xffc
 801666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801666e:	bfc8      	it	gt
 8016670:	2200      	movgt	r2, #0
 8016672:	5882      	ldr	r2, [r0, r2]
 8016674:	2100      	movs	r1, #0
 8016676:	ea4f 2812 	mov.w	r8, r2, lsr #8
 801667a:	7c2d      	ldrb	r5, [r5, #16]
 801667c:	0950      	lsrs	r0, r2, #5
 801667e:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 8016682:	f408 4e78 	and.w	lr, r8, #63488	; 0xf800
 8016686:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 801668a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801668e:	2d00      	cmp	r5, #0
 8016690:	d044      	beq.n	801671c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8016692:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016696:	d141      	bne.n	801671c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8016698:	bb61      	cbnz	r1, 80166f4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 801669a:	ea4e 0000 	orr.w	r0, lr, r0
 801669e:	ea4c 0500 	orr.w	r5, ip, r0
 80166a2:	42bc      	cmp	r4, r7
 80166a4:	f080 8214 	bcs.w	8016ad0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 80166a8:	f824 5b02 	strh.w	r5, [r4], #2
 80166ac:	e7f9      	b.n	80166a2 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 80166ae:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 80166b2:	454f      	cmp	r7, r9
 80166b4:	dc08      	bgt.n	80166c8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 80166b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80166ba:	f640 72fc 	movw	r2, #4092	; 0xffc
 80166be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c2:	bfd8      	it	le
 80166c4:	2200      	movle	r2, #0
 80166c6:	e7d4      	b.n	8016672 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 80166c8:	eba9 0202 	sub.w	r2, r9, r2
 80166cc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80166d0:	ee07 2a90 	vmov	s15, r2
 80166d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80166e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166e4:	ee17 2a90 	vmov	r2, s15
 80166e8:	bfd8      	it	le
 80166ea:	f202 32ff 	addwle	r2, r2, #1023	; 0x3ff
 80166ee:	0092      	lsls	r2, r2, #2
 80166f0:	5882      	ldr	r2, [r0, r2]
 80166f2:	e7c0      	b.n	8016676 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 80166f4:	b2d5      	uxtb	r5, r2
 80166f6:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 80166fa:	fa5f f888 	uxtb.w	r8, r8
 80166fe:	461e      	mov	r6, r3
 8016700:	42bc      	cmp	r4, r7
 8016702:	f080 81e5 	bcs.w	8016ad0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8016706:	4630      	mov	r0, r6
 8016708:	9500      	str	r5, [sp, #0]
 801670a:	4643      	mov	r3, r8
 801670c:	4652      	mov	r2, sl
 801670e:	4649      	mov	r1, r9
 8016710:	3601      	adds	r6, #1
 8016712:	f7ff ff41 	bl	8016598 <_ZN8touchgfxL10applyNoiseEiihhh>
 8016716:	f824 0b02 	strh.w	r0, [r4], #2
 801671a:	e7f1      	b.n	8016700 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 801671c:	0e12      	lsrs	r2, r2, #24
 801671e:	26ff      	movs	r6, #255	; 0xff
 8016720:	fb02 f20a 	mul.w	r2, r2, sl
 8016724:	1c53      	adds	r3, r2, #1
 8016726:	eb03 2222 	add.w	r2, r3, r2, asr #8
 801672a:	1212      	asrs	r2, r2, #8
 801672c:	fb02 f50c 	mul.w	r5, r2, ip
 8016730:	f8df c3b0 	ldr.w	ip, [pc, #944]	; 8016ae4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8016734:	fb02 f10e 	mul.w	r1, r2, lr
 8016738:	4350      	muls	r0, r2
 801673a:	43d2      	mvns	r2, r2
 801673c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8016740:	42bc      	cmp	r4, r7
 8016742:	f080 81c5 	bcs.w	8016ad0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8016746:	f8b4 e000 	ldrh.w	lr, [r4]
 801674a:	ea0e 030c 	and.w	r3, lr, ip
 801674e:	f40e 68fc 	and.w	r8, lr, #2016	; 0x7e0
 8016752:	f00e 0e1f 	and.w	lr, lr, #31
 8016756:	fb02 1303 	mla	r3, r2, r3, r1
 801675a:	fb02 0808 	mla	r8, r2, r8, r0
 801675e:	fb02 5e0e 	mla	lr, r2, lr, r5
 8016762:	fb93 f3f6 	sdiv	r3, r3, r6
 8016766:	fb98 f8f6 	sdiv	r8, r8, r6
 801676a:	fb9e fef6 	sdiv	lr, lr, r6
 801676e:	ea03 030c 	and.w	r3, r3, ip
 8016772:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016776:	f00e 0e1f 	and.w	lr, lr, #31
 801677a:	ea43 0308 	orr.w	r3, r3, r8
 801677e:	ea43 030e 	orr.w	r3, r3, lr
 8016782:	f824 3b02 	strh.w	r3, [r4], #2
 8016786:	e7db      	b.n	8016740 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 8016788:	7c82      	ldrb	r2, [r0, #18]
 801678a:	2a00      	cmp	r2, #0
 801678c:	d04f      	beq.n	801682e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1fe>
 801678e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016792:	ee07 2a90 	vmov	s15, r2
 8016796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801679a:	ee07 3a10 	vmov	s14, r3
 801679e:	461f      	mov	r7, r3
 80167a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80167a4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80167a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ac:	f200 8095 	bhi.w	80168da <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2aa>
 80167b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80167b4:	f640 71fc 	movw	r1, #4092	; 0xffc
 80167b8:	68ea      	ldr	r2, [r5, #12]
 80167ba:	f895 c010 	ldrb.w	ip, [r5, #16]
 80167be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80167c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80167c6:	ee06 6a90 	vmov	s13, r6
 80167ca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80167ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80167d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167d6:	bf4a      	itet	mi
 80167d8:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 80167dc:	9602      	strpl	r6, [sp, #8]
 80167de:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 80167e2:	ed95 7a08 	vldr	s14, [r5, #32]
 80167e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80167ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ee:	bfc8      	it	gt
 80167f0:	2100      	movgt	r1, #0
 80167f2:	5852      	ldr	r2, [r2, r1]
 80167f4:	9902      	ldr	r1, [sp, #8]
 80167f6:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80167fa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80167fe:	0950      	lsrs	r0, r2, #5
 8016800:	f40b 4b78 	and.w	fp, fp, #63488	; 0xf800
 8016804:	9103      	str	r1, [sp, #12]
 8016806:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 801680a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801680e:	f1bc 0f00 	cmp.w	ip, #0
 8016812:	d024      	beq.n	801685e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x22e>
 8016814:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016818:	d121      	bne.n	801685e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x22e>
 801681a:	ea4b 0b00 	orr.w	fp, fp, r0
 801681e:	ea41 010b 	orr.w	r1, r1, fp
 8016822:	9a03      	ldr	r2, [sp, #12]
 8016824:	4294      	cmp	r4, r2
 8016826:	d255      	bcs.n	80168d4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a4>
 8016828:	f824 1b02 	strh.w	r1, [r4], #2
 801682c:	e7f9      	b.n	8016822 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f2>
 801682e:	ee07 9a10 	vmov	s14, r9
 8016832:	edd0 7a06 	vldr	s15, [r0, #24]
 8016836:	edd0 6a05 	vldr	s13, [r0, #20]
 801683a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801683e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016846:	ed90 7a08 	vldr	s14, [r0, #32]
 801684a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016852:	bf44      	itt	mi
 8016854:	ed90 7a07 	vldrmi	s14, [r0, #28]
 8016858:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 801685c:	e79d      	b.n	801679a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 801685e:	0e12      	lsrs	r2, r2, #24
 8016860:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8016ae4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8016864:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8016868:	fb02 f20a 	mul.w	r2, r2, sl
 801686c:	f102 0c01 	add.w	ip, r2, #1
 8016870:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8016874:	1212      	asrs	r2, r2, #8
 8016876:	4350      	muls	r0, r2
 8016878:	4351      	muls	r1, r2
 801687a:	fb02 fb0b 	mul.w	fp, r2, fp
 801687e:	43d2      	mvns	r2, r2
 8016880:	9004      	str	r0, [sp, #16]
 8016882:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8016886:	9105      	str	r1, [sp, #20]
 8016888:	9903      	ldr	r1, [sp, #12]
 801688a:	428c      	cmp	r4, r1
 801688c:	d222      	bcs.n	80168d4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a4>
 801688e:	8820      	ldrh	r0, [r4, #0]
 8016890:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 8016894:	ea00 0c08 	and.w	ip, r0, r8
 8016898:	460f      	mov	r7, r1
 801689a:	9904      	ldr	r1, [sp, #16]
 801689c:	fb02 bc0c 	mla	ip, r2, ip, fp
 80168a0:	fb02 1107 	mla	r1, r2, r7, r1
 80168a4:	fb9c fcfe 	sdiv	ip, ip, lr
 80168a8:	fb91 f1fe 	sdiv	r1, r1, lr
 80168ac:	ea0c 0c08 	and.w	ip, ip, r8
 80168b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80168b4:	ea4c 0101 	orr.w	r1, ip, r1
 80168b8:	f000 0c1f 	and.w	ip, r0, #31
 80168bc:	9805      	ldr	r0, [sp, #20]
 80168be:	fb02 0c0c 	mla	ip, r2, ip, r0
 80168c2:	fb9c fcfe 	sdiv	ip, ip, lr
 80168c6:	f00c 0c1f 	and.w	ip, ip, #31
 80168ca:	ea41 010c 	orr.w	r1, r1, ip
 80168ce:	f824 1b02 	strh.w	r1, [r4], #2
 80168d2:	e7d9      	b.n	8016888 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x258>
 80168d4:	9a02      	ldr	r2, [sp, #8]
 80168d6:	441a      	add	r2, r3
 80168d8:	4617      	mov	r7, r2
 80168da:	441e      	add	r6, r3
 80168dc:	b236      	sxth	r6, r6
 80168de:	42be      	cmp	r6, r7
 80168e0:	f340 80f6 	ble.w	8016ad0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 80168e4:	ed95 7a07 	vldr	s14, [r5, #28]
 80168e8:	ee06 7a90 	vmov	s13, r7
 80168ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80168f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80168f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80168f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fc:	f340 80b2 	ble.w	8016a64 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x434>
 8016900:	ee06 6a10 	vmov	s12, r6
 8016904:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016908:	ed9f 8a74 	vldr	s16, [pc, #464]	; 8016adc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4ac>
 801690c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016910:	7c2b      	ldrb	r3, [r5, #16]
 8016912:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016916:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8016ae0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 801691a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801691e:	bfd6      	itet	le
 8016920:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 8016924:	46b0      	movgt	r8, r6
 8016926:	ee17 8a10 	vmovle	r8, s14
 801692a:	ed95 7a08 	vldr	s14, [r5, #32]
 801692e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016932:	eba8 0707 	sub.w	r7, r8, r7
 8016936:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801693e:	fe38 8a06 	vselgt.f32	s16, s16, s12
 8016942:	eea7 8a27 	vfma.f32	s16, s14, s15
 8016946:	b1db      	cbz	r3, 8016980 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x350>
 8016948:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801694c:	d118      	bne.n	8016980 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x350>
 801694e:	42bc      	cmp	r4, r7
 8016950:	d262      	bcs.n	8016a18 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3e8>
 8016952:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016956:	68eb      	ldr	r3, [r5, #12]
 8016958:	4649      	mov	r1, r9
 801695a:	ee17 0a90 	vmov	r0, s15
 801695e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8016962:	b2d3      	uxtb	r3, r2
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801696a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 801696e:	f7ff fe13 	bl	8016598 <_ZN8touchgfxL10applyNoiseEiihhh>
 8016972:	f824 0b02 	strh.w	r0, [r4], #2
 8016976:	edd5 7a08 	vldr	s15, [r5, #32]
 801697a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801697e:	e7e6      	b.n	801694e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x31e>
 8016980:	f8df b160 	ldr.w	fp, [pc, #352]	; 8016ae4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8016984:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8016988:	42bc      	cmp	r4, r7
 801698a:	d245      	bcs.n	8016a18 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3e8>
 801698c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016990:	68eb      	ldr	r3, [r5, #12]
 8016992:	f8b4 e000 	ldrh.w	lr, [r4]
 8016996:	ee17 2a90 	vmov	r2, s15
 801699a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801699e:	0e13      	lsrs	r3, r2, #24
 80169a0:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 80169a4:	fb03 f30a 	mul.w	r3, r3, sl
 80169a8:	b289      	uxth	r1, r1
 80169aa:	1c58      	adds	r0, r3, #1
 80169ac:	eb00 2023 	add.w	r0, r0, r3, asr #8
 80169b0:	ea0e 030b 	and.w	r3, lr, fp
 80169b4:	1200      	asrs	r0, r0, #8
 80169b6:	ea6f 0c00 	mvn.w	ip, r0
 80169ba:	fa5f fc8c 	uxtb.w	ip, ip
 80169be:	fb0c f303 	mul.w	r3, ip, r3
 80169c2:	fb00 3101 	mla	r1, r0, r1, r3
 80169c6:	fb91 f1f9 	sdiv	r1, r1, r9
 80169ca:	ea01 030b 	and.w	r3, r1, fp
 80169ce:	9302      	str	r3, [sp, #8]
 80169d0:	0953      	lsrs	r3, r2, #5
 80169d2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80169d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80169da:	4619      	mov	r1, r3
 80169dc:	f40e 63fc 	and.w	r3, lr, #2016	; 0x7e0
 80169e0:	f00e 0e1f 	and.w	lr, lr, #31
 80169e4:	fb0c f303 	mul.w	r3, ip, r3
 80169e8:	fb0c fc0e 	mul.w	ip, ip, lr
 80169ec:	fb00 3301 	mla	r3, r0, r1, r3
 80169f0:	9902      	ldr	r1, [sp, #8]
 80169f2:	fb00 c002 	mla	r0, r0, r2, ip
 80169f6:	fb93 f3f9 	sdiv	r3, r3, r9
 80169fa:	fb90 f0f9 	sdiv	r0, r0, r9
 80169fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016a02:	f000 001f 	and.w	r0, r0, #31
 8016a06:	4319      	orrs	r1, r3
 8016a08:	4301      	orrs	r1, r0
 8016a0a:	f824 1b02 	strh.w	r1, [r4], #2
 8016a0e:	edd5 7a08 	vldr	s15, [r5, #32]
 8016a12:	ee38 8a27 	vadd.f32	s16, s16, s15
 8016a16:	e7b7      	b.n	8016988 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x358>
 8016a18:	4546      	cmp	r6, r8
 8016a1a:	dd59      	ble.n	8016ad0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8016a1c:	edd5 7a08 	vldr	s15, [r5, #32]
 8016a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8016a24:	68ea      	ldr	r2, [r5, #12]
 8016a26:	eba6 0608 	sub.w	r6, r6, r8
 8016a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a2e:	7c29      	ldrb	r1, [r5, #16]
 8016a30:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8016a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a38:	bfd8      	it	le
 8016a3a:	2300      	movle	r3, #0
 8016a3c:	58d2      	ldr	r2, [r2, r3]
 8016a3e:	0a10      	lsrs	r0, r2, #8
 8016a40:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 8016a44:	0953      	lsrs	r3, r2, #5
 8016a46:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8016a4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016a4e:	b159      	cbz	r1, 8016a68 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8016a50:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016a54:	d108      	bne.n	8016a68 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8016a56:	4318      	orrs	r0, r3
 8016a58:	4338      	orrs	r0, r7
 8016a5a:	42b4      	cmp	r4, r6
 8016a5c:	d238      	bcs.n	8016ad0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8016a5e:	f824 0b02 	strh.w	r0, [r4], #2
 8016a62:	e7fa      	b.n	8016a5a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42a>
 8016a64:	46b8      	mov	r8, r7
 8016a66:	e7d9      	b.n	8016a1c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8016a68:	0e12      	lsrs	r2, r2, #24
 8016a6a:	f8df c078 	ldr.w	ip, [pc, #120]	; 8016ae4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8016a6e:	fb02 f10a 	mul.w	r1, r2, sl
 8016a72:	1c4a      	adds	r2, r1, #1
 8016a74:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8016a78:	1212      	asrs	r2, r2, #8
 8016a7a:	fb02 f507 	mul.w	r5, r2, r7
 8016a7e:	27ff      	movs	r7, #255	; 0xff
 8016a80:	4350      	muls	r0, r2
 8016a82:	4353      	muls	r3, r2
 8016a84:	43d2      	mvns	r2, r2
 8016a86:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8016a8a:	42b4      	cmp	r4, r6
 8016a8c:	d220      	bcs.n	8016ad0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8016a8e:	f8b4 e000 	ldrh.w	lr, [r4]
 8016a92:	ea0e 010c 	and.w	r1, lr, ip
 8016a96:	f40e 68fc 	and.w	r8, lr, #2016	; 0x7e0
 8016a9a:	f00e 0e1f 	and.w	lr, lr, #31
 8016a9e:	fb02 0101 	mla	r1, r2, r1, r0
 8016aa2:	fb02 3808 	mla	r8, r2, r8, r3
 8016aa6:	fb02 5e0e 	mla	lr, r2, lr, r5
 8016aaa:	fb91 f1f7 	sdiv	r1, r1, r7
 8016aae:	fb98 f8f7 	sdiv	r8, r8, r7
 8016ab2:	fb9e fef7 	sdiv	lr, lr, r7
 8016ab6:	ea01 010c 	and.w	r1, r1, ip
 8016aba:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016abe:	f00e 0e1f 	and.w	lr, lr, #31
 8016ac2:	ea41 0108 	orr.w	r1, r1, r8
 8016ac6:	ea41 010e 	orr.w	r1, r1, lr
 8016aca:	f824 1b02 	strh.w	r1, [r4], #2
 8016ace:	e7dc      	b.n	8016a8a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x45a>
 8016ad0:	b007      	add	sp, #28
 8016ad2:	ecbd 8b02 	vpop	{d8}
 8016ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ada:	bf00      	nop
 8016adc:	00000000 	.word	0x00000000
 8016ae0:	447ffffe 	.word	0x447ffffe
 8016ae4:	fffff800 	.word	0xfffff800

08016ae8 <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 8016ae8:	4770      	bx	lr

08016aea <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 8016aea:	4770      	bx	lr

08016aec <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 8016aec:	b510      	push	{r4, lr}
 8016aee:	4604      	mov	r4, r0
 8016af0:	2124      	movs	r1, #36	; 0x24
 8016af2:	f007 fa41 	bl	801df78 <_ZdlPvj>
 8016af6:	4620      	mov	r0, r4
 8016af8:	bd10      	pop	{r4, pc}
	...

08016afc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8016afc:	094a      	lsrs	r2, r1, #5
 8016afe:	4b06      	ldr	r3, [pc, #24]	; (8016b18 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8016b00:	60c1      	str	r1, [r0, #12]
 8016b02:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8016b06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8016b0a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8016b0e:	4313      	orrs	r3, r2
 8016b10:	4319      	orrs	r1, r3
 8016b12:	8201      	strh	r1, [r0, #16]
 8016b14:	4770      	bx	lr
 8016b16:	bf00      	nop
 8016b18:	fffff800 	.word	0xfffff800

08016b1c <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8016b1c:	f1a0 0008 	sub.w	r0, r0, #8
 8016b20:	e7ec      	b.n	8016afc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8016b22:	bf00      	nop

08016b24 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8016b24:	b508      	push	{r3, lr}
 8016b26:	4b05      	ldr	r3, [pc, #20]	; (8016b3c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8016b28:	6818      	ldr	r0, [r3, #0]
 8016b2a:	6803      	ldr	r3, [r0, #0]
 8016b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016b30:	4798      	blx	r3
 8016b32:	1e43      	subs	r3, r0, #1
 8016b34:	4258      	negs	r0, r3
 8016b36:	4158      	adcs	r0, r3
 8016b38:	bd08      	pop	{r3, pc}
 8016b3a:	bf00      	nop
 8016b3c:	20014690 	.word	0x20014690

08016b40 <_ZN8touchgfx13PainterRGB565D1Ev>:
 8016b40:	4770      	bx	lr

08016b42 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8016b42:	3808      	subs	r0, #8
 8016b44:	4770      	bx	lr

08016b46 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8016b46:	b430      	push	{r4, r5}
 8016b48:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8016b4c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8016b50:	8a02      	ldrh	r2, [r0, #16]
 8016b52:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016b56:	4629      	mov	r1, r5
 8016b58:	9202      	str	r2, [sp, #8]
 8016b5a:	68c2      	ldr	r2, [r0, #12]
 8016b5c:	4620      	mov	r0, r4
 8016b5e:	bc30      	pop	{r4, r5}
 8016b60:	f7eb bce6 	b.w	8002530 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08016b64 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8016b64:	f7eb bcda 	b.w	800251c <_ZN8touchgfx5paint8tearDownEv>

08016b68 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8016b68:	b510      	push	{r4, lr}
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	2114      	movs	r1, #20
 8016b6e:	f007 fa03 	bl	801df78 <_ZdlPvj>
 8016b72:	4620      	mov	r0, r4
 8016b74:	bd10      	pop	{r4, pc}

08016b76 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8016b76:	f1a0 0008 	sub.w	r0, r0, #8
 8016b7a:	e7f5      	b.n	8016b68 <_ZN8touchgfx13PainterRGB565D0Ev>

08016b7c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016b80:	8503      	strh	r3, [r0, #40]	; 0x28
 8016b82:	8543      	strh	r3, [r0, #42]	; 0x2a
 8016b84:	8583      	strh	r3, [r0, #44]	; 0x2c
 8016b86:	6980      	ldr	r0, [r0, #24]
 8016b88:	b110      	cbz	r0, 8016b90 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8016b8a:	6803      	ldr	r3, [r0, #0]
 8016b8c:	691b      	ldr	r3, [r3, #16]
 8016b8e:	4718      	bx	r3
 8016b90:	4770      	bx	lr

08016b92 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8016b92:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
 8016b96:	4770      	bx	lr

08016b98 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8016b98:	b538      	push	{r3, r4, r5, lr}
 8016b9a:	0e0b      	lsrs	r3, r1, #24
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	460d      	mov	r5, r1
 8016ba0:	7783      	strb	r3, [r0, #30]
 8016ba2:	6803      	ldr	r3, [r0, #0]
 8016ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ba6:	4798      	blx	r3
 8016ba8:	6803      	ldr	r3, [r0, #0]
 8016baa:	4629      	mov	r1, r5
 8016bac:	689b      	ldr	r3, [r3, #8]
 8016bae:	4798      	blx	r3
 8016bb0:	6823      	ldr	r3, [r4, #0]
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bb6:	4798      	blx	r3
 8016bb8:	61a0      	str	r0, [r4, #24]
 8016bba:	bd38      	pop	{r3, r4, r5, pc}

08016bbc <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8016bbc:	7741      	strb	r1, [r0, #29]
 8016bbe:	4770      	bx	lr

08016bc0 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8016bc0:	b530      	push	{r4, r5, lr}
 8016bc2:	460d      	mov	r5, r1
 8016bc4:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8016bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016bd0:	682b      	ldr	r3, [r5, #0]
 8016bd2:	6023      	str	r3, [r4, #0]
 8016bd4:	bd30      	pop	{r4, r5, pc}

08016bd6 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8016bd6:	b538      	push	{r3, r4, r5, lr}
 8016bd8:	4604      	mov	r4, r0
 8016bda:	1d03      	adds	r3, r0, #4
 8016bdc:	6808      	ldr	r0, [r1, #0]
 8016bde:	2500      	movs	r5, #0
 8016be0:	6849      	ldr	r1, [r1, #4]
 8016be2:	c303      	stmia	r3!, {r0, r1}
 8016be4:	6813      	ldr	r3, [r2, #0]
 8016be6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8016bea:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8016bee:	6853      	ldr	r3, [r2, #4]
 8016bf0:	61a5      	str	r5, [r4, #24]
 8016bf2:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8016bf6:	f003 fa57 	bl	801a0a8 <_ZN8touchgfx9Matrix3x35resetEv>
 8016bfa:	23ff      	movs	r3, #255	; 0xff
 8016bfc:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8016c00:	7763      	strb	r3, [r4, #29]
 8016c02:	77a3      	strb	r3, [r4, #30]
 8016c04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016c08:	6323      	str	r3, [r4, #48]	; 0x30
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8016c10:	bd38      	pop	{r3, r4, r5, pc}
	...

08016c14 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8016c14:	ee70 7a41 	vsub.f32	s15, s0, s2
 8016c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016c20:	4605      	mov	r5, r0
 8016c22:	ed2d 8b0a 	vpush	{d8-d12}
 8016c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c2a:	b086      	sub	sp, #24
 8016c2c:	eeb0 ba40 	vmov.f32	s22, s0
 8016c30:	6802      	ldr	r2, [r0, #0]
 8016c32:	eef0 ba60 	vmov.f32	s23, s1
 8016c36:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 8016c3a:	eef0 aa41 	vmov.f32	s21, s2
 8016c3e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016c40:	eeb0 aa61 	vmov.f32	s20, s3
 8016c44:	eeb0 ca42 	vmov.f32	s24, s4
 8016c48:	eef0 ca62 	vmov.f32	s25, s5
 8016c4c:	d112      	bne.n	8016c74 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8016c4e:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8016c52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c5a:	d10b      	bne.n	8016c74 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8016c5c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8016c60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8016c62:	3901      	subs	r1, #1
 8016c64:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8016c68:	b006      	add	sp, #24
 8016c6a:	ecbd 8b0a 	vpop	{d8-d12}
 8016c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c72:	4710      	bx	r2
 8016c74:	23ff      	movs	r3, #255	; 0xff
 8016c76:	4628      	mov	r0, r5
 8016c78:	f105 0834 	add.w	r8, r5, #52	; 0x34
 8016c7c:	77ab      	strb	r3, [r5, #30]
 8016c7e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8016c80:	4798      	blx	r3
 8016c82:	eeb0 0a4b 	vmov.f32	s0, s22
 8016c86:	eef0 0a6b 	vmov.f32	s1, s23
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	4640      	mov	r0, r8
 8016c8e:	f003 faba 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016c92:	eef0 8a40 	vmov.f32	s17, s0
 8016c96:	ed8d 0a00 	vstr	s0, [sp]
 8016c9a:	eeb0 0a6a 	vmov.f32	s0, s21
 8016c9e:	eef0 9a60 	vmov.f32	s19, s1
 8016ca2:	edcd 0a01 	vstr	s1, [sp, #4]
 8016ca6:	4640      	mov	r0, r8
 8016ca8:	eef0 0a4a 	vmov.f32	s1, s20
 8016cac:	f003 faab 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016cb0:	eef4 8a40 	vcmp.f32	s17, s0
 8016cb4:	eeb0 8a40 	vmov.f32	s16, s0
 8016cb8:	ed8d 0a02 	vstr	s0, [sp, #8]
 8016cbc:	eeb0 9a60 	vmov.f32	s18, s1
 8016cc0:	edcd 0a03 	vstr	s1, [sp, #12]
 8016cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc8:	eef4 9a60 	vcmp.f32	s19, s1
 8016ccc:	bf0c      	ite	eq
 8016cce:	2301      	moveq	r3, #1
 8016cd0:	2300      	movne	r3, #0
 8016cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cd6:	eef4 8a40 	vcmp.f32	s17, s0
 8016cda:	7463      	strb	r3, [r4, #17]
 8016cdc:	bf0c      	ite	eq
 8016cde:	2301      	moveq	r3, #1
 8016ce0:	2300      	movne	r3, #0
 8016ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce6:	74a3      	strb	r3, [r4, #18]
 8016ce8:	d024      	beq.n	8016d34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8016cea:	eef4 9a60 	vcmp.f32	s19, s1
 8016cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf2:	d01f      	beq.n	8016d34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8016cf4:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8016cf8:	4640      	mov	r0, r8
 8016cfa:	ee7a aacb 	vsub.f32	s21, s21, s22
 8016cfe:	eeb0 0a4b 	vmov.f32	s0, s22
 8016d02:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8016d06:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8016d0a:	eef0 0a6b 	vmov.f32	s1, s23
 8016d0e:	eea7 0acc 	vfms.f32	s0, s15, s24
 8016d12:	eeec 0a87 	vfma.f32	s1, s25, s14
 8016d16:	f003 fa76 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016d1a:	ed8d 0a04 	vstr	s0, [sp, #16]
 8016d1e:	ee30 0a68 	vsub.f32	s0, s0, s17
 8016d22:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016d26:	edcd 0a05 	vstr	s1, [sp, #20]
 8016d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d2e:	d121      	bne.n	8016d74 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8016d30:	2301      	movs	r3, #1
 8016d32:	74a3      	strb	r3, [r4, #18]
 8016d34:	7c63      	ldrb	r3, [r4, #17]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d051      	beq.n	8016dde <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8016d3a:	ee39 7a69 	vsub.f32	s14, s18, s19
 8016d3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016e34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8016d42:	eef4 9ac9 	vcmpe.f32	s19, s18
 8016d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d4e:	edc4 7a08 	vstr	s15, [r4, #32]
 8016d52:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8016d56:	ee17 3a90 	vmov	r3, s15
 8016d5a:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8016d5e:	b21a      	sxth	r2, r3
 8016d60:	ee17 3a90 	vmov	r3, s15
 8016d64:	bf48      	it	mi
 8016d66:	8122      	strhmi	r2, [r4, #8]
 8016d68:	b21b      	sxth	r3, r3
 8016d6a:	bf56      	itet	pl
 8016d6c:	80e2      	strhpl	r2, [r4, #6]
 8016d6e:	80e3      	strhmi	r3, [r4, #6]
 8016d70:	8123      	strhpl	r3, [r4, #8]
 8016d72:	e02c      	b.n	8016dce <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8016d74:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8016d78:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8016d7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016d80:	edc4 7a05 	vstr	s15, [r4, #20]
 8016d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d88:	d102      	bne.n	8016d90 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8016d8a:	2301      	movs	r3, #1
 8016d8c:	7463      	strb	r3, [r4, #17]
 8016d8e:	e7d1      	b.n	8016d34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8016d90:	eeb0 7a69 	vmov.f32	s14, s19
 8016d94:	ee39 9a69 	vsub.f32	s18, s18, s19
 8016d98:	ee38 8a68 	vsub.f32	s16, s16, s17
 8016d9c:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8016da0:	ed84 7a06 	vstr	s14, [r4, #24]
 8016da4:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8016da8:	ee38 8a47 	vsub.f32	s16, s16, s14
 8016dac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8016e38 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8016db0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8016db4:	ed84 8a07 	vstr	s16, [r4, #28]
 8016db8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc0:	edc4 7a08 	vstr	s15, [r4, #32]
 8016dc4:	d503      	bpl.n	8016dce <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8016dc6:	eeb1 8a48 	vneg.f32	s16, s16
 8016dca:	ed84 8a07 	vstr	s16, [r4, #28]
 8016dce:	60e7      	str	r7, [r4, #12]
 8016dd0:	7426      	strb	r6, [r4, #16]
 8016dd2:	61ac      	str	r4, [r5, #24]
 8016dd4:	b006      	add	sp, #24
 8016dd6:	ecbd 8b0a 	vpop	{d8-d12}
 8016dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dde:	7ca3      	ldrb	r3, [r4, #18]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d0f4      	beq.n	8016dce <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8016de4:	ee38 7a68 	vsub.f32	s14, s16, s17
 8016de8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8016e34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8016dec:	eef4 8ac8 	vcmpe.f32	s17, s16
 8016df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df8:	edc4 7a08 	vstr	s15, [r4, #32]
 8016dfc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016e00:	ee17 3a90 	vmov	r3, s15
 8016e04:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8016e08:	b21a      	sxth	r2, r3
 8016e0a:	ee17 3a90 	vmov	r3, s15
 8016e0e:	bf48      	it	mi
 8016e10:	8122      	strhmi	r2, [r4, #8]
 8016e12:	b21b      	sxth	r3, r3
 8016e14:	bf56      	itet	pl
 8016e16:	80e2      	strhpl	r2, [r4, #6]
 8016e18:	80e3      	strhmi	r3, [r4, #6]
 8016e1a:	8123      	strhpl	r3, [r4, #8]
 8016e1c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016e20:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016e24:	1a9b      	subs	r3, r3, r2
 8016e26:	ee07 3a90 	vmov	s15, r3
 8016e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e2e:	edc4 7a07 	vstr	s15, [r4, #28]
 8016e32:	e7cc      	b.n	8016dce <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8016e34:	447ffffe 	.word	0x447ffffe
 8016e38:	44800000 	.word	0x44800000

08016e3c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8016e3c:	b510      	push	{r4, lr}
 8016e3e:	ed2d 8b02 	vpush	{d8}
 8016e42:	eef0 8a62 	vmov.f32	s17, s5
 8016e46:	2100      	movs	r1, #0
 8016e48:	4604      	mov	r4, r0
 8016e4a:	eeb0 8a42 	vmov.f32	s16, s4
 8016e4e:	f006 fe29 	bl	801daa4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8016e52:	eef0 7a68 	vmov.f32	s15, s17
 8016e56:	6823      	ldr	r3, [r4, #0]
 8016e58:	4620      	mov	r0, r4
 8016e5a:	689b      	ldr	r3, [r3, #8]
 8016e5c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016e60:	ee17 2a90 	vmov	r2, s15
 8016e64:	eef0 7a48 	vmov.f32	s15, s16
 8016e68:	ecbd 8b02 	vpop	{d8}
 8016e6c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e74:	ee17 1a90 	vmov	r1, s15
 8016e78:	4718      	bx	r3

08016e7a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8016e7a:	b510      	push	{r4, lr}
 8016e7c:	ed2d 8b02 	vpush	{d8}
 8016e80:	eef0 8a63 	vmov.f32	s17, s7
 8016e84:	2100      	movs	r1, #0
 8016e86:	4604      	mov	r4, r0
 8016e88:	eeb0 8a43 	vmov.f32	s16, s6
 8016e8c:	f006 fecc 	bl	801dc28 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8016e90:	eef0 7a68 	vmov.f32	s15, s17
 8016e94:	6823      	ldr	r3, [r4, #0]
 8016e96:	4620      	mov	r0, r4
 8016e98:	689b      	ldr	r3, [r3, #8]
 8016e9a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016e9e:	ee17 2a90 	vmov	r2, s15
 8016ea2:	eef0 7a48 	vmov.f32	s15, s16
 8016ea6:	ecbd 8b02 	vpop	{d8}
 8016eaa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016eb2:	ee17 1a90 	vmov	r1, s15
 8016eb6:	4718      	bx	r3

08016eb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8016eb8:	b513      	push	{r0, r1, r4, lr}
 8016eba:	4604      	mov	r4, r0
 8016ebc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8016ebe:	f003 f9a2 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016ec2:	eef0 7a60 	vmov.f32	s15, s1
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016ecc:	ee17 2a90 	vmov	r2, s15
 8016ed0:	eef0 7a40 	vmov.f32	s15, s0
 8016ed4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016ed8:	ee17 1a90 	vmov	r1, s15
 8016edc:	b002      	add	sp, #8
 8016ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ee2:	f006 bd39 	b.w	801d958 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8016ee6:	b513      	push	{r0, r1, r4, lr}
 8016ee8:	4604      	mov	r4, r0
 8016eea:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8016eec:	f003 f98b 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016ef0:	eef0 7a60 	vmov.f32	s15, s1
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016efa:	ee17 2a90 	vmov	r2, s15
 8016efe:	eef0 7a40 	vmov.f32	s15, s0
 8016f02:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016f06:	ee17 1a90 	vmov	r1, s15
 8016f0a:	b002      	add	sp, #8
 8016f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f10:	f006 bd6f 	b.w	801d9f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08016f14 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8016f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f16:	2400      	movs	r4, #0
 8016f18:	9f07      	ldr	r7, [sp, #28]
 8016f1a:	f04f 0e01 	mov.w	lr, #1
 8016f1e:	4626      	mov	r6, r4
 8016f20:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8016f24:	4463      	add	r3, ip
 8016f26:	4563      	cmp	r3, ip
 8016f28:	d02d      	beq.n	8016f86 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8016f2a:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8016f2e:	2d06      	cmp	r5, #6
 8016f30:	d8f9      	bhi.n	8016f26 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016f32:	fa0e f505 	lsl.w	r5, lr, r5
 8016f36:	f015 0f66 	tst.w	r5, #102	; 0x66
 8016f3a:	d10d      	bne.n	8016f58 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8016f3c:	f015 0f10 	tst.w	r5, #16
 8016f40:	d117      	bne.n	8016f72 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8016f42:	072d      	lsls	r5, r5, #28
 8016f44:	d5ef      	bpl.n	8016f26 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016f46:	3801      	subs	r0, #1
 8016f48:	b91e      	cbnz	r6, 8016f52 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8016f4a:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8016f4e:	682d      	ldr	r5, [r5, #0]
 8016f50:	600d      	str	r5, [r1, #0]
 8016f52:	b96c      	cbnz	r4, 8016f70 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016f54:	2601      	movs	r6, #1
 8016f56:	e7e6      	b.n	8016f26 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016f58:	b926      	cbnz	r6, 8016f64 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8016f5a:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8016f5e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8016f62:	600b      	str	r3, [r1, #0]
 8016f64:	b924      	cbnz	r4, 8016f70 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016f66:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8016f6a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016f6e:	6013      	str	r3, [r2, #0]
 8016f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f72:	3801      	subs	r0, #1
 8016f74:	b91c      	cbnz	r4, 8016f7e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8016f76:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8016f7a:	6824      	ldr	r4, [r4, #0]
 8016f7c:	6014      	str	r4, [r2, #0]
 8016f7e:	2e00      	cmp	r6, #0
 8016f80:	d1f6      	bne.n	8016f70 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016f82:	2401      	movs	r4, #1
 8016f84:	e7cf      	b.n	8016f26 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016f86:	b90e      	cbnz	r6, 8016f8c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8016f88:	2300      	movs	r3, #0
 8016f8a:	600b      	str	r3, [r1, #0]
 8016f8c:	2c00      	cmp	r4, #0
 8016f8e:	d1ef      	bne.n	8016f70 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016f90:	2300      	movs	r3, #0
 8016f92:	e7ec      	b.n	8016f6e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08016f94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8016f94:	b538      	push	{r3, r4, r5, lr}
 8016f96:	ed2d 8b0a 	vpush	{d8-d12}
 8016f9a:	eef0 ba40 	vmov.f32	s23, s0
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	eeb0 ca60 	vmov.f32	s24, s1
 8016fa4:	460d      	mov	r5, r1
 8016fa6:	eef0 aa41 	vmov.f32	s21, s2
 8016faa:	eeb0 ba61 	vmov.f32	s22, s3
 8016fae:	eeb0 9a42 	vmov.f32	s18, s4
 8016fb2:	eef0 9a62 	vmov.f32	s19, s5
 8016fb6:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8016fba:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8016fbe:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8016fc2:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8016fc6:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8016fca:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8016fce:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8016fd2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016fd6:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8016fda:	f006 fff7 	bl	801dfcc <sqrtf>
 8016fde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fe6:	d12e      	bne.n	8017046 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8016fe8:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8016fec:	ee39 7acb 	vsub.f32	s14, s19, s22
 8016ff0:	eeb0 8a6a 	vmov.f32	s16, s21
 8016ff4:	eef0 8a4b 	vmov.f32	s17, s22
 8016ff8:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8016ffc:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8017000:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8017004:	eee7 8aca 	vfms.f32	s17, s15, s20
 8017008:	2d02      	cmp	r5, #2
 801700a:	dc2f      	bgt.n	801706c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 801700c:	3501      	adds	r5, #1
 801700e:	eef0 1a4b 	vmov.f32	s3, s22
 8017012:	eeb0 1a6a 	vmov.f32	s2, s21
 8017016:	4620      	mov	r0, r4
 8017018:	4629      	mov	r1, r5
 801701a:	eef0 2a68 	vmov.f32	s5, s17
 801701e:	eeb0 2a48 	vmov.f32	s4, s16
 8017022:	eef0 0a4c 	vmov.f32	s1, s24
 8017026:	eeb0 0a6b 	vmov.f32	s0, s23
 801702a:	f7ff ffb3 	bl	8016f94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801702e:	eef0 0a68 	vmov.f32	s1, s17
 8017032:	eeb0 0a48 	vmov.f32	s0, s16
 8017036:	4620      	mov	r0, r4
 8017038:	f7ff ff55 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801703c:	eeb0 ba68 	vmov.f32	s22, s17
 8017040:	eef0 aa48 	vmov.f32	s21, s16
 8017044:	e7b9      	b.n	8016fba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8017046:	ee38 8a6b 	vsub.f32	s16, s16, s23
 801704a:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 801704e:	ee78 8acc 	vsub.f32	s17, s17, s24
 8017052:	ee28 7a27 	vmul.f32	s14, s16, s15
 8017056:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801705a:	ee87 8a00 	vdiv.f32	s16, s14, s0
 801705e:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8017062:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8017066:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801706a:	e7cd      	b.n	8017008 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 801706c:	eef0 0a68 	vmov.f32	s1, s17
 8017070:	4620      	mov	r0, r4
 8017072:	eeb0 0a48 	vmov.f32	s0, s16
 8017076:	f7ff ff36 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801707a:	ecbd 8b0a 	vpop	{d8-d12}
 801707e:	bd38      	pop	{r3, r4, r5, pc}

08017080 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8017080:	b510      	push	{r4, lr}
 8017082:	ed2d 8b0a 	vpush	{d8-d12}
 8017086:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 801708a:	4604      	mov	r4, r0
 801708c:	eeb0 ca40 	vmov.f32	s24, s0
 8017090:	2b02      	cmp	r3, #2
 8017092:	eeb0 9a60 	vmov.f32	s18, s1
 8017096:	eef0 9a41 	vmov.f32	s19, s2
 801709a:	eef0 8a61 	vmov.f32	s17, s3
 801709e:	eeb0 ba42 	vmov.f32	s22, s4
 80170a2:	eef0 ba62 	vmov.f32	s23, s5
 80170a6:	eeb0 aa43 	vmov.f32	s20, s6
 80170aa:	eef0 aa63 	vmov.f32	s21, s7
 80170ae:	eeb0 8a44 	vmov.f32	s16, s8
 80170b2:	eef0 ca64 	vmov.f32	s25, s9
 80170b6:	d12c      	bne.n	8017112 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80170b8:	eef0 0a62 	vmov.f32	s1, s5
 80170bc:	eeb0 0a42 	vmov.f32	s0, s4
 80170c0:	f7ff ff11 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80170c4:	ee79 9acb 	vsub.f32	s19, s19, s22
 80170c8:	ee7a caec 	vsub.f32	s25, s21, s25
 80170cc:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80170d0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80170d4:	ee69 9aac 	vmul.f32	s19, s19, s25
 80170d8:	ee28 8a88 	vmul.f32	s16, s17, s16
 80170dc:	eef4 9ac8 	vcmpe.f32	s19, s16
 80170e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170e4:	db0f      	blt.n	8017106 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80170e6:	2101      	movs	r1, #1
 80170e8:	eef0 2a6a 	vmov.f32	s5, s21
 80170ec:	eeb0 2a4a 	vmov.f32	s4, s20
 80170f0:	4620      	mov	r0, r4
 80170f2:	eef0 1a6b 	vmov.f32	s3, s23
 80170f6:	eeb0 1a4b 	vmov.f32	s2, s22
 80170fa:	eef0 0a49 	vmov.f32	s1, s18
 80170fe:	eeb0 0a4c 	vmov.f32	s0, s24
 8017102:	f7ff ff47 	bl	8016f94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8017106:	eef0 0a6a 	vmov.f32	s1, s21
 801710a:	4620      	mov	r0, r4
 801710c:	eeb0 0a4a 	vmov.f32	s0, s20
 8017110:	e035      	b.n	801717e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8017112:	2b01      	cmp	r3, #1
 8017114:	d138      	bne.n	8017188 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8017116:	ee31 4ae2 	vsub.f32	s8, s3, s5
 801711a:	ee33 6a48 	vsub.f32	s12, s6, s16
 801711e:	ee71 7a42 	vsub.f32	s15, s2, s4
 8017122:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8017126:	ee26 7a44 	vnmul.f32	s14, s12, s8
 801712a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801712e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017136:	d027      	beq.n	8017188 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8017138:	ee28 8a63 	vnmul.f32	s16, s16, s7
 801713c:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8017140:	eea4 8a83 	vfma.f32	s16, s9, s6
 8017144:	eee1 8a22 	vfma.f32	s17, s2, s5
 8017148:	ee68 7a67 	vnmul.f32	s15, s16, s15
 801714c:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8017150:	eee6 7a28 	vfma.f32	s15, s12, s17
 8017154:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8017158:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801715c:	edd0 7a20 	vldr	s15, [r0, #128]	; 0x80
 8017160:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8017164:	ee3c ca40 	vsub.f32	s24, s24, s0
 8017168:	ee39 9a60 	vsub.f32	s18, s18, s1
 801716c:	ee29 9a09 	vmul.f32	s18, s18, s18
 8017170:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8017174:	eef4 7ac9 	vcmpe.f32	s15, s18
 8017178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801717c:	db04      	blt.n	8017188 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801717e:	f7ff feb2 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017182:	ecbd 8b0a 	vpop	{d8-d12}
 8017186:	bd10      	pop	{r4, pc}
 8017188:	eef0 0a6b 	vmov.f32	s1, s23
 801718c:	4620      	mov	r0, r4
 801718e:	eeb0 0a4b 	vmov.f32	s0, s22
 8017192:	f7ff fea8 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017196:	e7b6      	b.n	8017106 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08017198 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8017198:	b510      	push	{r4, lr}
 801719a:	ed2d 8b0c 	vpush	{d8-d13}
 801719e:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
 80171a2:	4604      	mov	r4, r0
 80171a4:	eeb0 9a40 	vmov.f32	s18, s0
 80171a8:	eef0 9a60 	vmov.f32	s19, s1
 80171ac:	eef0 aa41 	vmov.f32	s21, s2
 80171b0:	eeb0 ba61 	vmov.f32	s22, s3
 80171b4:	b933      	cbnz	r3, 80171c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 80171b6:	f7ff fe96 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80171ba:	eef0 0a4b 	vmov.f32	s1, s22
 80171be:	eeb0 0a6a 	vmov.f32	s0, s21
 80171c2:	e015      	b.n	80171f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 80171c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80171c8:	2b02      	cmp	r3, #2
 80171ca:	ee71 8a40 	vsub.f32	s17, s2, s0
 80171ce:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80171d2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80171d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80171da:	d10f      	bne.n	80171fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80171dc:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80171e0:	ee30 0a08 	vadd.f32	s0, s0, s16
 80171e4:	f7ff fe7f 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80171e8:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80171ec:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80171f0:	4620      	mov	r0, r4
 80171f2:	f7ff fe78 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80171f6:	ecbd 8b0c 	vpop	{d8-d13}
 80171fa:	bd10      	pop	{r4, pc}
 80171fc:	f7ff fe73 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017200:	eef0 0a69 	vmov.f32	s1, s19
 8017204:	eeb0 0a49 	vmov.f32	s0, s18
 8017208:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8017338 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 801720c:	eeb1 aa68 	vneg.f32	s20, s17
 8017210:	eddf ba4a 	vldr	s23, [pc, #296]	; 801733c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8017214:	eee8 0a27 	vfma.f32	s1, s16, s15
 8017218:	4620      	mov	r0, r4
 801721a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801721e:	ed9f ca48 	vldr	s24, [pc, #288]	; 8017340 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8017222:	eddf ca48 	vldr	s25, [pc, #288]	; 8017344 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8017226:	ed9f da48 	vldr	s26, [pc, #288]	; 8017348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 801722a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801722e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8017232:	f7ff fe58 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017236:	eef0 0a69 	vmov.f32	s1, s19
 801723a:	eeb0 0a49 	vmov.f32	s0, s18
 801723e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801734c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8017242:	4620      	mov	r0, r4
 8017244:	eee8 0a27 	vfma.f32	s1, s16, s15
 8017248:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801724c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8017250:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8017254:	f7ff fe47 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017258:	eef0 0a69 	vmov.f32	s1, s19
 801725c:	eeb0 0a49 	vmov.f32	s0, s18
 8017260:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8017350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8017264:	4620      	mov	r0, r4
 8017266:	eee8 0a27 	vfma.f32	s1, s16, s15
 801726a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801726e:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8017272:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8017276:	f7ff fe36 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801727a:	eef0 0a69 	vmov.f32	s1, s19
 801727e:	eeb0 0a49 	vmov.f32	s0, s18
 8017282:	eddf 7a34 	vldr	s15, [pc, #208]	; 8017354 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8017286:	4620      	mov	r0, r4
 8017288:	eee8 0a27 	vfma.f32	s1, s16, s15
 801728c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8017290:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8017294:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8017298:	f7ff fe25 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801729c:	ee79 0a88 	vadd.f32	s1, s19, s16
 80172a0:	ee39 0a28 	vadd.f32	s0, s18, s17
 80172a4:	4620      	mov	r0, r4
 80172a6:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80172aa:	ee30 0a08 	vadd.f32	s0, s0, s16
 80172ae:	f7ff fe1a 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80172b2:	eef0 0a69 	vmov.f32	s1, s19
 80172b6:	eeb0 0a49 	vmov.f32	s0, s18
 80172ba:	eddf 7a27 	vldr	s15, [pc, #156]	; 8017358 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80172be:	4620      	mov	r0, r4
 80172c0:	eee8 0a27 	vfma.f32	s1, s16, s15
 80172c4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80172c8:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80172cc:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80172d0:	f7ff fe09 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80172d4:	eef0 0a69 	vmov.f32	s1, s19
 80172d8:	eeb0 0a49 	vmov.f32	s0, s18
 80172dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801735c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80172e0:	4620      	mov	r0, r4
 80172e2:	eee8 0a27 	vfma.f32	s1, s16, s15
 80172e6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80172ea:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80172ee:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80172f2:	f7ff fdf8 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80172f6:	eef0 0a69 	vmov.f32	s1, s19
 80172fa:	eeb0 0a49 	vmov.f32	s0, s18
 80172fe:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017360 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8017302:	4620      	mov	r0, r4
 8017304:	eee8 0a27 	vfma.f32	s1, s16, s15
 8017308:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801730c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8017310:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8017314:	f7ff fde7 	bl	8016ee6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017318:	eef0 0a69 	vmov.f32	s1, s19
 801731c:	eeb0 0a49 	vmov.f32	s0, s18
 8017320:	eddf 7a10 	vldr	s15, [pc, #64]	; 8017364 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8017324:	4620      	mov	r0, r4
 8017326:	eee8 0a27 	vfma.f32	s1, s16, s15
 801732a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801732e:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8017332:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8017336:	e73e      	b.n	80171b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8017338:	3d23d70a 	.word	0x3d23d70a
 801733c:	3e8f5c29 	.word	0x3e8f5c29
 8017340:	3f19999a 	.word	0x3f19999a
 8017344:	3f4ccccd 	.word	0x3f4ccccd
 8017348:	3f75c28f 	.word	0x3f75c28f
 801734c:	3e4ccccd 	.word	0x3e4ccccd
 8017350:	3ecccccd 	.word	0x3ecccccd
 8017354:	3f3851ec 	.word	0x3f3851ec
 8017358:	3fa3d70a 	.word	0x3fa3d70a
 801735c:	3fcccccd 	.word	0x3fcccccd
 8017360:	3fe66666 	.word	0x3fe66666
 8017364:	3ffae148 	.word	0x3ffae148

08017368 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8017368:	b570      	push	{r4, r5, r6, lr}
 801736a:	ed2d 8b06 	vpush	{d8-d10}
 801736e:	ed90 8a23 	vldr	s16, [r0, #140]	; 0x8c
 8017372:	eef0 aa40 	vmov.f32	s21, s0
 8017376:	ed90 9a22 	vldr	s18, [r0, #136]	; 0x88
 801737a:	4604      	mov	r4, r0
 801737c:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8017380:	ee30 9a49 	vsub.f32	s18, s0, s18
 8017384:	eeb0 aa60 	vmov.f32	s20, s1
 8017388:	ee28 0a08 	vmul.f32	s0, s16, s16
 801738c:	eea9 0a09 	vfma.f32	s0, s18, s18
 8017390:	f006 fe1c 	bl	801dfcc <sqrtf>
 8017394:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801739c:	dd36      	ble.n	801740c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 801739e:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 80173a2:	2600      	movs	r6, #0
 80173a4:	edd4 0a23 	vldr	s1, [r4, #140]	; 0x8c
 80173a8:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80173ac:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 80173b0:	ed94 0a22 	vldr	s0, [r4, #136]	; 0x88
 80173b4:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 80173b8:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80173bc:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80173c0:	ee70 9a28 	vadd.f32	s19, s0, s17
 80173c4:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80173c8:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80173cc:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80173d0:	b1fd      	cbz	r5, 8017412 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80173d2:	edc4 9a24 	vstr	s19, [r4, #144]	; 0x90
 80173d6:	eef0 0a49 	vmov.f32	s1, s18
 80173da:	ed84 9a25 	vstr	s18, [r4, #148]	; 0x94
 80173de:	eeb0 0a69 	vmov.f32	s0, s19
 80173e2:	edc4 8a26 	vstr	s17, [r4, #152]	; 0x98
 80173e6:	4620      	mov	r0, r4
 80173e8:	ed84 8a27 	vstr	s16, [r4, #156]	; 0x9c
 80173ec:	f7ff fd64 	bl	8016eb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80173f0:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80173f4:	edc4 9a28 	vstr	s19, [r4, #160]	; 0xa0
 80173f8:	ed84 9a29 	vstr	s18, [r4, #164]	; 0xa4
 80173fc:	edc4 8a2a 	vstr	s17, [r4, #168]	; 0xa8
 8017400:	ed84 8a2b 	vstr	s16, [r4, #172]	; 0xac
 8017404:	edc4 aa22 	vstr	s21, [r4, #136]	; 0x88
 8017408:	ed84 aa23 	vstr	s20, [r4, #140]	; 0x8c
 801740c:	ecbd 8b06 	vpop	{d8-d10}
 8017410:	bd70      	pop	{r4, r5, r6, pc}
 8017412:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8017416:	ed94 2a2a 	vldr	s4, [r4, #168]	; 0xa8
 801741a:	edd4 2a2b 	vldr	s5, [r4, #172]	; 0xac
 801741e:	b16b      	cbz	r3, 801743c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8017420:	eef0 1a49 	vmov.f32	s3, s18
 8017424:	4620      	mov	r0, r4
 8017426:	eeb0 1a69 	vmov.f32	s2, s19
 801742a:	eef0 0a62 	vmov.f32	s1, s5
 801742e:	eeb0 0a42 	vmov.f32	s0, s4
 8017432:	f7ff feb1 	bl	8017198 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8017436:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
 801743a:	e7db      	b.n	80173f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 801743c:	eef0 4a48 	vmov.f32	s9, s16
 8017440:	edd4 1a29 	vldr	s3, [r4, #164]	; 0xa4
 8017444:	eeb0 4a68 	vmov.f32	s8, s17
 8017448:	ed94 1a28 	vldr	s2, [r4, #160]	; 0xa0
 801744c:	eef0 3a49 	vmov.f32	s7, s18
 8017450:	4620      	mov	r0, r4
 8017452:	eeb0 3a69 	vmov.f32	s6, s19
 8017456:	f7ff fe13 	bl	8017080 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801745a:	e7cb      	b.n	80173f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0801745c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 801745c:	ee07 2a90 	vmov	s15, r2
 8017460:	ee07 1a10 	vmov	s14, r1
 8017464:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017468:	eddf 7a04 	vldr	s15, [pc, #16]	; 801747c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 801746c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8017470:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017474:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017478:	f7ff bf76 	b.w	8017368 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801747c:	3d000000 	.word	0x3d000000

08017480 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8017480:	b538      	push	{r3, r4, r5, lr}
 8017482:	ed2d 8b02 	vpush	{d8}
 8017486:	f890 5079 	ldrb.w	r5, [r0, #121]	; 0x79
 801748a:	4604      	mov	r4, r0
 801748c:	b31d      	cbz	r5, 80174d6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 801748e:	edd0 7a1f 	vldr	s15, [r0, #124]	; 0x7c
 8017492:	ed90 8a23 	vldr	s16, [r0, #140]	; 0x8c
 8017496:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 801749a:	ee78 8a67 	vsub.f32	s17, s16, s15
 801749e:	ee38 8a27 	vadd.f32	s16, s16, s15
 80174a2:	eef0 0a68 	vmov.f32	s1, s17
 80174a6:	f7ff fd07 	bl	8016eb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80174aa:	ed94 1a22 	vldr	s2, [r4, #136]	; 0x88
 80174ae:	eef0 1a48 	vmov.f32	s3, s16
 80174b2:	4620      	mov	r0, r4
 80174b4:	eeb0 0a41 	vmov.f32	s0, s2
 80174b8:	eef0 0a68 	vmov.f32	s1, s17
 80174bc:	f7ff fe6c 	bl	8017198 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80174c0:	ed94 1a22 	vldr	s2, [r4, #136]	; 0x88
 80174c4:	eef0 1a68 	vmov.f32	s3, s17
 80174c8:	4620      	mov	r0, r4
 80174ca:	eef0 0a48 	vmov.f32	s1, s16
 80174ce:	eeb0 0a41 	vmov.f32	s0, s2
 80174d2:	f7ff fe61 	bl	8017198 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80174d6:	4628      	mov	r0, r5
 80174d8:	ecbd 8b02 	vpop	{d8}
 80174dc:	bd38      	pop	{r3, r4, r5, pc}

080174de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 80174de:	b510      	push	{r4, lr}
 80174e0:	ed2d 8b02 	vpush	{d8}
 80174e4:	4604      	mov	r4, r0
 80174e6:	eeb0 8a40 	vmov.f32	s16, s0
 80174ea:	eef0 8a60 	vmov.f32	s17, s1
 80174ee:	f7ff ffc7 	bl	8017480 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80174f2:	b9d0      	cbnz	r0, 801752a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80174f4:	4620      	mov	r0, r4
 80174f6:	edd4 4a27 	vldr	s9, [r4, #156]	; 0x9c
 80174fa:	ed94 4a26 	vldr	s8, [r4, #152]	; 0x98
 80174fe:	eef0 0a68 	vmov.f32	s1, s17
 8017502:	edd4 3a25 	vldr	s7, [r4, #148]	; 0x94
 8017506:	eeb0 0a48 	vmov.f32	s0, s16
 801750a:	ed94 3a24 	vldr	s6, [r4, #144]	; 0x90
 801750e:	edd4 2a2b 	vldr	s5, [r4, #172]	; 0xac
 8017512:	ed94 2a2a 	vldr	s4, [r4, #168]	; 0xa8
 8017516:	edd4 1a29 	vldr	s3, [r4, #164]	; 0xa4
 801751a:	ed94 1a28 	vldr	s2, [r4, #160]	; 0xa0
 801751e:	f7ff fdaf 	bl	8017080 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8017522:	2001      	movs	r0, #1
 8017524:	ecbd 8b02 	vpop	{d8}
 8017528:	bd10      	pop	{r4, pc}
 801752a:	2000      	movs	r0, #0
 801752c:	e7fa      	b.n	8017524 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0801752e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 801752e:	edd0 1a25 	vldr	s3, [r0, #148]	; 0x94
 8017532:	ed90 1a24 	vldr	s2, [r0, #144]	; 0x90
 8017536:	edd0 0a2b 	vldr	s1, [r0, #172]	; 0xac
 801753a:	ed90 0a2a 	vldr	s0, [r0, #168]	; 0xa8
 801753e:	f7ff be2b 	b.w	8017198 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08017544 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8017544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017548:	b089      	sub	sp, #36	; 0x24
 801754a:	461c      	mov	r4, r3
 801754c:	4682      	mov	sl, r0
 801754e:	4615      	mov	r5, r2
 8017550:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017554:	f10d 0820 	add.w	r8, sp, #32
 8017558:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801755a:	9304      	str	r3, [sp, #16]
 801755c:	2300      	movs	r3, #0
 801755e:	9105      	str	r1, [sp, #20]
 8017560:	9306      	str	r3, [sp, #24]
 8017562:	f848 3d04 	str.w	r3, [r8, #-4]!
 8017566:	9b04      	ldr	r3, [sp, #16]
 8017568:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
 801756c:	f886 307a 	strb.w	r3, [r6, #122]	; 0x7a
 8017570:	9b05      	ldr	r3, [sp, #20]
 8017572:	429d      	cmp	r5, r3
 8017574:	d96d      	bls.n	8017652 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8017576:	3d01      	subs	r5, #1
 8017578:	f819 3005 	ldrb.w	r3, [r9, r5]
 801757c:	2b06      	cmp	r3, #6
 801757e:	d8f7      	bhi.n	8017570 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8017580:	a201      	add	r2, pc, #4	; (adr r2, 8017588 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8017582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017586:	bf00      	nop
 8017588:	080175a7 	.word	0x080175a7
 801758c:	08017571 	.word	0x08017571
 8017590:	080175a5 	.word	0x080175a5
 8017594:	080175c9 	.word	0x080175c9
 8017598:	080175c9 	.word	0x080175c9
 801759c:	080175cd 	.word	0x080175cd
 80175a0:	0801760d 	.word	0x0801760d
 80175a4:	3c02      	subs	r4, #2
 80175a6:	4650      	mov	r0, sl
 80175a8:	9400      	str	r4, [sp, #0]
 80175aa:	462b      	mov	r3, r5
 80175ac:	4642      	mov	r2, r8
 80175ae:	a906      	add	r1, sp, #24
 80175b0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80175b4:	f7ff fcae 	bl	8016f14 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80175b8:	eddd 0a07 	vldr	s1, [sp, #28]
 80175bc:	ed9d 0a06 	vldr	s0, [sp, #24]
 80175c0:	4630      	mov	r0, r6
 80175c2:	f7ff fed1 	bl	8017368 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80175c6:	e7d3      	b.n	8017570 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80175c8:	3c01      	subs	r4, #1
 80175ca:	e7ec      	b.n	80175a6 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80175cc:	f1a4 0b04 	sub.w	fp, r4, #4
 80175d0:	3c02      	subs	r4, #2
 80175d2:	4650      	mov	r0, sl
 80175d4:	462b      	mov	r3, r5
 80175d6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80175da:	f8cd b000 	str.w	fp, [sp]
 80175de:	4642      	mov	r2, r8
 80175e0:	a906      	add	r1, sp, #24
 80175e2:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80175e6:	f7ff fc95 	bl	8016f14 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80175ea:	eddd 2a07 	vldr	s5, [sp, #28]
 80175ee:	ed9d 2a06 	vldr	s4, [sp, #24]
 80175f2:	4630      	mov	r0, r6
 80175f4:	ed54 1a01 	vldr	s3, [r4, #-4]
 80175f8:	ed14 1a02 	vldr	s2, [r4, #-8]
 80175fc:	edd4 0a01 	vldr	s1, [r4, #4]
 8017600:	ed94 0a00 	vldr	s0, [r4]
 8017604:	f7ff fc1a 	bl	8016e3c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8017608:	465c      	mov	r4, fp
 801760a:	e7b1      	b.n	8017570 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801760c:	f1a4 0b06 	sub.w	fp, r4, #6
 8017610:	3c02      	subs	r4, #2
 8017612:	4650      	mov	r0, sl
 8017614:	462b      	mov	r3, r5
 8017616:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801761a:	f8cd b000 	str.w	fp, [sp]
 801761e:	4642      	mov	r2, r8
 8017620:	a906      	add	r1, sp, #24
 8017622:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8017626:	f7ff fc75 	bl	8016f14 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801762a:	eddd 3a07 	vldr	s7, [sp, #28]
 801762e:	ed9d 3a06 	vldr	s6, [sp, #24]
 8017632:	4630      	mov	r0, r6
 8017634:	ed54 2a03 	vldr	s5, [r4, #-12]
 8017638:	ed14 2a04 	vldr	s4, [r4, #-16]
 801763c:	ed54 1a01 	vldr	s3, [r4, #-4]
 8017640:	ed14 1a02 	vldr	s2, [r4, #-8]
 8017644:	edd4 0a01 	vldr	s1, [r4, #4]
 8017648:	ed94 0a00 	vldr	s0, [r4]
 801764c:	f7ff fc15 	bl	8016e7a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8017650:	e7da      	b.n	8017608 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8017652:	9b04      	ldr	r3, [sp, #16]
 8017654:	b113      	cbz	r3, 801765c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8017656:	4630      	mov	r0, r6
 8017658:	f7ff ff69 	bl	801752e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 801765c:	b009      	add	sp, #36	; 0x24
 801765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017662:	bf00      	nop

08017664 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8017664:	eef0 7a60 	vmov.f32	s15, s1
 8017668:	6803      	ldr	r3, [r0, #0]
 801766a:	689b      	ldr	r3, [r3, #8]
 801766c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017670:	ee17 2a90 	vmov	r2, s15
 8017674:	eef0 7a40 	vmov.f32	s15, s0
 8017678:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801767c:	ee17 1a90 	vmov	r1, s15
 8017680:	4718      	bx	r3
	...

08017684 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8017684:	4b04      	ldr	r3, [pc, #16]	; (8017698 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8017686:	b510      	push	{r4, lr}
 8017688:	4604      	mov	r4, r0
 801768a:	f840 3b14 	str.w	r3, [r0], #20
 801768e:	f000 fb8d 	bl	8017dac <_ZN8touchgfx7OutlineD1Ev>
 8017692:	4620      	mov	r0, r4
 8017694:	bd10      	pop	{r4, pc}
 8017696:	bf00      	nop
 8017698:	0802418c 	.word	0x0802418c

0801769c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 801769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176a0:	ed2d 8b04 	vpush	{d8-d9}
 80176a4:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80176a8:	b0b5      	sub	sp, #212	; 0xd4
 80176aa:	4605      	mov	r5, r0
 80176ac:	468b      	mov	fp, r1
 80176ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80176b2:	9206      	str	r2, [sp, #24]
 80176b4:	461e      	mov	r6, r3
 80176b6:	2400      	movs	r4, #0
 80176b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176bc:	f240 814f 	bls.w	801795e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80176c0:	23ff      	movs	r3, #255	; 0xff
 80176c2:	1d02      	adds	r2, r0, #4
 80176c4:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8017964 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 80176c8:	f04f 0800 	mov.w	r8, #0
 80176cc:	9300      	str	r3, [sp, #0]
 80176ce:	af08      	add	r7, sp, #32
 80176d0:	6981      	ldr	r1, [r0, #24]
 80176d2:	a808      	add	r0, sp, #32
 80176d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80176d6:	eef0 9a49 	vmov.f32	s19, s18
 80176da:	f005 fff1 	bl	801d6c0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80176de:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
 80176e2:	4ba1      	ldr	r3, [pc, #644]	; (8017968 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 80176e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80176e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80176ec:	2201      	movs	r2, #1
 80176ee:	9308      	str	r3, [sp, #32]
 80176f0:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80176f4:	edd5 6a08 	vldr	s13, [r5, #32]
 80176f8:	eeb0 8a49 	vmov.f32	s16, s18
 80176fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017700:	9325      	str	r3, [sp, #148]	; 0x94
 8017702:	f04f 0300 	mov.w	r3, #0
 8017706:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
 801770a:	7f6a      	ldrb	r2, [r5, #29]
 801770c:	eef0 8a49 	vmov.f32	s17, s18
 8017710:	bf48      	it	mi
 8017712:	eef1 7a67 	vnegmi.f32	s15, s15
 8017716:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 801771a:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 801771e:	46c1      	mov	r9, r8
 8017720:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017724:	f04f 0a01 	mov.w	sl, #1
 8017728:	ee67 7a87 	vmul.f32	s15, s15, s14
 801772c:	7fab      	ldrb	r3, [r5, #30]
 801772e:	942a      	str	r4, [sp, #168]	; 0xa8
 8017730:	435a      	muls	r2, r3
 8017732:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8017736:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801773a:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
 801773e:	1c53      	adds	r3, r2, #1
 8017740:	942b      	str	r4, [sp, #172]	; 0xac
 8017742:	942c      	str	r4, [sp, #176]	; 0xb0
 8017744:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017748:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801774c:	942d      	str	r4, [sp, #180]	; 0xb4
 801774e:	942e      	str	r4, [sp, #184]	; 0xb8
 8017750:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017758:	942f      	str	r4, [sp, #188]	; 0xbc
 801775a:	9430      	str	r4, [sp, #192]	; 0xc0
 801775c:	9431      	str	r4, [sp, #196]	; 0xc4
 801775e:	9432      	str	r4, [sp, #200]	; 0xc8
 8017760:	9433      	str	r4, [sp, #204]	; 0xcc
 8017762:	4644      	mov	r4, r8
 8017764:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8017768:	edcd 7a28 	vstr	s15, [sp, #160]	; 0xa0
 801776c:	f88d 00a4 	strb.w	r0, [sp, #164]	; 0xa4
 8017770:	f88d 10a5 	strb.w	r1, [sp, #165]	; 0xa5
 8017774:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
 8017778:	9b06      	ldr	r3, [sp, #24]
 801777a:	454b      	cmp	r3, r9
 801777c:	f000 80cc 	beq.w	8017918 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8017780:	f109 0301 	add.w	r3, r9, #1
 8017784:	9305      	str	r3, [sp, #20]
 8017786:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801778a:	2b06      	cmp	r3, #6
 801778c:	d839      	bhi.n	8017802 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801778e:	e8df f003 	tbb	[pc, r3]
 8017792:	3b04      	.short	0x3b04
 8017794:	817c6f60 	.word	0x817c6f60
 8017798:	a0          	.byte	0xa0
 8017799:	00          	.byte	0x00
 801779a:	45c1      	cmp	r9, r8
 801779c:	d92b      	bls.n	80177f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801779e:	eef0 0a49 	vmov.f32	s1, s18
 80177a2:	4638      	mov	r0, r7
 80177a4:	eeb0 0a69 	vmov.f32	s0, s19
 80177a8:	f7ff fdde 	bl	8017368 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80177ac:	4638      	mov	r0, r7
 80177ae:	f7ff fe67 	bl	8017480 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80177b2:	4681      	mov	r9, r0
 80177b4:	b9f8      	cbnz	r0, 80177f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80177b6:	eef0 0a49 	vmov.f32	s1, s18
 80177ba:	4638      	mov	r0, r7
 80177bc:	eeb0 0a69 	vmov.f32	s0, s19
 80177c0:	f7ff fe8d 	bl	80174de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80177c4:	4628      	mov	r0, r5
 80177c6:	4623      	mov	r3, r4
 80177c8:	9a05      	ldr	r2, [sp, #20]
 80177ca:	4641      	mov	r1, r8
 80177cc:	edcd 9a2a 	vstr	s19, [sp, #168]	; 0xa8
 80177d0:	ed8d 9a2b 	vstr	s18, [sp, #172]	; 0xac
 80177d4:	f88d a098 	strb.w	sl, [sp, #152]	; 0x98
 80177d8:	f88d a099 	strb.w	sl, [sp, #153]	; 0x99
 80177dc:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80177e0:	e9cd b600 	strd	fp, r6, [sp]
 80177e4:	f7ff feae 	bl	8017544 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80177e8:	eef0 0a49 	vmov.f32	s1, s18
 80177ec:	eeb0 0a69 	vmov.f32	s0, s19
 80177f0:	4638      	mov	r0, r7
 80177f2:	f7ff fe74 	bl	80174de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80177f6:	eeb0 8a49 	vmov.f32	s16, s18
 80177fa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80177fe:	eef0 8a69 	vmov.f32	s17, s19
 8017802:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017806:	e7b7      	b.n	8017778 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8017808:	45c1      	cmp	r9, r8
 801780a:	d90d      	bls.n	8017828 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801780c:	4638      	mov	r0, r7
 801780e:	f7ff fe37 	bl	8017480 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8017812:	b948      	cbnz	r0, 8017828 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8017814:	4623      	mov	r3, r4
 8017816:	464a      	mov	r2, r9
 8017818:	4641      	mov	r1, r8
 801781a:	4628      	mov	r0, r5
 801781c:	e9cd a702 	strd	sl, r7, [sp, #8]
 8017820:	e9cd b600 	strd	fp, r6, [sp]
 8017824:	f7ff fe8e 	bl	8017544 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8017828:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801782c:	f88d a098 	strb.w	sl, [sp, #152]	; 0x98
 8017830:	f88d a099 	strb.w	sl, [sp, #153]	; 0x99
 8017834:	3402      	adds	r4, #2
 8017836:	edd3 8a00 	vldr	s17, [r3]
 801783a:	46c8      	mov	r8, r9
 801783c:	ed93 8a01 	vldr	s16, [r3, #4]
 8017840:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 8017844:	eef0 9a68 	vmov.f32	s19, s17
 8017848:	ed8d 8a2b 	vstr	s16, [sp, #172]	; 0xac
 801784c:	eeb0 9a48 	vmov.f32	s18, s16
 8017850:	e7d7      	b.n	8017802 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017852:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017856:	4638      	mov	r0, r7
 8017858:	3402      	adds	r4, #2
 801785a:	edd3 8a00 	vldr	s17, [r3]
 801785e:	ed93 8a01 	vldr	s16, [r3, #4]
 8017862:	eeb0 0a68 	vmov.f32	s0, s17
 8017866:	eef0 0a48 	vmov.f32	s1, s16
 801786a:	f7ff fd7d 	bl	8017368 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801786e:	e7c8      	b.n	8017802 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017870:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017874:	edd3 8a00 	vldr	s17, [r3]
 8017878:	eef0 0a48 	vmov.f32	s1, s16
 801787c:	4638      	mov	r0, r7
 801787e:	eeb0 0a68 	vmov.f32	s0, s17
 8017882:	3401      	adds	r4, #1
 8017884:	f7ff fd70 	bl	8017368 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8017888:	e7bb      	b.n	8017802 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801788a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801788e:	ed93 8a00 	vldr	s16, [r3]
 8017892:	e7f1      	b.n	8017878 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8017894:	00a3      	lsls	r3, r4, #2
 8017896:	eef0 0a48 	vmov.f32	s1, s16
 801789a:	eeb0 0a68 	vmov.f32	s0, s17
 801789e:	4638      	mov	r0, r7
 80178a0:	f103 0208 	add.w	r2, r3, #8
 80178a4:	f103 090c 	add.w	r9, r3, #12
 80178a8:	4433      	add	r3, r6
 80178aa:	3404      	adds	r4, #4
 80178ac:	4432      	add	r2, r6
 80178ae:	44b1      	add	r9, r6
 80178b0:	edd3 1a01 	vldr	s3, [r3, #4]
 80178b4:	ed92 2a00 	vldr	s4, [r2]
 80178b8:	edd9 2a00 	vldr	s5, [r9]
 80178bc:	ed93 1a00 	vldr	s2, [r3]
 80178c0:	9207      	str	r2, [sp, #28]
 80178c2:	f7ff fabb 	bl	8016e3c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80178c6:	9a07      	ldr	r2, [sp, #28]
 80178c8:	ed99 8a00 	vldr	s16, [r9]
 80178cc:	edd2 8a00 	vldr	s17, [r2]
 80178d0:	e797      	b.n	8017802 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80178d2:	00a3      	lsls	r3, r4, #2
 80178d4:	eef0 0a48 	vmov.f32	s1, s16
 80178d8:	eeb0 0a68 	vmov.f32	s0, s17
 80178dc:	4638      	mov	r0, r7
 80178de:	f103 0210 	add.w	r2, r3, #16
 80178e2:	f103 0914 	add.w	r9, r3, #20
 80178e6:	4433      	add	r3, r6
 80178e8:	3406      	adds	r4, #6
 80178ea:	4432      	add	r2, r6
 80178ec:	44b1      	add	r9, r6
 80178ee:	edd3 2a03 	vldr	s5, [r3, #12]
 80178f2:	ed92 3a00 	vldr	s6, [r2]
 80178f6:	edd9 3a00 	vldr	s7, [r9]
 80178fa:	ed93 2a02 	vldr	s4, [r3, #8]
 80178fe:	edd3 1a01 	vldr	s3, [r3, #4]
 8017902:	ed93 1a00 	vldr	s2, [r3]
 8017906:	9207      	str	r2, [sp, #28]
 8017908:	f7ff fab7 	bl	8016e7a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801790c:	9a07      	ldr	r2, [sp, #28]
 801790e:	ed99 8a00 	vldr	s16, [r9]
 8017912:	edd2 8a00 	vldr	s17, [r2]
 8017916:	e774      	b.n	8017802 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017918:	9b06      	ldr	r3, [sp, #24]
 801791a:	af08      	add	r7, sp, #32
 801791c:	4543      	cmp	r3, r8
 801791e:	d90f      	bls.n	8017940 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8017920:	4638      	mov	r0, r7
 8017922:	f7ff fdad 	bl	8017480 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8017926:	b958      	cbnz	r0, 8017940 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8017928:	2301      	movs	r3, #1
 801792a:	9703      	str	r7, [sp, #12]
 801792c:	f8cd b000 	str.w	fp, [sp]
 8017930:	4641      	mov	r1, r8
 8017932:	9a06      	ldr	r2, [sp, #24]
 8017934:	4628      	mov	r0, r5
 8017936:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801793a:	4623      	mov	r3, r4
 801793c:	f7ff fe02 	bl	8017544 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8017940:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 8017944:	4638      	mov	r0, r7
 8017946:	f005 ff4f 	bl	801d7e8 <_ZN8touchgfx6Canvas6renderEh>
 801794a:	4604      	mov	r4, r0
 801794c:	4638      	mov	r0, r7
 801794e:	f7ff fe99 	bl	8017684 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8017952:	4620      	mov	r0, r4
 8017954:	b035      	add	sp, #212	; 0xd4
 8017956:	ecbd 8b04 	vpop	{d8-d9}
 801795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795e:	2401      	movs	r4, #1
 8017960:	e7f7      	b.n	8017952 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8017962:	bf00      	nop
 8017964:	00000000 	.word	0x00000000
 8017968:	08023f94 	.word	0x08023f94

0801796c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 801796c:	b510      	push	{r4, lr}
 801796e:	4604      	mov	r4, r0
 8017970:	f7ff fe88 	bl	8017684 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8017974:	21b0      	movs	r1, #176	; 0xb0
 8017976:	4620      	mov	r0, r4
 8017978:	f006 fafe 	bl	801df78 <_ZdlPvj>
 801797c:	4620      	mov	r0, r4
 801797e:	bd10      	pop	{r4, pc}

08017980 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8017980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017984:	4698      	mov	r8, r3
 8017986:	23ff      	movs	r3, #255	; 0xff
 8017988:	4607      	mov	r7, r0
 801798a:	4689      	mov	r9, r1
 801798c:	4692      	mov	sl, r2
 801798e:	1d02      	adds	r2, r0, #4
 8017990:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8017994:	2400      	movs	r4, #0
 8017996:	44ca      	add	sl, r9
 8017998:	ed2d 8b06 	vpush	{d8-d10}
 801799c:	b0aa      	sub	sp, #168	; 0xa8
 801799e:	ed9f 8a81 	vldr	s16, [pc, #516]	; 8017ba4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80179a2:	9300      	str	r3, [sp, #0]
 80179a4:	eef0 8a48 	vmov.f32	s17, s16
 80179a8:	6981      	ldr	r1, [r0, #24]
 80179aa:	a80d      	add	r0, sp, #52	; 0x34
 80179ac:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80179ae:	f005 fe87 	bl	801d6c0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80179b2:	7f3b      	ldrb	r3, [r7, #28]
 80179b4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8017ba4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80179b8:	4628      	mov	r0, r5
 80179ba:	1e5a      	subs	r2, r3, #1
 80179bc:	eeb0 0a60 	vmov.f32	s0, s1
 80179c0:	4253      	negs	r3, r2
 80179c2:	4153      	adcs	r3, r2
 80179c4:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80179c8:	f002 fc1d 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80179cc:	eeb0 9a40 	vmov.f32	s18, s0
 80179d0:	eef0 9a60 	vmov.f32	s19, s1
 80179d4:	45ca      	cmp	sl, r9
 80179d6:	f000 80cd 	beq.w	8017b74 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 80179da:	f819 3b01 	ldrb.w	r3, [r9], #1
 80179de:	2b06      	cmp	r3, #6
 80179e0:	d8f8      	bhi.n	80179d4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80179e2:	e8df f003 	tbb	[pc, r3]
 80179e6:	0804      	.short	0x0804
 80179e8:	58533f2a 	.word	0x58533f2a
 80179ec:	8a          	.byte	0x8a
 80179ed:	00          	.byte	0x00
 80179ee:	a80d      	add	r0, sp, #52	; 0x34
 80179f0:	f005 fed8 	bl	801d7a4 <_ZN8touchgfx6Canvas5closeEv>
 80179f4:	e7ee      	b.n	80179d4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80179f6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80179fa:	4628      	mov	r0, r5
 80179fc:	ed93 8a01 	vldr	s16, [r3, #4]
 8017a00:	edd3 8a00 	vldr	s17, [r3]
 8017a04:	eef0 0a48 	vmov.f32	s1, s16
 8017a08:	eeb0 0a68 	vmov.f32	s0, s17
 8017a0c:	f002 fbfb 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017a10:	a80d      	add	r0, sp, #52	; 0x34
 8017a12:	eef0 7a60 	vmov.f32	s15, s1
 8017a16:	eeb0 9a40 	vmov.f32	s18, s0
 8017a1a:	eef0 9a60 	vmov.f32	s19, s1
 8017a1e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017a22:	ee17 2a90 	vmov	r2, s15
 8017a26:	eef0 7a40 	vmov.f32	s15, s0
 8017a2a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017a2e:	ee17 1a90 	vmov	r1, s15
 8017a32:	f005 ff91 	bl	801d958 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017a36:	3402      	adds	r4, #2
 8017a38:	e7cc      	b.n	80179d4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017a3a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017a3e:	4628      	mov	r0, r5
 8017a40:	edd3 8a00 	vldr	s17, [r3]
 8017a44:	ed93 8a01 	vldr	s16, [r3, #4]
 8017a48:	eeb0 0a68 	vmov.f32	s0, s17
 8017a4c:	eef0 0a48 	vmov.f32	s1, s16
 8017a50:	f002 fbd9 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017a54:	a80d      	add	r0, sp, #52	; 0x34
 8017a56:	eeb0 9a40 	vmov.f32	s18, s0
 8017a5a:	eef0 9a60 	vmov.f32	s19, s1
 8017a5e:	f7ff fe01 	bl	8017664 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8017a62:	e7e8      	b.n	8017a36 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8017a64:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017a68:	edd3 8a00 	vldr	s17, [r3]
 8017a6c:	eef0 0a48 	vmov.f32	s1, s16
 8017a70:	4628      	mov	r0, r5
 8017a72:	eeb0 0a68 	vmov.f32	s0, s17
 8017a76:	3401      	adds	r4, #1
 8017a78:	f002 fbc5 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017a7c:	a80d      	add	r0, sp, #52	; 0x34
 8017a7e:	eef0 9a60 	vmov.f32	s19, s1
 8017a82:	eeb0 9a40 	vmov.f32	s18, s0
 8017a86:	f7ff fded 	bl	8017664 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8017a8a:	e7a3      	b.n	80179d4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017a8c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017a90:	ed93 8a00 	vldr	s16, [r3]
 8017a94:	e7ea      	b.n	8017a6c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8017a96:	1ca3      	adds	r3, r4, #2
 8017a98:	4628      	mov	r0, r5
 8017a9a:	3404      	adds	r4, #4
 8017a9c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8017aa0:	ed53 0a01 	vldr	s1, [r3, #-4]
 8017aa4:	ed13 0a02 	vldr	s0, [r3, #-8]
 8017aa8:	edd3 8a00 	vldr	s17, [r3]
 8017aac:	ed93 8a01 	vldr	s16, [r3, #4]
 8017ab0:	f002 fba9 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017ab4:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8017ab8:	eeb0 0a68 	vmov.f32	s0, s17
 8017abc:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8017ac0:	eef0 0a48 	vmov.f32	s1, s16
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	f002 fb9e 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017aca:	eddd 1a0a 	vldr	s3, [sp, #40]	; 0x28
 8017ace:	eef0 2a60 	vmov.f32	s5, s1
 8017ad2:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8017ad6:	eeb0 2a40 	vmov.f32	s4, s0
 8017ada:	a80d      	add	r0, sp, #52	; 0x34
 8017adc:	eeb0 aa40 	vmov.f32	s20, s0
 8017ae0:	eef0 aa60 	vmov.f32	s21, s1
 8017ae4:	eeb0 0a49 	vmov.f32	s0, s18
 8017ae8:	eef0 0a69 	vmov.f32	s1, s19
 8017aec:	f7ff f9a6 	bl	8016e3c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8017af0:	eef0 9a6a 	vmov.f32	s19, s21
 8017af4:	eeb0 9a4a 	vmov.f32	s18, s20
 8017af8:	e76c      	b.n	80179d4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017afa:	1d26      	adds	r6, r4, #4
 8017afc:	4628      	mov	r0, r5
 8017afe:	3406      	adds	r4, #6
 8017b00:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017b04:	ed56 0a03 	vldr	s1, [r6, #-12]
 8017b08:	ed16 0a04 	vldr	s0, [r6, #-16]
 8017b0c:	edd6 8a00 	vldr	s17, [r6]
 8017b10:	ed96 8a01 	vldr	s16, [r6, #4]
 8017b14:	f002 fb77 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017b18:	ed8d 0a07 	vstr	s0, [sp, #28]
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	ed16 0a02 	vldr	s0, [r6, #-8]
 8017b22:	edcd 0a08 	vstr	s1, [sp, #32]
 8017b26:	ed56 0a01 	vldr	s1, [r6, #-4]
 8017b2a:	f002 fb6c 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017b2e:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8017b32:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8017b36:	eeb0 0a68 	vmov.f32	s0, s17
 8017b3a:	eef0 0a48 	vmov.f32	s1, s16
 8017b3e:	4628      	mov	r0, r5
 8017b40:	f002 fb61 	bl	801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017b44:	eddd 2a0a 	vldr	s5, [sp, #40]	; 0x28
 8017b48:	eeb0 3a40 	vmov.f32	s6, s0
 8017b4c:	ed9d 2a09 	vldr	s4, [sp, #36]	; 0x24
 8017b50:	eef0 3a60 	vmov.f32	s7, s1
 8017b54:	eddd 1a08 	vldr	s3, [sp, #32]
 8017b58:	eeb0 aa40 	vmov.f32	s20, s0
 8017b5c:	ed9d 1a07 	vldr	s2, [sp, #28]
 8017b60:	eef0 aa60 	vmov.f32	s21, s1
 8017b64:	a80d      	add	r0, sp, #52	; 0x34
 8017b66:	eef0 0a69 	vmov.f32	s1, s19
 8017b6a:	eeb0 0a49 	vmov.f32	s0, s18
 8017b6e:	f7ff f984 	bl	8016e7a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8017b72:	e7bd      	b.n	8017af0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8017b74:	7f7b      	ldrb	r3, [r7, #29]
 8017b76:	a80d      	add	r0, sp, #52	; 0x34
 8017b78:	7fb9      	ldrb	r1, [r7, #30]
 8017b7a:	4359      	muls	r1, r3
 8017b7c:	1c4b      	adds	r3, r1, #1
 8017b7e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8017b82:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017b86:	f005 fe2f 	bl	801d7e8 <_ZN8touchgfx6Canvas6renderEh>
 8017b8a:	4b07      	ldr	r3, [pc, #28]	; (8017ba8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	a812      	add	r0, sp, #72	; 0x48
 8017b90:	930d      	str	r3, [sp, #52]	; 0x34
 8017b92:	f000 f90b 	bl	8017dac <_ZN8touchgfx7OutlineD1Ev>
 8017b96:	4620      	mov	r0, r4
 8017b98:	b02a      	add	sp, #168	; 0xa8
 8017b9a:	ecbd 8b06 	vpop	{d8-d10}
 8017b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ba2:	bf00      	nop
 8017ba4:	00000000 	.word	0x00000000
 8017ba8:	0802418c 	.word	0x0802418c

08017bac <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8017bac:	b410      	push	{r4}
 8017bae:	7f04      	ldrb	r4, [r0, #28]
 8017bb0:	b11c      	cbz	r4, 8017bba <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8017bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bb6:	f7ff bee3 	b.w	8017980 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8017bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bbe:	f7ff bd6d 	b.w	801769c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08017bc2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8017bc2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bc6:	4691      	mov	r9, r2
 8017bc8:	4602      	mov	r2, r0
 8017bca:	4606      	mov	r6, r0
 8017bcc:	4688      	mov	r8, r1
 8017bce:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8017bd2:	469a      	mov	sl, r3
 8017bd4:	ab02      	add	r3, sp, #8
 8017bd6:	af02      	add	r7, sp, #8
 8017bd8:	6851      	ldr	r1, [r2, #4]
 8017bda:	c303      	stmia	r3!, {r0, r1}
 8017bdc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	dd2f      	ble.n	8017c44 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8017be4:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8017be8:	2c00      	cmp	r4, #0
 8017bea:	dd2b      	ble.n	8017c44 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8017bec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017bf0:	441c      	add	r4, r3
 8017bf2:	b2a4      	uxth	r4, r4
 8017bf4:	b225      	sxth	r5, r4
 8017bf6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017bfa:	42ab      	cmp	r3, r5
 8017bfc:	da22      	bge.n	8017c44 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8017bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c00:	464a      	mov	r2, r9
 8017c02:	9701      	str	r7, [sp, #4]
 8017c04:	4641      	mov	r1, r8
 8017c06:	9300      	str	r3, [sp, #0]
 8017c08:	4630      	mov	r0, r6
 8017c0a:	4653      	mov	r3, sl
 8017c0c:	f7ff ffce 	bl	8017bac <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8017c10:	b940      	cbnz	r0, 8017c24 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8017c12:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017c16:	2b01      	cmp	r3, #1
 8017c18:	d004      	beq.n	8017c24 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	105b      	asrs	r3, r3, #1
 8017c1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c22:	e7ec      	b.n	8017bfe <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8017c24:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8017c28:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017c2c:	4413      	add	r3, r2
 8017c2e:	b29b      	uxth	r3, r3
 8017c30:	441a      	add	r2, r3
 8017c32:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017c36:	b212      	sxth	r2, r2
 8017c38:	4295      	cmp	r5, r2
 8017c3a:	dadc      	bge.n	8017bf6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8017c3c:	1ae3      	subs	r3, r4, r3
 8017c3e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c42:	e7d8      	b.n	8017bf6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8017c44:	b004      	add	sp, #16
 8017c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017c4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017c4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017c4e:	6803      	ldr	r3, [r0, #0]
 8017c50:	460d      	mov	r5, r1
 8017c52:	4604      	mov	r4, r0
 8017c54:	4601      	mov	r1, r0
 8017c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017c58:	a802      	add	r0, sp, #8
 8017c5a:	4798      	blx	r3
 8017c5c:	6828      	ldr	r0, [r5, #0]
 8017c5e:	6869      	ldr	r1, [r5, #4]
 8017c60:	466b      	mov	r3, sp
 8017c62:	c303      	stmia	r3!, {r0, r1}
 8017c64:	4668      	mov	r0, sp
 8017c66:	4619      	mov	r1, r3
 8017c68:	f7fd ff0e 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 8017c6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017c6e:	b188      	cbz	r0, 8017c94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017c70:	6803      	ldr	r3, [r0, #0]
 8017c72:	1d21      	adds	r1, r4, #4
 8017c74:	68db      	ldr	r3, [r3, #12]
 8017c76:	4798      	blx	r3
 8017c78:	b160      	cbz	r0, 8017c94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017c7a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	dd08      	ble.n	8017c94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017c82:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8017c86:	2d00      	cmp	r5, #0
 8017c88:	dd04      	ble.n	8017c94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017c8a:	4a2b      	ldr	r2, [pc, #172]	; (8017d38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8017c8c:	7812      	ldrb	r2, [r2, #0]
 8017c8e:	b11a      	cbz	r2, 8017c98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8017c90:	2a01      	cmp	r2, #1
 8017c92:	d029      	beq.n	8017ce8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8017c94:	b004      	add	sp, #16
 8017c96:	bd70      	pop	{r4, r5, r6, pc}
 8017c98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017c9c:	441d      	add	r5, r3
 8017c9e:	b2ad      	uxth	r5, r5
 8017ca0:	b22e      	sxth	r6, r5
 8017ca2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017ca6:	42b3      	cmp	r3, r6
 8017ca8:	daf4      	bge.n	8017c94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017caa:	6823      	ldr	r3, [r4, #0]
 8017cac:	4669      	mov	r1, sp
 8017cae:	4620      	mov	r0, r4
 8017cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cb2:	4798      	blx	r3
 8017cb4:	b940      	cbnz	r0, 8017cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8017cb6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8017cba:	2b01      	cmp	r3, #1
 8017cbc:	d004      	beq.n	8017cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8017cbe:	3301      	adds	r3, #1
 8017cc0:	105b      	asrs	r3, r3, #1
 8017cc2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017cc6:	e7f0      	b.n	8017caa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017cc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017ccc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017cd0:	4413      	add	r3, r2
 8017cd2:	b29b      	uxth	r3, r3
 8017cd4:	441a      	add	r2, r3
 8017cd6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017cda:	b212      	sxth	r2, r2
 8017cdc:	4296      	cmp	r6, r2
 8017cde:	dae0      	bge.n	8017ca2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8017ce0:	1aeb      	subs	r3, r5, r3
 8017ce2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ce6:	e7dc      	b.n	8017ca2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8017ce8:	f8bd 5000 	ldrh.w	r5, [sp]
 8017cec:	441d      	add	r5, r3
 8017cee:	b2ad      	uxth	r5, r5
 8017cf0:	b22e      	sxth	r6, r5
 8017cf2:	f9bd 3000 	ldrsh.w	r3, [sp]
 8017cf6:	42b3      	cmp	r3, r6
 8017cf8:	dacc      	bge.n	8017c94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017cfa:	6823      	ldr	r3, [r4, #0]
 8017cfc:	4669      	mov	r1, sp
 8017cfe:	4620      	mov	r0, r4
 8017d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d02:	4798      	blx	r3
 8017d04:	b940      	cbnz	r0, 8017d18 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8017d06:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017d0a:	2b01      	cmp	r3, #1
 8017d0c:	d004      	beq.n	8017d18 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8017d0e:	3301      	adds	r3, #1
 8017d10:	105b      	asrs	r3, r3, #1
 8017d12:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017d16:	e7f0      	b.n	8017cfa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8017d18:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017d1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017d20:	4413      	add	r3, r2
 8017d22:	b29b      	uxth	r3, r3
 8017d24:	441a      	add	r2, r3
 8017d26:	f8ad 3000 	strh.w	r3, [sp]
 8017d2a:	b212      	sxth	r2, r2
 8017d2c:	4296      	cmp	r6, r2
 8017d2e:	dae0      	bge.n	8017cf2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017d30:	1aeb      	subs	r3, r5, r3
 8017d32:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017d36:	e7dc      	b.n	8017cf2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017d38:	20014688 	.word	0x20014688

08017d3c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8017d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d3e:	6803      	ldr	r3, [r0, #0]
 8017d40:	4604      	mov	r4, r0
 8017d42:	4601      	mov	r1, r0
 8017d44:	4668      	mov	r0, sp
 8017d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017d48:	4798      	blx	r3
 8017d4a:	2100      	movs	r1, #0
 8017d4c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017d50:	4668      	mov	r0, sp
 8017d52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017d56:	9102      	str	r1, [sp, #8]
 8017d58:	a902      	add	r1, sp, #8
 8017d5a:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017d5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017d62:	f7fd fe91 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 8017d66:	6823      	ldr	r3, [r4, #0]
 8017d68:	4669      	mov	r1, sp
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	691b      	ldr	r3, [r3, #16]
 8017d6e:	4798      	blx	r3
 8017d70:	b004      	add	sp, #16
 8017d72:	bd10      	pop	{r4, pc}

08017d74 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017d74:	2101      	movs	r1, #1
 8017d76:	2200      	movs	r2, #0
 8017d78:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017d7c:	490a      	ldr	r1, [pc, #40]	; (8017da8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8017d7e:	8082      	strh	r2, [r0, #4]
 8017d80:	6001      	str	r1, [r0, #0]
 8017d82:	21ff      	movs	r1, #255	; 0xff
 8017d84:	80c2      	strh	r2, [r0, #6]
 8017d86:	8102      	strh	r2, [r0, #8]
 8017d88:	8142      	strh	r2, [r0, #10]
 8017d8a:	8182      	strh	r2, [r0, #12]
 8017d8c:	81c2      	strh	r2, [r0, #14]
 8017d8e:	8202      	strh	r2, [r0, #16]
 8017d90:	8242      	strh	r2, [r0, #18]
 8017d92:	61c2      	str	r2, [r0, #28]
 8017d94:	8402      	strh	r2, [r0, #32]
 8017d96:	8442      	strh	r2, [r0, #34]	; 0x22
 8017d98:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017d9c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8017da0:	6282      	str	r2, [r0, #40]	; 0x28
 8017da2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017da6:	4770      	bx	lr
 8017da8:	08023ff4 	.word	0x08023ff4

08017dac <_ZN8touchgfx7OutlineD1Ev>:
 8017dac:	4770      	bx	lr

08017dae <_ZN8touchgfx7OutlineD0Ev>:
 8017dae:	b510      	push	{r4, lr}
 8017db0:	4604      	mov	r4, r0
 8017db2:	2130      	movs	r1, #48	; 0x30
 8017db4:	f006 f8e0 	bl	801df78 <_ZdlPvj>
 8017db8:	4620      	mov	r0, r4
 8017dba:	bd10      	pop	{r4, pc}

08017dbc <_ZN8touchgfx7Outline5resetEv>:
 8017dbc:	b510      	push	{r4, lr}
 8017dbe:	4604      	mov	r4, r0
 8017dc0:	f000 fe72 	bl	8018aa8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8017dc4:	60e0      	str	r0, [r4, #12]
 8017dc6:	f000 fe75 	bl	8018ab4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8017dca:	68e3      	ldr	r3, [r4, #12]
 8017dcc:	08c0      	lsrs	r0, r0, #3
 8017dce:	2200      	movs	r2, #0
 8017dd0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8017dd4:	6123      	str	r3, [r4, #16]
 8017dd6:	3801      	subs	r0, #1
 8017dd8:	60a2      	str	r2, [r4, #8]
 8017dda:	6060      	str	r0, [r4, #4]
 8017ddc:	8019      	strh	r1, [r3, #0]
 8017dde:	8059      	strh	r1, [r3, #2]
 8017de0:	809a      	strh	r2, [r3, #4]
 8017de2:	80da      	strh	r2, [r3, #6]
 8017de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017de6:	f023 0301 	bic.w	r3, r3, #1
 8017dea:	f043 0302 	orr.w	r3, r3, #2
 8017dee:	6263      	str	r3, [r4, #36]	; 0x24
 8017df0:	bd10      	pop	{r4, pc}
	...

08017df4 <_ZN8touchgfx7OutlineC1Ev>:
 8017df4:	4b0a      	ldr	r3, [pc, #40]	; (8017e20 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8017df6:	b510      	push	{r4, lr}
 8017df8:	6003      	str	r3, [r0, #0]
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	4604      	mov	r4, r0
 8017dfe:	6243      	str	r3, [r0, #36]	; 0x24
 8017e00:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8017e04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017e08:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8017e0c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017e10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017e14:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8017e18:	f7ff ffd0 	bl	8017dbc <_ZN8touchgfx7Outline5resetEv>
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	bd10      	pop	{r4, pc}
 8017e20:	0802406c 	.word	0x0802406c

08017e24 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8017e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e28:	b093      	sub	sp, #76	; 0x4c
 8017e2a:	1156      	asrs	r6, r2, #5
 8017e2c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017e2e:	9305      	str	r3, [sp, #20]
 8017e30:	1153      	asrs	r3, r2, #5
 8017e32:	f004 051f 	and.w	r5, r4, #31
 8017e36:	9303      	str	r3, [sp, #12]
 8017e38:	1163      	asrs	r3, r4, #5
 8017e3a:	9504      	str	r5, [sp, #16]
 8017e3c:	1165      	asrs	r5, r4, #5
 8017e3e:	9306      	str	r3, [sp, #24]
 8017e40:	f002 031f 	and.w	r3, r2, #31
 8017e44:	42ae      	cmp	r6, r5
 8017e46:	f040 80f4 	bne.w	8018032 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8017e4a:	9c04      	ldr	r4, [sp, #16]
 8017e4c:	9a05      	ldr	r2, [sp, #20]
 8017e4e:	42a3      	cmp	r3, r4
 8017e50:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8017e54:	6902      	ldr	r2, [r0, #16]
 8017e56:	d125      	bne.n	8017ea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8017e58:	f9b2 3000 	ldrsh.w	r3, [r2]
 8017e5c:	459e      	cmp	lr, r3
 8017e5e:	d103      	bne.n	8017e68 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8017e60:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017e64:	429e      	cmp	r6, r3
 8017e66:	d035      	beq.n	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017e68:	88d1      	ldrh	r1, [r2, #6]
 8017e6a:	8893      	ldrh	r3, [r2, #4]
 8017e6c:	430b      	orrs	r3, r1
 8017e6e:	d010      	beq.n	8017e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017e70:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	db0c      	blt.n	8017e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017e78:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8017e7a:	428b      	cmp	r3, r1
 8017e7c:	da09      	bge.n	8017e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017e7e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017e82:	428b      	cmp	r3, r1
 8017e84:	f103 0301 	add.w	r3, r3, #1
 8017e88:	bf38      	it	cc
 8017e8a:	3208      	addcc	r2, #8
 8017e8c:	6083      	str	r3, [r0, #8]
 8017e8e:	bf38      	it	cc
 8017e90:	6102      	strcc	r2, [r0, #16]
 8017e92:	6903      	ldr	r3, [r0, #16]
 8017e94:	9a03      	ldr	r2, [sp, #12]
 8017e96:	f8a3 e000 	strh.w	lr, [r3]
 8017e9a:	805a      	strh	r2, [r3, #2]
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	809a      	strh	r2, [r3, #4]
 8017ea0:	80da      	strh	r2, [r3, #6]
 8017ea2:	e017      	b.n	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017ea4:	9c05      	ldr	r4, [sp, #20]
 8017ea6:	114e      	asrs	r6, r1, #5
 8017ea8:	f001 0c1f 	and.w	ip, r1, #31
 8017eac:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8017eb0:	f004 041f 	and.w	r4, r4, #31
 8017eb4:	4576      	cmp	r6, lr
 8017eb6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8017eba:	9402      	str	r4, [sp, #8]
 8017ebc:	9c04      	ldr	r4, [sp, #16]
 8017ebe:	eba4 0403 	sub.w	r4, r4, r3
 8017ec2:	d10a      	bne.n	8017eda <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8017ec4:	9b02      	ldr	r3, [sp, #8]
 8017ec6:	44a0      	add	r8, r4
 8017ec8:	449c      	add	ip, r3
 8017eca:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017ece:	fb04 a40c 	mla	r4, r4, ip, sl
 8017ed2:	80d4      	strh	r4, [r2, #6]
 8017ed4:	b013      	add	sp, #76	; 0x4c
 8017ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eda:	9d05      	ldr	r5, [sp, #20]
 8017edc:	1a69      	subs	r1, r5, r1
 8017ede:	bf51      	iteee	pl
 8017ee0:	f1cc 0520 	rsbpl	r5, ip, #32
 8017ee4:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017ee8:	4249      	negmi	r1, r1
 8017eea:	2500      	movmi	r5, #0
 8017eec:	bf5d      	ittte	pl
 8017eee:	436c      	mulpl	r4, r5
 8017ef0:	2520      	movpl	r5, #32
 8017ef2:	f04f 0901 	movpl.w	r9, #1
 8017ef6:	f04f 39ff 	movmi.w	r9, #4294967295
 8017efa:	9501      	str	r5, [sp, #4]
 8017efc:	9f01      	ldr	r7, [sp, #4]
 8017efe:	444e      	add	r6, r9
 8017f00:	fb94 f5f1 	sdiv	r5, r4, r1
 8017f04:	fb01 4415 	mls	r4, r1, r5, r4
 8017f08:	44bc      	add	ip, r7
 8017f0a:	2c00      	cmp	r4, #0
 8017f0c:	bfbc      	itt	lt
 8017f0e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017f12:	1864      	addlt	r4, r4, r1
 8017f14:	44a8      	add	r8, r5
 8017f16:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017f1a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017f1e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017f22:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f26:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017f2a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8017f2e:	ea58 0202 	orrs.w	r2, r8, r2
 8017f32:	d011      	beq.n	8017f58 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017f34:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017f38:	f1b8 0f00 	cmp.w	r8, #0
 8017f3c:	db0c      	blt.n	8017f58 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017f3e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8017f40:	4590      	cmp	r8, r2
 8017f42:	da09      	bge.n	8017f58 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017f44:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017f48:	4590      	cmp	r8, r2
 8017f4a:	bf3c      	itt	cc
 8017f4c:	f10c 0208 	addcc.w	r2, ip, #8
 8017f50:	6102      	strcc	r2, [r0, #16]
 8017f52:	f108 0201 	add.w	r2, r8, #1
 8017f56:	6082      	str	r2, [r0, #8]
 8017f58:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f5c:	2700      	movs	r7, #0
 8017f5e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017f62:	45b6      	cmp	lr, r6
 8017f64:	f8ac 6000 	strh.w	r6, [ip]
 8017f68:	442b      	add	r3, r5
 8017f6a:	f8ac 2002 	strh.w	r2, [ip, #2]
 8017f6e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017f72:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017f76:	d04b      	beq.n	8018010 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8017f78:	9f04      	ldr	r7, [sp, #16]
 8017f7a:	1a64      	subs	r4, r4, r1
 8017f7c:	f04f 0a00 	mov.w	sl, #0
 8017f80:	1aff      	subs	r7, r7, r3
 8017f82:	443d      	add	r5, r7
 8017f84:	016d      	lsls	r5, r5, #5
 8017f86:	fb95 f8f1 	sdiv	r8, r5, r1
 8017f8a:	fb01 5518 	mls	r5, r1, r8, r5
 8017f8e:	2d00      	cmp	r5, #0
 8017f90:	bfbc      	itt	lt
 8017f92:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017f96:	186d      	addlt	r5, r5, r1
 8017f98:	f108 0701 	add.w	r7, r8, #1
 8017f9c:	9703      	str	r7, [sp, #12]
 8017f9e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017fa2:	1964      	adds	r4, r4, r5
 8017fa4:	444e      	add	r6, r9
 8017fa6:	bf54      	ite	pl
 8017fa8:	9f03      	ldrpl	r7, [sp, #12]
 8017faa:	4647      	movmi	r7, r8
 8017fac:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017fb0:	bf58      	it	pl
 8017fb2:	1a64      	subpl	r4, r4, r1
 8017fb4:	443b      	add	r3, r7
 8017fb6:	44bb      	add	fp, r7
 8017fb8:	f8ac b004 	strh.w	fp, [ip, #4]
 8017fbc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017fc0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017fc4:	f8ac b006 	strh.w	fp, [ip, #6]
 8017fc8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017fcc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017fd0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017fd4:	ea5b 0707 	orrs.w	r7, fp, r7
 8017fd8:	d011      	beq.n	8017ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8017fda:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017fde:	f1bb 0f00 	cmp.w	fp, #0
 8017fe2:	db0c      	blt.n	8017ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8017fe4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017fe6:	45bb      	cmp	fp, r7
 8017fe8:	da09      	bge.n	8017ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8017fea:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017fee:	45bb      	cmp	fp, r7
 8017ff0:	bf3c      	itt	cc
 8017ff2:	f10c 0708 	addcc.w	r7, ip, #8
 8017ff6:	6107      	strcc	r7, [r0, #16]
 8017ff8:	f10b 0701 	add.w	r7, fp, #1
 8017ffc:	6087      	str	r7, [r0, #8]
 8017ffe:	6907      	ldr	r7, [r0, #16]
 8018000:	45b6      	cmp	lr, r6
 8018002:	803e      	strh	r6, [r7, #0]
 8018004:	807a      	strh	r2, [r7, #2]
 8018006:	f8a7 a004 	strh.w	sl, [r7, #4]
 801800a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801800e:	d1c6      	bne.n	8017f9e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8018010:	9a04      	ldr	r2, [sp, #16]
 8018012:	1ad3      	subs	r3, r2, r3
 8018014:	6902      	ldr	r2, [r0, #16]
 8018016:	8891      	ldrh	r1, [r2, #4]
 8018018:	88d6      	ldrh	r6, [r2, #6]
 801801a:	4419      	add	r1, r3
 801801c:	8091      	strh	r1, [r2, #4]
 801801e:	9902      	ldr	r1, [sp, #8]
 8018020:	f101 0c20 	add.w	ip, r1, #32
 8018024:	9901      	ldr	r1, [sp, #4]
 8018026:	ebac 0c01 	sub.w	ip, ip, r1
 801802a:	fb03 630c 	mla	r3, r3, ip, r6
 801802e:	80d3      	strh	r3, [r2, #6]
 8018030:	e750      	b.n	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018032:	9d05      	ldr	r5, [sp, #20]
 8018034:	1aa2      	subs	r2, r4, r2
 8018036:	eba5 0501 	sub.w	r5, r5, r1
 801803a:	9202      	str	r2, [sp, #8]
 801803c:	9508      	str	r5, [sp, #32]
 801803e:	f140 8128 	bpl.w	8018292 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8018042:	9a03      	ldr	r2, [sp, #12]
 8018044:	2a00      	cmp	r2, #0
 8018046:	f6ff af45 	blt.w	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801804a:	9a02      	ldr	r2, [sp, #8]
 801804c:	f04f 34ff 	mov.w	r4, #4294967295
 8018050:	4252      	negs	r2, r2
 8018052:	940b      	str	r4, [sp, #44]	; 0x2c
 8018054:	2400      	movs	r4, #0
 8018056:	9202      	str	r2, [sp, #8]
 8018058:	9a06      	ldr	r2, [sp, #24]
 801805a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801805e:	9206      	str	r2, [sp, #24]
 8018060:	462a      	mov	r2, r5
 8018062:	435a      	muls	r2, r3
 8018064:	9401      	str	r4, [sp, #4]
 8018066:	9c02      	ldr	r4, [sp, #8]
 8018068:	9d02      	ldr	r5, [sp, #8]
 801806a:	fb92 f4f4 	sdiv	r4, r2, r4
 801806e:	fb05 2214 	mls	r2, r5, r4, r2
 8018072:	2a00      	cmp	r2, #0
 8018074:	9207      	str	r2, [sp, #28]
 8018076:	bfbc      	itt	lt
 8018078:	1952      	addlt	r2, r2, r5
 801807a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801807e:	6905      	ldr	r5, [r0, #16]
 8018080:	bfb8      	it	lt
 8018082:	9207      	strlt	r2, [sp, #28]
 8018084:	eb04 0901 	add.w	r9, r4, r1
 8018088:	9a01      	ldr	r2, [sp, #4]
 801808a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801808e:	429a      	cmp	r2, r3
 8018090:	f040 8111 	bne.w	80182b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8018094:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018098:	429e      	cmp	r6, r3
 801809a:	d104      	bne.n	80180a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801809c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80180a0:	9a03      	ldr	r2, [sp, #12]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d01b      	beq.n	80180de <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80180a6:	88ea      	ldrh	r2, [r5, #6]
 80180a8:	88ab      	ldrh	r3, [r5, #4]
 80180aa:	4313      	orrs	r3, r2
 80180ac:	d010      	beq.n	80180d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80180ae:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80180b2:	2a00      	cmp	r2, #0
 80180b4:	db0c      	blt.n	80180d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80180b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80180b8:	429a      	cmp	r2, r3
 80180ba:	da09      	bge.n	80180d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80180bc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	f102 0201 	add.w	r2, r2, #1
 80180c6:	bf38      	it	cc
 80180c8:	3508      	addcc	r5, #8
 80180ca:	6082      	str	r2, [r0, #8]
 80180cc:	bf38      	it	cc
 80180ce:	6105      	strcc	r5, [r0, #16]
 80180d0:	6903      	ldr	r3, [r0, #16]
 80180d2:	9a03      	ldr	r2, [sp, #12]
 80180d4:	801e      	strh	r6, [r3, #0]
 80180d6:	805a      	strh	r2, [r3, #2]
 80180d8:	2200      	movs	r2, #0
 80180da:	809a      	strh	r2, [r3, #4]
 80180dc:	80da      	strh	r2, [r3, #6]
 80180de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180e0:	9a03      	ldr	r2, [sp, #12]
 80180e2:	6901      	ldr	r1, [r0, #16]
 80180e4:	441a      	add	r2, r3
 80180e6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80180ea:	42b3      	cmp	r3, r6
 80180ec:	d103      	bne.n	80180f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80180ee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d01a      	beq.n	801812c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80180f6:	88cc      	ldrh	r4, [r1, #6]
 80180f8:	888b      	ldrh	r3, [r1, #4]
 80180fa:	4323      	orrs	r3, r4
 80180fc:	d010      	beq.n	8018120 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80180fe:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018102:	2c00      	cmp	r4, #0
 8018104:	db0c      	blt.n	8018120 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018106:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018108:	429c      	cmp	r4, r3
 801810a:	da09      	bge.n	8018120 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801810c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018110:	429c      	cmp	r4, r3
 8018112:	f104 0401 	add.w	r4, r4, #1
 8018116:	bf38      	it	cc
 8018118:	3108      	addcc	r1, #8
 801811a:	6084      	str	r4, [r0, #8]
 801811c:	bf38      	it	cc
 801811e:	6101      	strcc	r1, [r0, #16]
 8018120:	6903      	ldr	r3, [r0, #16]
 8018122:	2100      	movs	r1, #0
 8018124:	801e      	strh	r6, [r3, #0]
 8018126:	805a      	strh	r2, [r3, #2]
 8018128:	8099      	strh	r1, [r3, #4]
 801812a:	80d9      	strh	r1, [r3, #6]
 801812c:	9b06      	ldr	r3, [sp, #24]
 801812e:	4293      	cmp	r3, r2
 8018130:	f000 8082 	beq.w	8018238 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8018134:	9b08      	ldr	r3, [sp, #32]
 8018136:	9902      	ldr	r1, [sp, #8]
 8018138:	015b      	lsls	r3, r3, #5
 801813a:	9c02      	ldr	r4, [sp, #8]
 801813c:	fb93 f1f1 	sdiv	r1, r3, r1
 8018140:	fb04 3311 	mls	r3, r4, r1, r3
 8018144:	9103      	str	r1, [sp, #12]
 8018146:	2b00      	cmp	r3, #0
 8018148:	9308      	str	r3, [sp, #32]
 801814a:	da04      	bge.n	8018156 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801814c:	1e4b      	subs	r3, r1, #1
 801814e:	9303      	str	r3, [sp, #12]
 8018150:	9b08      	ldr	r3, [sp, #32]
 8018152:	4423      	add	r3, r4
 8018154:	9308      	str	r3, [sp, #32]
 8018156:	9b07      	ldr	r3, [sp, #28]
 8018158:	464f      	mov	r7, r9
 801815a:	9902      	ldr	r1, [sp, #8]
 801815c:	2600      	movs	r6, #0
 801815e:	1a5b      	subs	r3, r3, r1
 8018160:	9307      	str	r3, [sp, #28]
 8018162:	9b01      	ldr	r3, [sp, #4]
 8018164:	f1c3 0320 	rsb	r3, r3, #32
 8018168:	930e      	str	r3, [sp, #56]	; 0x38
 801816a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801816c:	9b01      	ldr	r3, [sp, #4]
 801816e:	1a5b      	subs	r3, r3, r1
 8018170:	930a      	str	r3, [sp, #40]	; 0x28
 8018172:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018176:	185b      	adds	r3, r3, r1
 8018178:	bf58      	it	pl
 801817a:	9902      	ldrpl	r1, [sp, #8]
 801817c:	9307      	str	r3, [sp, #28]
 801817e:	bf57      	itett	pl
 8018180:	1a5b      	subpl	r3, r3, r1
 8018182:	9903      	ldrmi	r1, [sp, #12]
 8018184:	9307      	strpl	r3, [sp, #28]
 8018186:	9b03      	ldrpl	r3, [sp, #12]
 8018188:	bf58      	it	pl
 801818a:	1c59      	addpl	r1, r3, #1
 801818c:	2a00      	cmp	r2, #0
 801818e:	4489      	add	r9, r1
 8018190:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018194:	db2e      	blt.n	80181f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018196:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018198:	4293      	cmp	r3, r2
 801819a:	dd2b      	ble.n	80181f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801819c:	9c01      	ldr	r4, [sp, #4]
 801819e:	6905      	ldr	r5, [r0, #16]
 80181a0:	46a0      	mov	r8, r4
 80181a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80181a4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80181a8:	45a0      	cmp	r8, r4
 80181aa:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80181ae:	f040 814c 	bne.w	801844a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80181b2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80181b6:	4551      	cmp	r1, sl
 80181b8:	d103      	bne.n	80181c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80181ba:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80181be:	4291      	cmp	r1, r2
 80181c0:	d018      	beq.n	80181f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80181c2:	ea5c 010e 	orrs.w	r1, ip, lr
 80181c6:	d00f      	beq.n	80181e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80181c8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80181cc:	2900      	cmp	r1, #0
 80181ce:	db0b      	blt.n	80181e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80181d0:	428b      	cmp	r3, r1
 80181d2:	dd09      	ble.n	80181e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80181d4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80181d8:	4299      	cmp	r1, r3
 80181da:	f101 0101 	add.w	r1, r1, #1
 80181de:	bf38      	it	cc
 80181e0:	3508      	addcc	r5, #8
 80181e2:	6081      	str	r1, [r0, #8]
 80181e4:	bf38      	it	cc
 80181e6:	6105      	strcc	r5, [r0, #16]
 80181e8:	6903      	ldr	r3, [r0, #16]
 80181ea:	f8a3 a000 	strh.w	sl, [r3]
 80181ee:	805a      	strh	r2, [r3, #2]
 80181f0:	809e      	strh	r6, [r3, #4]
 80181f2:	80de      	strh	r6, [r3, #6]
 80181f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181f6:	6901      	ldr	r1, [r0, #16]
 80181f8:	441a      	add	r2, r3
 80181fa:	88cc      	ldrh	r4, [r1, #6]
 80181fc:	888b      	ldrh	r3, [r1, #4]
 80181fe:	4323      	orrs	r3, r4
 8018200:	d010      	beq.n	8018224 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018202:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018206:	2c00      	cmp	r4, #0
 8018208:	db0c      	blt.n	8018224 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801820a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801820c:	429c      	cmp	r4, r3
 801820e:	da09      	bge.n	8018224 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018210:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018214:	429c      	cmp	r4, r3
 8018216:	f104 0401 	add.w	r4, r4, #1
 801821a:	bf38      	it	cc
 801821c:	3108      	addcc	r1, #8
 801821e:	6084      	str	r4, [r0, #8]
 8018220:	bf38      	it	cc
 8018222:	6101      	strcc	r1, [r0, #16]
 8018224:	6903      	ldr	r3, [r0, #16]
 8018226:	464f      	mov	r7, r9
 8018228:	f8a3 a000 	strh.w	sl, [r3]
 801822c:	805a      	strh	r2, [r3, #2]
 801822e:	809e      	strh	r6, [r3, #4]
 8018230:	80de      	strh	r6, [r3, #6]
 8018232:	9b06      	ldr	r3, [sp, #24]
 8018234:	4293      	cmp	r3, r2
 8018236:	d19c      	bne.n	8018172 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8018238:	9b01      	ldr	r3, [sp, #4]
 801823a:	6907      	ldr	r7, [r0, #16]
 801823c:	f1c3 0620 	rsb	r6, r3, #32
 8018240:	9b05      	ldr	r3, [sp, #20]
 8018242:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018246:	9b04      	ldr	r3, [sp, #16]
 8018248:	429e      	cmp	r6, r3
 801824a:	f040 81c7 	bne.w	80185dc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801824e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018252:	459e      	cmp	lr, r3
 8018254:	d104      	bne.n	8018260 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8018256:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801825a:	429a      	cmp	r2, r3
 801825c:	f43f ae3a 	beq.w	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018260:	88f9      	ldrh	r1, [r7, #6]
 8018262:	88bb      	ldrh	r3, [r7, #4]
 8018264:	430b      	orrs	r3, r1
 8018266:	d010      	beq.n	801828a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801826c:	2b00      	cmp	r3, #0
 801826e:	db0c      	blt.n	801828a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018270:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018272:	428b      	cmp	r3, r1
 8018274:	da09      	bge.n	801828a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018276:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801827a:	428b      	cmp	r3, r1
 801827c:	f103 0301 	add.w	r3, r3, #1
 8018280:	bf38      	it	cc
 8018282:	3708      	addcc	r7, #8
 8018284:	6083      	str	r3, [r0, #8]
 8018286:	bf38      	it	cc
 8018288:	6107      	strcc	r7, [r0, #16]
 801828a:	6903      	ldr	r3, [r0, #16]
 801828c:	f8a3 e000 	strh.w	lr, [r3]
 8018290:	e603      	b.n	8017e9a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8018292:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8018294:	9c03      	ldr	r4, [sp, #12]
 8018296:	42a2      	cmp	r2, r4
 8018298:	f6ff ae1c 	blt.w	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801829c:	9c06      	ldr	r4, [sp, #24]
 801829e:	42a2      	cmp	r2, r4
 80182a0:	9c08      	ldr	r4, [sp, #32]
 80182a2:	bfbc      	itt	lt
 80182a4:	3201      	addlt	r2, #1
 80182a6:	9206      	strlt	r2, [sp, #24]
 80182a8:	f1c3 0220 	rsb	r2, r3, #32
 80182ac:	4362      	muls	r2, r4
 80182ae:	2401      	movs	r4, #1
 80182b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80182b2:	2420      	movs	r4, #32
 80182b4:	e6d6      	b.n	8018064 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80182b6:	ea4f 1861 	mov.w	r8, r1, asr #5
 80182ba:	f009 021f 	and.w	r2, r9, #31
 80182be:	f001 011f 	and.w	r1, r1, #31
 80182c2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80182c6:	920c      	str	r2, [sp, #48]	; 0x30
 80182c8:	45b0      	cmp	r8, r6
 80182ca:	9a01      	ldr	r2, [sp, #4]
 80182cc:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80182d0:	eba2 0203 	sub.w	r2, r2, r3
 80182d4:	d108      	bne.n	80182e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80182d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182d8:	4496      	add	lr, r2
 80182da:	4419      	add	r1, r3
 80182dc:	f8a5 e004 	strh.w	lr, [r5, #4]
 80182e0:	fb02 a101 	mla	r1, r2, r1, sl
 80182e4:	80e9      	strh	r1, [r5, #6]
 80182e6:	e6fa      	b.n	80180de <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80182e8:	2c00      	cmp	r4, #0
 80182ea:	f2c0 80a7 	blt.w	801843c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80182ee:	2701      	movs	r7, #1
 80182f0:	f1c1 0c20 	rsb	ip, r1, #32
 80182f4:	970a      	str	r7, [sp, #40]	; 0x28
 80182f6:	2720      	movs	r7, #32
 80182f8:	fb02 f20c 	mul.w	r2, r2, ip
 80182fc:	9709      	str	r7, [sp, #36]	; 0x24
 80182fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018300:	fb92 fcf4 	sdiv	ip, r2, r4
 8018304:	fb04 221c 	mls	r2, r4, ip, r2
 8018308:	4439      	add	r1, r7
 801830a:	2a00      	cmp	r2, #0
 801830c:	bfbc      	itt	lt
 801830e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018312:	1912      	addlt	r2, r2, r4
 8018314:	fb0c a101 	mla	r1, ip, r1, sl
 8018318:	44e6      	add	lr, ip
 801831a:	80e9      	strh	r1, [r5, #6]
 801831c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801831e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018322:	eb08 0501 	add.w	r5, r8, r1
 8018326:	6901      	ldr	r1, [r0, #16]
 8018328:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801832c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018330:	ea58 070e 	orrs.w	r7, r8, lr
 8018334:	d010      	beq.n	8018358 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018336:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801833a:	f1be 0f00 	cmp.w	lr, #0
 801833e:	db0b      	blt.n	8018358 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018340:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018342:	45be      	cmp	lr, r7
 8018344:	da08      	bge.n	8018358 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018346:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801834a:	45be      	cmp	lr, r7
 801834c:	bf3c      	itt	cc
 801834e:	3108      	addcc	r1, #8
 8018350:	6101      	strcc	r1, [r0, #16]
 8018352:	f10e 0101 	add.w	r1, lr, #1
 8018356:	6081      	str	r1, [r0, #8]
 8018358:	6901      	ldr	r1, [r0, #16]
 801835a:	f04f 0e00 	mov.w	lr, #0
 801835e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018362:	42ae      	cmp	r6, r5
 8018364:	800d      	strh	r5, [r1, #0]
 8018366:	4463      	add	r3, ip
 8018368:	f8a1 8002 	strh.w	r8, [r1, #2]
 801836c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8018370:	f8a1 e006 	strh.w	lr, [r1, #6]
 8018374:	d053      	beq.n	801841e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8018376:	9901      	ldr	r1, [sp, #4]
 8018378:	1b12      	subs	r2, r2, r4
 801837a:	1ac9      	subs	r1, r1, r3
 801837c:	4461      	add	r1, ip
 801837e:	0149      	lsls	r1, r1, #5
 8018380:	fb91 fef4 	sdiv	lr, r1, r4
 8018384:	fb04 111e 	mls	r1, r4, lr, r1
 8018388:	2900      	cmp	r1, #0
 801838a:	bfbc      	itt	lt
 801838c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8018390:	1909      	addlt	r1, r1, r4
 8018392:	f10e 0701 	add.w	r7, lr, #1
 8018396:	970d      	str	r7, [sp, #52]	; 0x34
 8018398:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801839c:	1852      	adds	r2, r2, r1
 801839e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80183a0:	bf54      	ite	pl
 80183a2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 80183a6:	46f4      	movmi	ip, lr
 80183a8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80183ac:	bf58      	it	pl
 80183ae:	1b12      	subpl	r2, r2, r4
 80183b0:	4463      	add	r3, ip
 80183b2:	443d      	add	r5, r7
 80183b4:	44e3      	add	fp, ip
 80183b6:	f8aa b004 	strh.w	fp, [sl, #4]
 80183ba:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80183be:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80183c2:	f8aa b006 	strh.w	fp, [sl, #6]
 80183c6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80183ca:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80183ce:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80183d2:	ea5b 070a 	orrs.w	r7, fp, sl
 80183d6:	d014      	beq.n	8018402 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80183d8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80183dc:	f1ba 0f00 	cmp.w	sl, #0
 80183e0:	db0f      	blt.n	8018402 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80183e2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80183e4:	45ba      	cmp	sl, r7
 80183e6:	da0c      	bge.n	8018402 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80183e8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80183ec:	45ba      	cmp	sl, r7
 80183ee:	f10a 0a01 	add.w	sl, sl, #1
 80183f2:	bf38      	it	cc
 80183f4:	f10c 0c08 	addcc.w	ip, ip, #8
 80183f8:	f8c0 a008 	str.w	sl, [r0, #8]
 80183fc:	bf38      	it	cc
 80183fe:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8018402:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018406:	f04f 0700 	mov.w	r7, #0
 801840a:	42ae      	cmp	r6, r5
 801840c:	f8ac 5000 	strh.w	r5, [ip]
 8018410:	f8ac 8002 	strh.w	r8, [ip, #2]
 8018414:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018418:	f8ac 7006 	strh.w	r7, [ip, #6]
 801841c:	d1bc      	bne.n	8018398 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801841e:	6904      	ldr	r4, [r0, #16]
 8018420:	9a01      	ldr	r2, [sp, #4]
 8018422:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018424:	1ad3      	subs	r3, r2, r3
 8018426:	88a2      	ldrh	r2, [r4, #4]
 8018428:	3120      	adds	r1, #32
 801842a:	441a      	add	r2, r3
 801842c:	80a2      	strh	r2, [r4, #4]
 801842e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018430:	1a89      	subs	r1, r1, r2
 8018432:	88e2      	ldrh	r2, [r4, #6]
 8018434:	fb03 2301 	mla	r3, r3, r1, r2
 8018438:	80e3      	strh	r3, [r4, #6]
 801843a:	e650      	b.n	80180de <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801843c:	f04f 37ff 	mov.w	r7, #4294967295
 8018440:	434a      	muls	r2, r1
 8018442:	4264      	negs	r4, r4
 8018444:	970a      	str	r7, [sp, #40]	; 0x28
 8018446:	2700      	movs	r7, #0
 8018448:	e758      	b.n	80182fc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801844a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801844e:	f009 031f 	and.w	r3, r9, #31
 8018452:	f007 071f 	and.w	r7, r7, #31
 8018456:	fa1f fc8c 	uxth.w	ip, ip
 801845a:	45d0      	cmp	r8, sl
 801845c:	930f      	str	r3, [sp, #60]	; 0x3c
 801845e:	fa1f fe8e 	uxth.w	lr, lr
 8018462:	d10a      	bne.n	801847a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8018464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018466:	449c      	add	ip, r3
 8018468:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801846a:	441f      	add	r7, r3
 801846c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801846e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018472:	fb03 e707 	mla	r7, r3, r7, lr
 8018476:	80ef      	strh	r7, [r5, #6]
 8018478:	e6bc      	b.n	80181f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801847a:	2900      	cmp	r1, #0
 801847c:	f2c0 80a6 	blt.w	80185cc <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8018480:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018482:	f1c7 0320 	rsb	r3, r7, #32
 8018486:	4363      	muls	r3, r4
 8018488:	2401      	movs	r4, #1
 801848a:	940d      	str	r4, [sp, #52]	; 0x34
 801848c:	2420      	movs	r4, #32
 801848e:	940c      	str	r4, [sp, #48]	; 0x30
 8018490:	fb93 f4f1 	sdiv	r4, r3, r1
 8018494:	fb01 3b14 	mls	fp, r1, r4, r3
 8018498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801849a:	f1bb 0f00 	cmp.w	fp, #0
 801849e:	441f      	add	r7, r3
 80184a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80184a2:	bfbc      	itt	lt
 80184a4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80184a8:	448b      	addlt	fp, r1
 80184aa:	fb04 e707 	mla	r7, r4, r7, lr
 80184ae:	44a4      	add	ip, r4
 80184b0:	80ef      	strh	r7, [r5, #6]
 80184b2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80184b6:	eb08 0503 	add.w	r5, r8, r3
 80184ba:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80184be:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80184c2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80184c6:	ea5e 0307 	orrs.w	r3, lr, r7
 80184ca:	d011      	beq.n	80184f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80184cc:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80184d0:	f1be 0f00 	cmp.w	lr, #0
 80184d4:	db0c      	blt.n	80184f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80184d6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80184d8:	45be      	cmp	lr, r7
 80184da:	da09      	bge.n	80184f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80184dc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80184e0:	45be      	cmp	lr, r7
 80184e2:	bf3c      	itt	cc
 80184e4:	f10c 0708 	addcc.w	r7, ip, #8
 80184e8:	6107      	strcc	r7, [r0, #16]
 80184ea:	f10e 0701 	add.w	r7, lr, #1
 80184ee:	6087      	str	r7, [r0, #8]
 80184f0:	6907      	ldr	r7, [r0, #16]
 80184f2:	b213      	sxth	r3, r2
 80184f4:	4555      	cmp	r5, sl
 80184f6:	9310      	str	r3, [sp, #64]	; 0x40
 80184f8:	807b      	strh	r3, [r7, #2]
 80184fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184fc:	803d      	strh	r5, [r7, #0]
 80184fe:	80be      	strh	r6, [r7, #4]
 8018500:	eb04 0c03 	add.w	ip, r4, r3
 8018504:	80fe      	strh	r6, [r7, #6]
 8018506:	d050      	beq.n	80185aa <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8018508:	9b01      	ldr	r3, [sp, #4]
 801850a:	eba3 070c 	sub.w	r7, r3, ip
 801850e:	ebab 0301 	sub.w	r3, fp, r1
 8018512:	443c      	add	r4, r7
 8018514:	9309      	str	r3, [sp, #36]	; 0x24
 8018516:	0164      	lsls	r4, r4, #5
 8018518:	fb94 f8f1 	sdiv	r8, r4, r1
 801851c:	fb01 4418 	mls	r4, r1, r8, r4
 8018520:	2c00      	cmp	r4, #0
 8018522:	bfbc      	itt	lt
 8018524:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018528:	1864      	addlt	r4, r4, r1
 801852a:	f108 0701 	add.w	r7, r8, #1
 801852e:	9711      	str	r7, [sp, #68]	; 0x44
 8018530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018532:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018536:	191b      	adds	r3, r3, r4
 8018538:	f8be b004 	ldrh.w	fp, [lr, #4]
 801853c:	bf54      	ite	pl
 801853e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8018540:	4647      	movmi	r7, r8
 8018542:	9309      	str	r3, [sp, #36]	; 0x24
 8018544:	bf58      	it	pl
 8018546:	1a5b      	subpl	r3, r3, r1
 8018548:	44bb      	add	fp, r7
 801854a:	44bc      	add	ip, r7
 801854c:	bf58      	it	pl
 801854e:	9309      	strpl	r3, [sp, #36]	; 0x24
 8018550:	f8ae b004 	strh.w	fp, [lr, #4]
 8018554:	f8be b006 	ldrh.w	fp, [lr, #6]
 8018558:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801855c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801855e:	f8ae b006 	strh.w	fp, [lr, #6]
 8018562:	443d      	add	r5, r7
 8018564:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018568:	f8be b006 	ldrh.w	fp, [lr, #6]
 801856c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8018570:	ea5b 0307 	orrs.w	r3, fp, r7
 8018574:	d011      	beq.n	801859a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018576:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801857a:	f1bb 0f00 	cmp.w	fp, #0
 801857e:	db0c      	blt.n	801859a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018580:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018582:	45bb      	cmp	fp, r7
 8018584:	da09      	bge.n	801859a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018586:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801858a:	45bb      	cmp	fp, r7
 801858c:	bf3c      	itt	cc
 801858e:	f10e 0708 	addcc.w	r7, lr, #8
 8018592:	6107      	strcc	r7, [r0, #16]
 8018594:	f10b 0701 	add.w	r7, fp, #1
 8018598:	6087      	str	r7, [r0, #8]
 801859a:	6907      	ldr	r7, [r0, #16]
 801859c:	4555      	cmp	r5, sl
 801859e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185a0:	803d      	strh	r5, [r7, #0]
 80185a2:	807b      	strh	r3, [r7, #2]
 80185a4:	80be      	strh	r6, [r7, #4]
 80185a6:	80fe      	strh	r6, [r7, #6]
 80185a8:	d1c2      	bne.n	8018530 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80185aa:	9b01      	ldr	r3, [sp, #4]
 80185ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80185ae:	eba3 0c0c 	sub.w	ip, r3, ip
 80185b2:	6903      	ldr	r3, [r0, #16]
 80185b4:	3720      	adds	r7, #32
 80185b6:	8899      	ldrh	r1, [r3, #4]
 80185b8:	4461      	add	r1, ip
 80185ba:	8099      	strh	r1, [r3, #4]
 80185bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80185be:	1a7f      	subs	r7, r7, r1
 80185c0:	88d9      	ldrh	r1, [r3, #6]
 80185c2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80185c6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80185ca:	e613      	b.n	80181f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80185cc:	f04f 34ff 	mov.w	r4, #4294967295
 80185d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185d2:	4249      	negs	r1, r1
 80185d4:	940d      	str	r4, [sp, #52]	; 0x34
 80185d6:	2400      	movs	r4, #0
 80185d8:	437b      	muls	r3, r7
 80185da:	e758      	b.n	801848e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80185dc:	9905      	ldr	r1, [sp, #20]
 80185de:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80185e2:	f009 0c1f 	and.w	ip, r9, #31
 80185e6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80185ea:	f001 011f 	and.w	r1, r1, #31
 80185ee:	45f3      	cmp	fp, lr
 80185f0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80185f4:	9102      	str	r1, [sp, #8]
 80185f6:	9904      	ldr	r1, [sp, #16]
 80185f8:	eba1 0406 	sub.w	r4, r1, r6
 80185fc:	d108      	bne.n	8018610 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80185fe:	9b02      	ldr	r3, [sp, #8]
 8018600:	44a0      	add	r8, r4
 8018602:	449c      	add	ip, r3
 8018604:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018608:	fb04 a40c 	mla	r4, r4, ip, sl
 801860c:	80fc      	strh	r4, [r7, #6]
 801860e:	e461      	b.n	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018610:	9905      	ldr	r1, [sp, #20]
 8018612:	ebb1 0109 	subs.w	r1, r1, r9
 8018616:	bf51      	iteee	pl
 8018618:	f1cc 0520 	rsbpl	r5, ip, #32
 801861c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018620:	4249      	negmi	r1, r1
 8018622:	2500      	movmi	r5, #0
 8018624:	bf5d      	ittte	pl
 8018626:	436c      	mulpl	r4, r5
 8018628:	2520      	movpl	r5, #32
 801862a:	f04f 0901 	movpl.w	r9, #1
 801862e:	f04f 39ff 	movmi.w	r9, #4294967295
 8018632:	9501      	str	r5, [sp, #4]
 8018634:	9b01      	ldr	r3, [sp, #4]
 8018636:	fb94 f5f1 	sdiv	r5, r4, r1
 801863a:	fb01 4415 	mls	r4, r1, r5, r4
 801863e:	449c      	add	ip, r3
 8018640:	eb0b 0309 	add.w	r3, fp, r9
 8018644:	2c00      	cmp	r4, #0
 8018646:	bfbc      	itt	lt
 8018648:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801864c:	1864      	addlt	r4, r4, r1
 801864e:	44a8      	add	r8, r5
 8018650:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018654:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018658:	f8a7 c006 	strh.w	ip, [r7, #6]
 801865c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018660:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018664:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018668:	ea58 0707 	orrs.w	r7, r8, r7
 801866c:	d011      	beq.n	8018692 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801866e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018672:	f1b8 0f00 	cmp.w	r8, #0
 8018676:	db0c      	blt.n	8018692 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018678:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801867a:	45b8      	cmp	r8, r7
 801867c:	da09      	bge.n	8018692 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801867e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8018682:	45b8      	cmp	r8, r7
 8018684:	bf3c      	itt	cc
 8018686:	f10c 0708 	addcc.w	r7, ip, #8
 801868a:	6107      	strcc	r7, [r0, #16]
 801868c:	f108 0701 	add.w	r7, r8, #1
 8018690:	6087      	str	r7, [r0, #8]
 8018692:	6907      	ldr	r7, [r0, #16]
 8018694:	f04f 0c00 	mov.w	ip, #0
 8018698:	b212      	sxth	r2, r2
 801869a:	459e      	cmp	lr, r3
 801869c:	803b      	strh	r3, [r7, #0]
 801869e:	442e      	add	r6, r5
 80186a0:	807a      	strh	r2, [r7, #2]
 80186a2:	f8a7 c004 	strh.w	ip, [r7, #4]
 80186a6:	f8a7 c006 	strh.w	ip, [r7, #6]
 80186aa:	d04b      	beq.n	8018744 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80186ac:	9f04      	ldr	r7, [sp, #16]
 80186ae:	1a64      	subs	r4, r4, r1
 80186b0:	f04f 0a00 	mov.w	sl, #0
 80186b4:	1bbf      	subs	r7, r7, r6
 80186b6:	443d      	add	r5, r7
 80186b8:	016d      	lsls	r5, r5, #5
 80186ba:	fb95 f8f1 	sdiv	r8, r5, r1
 80186be:	fb01 5518 	mls	r5, r1, r8, r5
 80186c2:	4565      	cmp	r5, ip
 80186c4:	bfbc      	itt	lt
 80186c6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80186ca:	186d      	addlt	r5, r5, r1
 80186cc:	f108 0701 	add.w	r7, r8, #1
 80186d0:	9703      	str	r7, [sp, #12]
 80186d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80186d6:	1964      	adds	r4, r4, r5
 80186d8:	444b      	add	r3, r9
 80186da:	bf54      	ite	pl
 80186dc:	9f03      	ldrpl	r7, [sp, #12]
 80186de:	4647      	movmi	r7, r8
 80186e0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80186e4:	bf58      	it	pl
 80186e6:	1a64      	subpl	r4, r4, r1
 80186e8:	443e      	add	r6, r7
 80186ea:	44bb      	add	fp, r7
 80186ec:	f8ac b004 	strh.w	fp, [ip, #4]
 80186f0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80186f4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80186f8:	f8ac b006 	strh.w	fp, [ip, #6]
 80186fc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018700:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018704:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018708:	ea5b 0707 	orrs.w	r7, fp, r7
 801870c:	d011      	beq.n	8018732 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801870e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018712:	f1bb 0f00 	cmp.w	fp, #0
 8018716:	db0c      	blt.n	8018732 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8018718:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801871a:	45bb      	cmp	fp, r7
 801871c:	da09      	bge.n	8018732 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801871e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018722:	45bb      	cmp	fp, r7
 8018724:	bf3c      	itt	cc
 8018726:	f10c 0708 	addcc.w	r7, ip, #8
 801872a:	6107      	strcc	r7, [r0, #16]
 801872c:	f10b 0701 	add.w	r7, fp, #1
 8018730:	6087      	str	r7, [r0, #8]
 8018732:	6907      	ldr	r7, [r0, #16]
 8018734:	459e      	cmp	lr, r3
 8018736:	803b      	strh	r3, [r7, #0]
 8018738:	807a      	strh	r2, [r7, #2]
 801873a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801873e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018742:	d1c6      	bne.n	80186d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8018744:	9b04      	ldr	r3, [sp, #16]
 8018746:	1b9e      	subs	r6, r3, r6
 8018748:	6903      	ldr	r3, [r0, #16]
 801874a:	889a      	ldrh	r2, [r3, #4]
 801874c:	4432      	add	r2, r6
 801874e:	809a      	strh	r2, [r3, #4]
 8018750:	9a02      	ldr	r2, [sp, #8]
 8018752:	f102 0c20 	add.w	ip, r2, #32
 8018756:	9a01      	ldr	r2, [sp, #4]
 8018758:	ebac 0c02 	sub.w	ip, ip, r2
 801875c:	88da      	ldrh	r2, [r3, #6]
 801875e:	fb06 260c 	mla	r6, r6, ip, r2
 8018762:	80de      	strh	r6, [r3, #6]
 8018764:	f7ff bbb6 	b.w	8017ed4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08018768 <_ZN8touchgfx7Outline6lineToEii>:
 8018768:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801876a:	079b      	lsls	r3, r3, #30
 801876c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801876e:	460e      	mov	r6, r1
 8018770:	4615      	mov	r5, r2
 8018772:	d511      	bpl.n	8018798 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018774:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8018778:	ea86 0701 	eor.w	r7, r6, r1
 801877c:	ea85 0302 	eor.w	r3, r5, r2
 8018780:	433b      	orrs	r3, r7
 8018782:	d009      	beq.n	8018798 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018784:	4633      	mov	r3, r6
 8018786:	9500      	str	r5, [sp, #0]
 8018788:	f7ff fb4c 	bl	8017e24 <_ZN8touchgfx7Outline10renderLineEiiii>
 801878c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801878e:	f043 0301 	orr.w	r3, r3, #1
 8018792:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8018796:	6243      	str	r3, [r0, #36]	; 0x24
 8018798:	b003      	add	sp, #12
 801879a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801879c <_ZN8touchgfx7Outline6moveToEii>:
 801879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801879e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80187a0:	4615      	mov	r5, r2
 80187a2:	4604      	mov	r4, r0
 80187a4:	460e      	mov	r6, r1
 80187a6:	079a      	lsls	r2, r3, #30
 80187a8:	d401      	bmi.n	80187ae <_ZN8touchgfx7Outline6moveToEii+0x12>
 80187aa:	f7ff fb07 	bl	8017dbc <_ZN8touchgfx7Outline5resetEv>
 80187ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187b0:	07db      	lsls	r3, r3, #31
 80187b2:	d504      	bpl.n	80187be <_ZN8touchgfx7Outline6moveToEii+0x22>
 80187b4:	4620      	mov	r0, r4
 80187b6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80187ba:	f7ff ffd5 	bl	8018768 <_ZN8touchgfx7Outline6lineToEii>
 80187be:	6923      	ldr	r3, [r4, #16]
 80187c0:	1170      	asrs	r0, r6, #5
 80187c2:	1169      	asrs	r1, r5, #5
 80187c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187c8:	4290      	cmp	r0, r2
 80187ca:	d103      	bne.n	80187d4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80187cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80187d0:	4291      	cmp	r1, r2
 80187d2:	d01a      	beq.n	801880a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80187d4:	88df      	ldrh	r7, [r3, #6]
 80187d6:	889a      	ldrh	r2, [r3, #4]
 80187d8:	433a      	orrs	r2, r7
 80187da:	d010      	beq.n	80187fe <_ZN8touchgfx7Outline6moveToEii+0x62>
 80187dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80187e0:	2a00      	cmp	r2, #0
 80187e2:	db0c      	blt.n	80187fe <_ZN8touchgfx7Outline6moveToEii+0x62>
 80187e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80187e6:	42ba      	cmp	r2, r7
 80187e8:	da09      	bge.n	80187fe <_ZN8touchgfx7Outline6moveToEii+0x62>
 80187ea:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80187ee:	42ba      	cmp	r2, r7
 80187f0:	f102 0201 	add.w	r2, r2, #1
 80187f4:	bf38      	it	cc
 80187f6:	3308      	addcc	r3, #8
 80187f8:	60a2      	str	r2, [r4, #8]
 80187fa:	bf38      	it	cc
 80187fc:	6123      	strcc	r3, [r4, #16]
 80187fe:	6923      	ldr	r3, [r4, #16]
 8018800:	2200      	movs	r2, #0
 8018802:	8018      	strh	r0, [r3, #0]
 8018804:	8059      	strh	r1, [r3, #2]
 8018806:	809a      	strh	r2, [r3, #4]
 8018808:	80da      	strh	r2, [r3, #6]
 801880a:	6166      	str	r6, [r4, #20]
 801880c:	6225      	str	r5, [r4, #32]
 801880e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018814 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018818:	b0d0      	sub	sp, #320	; 0x140
 801881a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801881e:	466c      	mov	r4, sp
 8018820:	4627      	mov	r7, r4
 8018822:	1a0d      	subs	r5, r1, r0
 8018824:	f100 0308 	add.w	r3, r0, #8
 8018828:	2d48      	cmp	r5, #72	; 0x48
 801882a:	f340 80d5 	ble.w	80189d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801882e:	112d      	asrs	r5, r5, #4
 8018830:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018834:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018838:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801883c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8018840:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018844:	6816      	ldr	r6, [r2, #0]
 8018846:	6006      	str	r6, [r0, #0]
 8018848:	6856      	ldr	r6, [r2, #4]
 801884a:	6046      	str	r6, [r0, #4]
 801884c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018850:	f8a2 8002 	strh.w	r8, [r2, #2]
 8018854:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018858:	f8a2 c006 	strh.w	ip, [r2, #6]
 801885c:	f1a1 0208 	sub.w	r2, r1, #8
 8018860:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018864:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8018868:	4565      	cmp	r5, ip
 801886a:	db06      	blt.n	801887a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801886c:	d119      	bne.n	80188a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801886e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8018872:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8018876:	42ae      	cmp	r6, r5
 8018878:	dd13      	ble.n	80188a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801887a:	460e      	mov	r6, r1
 801887c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8018880:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8018884:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018888:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801888c:	601d      	str	r5, [r3, #0]
 801888e:	6875      	ldr	r5, [r6, #4]
 8018890:	605d      	str	r5, [r3, #4]
 8018892:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018896:	f821 cc06 	strh.w	ip, [r1, #-6]
 801889a:	f821 8c04 	strh.w	r8, [r1, #-4]
 801889e:	f821 ec02 	strh.w	lr, [r1, #-2]
 80188a2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80188a6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80188aa:	42ae      	cmp	r6, r5
 80188ac:	db06      	blt.n	80188bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80188ae:	d116      	bne.n	80188de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80188b0:	f9b0 c000 	ldrsh.w	ip, [r0]
 80188b4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80188b8:	45ac      	cmp	ip, r5
 80188ba:	da10      	bge.n	80188de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80188bc:	681d      	ldr	r5, [r3, #0]
 80188be:	f9b0 8000 	ldrsh.w	r8, [r0]
 80188c2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80188c6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80188ca:	6005      	str	r5, [r0, #0]
 80188cc:	685d      	ldr	r5, [r3, #4]
 80188ce:	f8a0 8008 	strh.w	r8, [r0, #8]
 80188d2:	6045      	str	r5, [r0, #4]
 80188d4:	8146      	strh	r6, [r0, #10]
 80188d6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80188da:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80188de:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80188e2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80188e6:	4565      	cmp	r5, ip
 80188e8:	db06      	blt.n	80188f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80188ea:	d119      	bne.n	8018920 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80188ec:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80188f0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80188f4:	42ae      	cmp	r6, r5
 80188f6:	da13      	bge.n	8018920 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80188f8:	460e      	mov	r6, r1
 80188fa:	f9b0 9000 	ldrsh.w	r9, [r0]
 80188fe:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018902:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018906:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801890a:	6005      	str	r5, [r0, #0]
 801890c:	6875      	ldr	r5, [r6, #4]
 801890e:	6045      	str	r5, [r0, #4]
 8018910:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018914:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018918:	f821 8c04 	strh.w	r8, [r1, #-4]
 801891c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018920:	3308      	adds	r3, #8
 8018922:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018926:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801892a:	45e6      	cmp	lr, ip
 801892c:	dbf8      	blt.n	8018920 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801892e:	d105      	bne.n	801893c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018930:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018934:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018938:	42ae      	cmp	r6, r5
 801893a:	dbf1      	blt.n	8018920 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801893c:	4615      	mov	r5, r2
 801893e:	3a08      	subs	r2, #8
 8018940:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8018944:	45b4      	cmp	ip, r6
 8018946:	dbf9      	blt.n	801893c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018948:	d105      	bne.n	8018956 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801894a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801894e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8018952:	45b0      	cmp	r8, r6
 8018954:	dbf2      	blt.n	801893c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018956:	4293      	cmp	r3, r2
 8018958:	f1a5 0608 	sub.w	r6, r5, #8
 801895c:	d816      	bhi.n	801898c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801895e:	f8d6 c000 	ldr.w	ip, [r6]
 8018962:	f9b3 a000 	ldrsh.w	sl, [r3]
 8018966:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801896a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801896e:	f8c3 c000 	str.w	ip, [r3]
 8018972:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018976:	f8c3 c004 	str.w	ip, [r3, #4]
 801897a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801897e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8018982:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018986:	f825 8c02 	strh.w	r8, [r5, #-2]
 801898a:	e7c9      	b.n	8018920 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801898c:	f8d6 e000 	ldr.w	lr, [r6]
 8018990:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018994:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8018998:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801899c:	f8c0 e000 	str.w	lr, [r0]
 80189a0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80189a4:	1a16      	subs	r6, r2, r0
 80189a6:	f8c0 e004 	str.w	lr, [r0, #4]
 80189aa:	f825 ac08 	strh.w	sl, [r5, #-8]
 80189ae:	f825 cc06 	strh.w	ip, [r5, #-6]
 80189b2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80189b6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80189ba:	1acd      	subs	r5, r1, r3
 80189bc:	10ed      	asrs	r5, r5, #3
 80189be:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80189c2:	bfb5      	itete	lt
 80189c4:	e9c4 0200 	strdlt	r0, r2, [r4]
 80189c8:	e9c4 3100 	strdge	r3, r1, [r4]
 80189cc:	460a      	movlt	r2, r1
 80189ce:	4603      	movge	r3, r0
 80189d0:	3408      	adds	r4, #8
 80189d2:	4618      	mov	r0, r3
 80189d4:	4611      	mov	r1, r2
 80189d6:	e724      	b.n	8018822 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80189d8:	4299      	cmp	r1, r3
 80189da:	d927      	bls.n	8018a2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80189dc:	f1a3 0210 	sub.w	r2, r3, #16
 80189e0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80189e4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80189e8:	45ac      	cmp	ip, r5
 80189ea:	db06      	blt.n	80189fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80189ec:	d11c      	bne.n	8018a28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80189ee:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80189f2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80189f6:	42ae      	cmp	r6, r5
 80189f8:	da16      	bge.n	8018a28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80189fa:	4615      	mov	r5, r2
 80189fc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018a00:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8018a04:	3a08      	subs	r2, #8
 8018a06:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018a0a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8018a0e:	6196      	str	r6, [r2, #24]
 8018a10:	42a8      	cmp	r0, r5
 8018a12:	686e      	ldr	r6, [r5, #4]
 8018a14:	f8a2 9010 	strh.w	r9, [r2, #16]
 8018a18:	61d6      	str	r6, [r2, #28]
 8018a1a:	f8a2 c012 	strh.w	ip, [r2, #18]
 8018a1e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8018a22:	f8a2 e016 	strh.w	lr, [r2, #22]
 8018a26:	d1db      	bne.n	80189e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8018a28:	3308      	adds	r3, #8
 8018a2a:	e7d5      	b.n	80189d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018a2c:	42bc      	cmp	r4, r7
 8018a2e:	d903      	bls.n	8018a38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8018a30:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8018a34:	3c08      	subs	r4, #8
 8018a36:	e6f4      	b.n	8018822 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018a38:	b050      	add	sp, #320	; 0x140
 8018a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018a3e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8018a3e:	b510      	push	{r4, lr}
 8018a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018a42:	4604      	mov	r4, r0
 8018a44:	07da      	lsls	r2, r3, #31
 8018a46:	d507      	bpl.n	8018a58 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8018a48:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8018a4c:	f7ff fe8c 	bl	8018768 <_ZN8touchgfx7Outline6lineToEii>
 8018a50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018a52:	f023 0301 	bic.w	r3, r3, #1
 8018a56:	6243      	str	r3, [r0, #36]	; 0x24
 8018a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a5a:	079b      	lsls	r3, r3, #30
 8018a5c:	d521      	bpl.n	8018aa2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8018a5e:	6923      	ldr	r3, [r4, #16]
 8018a60:	88d9      	ldrh	r1, [r3, #6]
 8018a62:	889a      	ldrh	r2, [r3, #4]
 8018a64:	430a      	orrs	r2, r1
 8018a66:	d010      	beq.n	8018a8a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018a68:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018a6c:	2a00      	cmp	r2, #0
 8018a6e:	db0c      	blt.n	8018a8a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018a70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018a72:	428a      	cmp	r2, r1
 8018a74:	da09      	bge.n	8018a8a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018a76:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8018a7a:	4291      	cmp	r1, r2
 8018a7c:	f102 0201 	add.w	r2, r2, #1
 8018a80:	bf88      	it	hi
 8018a82:	3308      	addhi	r3, #8
 8018a84:	60a2      	str	r2, [r4, #8]
 8018a86:	bf88      	it	hi
 8018a88:	6123      	strhi	r3, [r4, #16]
 8018a8a:	68a1      	ldr	r1, [r4, #8]
 8018a8c:	b129      	cbz	r1, 8018a9a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018a8e:	6863      	ldr	r3, [r4, #4]
 8018a90:	4299      	cmp	r1, r3
 8018a92:	d802      	bhi.n	8018a9a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018a94:	68e0      	ldr	r0, [r4, #12]
 8018a96:	f7ff febd 	bl	8018814 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8018a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a9c:	f023 0302 	bic.w	r3, r3, #2
 8018aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8018aa2:	68e0      	ldr	r0, [r4, #12]
 8018aa4:	bd10      	pop	{r4, pc}
	...

08018aa8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018aa8:	4b01      	ldr	r3, [pc, #4]	; (8018ab0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018aaa:	6818      	ldr	r0, [r3, #0]
 8018aac:	4770      	bx	lr
 8018aae:	bf00      	nop
 8018ab0:	20014698 	.word	0x20014698

08018ab4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018ab4:	4b01      	ldr	r3, [pc, #4]	; (8018abc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8018ab6:	6818      	ldr	r0, [r3, #0]
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop
 8018abc:	2001469c 	.word	0x2001469c

08018ac0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018ac0:	b510      	push	{r4, lr}
 8018ac2:	6803      	ldr	r3, [r0, #0]
 8018ac4:	460c      	mov	r4, r1
 8018ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ac8:	4798      	blx	r3
 8018aca:	1b03      	subs	r3, r0, r4
 8018acc:	4258      	negs	r0, r3
 8018ace:	4158      	adcs	r0, r3
 8018ad0:	bd10      	pop	{r4, pc}
	...

08018ad4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018ad4:	4b01      	ldr	r3, [pc, #4]	; (8018adc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018ad6:	6019      	str	r1, [r3, #0]
 8018ad8:	4770      	bx	lr
 8018ada:	bf00      	nop
 8018adc:	200146a0 	.word	0x200146a0

08018ae0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae4:	4696      	mov	lr, r2
 8018ae6:	b097      	sub	sp, #92	; 0x5c
 8018ae8:	4605      	mov	r5, r0
 8018aea:	4614      	mov	r4, r2
 8018aec:	460e      	mov	r6, r1
 8018aee:	461f      	mov	r7, r3
 8018af0:	f10d 0c1c 	add.w	ip, sp, #28
 8018af4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8018af8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018afc:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8018b00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b08:	f8de 3000 	ldr.w	r3, [lr]
 8018b0c:	f104 0e14 	add.w	lr, r4, #20
 8018b10:	f8cc 3000 	str.w	r3, [ip]
 8018b14:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018b18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b20:	f8de 3000 	ldr.w	r3, [lr]
 8018b24:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018b28:	f8cc 3000 	str.w	r3, [ip]
 8018b2c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018b30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b38:	f8de 3000 	ldr.w	r3, [lr]
 8018b3c:	4631      	mov	r1, r6
 8018b3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018b40:	4628      	mov	r0, r5
 8018b42:	f8cc 3000 	str.w	r3, [ip]
 8018b46:	682b      	ldr	r3, [r5, #0]
 8018b48:	9201      	str	r2, [sp, #4]
 8018b4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018b4c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018b50:	9200      	str	r2, [sp, #0]
 8018b52:	aa07      	add	r2, sp, #28
 8018b54:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018b58:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8018b5c:	463b      	mov	r3, r7
 8018b5e:	47d8      	blx	fp
 8018b60:	46a6      	mov	lr, r4
 8018b62:	f10d 0c1c 	add.w	ip, sp, #28
 8018b66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b6e:	f8de 3000 	ldr.w	r3, [lr]
 8018b72:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018b76:	343c      	adds	r4, #60	; 0x3c
 8018b78:	f8cc 3000 	str.w	r3, [ip]
 8018b7c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018b80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b88:	f8de 3000 	ldr.w	r3, [lr]
 8018b8c:	f8cc 3000 	str.w	r3, [ip]
 8018b90:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b9a:	6823      	ldr	r3, [r4, #0]
 8018b9c:	4631      	mov	r1, r6
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	f8cc 3000 	str.w	r3, [ip]
 8018ba4:	682b      	ldr	r3, [r5, #0]
 8018ba6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018baa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018bac:	f8cd 8008 	str.w	r8, [sp, #8]
 8018bb0:	9201      	str	r2, [sp, #4]
 8018bb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018bb4:	9200      	str	r2, [sp, #0]
 8018bb6:	aa07      	add	r2, sp, #28
 8018bb8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8018bba:	463b      	mov	r3, r7
 8018bbc:	47a0      	blx	r4
 8018bbe:	b017      	add	sp, #92	; 0x5c
 8018bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bc4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bc8:	b08d      	sub	sp, #52	; 0x34
 8018bca:	4688      	mov	r8, r1
 8018bcc:	f8d3 c000 	ldr.w	ip, [r3]
 8018bd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018bd2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8018bd6:	680f      	ldr	r7, [r1, #0]
 8018bd8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018bdc:	eba7 070c 	sub.w	r7, r7, ip
 8018be0:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8018be4:	edd3 6a07 	vldr	s13, [r3, #28]
 8018be8:	42bc      	cmp	r4, r7
 8018bea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018bec:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018bf0:	bfa8      	it	ge
 8018bf2:	463c      	movge	r4, r7
 8018bf4:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018bf8:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018bfc:	ee07 4a90 	vmov	s15, r4
 8018c00:	eb09 0e0c 	add.w	lr, r9, ip
 8018c04:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018c08:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018c0c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018c10:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8018c14:	4571      	cmp	r1, lr
 8018c16:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018c1a:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018c1e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018c22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018c26:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018c2a:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018c2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018c32:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018c36:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018c3a:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018c3e:	f340 808c 	ble.w	8018d5a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8018c42:	eba1 060e 	sub.w	r6, r1, lr
 8018c46:	fb96 f5f4 	sdiv	r5, r6, r4
 8018c4a:	ee07 5a10 	vmov	s14, r5
 8018c4e:	2d00      	cmp	r5, #0
 8018c50:	fb04 6615 	mls	r6, r4, r5, r6
 8018c54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c58:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018c5c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018c60:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018c64:	dd12      	ble.n	8018c8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8018c66:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018c6a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018c6e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018c72:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c7a:	bf14      	ite	ne
 8018c7c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018c80:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018c84:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018c88:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018c8c:	fb05 f204 	mul.w	r2, r5, r4
 8018c90:	1abf      	subs	r7, r7, r2
 8018c92:	4494      	add	ip, r2
 8018c94:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018c98:	4411      	add	r1, r2
 8018c9a:	eb09 020c 	add.w	r2, r9, ip
 8018c9e:	b209      	sxth	r1, r1
 8018ca0:	443a      	add	r2, r7
 8018ca2:	428a      	cmp	r2, r1
 8018ca4:	bfc4      	itt	gt
 8018ca6:	eba1 0209 	subgt.w	r2, r1, r9
 8018caa:	eba2 070c 	subgt.w	r7, r2, ip
 8018cae:	2f00      	cmp	r7, #0
 8018cb0:	dd50      	ble.n	8018d54 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8018cb2:	fb97 f1f4 	sdiv	r1, r7, r4
 8018cb6:	fb04 7211 	mls	r2, r4, r1, r7
 8018cba:	b90a      	cbnz	r2, 8018cc0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018cbc:	3901      	subs	r1, #1
 8018cbe:	4622      	mov	r2, r4
 8018cc0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018cc4:	6840      	ldr	r0, [r0, #4]
 8018cc6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8018cca:	44b6      	add	lr, r6
 8018ccc:	f8d0 a000 	ldr.w	sl, [r0]
 8018cd0:	2900      	cmp	r1, #0
 8018cd2:	bfcc      	ite	gt
 8018cd4:	46a1      	movgt	r9, r4
 8018cd6:	4691      	movle	r9, r2
 8018cd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8018cda:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018cdc:	fb04 e505 	mla	r5, r4, r5, lr
 8018ce0:	eef0 6a42 	vmov.f32	s13, s4
 8018ce4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018ce8:	9008      	str	r0, [sp, #32]
 8018cea:	eeb0 7a61 	vmov.f32	s14, s3
 8018cee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018cf0:	695b      	ldr	r3, [r3, #20]
 8018cf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018cf6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018cfa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018cfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018d00:	445b      	add	r3, fp
 8018d02:	9307      	str	r3, [sp, #28]
 8018d04:	ee16 3a90 	vmov	r3, s13
 8018d08:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018d0c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018d10:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018d14:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018d18:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018d1c:	ee17 7a90 	vmov	r7, s15
 8018d20:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018d24:	fb97 f7f4 	sdiv	r7, r7, r4
 8018d28:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018d2c:	ee17 ca90 	vmov	ip, s15
 8018d30:	fb9c fcf4 	sdiv	ip, ip, r4
 8018d34:	fb0c 3306 	mla	r3, ip, r6, r3
 8018d38:	9302      	str	r3, [sp, #8]
 8018d3a:	ee17 3a10 	vmov	r3, s14
 8018d3e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018d42:	fb07 3706 	mla	r7, r7, r6, r3
 8018d46:	eba9 0306 	sub.w	r3, r9, r6
 8018d4a:	e9cd 4700 	strd	r4, r7, [sp]
 8018d4e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8018d52:	47a0      	blx	r4
 8018d54:	b00d      	add	sp, #52	; 0x34
 8018d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5a:	2500      	movs	r5, #0
 8018d5c:	462e      	mov	r6, r5
 8018d5e:	e799      	b.n	8018c94 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d64:	b0db      	sub	sp, #364	; 0x16c
 8018d66:	461d      	mov	r5, r3
 8018d68:	4614      	mov	r4, r2
 8018d6a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018d6e:	910f      	str	r1, [sp, #60]	; 0x3c
 8018d70:	4629      	mov	r1, r5
 8018d72:	930a      	str	r3, [sp, #40]	; 0x28
 8018d74:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018d78:	9009      	str	r0, [sp, #36]	; 0x24
 8018d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d7c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018d80:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8018d84:	9310      	str	r3, [sp, #64]	; 0x40
 8018d86:	6803      	ldr	r3, [r0, #0]
 8018d88:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8018d8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018d8e:	47b8      	blx	r7
 8018d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d92:	6058      	str	r0, [r3, #4]
 8018d94:	2800      	cmp	r0, #0
 8018d96:	f000 83a1 	beq.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d9a:	682b      	ldr	r3, [r5, #0]
 8018d9c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018da0:	ed94 7a02 	vldr	s14, [r4, #8]
 8018da4:	9314      	str	r3, [sp, #80]	; 0x50
 8018da6:	686b      	ldr	r3, [r5, #4]
 8018da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018dac:	9315      	str	r3, [sp, #84]	; 0x54
 8018dae:	4bc1      	ldr	r3, [pc, #772]	; (80190b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018db0:	7819      	ldrb	r1, [r3, #0]
 8018db2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018db6:	2900      	cmp	r1, #0
 8018db8:	bf16      	itet	ne
 8018dba:	4619      	movne	r1, r3
 8018dbc:	4611      	moveq	r1, r2
 8018dbe:	4613      	movne	r3, r2
 8018dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dc4:	9116      	str	r1, [sp, #88]	; 0x58
 8018dc6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8018dca:	f240 8387 	bls.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018dce:	ed94 7a07 	vldr	s14, [r4, #28]
 8018dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dda:	f240 837f 	bls.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018dde:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8018de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dea:	f240 8377 	bls.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018dee:	6822      	ldr	r2, [r4, #0]
 8018df0:	4bb1      	ldr	r3, [pc, #708]	; (80190b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018df2:	429a      	cmp	r2, r3
 8018df4:	f2c0 8372 	blt.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018df8:	49b0      	ldr	r1, [pc, #704]	; (80190bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018dfa:	6963      	ldr	r3, [r4, #20]
 8018dfc:	428a      	cmp	r2, r1
 8018dfe:	f300 836d 	bgt.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018e02:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018e06:	48ae      	ldr	r0, [pc, #696]	; (80190c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018e08:	33ff      	adds	r3, #255	; 0xff
 8018e0a:	4283      	cmp	r3, r0
 8018e0c:	f200 8366 	bhi.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018e10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018e12:	4dac      	ldr	r5, [pc, #688]	; (80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018e14:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018e18:	33ff      	adds	r3, #255	; 0xff
 8018e1a:	42ab      	cmp	r3, r5
 8018e1c:	f200 835e 	bhi.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018e20:	6862      	ldr	r2, [r4, #4]
 8018e22:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8018e26:	33ff      	adds	r3, #255	; 0xff
 8018e28:	4283      	cmp	r3, r0
 8018e2a:	f200 8357 	bhi.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018e2e:	69a1      	ldr	r1, [r4, #24]
 8018e30:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8018e34:	33ff      	adds	r3, #255	; 0xff
 8018e36:	4283      	cmp	r3, r0
 8018e38:	f200 8350 	bhi.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018e3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018e3e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8018e42:	30ff      	adds	r0, #255	; 0xff
 8018e44:	42a8      	cmp	r0, r5
 8018e46:	f200 8349 	bhi.w	80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018e4a:	428a      	cmp	r2, r1
 8018e4c:	f280 8110 	bge.w	8019070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018e50:	429a      	cmp	r2, r3
 8018e52:	f300 8119 	bgt.w	8019088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018e56:	4299      	cmp	r1, r3
 8018e58:	f280 811d 	bge.w	8019096 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018e5c:	2502      	movs	r5, #2
 8018e5e:	2701      	movs	r7, #1
 8018e60:	46a9      	mov	r9, r5
 8018e62:	46b8      	mov	r8, r7
 8018e64:	f04f 0a00 	mov.w	sl, #0
 8018e68:	4621      	mov	r1, r4
 8018e6a:	a849      	add	r0, sp, #292	; 0x124
 8018e6c:	f001 ff7c 	bl	801ad68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018e70:	4622      	mov	r2, r4
 8018e72:	4653      	mov	r3, sl
 8018e74:	a949      	add	r1, sp, #292	; 0x124
 8018e76:	f8cd 9000 	str.w	r9, [sp]
 8018e7a:	a819      	add	r0, sp, #100	; 0x64
 8018e7c:	f002 f8a4 	bl	801afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018e80:	4622      	mov	r2, r4
 8018e82:	4653      	mov	r3, sl
 8018e84:	a949      	add	r1, sp, #292	; 0x124
 8018e86:	f8cd 8000 	str.w	r8, [sp]
 8018e8a:	a829      	add	r0, sp, #164	; 0xa4
 8018e8c:	f002 f89c 	bl	801afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018e90:	4643      	mov	r3, r8
 8018e92:	4622      	mov	r2, r4
 8018e94:	a949      	add	r1, sp, #292	; 0x124
 8018e96:	f8cd 9000 	str.w	r9, [sp]
 8018e9a:	a839      	add	r0, sp, #228	; 0xe4
 8018e9c:	f002 f894 	bl	801afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018ea0:	42af      	cmp	r7, r5
 8018ea2:	af12      	add	r7, sp, #72	; 0x48
 8018ea4:	bfb7      	itett	lt
 8018ea6:	2300      	movlt	r3, #0
 8018ea8:	2301      	movge	r3, #1
 8018eaa:	ad29      	addlt	r5, sp, #164	; 0xa4
 8018eac:	ac19      	addlt	r4, sp, #100	; 0x64
 8018eae:	bfb1      	iteee	lt
 8018eb0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018eb2:	ad19      	addge	r5, sp, #100	; 0x64
 8018eb4:	930e      	strge	r3, [sp, #56]	; 0x38
 8018eb6:	ac29      	addge	r4, sp, #164	; 0xa4
 8018eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018eba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018ebe:	e887 0003 	stmia.w	r7, {r0, r1}
 8018ec2:	b928      	cbnz	r0, 8018ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018ec4:	4b80      	ldr	r3, [pc, #512]	; (80190c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018ec6:	6818      	ldr	r0, [r3, #0]
 8018ec8:	6803      	ldr	r3, [r0, #0]
 8018eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ecc:	4798      	blx	r3
 8018ece:	6038      	str	r0, [r7, #0]
 8018ed0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018ed2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018eda:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018edc:	930c      	str	r3, [sp, #48]	; 0x30
 8018ede:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018ee0:	6963      	ldr	r3, [r4, #20]
 8018ee2:	440b      	add	r3, r1
 8018ee4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018ee8:	4408      	add	r0, r1
 8018eea:	b200      	sxth	r0, r0
 8018eec:	4283      	cmp	r3, r0
 8018eee:	900d      	str	r0, [sp, #52]	; 0x34
 8018ef0:	f280 80dd 	bge.w	80190ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018ef4:	428b      	cmp	r3, r1
 8018ef6:	da08      	bge.n	8018f0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018ef8:	2a00      	cmp	r2, #0
 8018efa:	dd06      	ble.n	8018f0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018efc:	1acb      	subs	r3, r1, r3
 8018efe:	429a      	cmp	r2, r3
 8018f00:	f2c0 80e4 	blt.w	80190cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	f300 80e2 	bgt.w	80190ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018f0a:	6967      	ldr	r7, [r4, #20]
 8018f0c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018f12:	443b      	add	r3, r7
 8018f14:	461f      	mov	r7, r3
 8018f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f18:	1bdf      	subs	r7, r3, r7
 8018f1a:	4297      	cmp	r7, r2
 8018f1c:	bfa8      	it	ge
 8018f1e:	4617      	movge	r7, r2
 8018f20:	2f00      	cmp	r7, #0
 8018f22:	f340 8166 	ble.w	80191f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018f26:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018f28:	6829      	ldr	r1, [r5, #0]
 8018f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f2e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018f32:	4411      	add	r1, r2
 8018f34:	6820      	ldr	r0, [r4, #0]
 8018f36:	4299      	cmp	r1, r3
 8018f38:	dd1a      	ble.n	8018f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018f3a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018f3e:	4402      	add	r2, r0
 8018f40:	440b      	add	r3, r1
 8018f42:	b21b      	sxth	r3, r3
 8018f44:	429a      	cmp	r2, r3
 8018f46:	dc13      	bgt.n	8018f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018f48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018f4a:	a912      	add	r1, sp, #72	; 0x48
 8018f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	9206      	str	r2, [sp, #24]
 8018f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f56:	9500      	str	r5, [sp, #0]
 8018f58:	9205      	str	r2, [sp, #20]
 8018f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f5c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018f60:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018f62:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018f66:	aa49      	add	r2, sp, #292	; 0x124
 8018f68:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018f6c:	4623      	mov	r3, r4
 8018f6e:	47c8      	blx	r9
 8018f70:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018f74:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018f78:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f80:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018f84:	68a1      	ldr	r1, [r4, #8]
 8018f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f8a:	ed94 6a08 	vldr	s12, [r4, #32]
 8018f8e:	edd4 6a07 	vldr	s13, [r4, #28]
 8018f92:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018f96:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018f9a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018f9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018fa2:	edc4 6a07 	vstr	s13, [r4, #28]
 8018fa6:	441a      	add	r2, r3
 8018fa8:	6963      	ldr	r3, [r4, #20]
 8018faa:	3301      	adds	r3, #1
 8018fac:	6022      	str	r2, [r4, #0]
 8018fae:	6163      	str	r3, [r4, #20]
 8018fb0:	69a3      	ldr	r3, [r4, #24]
 8018fb2:	3b01      	subs	r3, #1
 8018fb4:	61a3      	str	r3, [r4, #24]
 8018fb6:	6923      	ldr	r3, [r4, #16]
 8018fb8:	440b      	add	r3, r1
 8018fba:	68e1      	ldr	r1, [r4, #12]
 8018fbc:	428b      	cmp	r3, r1
 8018fbe:	6123      	str	r3, [r4, #16]
 8018fc0:	db15      	blt.n	8018fee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018fc2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018fc6:	3201      	adds	r2, #1
 8018fc8:	1a5b      	subs	r3, r3, r1
 8018fca:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018fce:	6022      	str	r2, [r4, #0]
 8018fd0:	6123      	str	r3, [r4, #16]
 8018fd2:	edc4 6a07 	vstr	s13, [r4, #28]
 8018fd6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018fda:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018fde:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018fe2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fea:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018fee:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018ff2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018ff6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018ffe:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019002:	68a9      	ldr	r1, [r5, #8]
 8019004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019008:	ed95 6a08 	vldr	s12, [r5, #32]
 801900c:	edd5 6a07 	vldr	s13, [r5, #28]
 8019010:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019014:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019018:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801901c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019020:	edc5 6a07 	vstr	s13, [r5, #28]
 8019024:	441a      	add	r2, r3
 8019026:	696b      	ldr	r3, [r5, #20]
 8019028:	3301      	adds	r3, #1
 801902a:	602a      	str	r2, [r5, #0]
 801902c:	616b      	str	r3, [r5, #20]
 801902e:	69ab      	ldr	r3, [r5, #24]
 8019030:	3b01      	subs	r3, #1
 8019032:	61ab      	str	r3, [r5, #24]
 8019034:	692b      	ldr	r3, [r5, #16]
 8019036:	440b      	add	r3, r1
 8019038:	68e9      	ldr	r1, [r5, #12]
 801903a:	428b      	cmp	r3, r1
 801903c:	612b      	str	r3, [r5, #16]
 801903e:	db15      	blt.n	801906c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019040:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019044:	3201      	adds	r2, #1
 8019046:	1a5b      	subs	r3, r3, r1
 8019048:	ee76 6a26 	vadd.f32	s13, s12, s13
 801904c:	602a      	str	r2, [r5, #0]
 801904e:	612b      	str	r3, [r5, #16]
 8019050:	edc5 6a07 	vstr	s13, [r5, #28]
 8019054:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019058:	ee36 7a87 	vadd.f32	s14, s13, s14
 801905c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019060:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019068:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801906c:	3f01      	subs	r7, #1
 801906e:	e757      	b.n	8018f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019070:	4299      	cmp	r1, r3
 8019072:	dc13      	bgt.n	801909c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019074:	429a      	cmp	r2, r3
 8019076:	da14      	bge.n	80190a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019078:	2502      	movs	r5, #2
 801907a:	2703      	movs	r7, #3
 801907c:	f04f 0800 	mov.w	r8, #0
 8019080:	46a9      	mov	r9, r5
 8019082:	f04f 0a01 	mov.w	sl, #1
 8019086:	e6ef      	b.n	8018e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019088:	2501      	movs	r5, #1
 801908a:	2700      	movs	r7, #0
 801908c:	46a9      	mov	r9, r5
 801908e:	46b8      	mov	r8, r7
 8019090:	f04f 0a02 	mov.w	sl, #2
 8019094:	e6e8      	b.n	8018e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019096:	2501      	movs	r5, #1
 8019098:	2702      	movs	r7, #2
 801909a:	e6e1      	b.n	8018e60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801909c:	2500      	movs	r5, #0
 801909e:	2701      	movs	r7, #1
 80190a0:	e7f4      	b.n	801908c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80190a2:	2702      	movs	r7, #2
 80190a4:	2503      	movs	r5, #3
 80190a6:	f04f 0900 	mov.w	r9, #0
 80190aa:	46b8      	mov	r8, r7
 80190ac:	e7e9      	b.n	8019082 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80190ae:	4613      	mov	r3, r2
 80190b0:	e728      	b.n	8018f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80190b2:	bf00      	nop
 80190b4:	20014688 	.word	0x20014688
 80190b8:	fffd8f01 	.word	0xfffd8f01
 80190bc:	00027100 	.word	0x00027100
 80190c0:	0004e1ff 	.word	0x0004e1ff
 80190c4:	0004e1fe 	.word	0x0004e1fe
 80190c8:	20014690 	.word	0x20014690
 80190cc:	4613      	mov	r3, r2
 80190ce:	992b      	ldr	r1, [sp, #172]	; 0xac
 80190d0:	469e      	mov	lr, r3
 80190d2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80190d4:	469c      	mov	ip, r3
 80190d6:	9111      	str	r1, [sp, #68]	; 0x44
 80190d8:	f04f 0900 	mov.w	r9, #0
 80190dc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80190e0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80190e4:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80190e8:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80190ec:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80190f0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80190f4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80190f8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80190fc:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019100:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019104:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019108:	f1bc 0f00 	cmp.w	ip, #0
 801910c:	d147      	bne.n	801919e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801910e:	eb03 0c07 	add.w	ip, r3, r7
 8019112:	1ad7      	subs	r7, r2, r3
 8019114:	f1b9 0f00 	cmp.w	r9, #0
 8019118:	d009      	beq.n	801912e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801911a:	9029      	str	r0, [sp, #164]	; 0xa4
 801911c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019120:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019124:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019128:	912d      	str	r1, [sp, #180]	; 0xb4
 801912a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801912e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019130:	f04f 0800 	mov.w	r8, #0
 8019134:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019138:	9111      	str	r1, [sp, #68]	; 0x44
 801913a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801913e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019142:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019146:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801914a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801914e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019152:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019156:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801915a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801915e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019162:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019166:	f1be 0f00 	cmp.w	lr, #0
 801916a:	d031      	beq.n	80191d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801916c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801916e:	4450      	add	r0, sl
 8019170:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019174:	4431      	add	r1, r6
 8019176:	ee37 7a04 	vadd.f32	s14, s14, s8
 801917a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801917e:	4549      	cmp	r1, r9
 8019180:	db08      	blt.n	8019194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019182:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019186:	3001      	adds	r0, #1
 8019188:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801918c:	eba1 0109 	sub.w	r1, r1, r9
 8019190:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019194:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019198:	f04f 0801 	mov.w	r8, #1
 801919c:	e7e3      	b.n	8019166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801919e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80191a0:	4450      	add	r0, sl
 80191a2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80191a6:	4431      	add	r1, r6
 80191a8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80191ac:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80191b0:	4541      	cmp	r1, r8
 80191b2:	db08      	blt.n	80191c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80191b4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80191b8:	3001      	adds	r0, #1
 80191ba:	ee37 7a25 	vadd.f32	s14, s14, s11
 80191be:	eba1 0108 	sub.w	r1, r1, r8
 80191c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80191c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80191ca:	f04f 0901 	mov.w	r9, #1
 80191ce:	e79b      	b.n	8019108 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80191d0:	449c      	add	ip, r3
 80191d2:	1aff      	subs	r7, r7, r3
 80191d4:	f1b8 0f00 	cmp.w	r8, #0
 80191d8:	d009      	beq.n	80191ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80191da:	9019      	str	r0, [sp, #100]	; 0x64
 80191dc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80191e0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80191e4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80191e8:	911d      	str	r1, [sp, #116]	; 0x74
 80191ea:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80191ee:	1ad2      	subs	r2, r2, r3
 80191f0:	e68b      	b.n	8018f0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80191f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191f4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f000 80d1 	beq.w	801939e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80191fc:	ad19      	add	r5, sp, #100	; 0x64
 80191fe:	ac39      	add	r4, sp, #228	; 0xe4
 8019200:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019202:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801920a:	930c      	str	r3, [sp, #48]	; 0x30
 801920c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801920e:	6963      	ldr	r3, [r4, #20]
 8019210:	440b      	add	r3, r1
 8019212:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019216:	4408      	add	r0, r1
 8019218:	b200      	sxth	r0, r0
 801921a:	4283      	cmp	r3, r0
 801921c:	900d      	str	r0, [sp, #52]	; 0x34
 801921e:	f280 80c1 	bge.w	80193a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019222:	428b      	cmp	r3, r1
 8019224:	da08      	bge.n	8019238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019226:	2a00      	cmp	r2, #0
 8019228:	dd06      	ble.n	8019238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801922a:	1acb      	subs	r3, r1, r3
 801922c:	429a      	cmp	r2, r3
 801922e:	f2c0 80bb 	blt.w	80193a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019232:	2b00      	cmp	r3, #0
 8019234:	f300 80b9 	bgt.w	80193aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019238:	6967      	ldr	r7, [r4, #20]
 801923a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801923e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019240:	443b      	add	r3, r7
 8019242:	461f      	mov	r7, r3
 8019244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019246:	1bdf      	subs	r7, r3, r7
 8019248:	4297      	cmp	r7, r2
 801924a:	bfa8      	it	ge
 801924c:	4617      	movge	r7, r2
 801924e:	2f00      	cmp	r7, #0
 8019250:	f340 813c 	ble.w	80194cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019254:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019256:	6829      	ldr	r1, [r5, #0]
 8019258:	f9b3 2000 	ldrsh.w	r2, [r3]
 801925c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019260:	4411      	add	r1, r2
 8019262:	6820      	ldr	r0, [r4, #0]
 8019264:	4299      	cmp	r1, r3
 8019266:	dd1a      	ble.n	801929e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019268:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801926c:	4402      	add	r2, r0
 801926e:	440b      	add	r3, r1
 8019270:	b21b      	sxth	r3, r3
 8019272:	429a      	cmp	r2, r3
 8019274:	dc13      	bgt.n	801929e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019278:	a912      	add	r1, sp, #72	; 0x48
 801927a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801927c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	9206      	str	r2, [sp, #24]
 8019282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019284:	9500      	str	r5, [sp, #0]
 8019286:	9205      	str	r2, [sp, #20]
 8019288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801928a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801928e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019290:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019294:	aa49      	add	r2, sp, #292	; 0x124
 8019296:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801929a:	4623      	mov	r3, r4
 801929c:	47c8      	blx	r9
 801929e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80192a2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80192a6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80192aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80192ae:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80192b2:	68a1      	ldr	r1, [r4, #8]
 80192b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80192b8:	ed94 6a08 	vldr	s12, [r4, #32]
 80192bc:	edd4 6a07 	vldr	s13, [r4, #28]
 80192c0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80192c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80192c8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80192cc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80192d0:	edc4 6a07 	vstr	s13, [r4, #28]
 80192d4:	441a      	add	r2, r3
 80192d6:	6963      	ldr	r3, [r4, #20]
 80192d8:	3301      	adds	r3, #1
 80192da:	6022      	str	r2, [r4, #0]
 80192dc:	6163      	str	r3, [r4, #20]
 80192de:	69a3      	ldr	r3, [r4, #24]
 80192e0:	3b01      	subs	r3, #1
 80192e2:	61a3      	str	r3, [r4, #24]
 80192e4:	6923      	ldr	r3, [r4, #16]
 80192e6:	440b      	add	r3, r1
 80192e8:	68e1      	ldr	r1, [r4, #12]
 80192ea:	428b      	cmp	r3, r1
 80192ec:	6123      	str	r3, [r4, #16]
 80192ee:	db15      	blt.n	801931c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80192f0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80192f4:	3201      	adds	r2, #1
 80192f6:	1a5b      	subs	r3, r3, r1
 80192f8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80192fc:	6022      	str	r2, [r4, #0]
 80192fe:	6123      	str	r3, [r4, #16]
 8019300:	edc4 6a07 	vstr	s13, [r4, #28]
 8019304:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019308:	ee36 7a87 	vadd.f32	s14, s13, s14
 801930c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019310:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019318:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801931c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019320:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019324:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019328:	ee37 7a27 	vadd.f32	s14, s14, s15
 801932c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019330:	68a9      	ldr	r1, [r5, #8]
 8019332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019336:	ed95 6a08 	vldr	s12, [r5, #32]
 801933a:	edd5 6a07 	vldr	s13, [r5, #28]
 801933e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019342:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019346:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801934a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801934e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019352:	441a      	add	r2, r3
 8019354:	696b      	ldr	r3, [r5, #20]
 8019356:	3301      	adds	r3, #1
 8019358:	602a      	str	r2, [r5, #0]
 801935a:	616b      	str	r3, [r5, #20]
 801935c:	69ab      	ldr	r3, [r5, #24]
 801935e:	3b01      	subs	r3, #1
 8019360:	61ab      	str	r3, [r5, #24]
 8019362:	692b      	ldr	r3, [r5, #16]
 8019364:	440b      	add	r3, r1
 8019366:	68e9      	ldr	r1, [r5, #12]
 8019368:	428b      	cmp	r3, r1
 801936a:	612b      	str	r3, [r5, #16]
 801936c:	db15      	blt.n	801939a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801936e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019372:	3201      	adds	r2, #1
 8019374:	1a5b      	subs	r3, r3, r1
 8019376:	ee76 6a26 	vadd.f32	s13, s12, s13
 801937a:	602a      	str	r2, [r5, #0]
 801937c:	612b      	str	r3, [r5, #16]
 801937e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019382:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019386:	ee36 7a87 	vadd.f32	s14, s13, s14
 801938a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801938e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019396:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801939a:	3f01      	subs	r7, #1
 801939c:	e757      	b.n	801924e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801939e:	ad39      	add	r5, sp, #228	; 0xe4
 80193a0:	ac19      	add	r4, sp, #100	; 0x64
 80193a2:	e72d      	b.n	8019200 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80193a4:	4613      	mov	r3, r2
 80193a6:	e744      	b.n	8019232 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80193a8:	4613      	mov	r3, r2
 80193aa:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80193ac:	469e      	mov	lr, r3
 80193ae:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80193b2:	461f      	mov	r7, r3
 80193b4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80193b8:	f04f 0900 	mov.w	r9, #0
 80193bc:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80193c0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80193c4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80193c8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80193cc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80193d0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80193d2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80193d6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80193da:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80193de:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80193e2:	960e      	str	r6, [sp, #56]	; 0x38
 80193e4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80193e8:	2f00      	cmp	r7, #0
 80193ea:	d146      	bne.n	801947a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80193ec:	449c      	add	ip, r3
 80193ee:	1ad7      	subs	r7, r2, r3
 80193f0:	f1b9 0f00 	cmp.w	r9, #0
 80193f4:	d009      	beq.n	801940a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80193f6:	9039      	str	r0, [sp, #228]	; 0xe4
 80193f8:	913d      	str	r1, [sp, #244]	; 0xf4
 80193fa:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80193fe:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019402:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019406:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801940a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801940c:	f04f 0800 	mov.w	r8, #0
 8019410:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019414:	910e      	str	r1, [sp, #56]	; 0x38
 8019416:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801941a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801941e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019422:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019426:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801942a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801942e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019432:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019436:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801943a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801943e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019442:	f1be 0f00 	cmp.w	lr, #0
 8019446:	d030      	beq.n	80194aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019448:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801944a:	4450      	add	r0, sl
 801944c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019450:	4431      	add	r1, r6
 8019452:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019456:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801945a:	4549      	cmp	r1, r9
 801945c:	db08      	blt.n	8019470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801945e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019462:	3001      	adds	r0, #1
 8019464:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019468:	eba1 0109 	sub.w	r1, r1, r9
 801946c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019470:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019474:	f04f 0801 	mov.w	r8, #1
 8019478:	e7e3      	b.n	8019442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801947a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801947c:	4450      	add	r0, sl
 801947e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019482:	4431      	add	r1, r6
 8019484:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019488:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801948c:	4541      	cmp	r1, r8
 801948e:	db08      	blt.n	80194a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019490:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019494:	3001      	adds	r0, #1
 8019496:	ee37 7a25 	vadd.f32	s14, s14, s11
 801949a:	eba1 0108 	sub.w	r1, r1, r8
 801949e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80194a2:	3f01      	subs	r7, #1
 80194a4:	f04f 0901 	mov.w	r9, #1
 80194a8:	e79e      	b.n	80193e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80194aa:	449c      	add	ip, r3
 80194ac:	1aff      	subs	r7, r7, r3
 80194ae:	f1b8 0f00 	cmp.w	r8, #0
 80194b2:	d009      	beq.n	80194c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80194b4:	9019      	str	r0, [sp, #100]	; 0x64
 80194b6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80194ba:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80194be:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80194c2:	911d      	str	r1, [sp, #116]	; 0x74
 80194c4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80194c8:	1ad2      	subs	r2, r2, r3
 80194ca:	e6b5      	b.n	8019238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80194cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	b923      	cbnz	r3, 80194dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194d2:	4b04      	ldr	r3, [pc, #16]	; (80194e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80194d4:	6818      	ldr	r0, [r3, #0]
 80194d6:	6803      	ldr	r3, [r0, #0]
 80194d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194da:	4798      	blx	r3
 80194dc:	b05b      	add	sp, #364	; 0x16c
 80194de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194e2:	bf00      	nop
 80194e4:	20014690 	.word	0x20014690

080194e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80194e8:	2b03      	cmp	r3, #3
 80194ea:	d818      	bhi.n	801951e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80194ec:	e8df f003 	tbb	[pc, r3]
 80194f0:	130d0602 	.word	0x130d0602
 80194f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80194f8:	1850      	adds	r0, r2, r1
 80194fa:	4770      	bx	lr
 80194fc:	8803      	ldrh	r3, [r0, #0]
 80194fe:	8880      	ldrh	r0, [r0, #4]
 8019500:	4418      	add	r0, r3
 8019502:	b200      	sxth	r0, r0
 8019504:	1a80      	subs	r0, r0, r2
 8019506:	3801      	subs	r0, #1
 8019508:	4770      	bx	lr
 801950a:	8803      	ldrh	r3, [r0, #0]
 801950c:	8880      	ldrh	r0, [r0, #4]
 801950e:	4418      	add	r0, r3
 8019510:	b200      	sxth	r0, r0
 8019512:	1a40      	subs	r0, r0, r1
 8019514:	e7f7      	b.n	8019506 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019516:	f9b0 0000 	ldrsh.w	r0, [r0]
 801951a:	4410      	add	r0, r2
 801951c:	4770      	bx	lr
 801951e:	2000      	movs	r0, #0
 8019520:	4770      	bx	lr

08019522 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019522:	2b03      	cmp	r3, #3
 8019524:	d817      	bhi.n	8019556 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8019526:	e8df f003 	tbb	[pc, r3]
 801952a:	0602      	.short	0x0602
 801952c:	1009      	.short	0x1009
 801952e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019532:	1850      	adds	r0, r2, r1
 8019534:	4770      	bx	lr
 8019536:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801953a:	e7fa      	b.n	8019532 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801953c:	8843      	ldrh	r3, [r0, #2]
 801953e:	88c0      	ldrh	r0, [r0, #6]
 8019540:	4418      	add	r0, r3
 8019542:	b200      	sxth	r0, r0
 8019544:	1a80      	subs	r0, r0, r2
 8019546:	3801      	subs	r0, #1
 8019548:	4770      	bx	lr
 801954a:	8843      	ldrh	r3, [r0, #2]
 801954c:	88c0      	ldrh	r0, [r0, #6]
 801954e:	4418      	add	r0, r3
 8019550:	b200      	sxth	r0, r0
 8019552:	1a40      	subs	r0, r0, r1
 8019554:	e7f7      	b.n	8019546 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019556:	2000      	movs	r0, #0
 8019558:	4770      	bx	lr
	...

0801955c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801955c:	4b01      	ldr	r3, [pc, #4]	; (8019564 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801955e:	2200      	movs	r2, #0
 8019560:	601a      	str	r2, [r3, #0]
 8019562:	4770      	bx	lr
 8019564:	200146a0 	.word	0x200146a0

08019568 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019568:	4603      	mov	r3, r0
 801956a:	b1c8      	cbz	r0, 80195a0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801956c:	0c02      	lsrs	r2, r0, #16
 801956e:	0412      	lsls	r2, r2, #16
 8019570:	b9a2      	cbnz	r2, 801959c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8019572:	0403      	lsls	r3, r0, #16
 8019574:	2010      	movs	r0, #16
 8019576:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801957a:	bf04      	itt	eq
 801957c:	021b      	lsleq	r3, r3, #8
 801957e:	3008      	addeq	r0, #8
 8019580:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019584:	bf04      	itt	eq
 8019586:	011b      	lsleq	r3, r3, #4
 8019588:	3004      	addeq	r0, #4
 801958a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801958e:	bf04      	itt	eq
 8019590:	009b      	lsleq	r3, r3, #2
 8019592:	3002      	addeq	r0, #2
 8019594:	2b00      	cmp	r3, #0
 8019596:	db04      	blt.n	80195a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019598:	3001      	adds	r0, #1
 801959a:	4770      	bx	lr
 801959c:	2000      	movs	r0, #0
 801959e:	e7ea      	b.n	8019576 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80195a0:	2020      	movs	r0, #32
 80195a2:	4770      	bx	lr

080195a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80195a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195a8:	b087      	sub	sp, #28
 80195aa:	460d      	mov	r5, r1
 80195ac:	4616      	mov	r6, r2
 80195ae:	4698      	mov	r8, r3
 80195b0:	4601      	mov	r1, r0
 80195b2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80195b6:	b120      	cbz	r0, 80195c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80195b8:	b11a      	cbz	r2, 80195c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80195ba:	2d1f      	cmp	r5, #31
 80195bc:	d801      	bhi.n	80195c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80195be:	2b1f      	cmp	r3, #31
 80195c0:	d904      	bls.n	80195cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80195c2:	2000      	movs	r0, #0
 80195c4:	6038      	str	r0, [r7, #0]
 80195c6:	b007      	add	sp, #28
 80195c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195cc:	b97d      	cbnz	r5, 80195ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80195ce:	b143      	cbz	r3, 80195e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80195d0:	4602      	mov	r2, r0
 80195d2:	462b      	mov	r3, r5
 80195d4:	4641      	mov	r1, r8
 80195d6:	4630      	mov	r0, r6
 80195d8:	e9cd 4700 	strd	r4, r7, [sp]
 80195dc:	f7ff ffe2 	bl	80195a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80195e0:	e7f1      	b.n	80195c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80195e2:	f04f 33ff 	mov.w	r3, #4294967295
 80195e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80195ea:	603b      	str	r3, [r7, #0]
 80195ec:	e7eb      	b.n	80195c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80195ee:	fa32 fa05 	lsrs.w	sl, r2, r5
 80195f2:	d106      	bne.n	8019602 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80195f4:	4346      	muls	r6, r0
 80195f6:	fbb6 f0f4 	udiv	r0, r6, r4
 80195fa:	fb04 6610 	mls	r6, r4, r0, r6
 80195fe:	603e      	str	r6, [r7, #0]
 8019600:	e7e1      	b.n	80195c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019602:	2201      	movs	r2, #1
 8019604:	fa00 fb05 	lsl.w	fp, r0, r5
 8019608:	40aa      	lsls	r2, r5
 801960a:	fbbb f9f4 	udiv	r9, fp, r4
 801960e:	3a01      	subs	r2, #1
 8019610:	fb0a f309 	mul.w	r3, sl, r9
 8019614:	fb04 b919 	mls	r9, r4, r9, fp
 8019618:	4016      	ands	r6, r2
 801961a:	9303      	str	r3, [sp, #12]
 801961c:	4630      	mov	r0, r6
 801961e:	f7ff ffa3 	bl	8019568 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019622:	462b      	mov	r3, r5
 8019624:	460a      	mov	r2, r1
 8019626:	4601      	mov	r1, r0
 8019628:	4630      	mov	r0, r6
 801962a:	e9cd 4700 	strd	r4, r7, [sp]
 801962e:	f7ff ffb9 	bl	80195a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019632:	4606      	mov	r6, r0
 8019634:	4648      	mov	r0, r9
 8019636:	eb05 0108 	add.w	r1, r5, r8
 801963a:	f7ff ff95 	bl	8019568 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801963e:	ab05      	add	r3, sp, #20
 8019640:	464a      	mov	r2, r9
 8019642:	e9cd 4300 	strd	r4, r3, [sp]
 8019646:	4603      	mov	r3, r0
 8019648:	4650      	mov	r0, sl
 801964a:	f7ff ffab 	bl	80195a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801964e:	6839      	ldr	r1, [r7, #0]
 8019650:	9a05      	ldr	r2, [sp, #20]
 8019652:	9b03      	ldr	r3, [sp, #12]
 8019654:	4411      	add	r1, r2
 8019656:	fbb1 f2f4 	udiv	r2, r1, r4
 801965a:	18d3      	adds	r3, r2, r3
 801965c:	fb04 1412 	mls	r4, r4, r2, r1
 8019660:	441e      	add	r6, r3
 8019662:	603c      	str	r4, [r7, #0]
 8019664:	4430      	add	r0, r6
 8019666:	e7ae      	b.n	80195c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08019668 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801966c:	b085      	sub	sp, #20
 801966e:	f1b0 0900 	subs.w	r9, r0, #0
 8019672:	461d      	mov	r5, r3
 8019674:	4617      	mov	r7, r2
 8019676:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019678:	bfbb      	ittet	lt
 801967a:	f1c9 0900 	rsblt	r9, r9, #0
 801967e:	f04f 36ff 	movlt.w	r6, #4294967295
 8019682:	2601      	movge	r6, #1
 8019684:	6823      	ldrlt	r3, [r4, #0]
 8019686:	bfbc      	itt	lt
 8019688:	425b      	neglt	r3, r3
 801968a:	6023      	strlt	r3, [r4, #0]
 801968c:	2a00      	cmp	r2, #0
 801968e:	da04      	bge.n	801969a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019690:	6823      	ldr	r3, [r4, #0]
 8019692:	4257      	negs	r7, r2
 8019694:	4276      	negs	r6, r6
 8019696:	425b      	negs	r3, r3
 8019698:	6023      	str	r3, [r4, #0]
 801969a:	2d00      	cmp	r5, #0
 801969c:	4638      	mov	r0, r7
 801969e:	bfba      	itte	lt
 80196a0:	426d      	neglt	r5, r5
 80196a2:	f04f 38ff 	movlt.w	r8, #4294967295
 80196a6:	f04f 0801 	movge.w	r8, #1
 80196aa:	f7ff ff5d 	bl	8019568 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80196ae:	ab03      	add	r3, sp, #12
 80196b0:	463a      	mov	r2, r7
 80196b2:	e9cd 5300 	strd	r5, r3, [sp]
 80196b6:	4603      	mov	r3, r0
 80196b8:	4648      	mov	r0, r9
 80196ba:	f7ff ff73 	bl	80195a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80196be:	6823      	ldr	r3, [r4, #0]
 80196c0:	9a03      	ldr	r2, [sp, #12]
 80196c2:	4546      	cmp	r6, r8
 80196c4:	441a      	add	r2, r3
 80196c6:	fb92 f3f5 	sdiv	r3, r2, r5
 80196ca:	4418      	add	r0, r3
 80196cc:	fb05 2313 	mls	r3, r5, r3, r2
 80196d0:	bf18      	it	ne
 80196d2:	4240      	negne	r0, r0
 80196d4:	1c72      	adds	r2, r6, #1
 80196d6:	6023      	str	r3, [r4, #0]
 80196d8:	d105      	bne.n	80196e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80196da:	2b00      	cmp	r3, #0
 80196dc:	f1c3 0200 	rsb	r2, r3, #0
 80196e0:	db0b      	blt.n	80196fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80196e2:	6022      	str	r2, [r4, #0]
 80196e4:	e006      	b.n	80196f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80196e6:	2e01      	cmp	r6, #1
 80196e8:	d104      	bne.n	80196f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	da02      	bge.n	80196f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80196ee:	442b      	add	r3, r5
 80196f0:	3801      	subs	r0, #1
 80196f2:	6023      	str	r3, [r4, #0]
 80196f4:	b005      	add	sp, #20
 80196f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196fa:	3801      	subs	r0, #1
 80196fc:	1b52      	subs	r2, r2, r5
 80196fe:	e7f0      	b.n	80196e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08019700 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019700:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019704:	4c1c      	ldr	r4, [pc, #112]	; (8019778 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019706:	4605      	mov	r5, r0
 8019708:	6807      	ldr	r7, [r0, #0]
 801970a:	69a3      	ldr	r3, [r4, #24]
 801970c:	b92b      	cbnz	r3, 801971a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801970e:	6840      	ldr	r0, [r0, #4]
 8019710:	e9c5 7000 	strd	r7, r0, [r5]
 8019714:	b004      	add	sp, #16
 8019716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801971a:	f04f 0802 	mov.w	r8, #2
 801971e:	68a2      	ldr	r2, [r4, #8]
 8019720:	ae04      	add	r6, sp, #16
 8019722:	6820      	ldr	r0, [r4, #0]
 8019724:	fb93 f1f8 	sdiv	r1, r3, r8
 8019728:	440a      	add	r2, r1
 801972a:	69e1      	ldr	r1, [r4, #28]
 801972c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019730:	463a      	mov	r2, r7
 8019732:	9600      	str	r6, [sp, #0]
 8019734:	f7ff ff98 	bl	8019668 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019738:	69a3      	ldr	r3, [r4, #24]
 801973a:	4607      	mov	r7, r0
 801973c:	686a      	ldr	r2, [r5, #4]
 801973e:	6a21      	ldr	r1, [r4, #32]
 8019740:	9600      	str	r6, [sp, #0]
 8019742:	6860      	ldr	r0, [r4, #4]
 8019744:	f7ff ff90 	bl	8019668 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019748:	69a3      	ldr	r3, [r4, #24]
 801974a:	6962      	ldr	r2, [r4, #20]
 801974c:	4407      	add	r7, r0
 801974e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019750:	9600      	str	r6, [sp, #0]
 8019752:	68e0      	ldr	r0, [r4, #12]
 8019754:	fb93 f8f8 	sdiv	r8, r3, r8
 8019758:	4442      	add	r2, r8
 801975a:	9203      	str	r2, [sp, #12]
 801975c:	682a      	ldr	r2, [r5, #0]
 801975e:	f7ff ff83 	bl	8019668 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019762:	4680      	mov	r8, r0
 8019764:	9600      	str	r6, [sp, #0]
 8019766:	69a3      	ldr	r3, [r4, #24]
 8019768:	686a      	ldr	r2, [r5, #4]
 801976a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801976c:	6920      	ldr	r0, [r4, #16]
 801976e:	f7ff ff7b 	bl	8019668 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019772:	4440      	add	r0, r8
 8019774:	e7cc      	b.n	8019710 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019776:	bf00      	nop
 8019778:	200146a4 	.word	0x200146a4

0801977c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801977c:	4b07      	ldr	r3, [pc, #28]	; (801979c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	2b01      	cmp	r3, #1
 8019782:	d109      	bne.n	8019798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019784:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019788:	f9b0 2000 	ldrsh.w	r2, [r0]
 801978c:	8003      	strh	r3, [r0, #0]
 801978e:	4b04      	ldr	r3, [pc, #16]	; (80197a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019790:	881b      	ldrh	r3, [r3, #0]
 8019792:	3b01      	subs	r3, #1
 8019794:	1a9b      	subs	r3, r3, r2
 8019796:	800b      	strh	r3, [r1, #0]
 8019798:	4770      	bx	lr
 801979a:	bf00      	nop
 801979c:	20014688 	.word	0x20014688
 80197a0:	20014684 	.word	0x20014684

080197a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80197a4:	4b07      	ldr	r3, [pc, #28]	; (80197c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80197a6:	b510      	push	{r4, lr}
 80197a8:	781b      	ldrb	r3, [r3, #0]
 80197aa:	2b01      	cmp	r3, #1
 80197ac:	d108      	bne.n	80197c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80197ae:	4b06      	ldr	r3, [pc, #24]	; (80197c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80197b0:	880c      	ldrh	r4, [r1, #0]
 80197b2:	881b      	ldrh	r3, [r3, #0]
 80197b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80197b8:	3b01      	subs	r3, #1
 80197ba:	1b1b      	subs	r3, r3, r4
 80197bc:	8003      	strh	r3, [r0, #0]
 80197be:	800a      	strh	r2, [r1, #0]
 80197c0:	bd10      	pop	{r4, pc}
 80197c2:	bf00      	nop
 80197c4:	20014688 	.word	0x20014688
 80197c8:	20014684 	.word	0x20014684

080197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80197cc:	4b08      	ldr	r3, [pc, #32]	; (80197f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80197ce:	781b      	ldrb	r3, [r3, #0]
 80197d0:	2b01      	cmp	r3, #1
 80197d2:	d10c      	bne.n	80197ee <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80197d4:	8803      	ldrh	r3, [r0, #0]
 80197d6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80197da:	8842      	ldrh	r2, [r0, #2]
 80197dc:	8002      	strh	r2, [r0, #0]
 80197de:	185a      	adds	r2, r3, r1
 80197e0:	4b04      	ldr	r3, [pc, #16]	; (80197f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80197e2:	881b      	ldrh	r3, [r3, #0]
 80197e4:	1a9b      	subs	r3, r3, r2
 80197e6:	8043      	strh	r3, [r0, #2]
 80197e8:	88c3      	ldrh	r3, [r0, #6]
 80197ea:	80c1      	strh	r1, [r0, #6]
 80197ec:	8083      	strh	r3, [r0, #4]
 80197ee:	4770      	bx	lr
 80197f0:	20014688 	.word	0x20014688
 80197f4:	20014684 	.word	0x20014684

080197f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80197f8:	4b07      	ldr	r3, [pc, #28]	; (8019818 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80197fa:	b510      	push	{r4, lr}
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	2b01      	cmp	r3, #1
 8019800:	d108      	bne.n	8019814 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019802:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019806:	f9b0 4000 	ldrsh.w	r4, [r0]
 801980a:	8003      	strh	r3, [r0, #0]
 801980c:	8893      	ldrh	r3, [r2, #4]
 801980e:	3b01      	subs	r3, #1
 8019810:	1b1b      	subs	r3, r3, r4
 8019812:	800b      	strh	r3, [r1, #0]
 8019814:	bd10      	pop	{r4, pc}
 8019816:	bf00      	nop
 8019818:	20014688 	.word	0x20014688

0801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801981c:	4b0a      	ldr	r3, [pc, #40]	; (8019848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801981e:	460a      	mov	r2, r1
 8019820:	b510      	push	{r4, lr}
 8019822:	781b      	ldrb	r3, [r3, #0]
 8019824:	2b01      	cmp	r3, #1
 8019826:	d10d      	bne.n	8019844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019828:	8881      	ldrh	r1, [r0, #4]
 801982a:	8803      	ldrh	r3, [r0, #0]
 801982c:	440b      	add	r3, r1
 801982e:	4601      	mov	r1, r0
 8019830:	3b01      	subs	r3, #1
 8019832:	f821 3b02 	strh.w	r3, [r1], #2
 8019836:	f7ff ffdf 	bl	80197f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801983a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801983e:	88c2      	ldrh	r2, [r0, #6]
 8019840:	80c3      	strh	r3, [r0, #6]
 8019842:	8082      	strh	r2, [r0, #4]
 8019844:	bd10      	pop	{r4, pc}
 8019846:	bf00      	nop
 8019848:	20014688 	.word	0x20014688

0801984c <_ZNK8touchgfx4Rect7isEmptyEv>:
 801984c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019850:	2b00      	cmp	r3, #0
 8019852:	dd06      	ble.n	8019862 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8019854:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8019858:	2800      	cmp	r0, #0
 801985a:	bfcc      	ite	gt
 801985c:	2000      	movgt	r0, #0
 801985e:	2001      	movle	r0, #1
 8019860:	4770      	bx	lr
 8019862:	2001      	movs	r0, #1
 8019864:	4770      	bx	lr
	...

08019868 <_ZN8touchgfx11Application11getInstanceEv>:
 8019868:	4b01      	ldr	r3, [pc, #4]	; (8019870 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801986a:	6818      	ldr	r0, [r3, #0]
 801986c:	4770      	bx	lr
 801986e:	bf00      	nop
 8019870:	200146dc 	.word	0x200146dc

08019874 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019874:	4b03      	ldr	r3, [pc, #12]	; (8019884 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019876:	2200      	movs	r2, #0
 8019878:	801a      	strh	r2, [r3, #0]
 801987a:	805a      	strh	r2, [r3, #2]
 801987c:	809a      	strh	r2, [r3, #4]
 801987e:	80da      	strh	r2, [r3, #6]
 8019880:	4770      	bx	lr
 8019882:	bf00      	nop
 8019884:	200146d4 	.word	0x200146d4

08019888 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801988c:	b09d      	sub	sp, #116	; 0x74
 801988e:	4606      	mov	r6, r0
 8019890:	4614      	mov	r4, r2
 8019892:	468a      	mov	sl, r1
 8019894:	a803      	add	r0, sp, #12
 8019896:	461d      	mov	r5, r3
 8019898:	f000 fd80 	bl	801a39c <_ZN8touchgfx12TextProviderC1Ev>
 801989c:	6833      	ldr	r3, [r6, #0]
 801989e:	4630      	mov	r0, r6
 80198a0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80198a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80198a6:	4798      	blx	r3
 80198a8:	6833      	ldr	r3, [r6, #0]
 80198aa:	4607      	mov	r7, r0
 80198ac:	4630      	mov	r0, r6
 80198ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198b0:	4798      	blx	r3
 80198b2:	462a      	mov	r2, r5
 80198b4:	2500      	movs	r5, #0
 80198b6:	4621      	mov	r1, r4
 80198b8:	9000      	str	r0, [sp, #0]
 80198ba:	463b      	mov	r3, r7
 80198bc:	462c      	mov	r4, r5
 80198be:	46a9      	mov	r9, r5
 80198c0:	46a8      	mov	r8, r5
 80198c2:	a803      	add	r0, sp, #12
 80198c4:	f000 fdbd 	bl	801a442 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80198c8:	2300      	movs	r3, #0
 80198ca:	9302      	str	r3, [sp, #8]
 80198cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80198d0:	429c      	cmp	r4, r3
 80198d2:	d002      	beq.n	80198da <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80198d4:	455c      	cmp	r4, fp
 80198d6:	bf18      	it	ne
 80198d8:	4625      	movne	r5, r4
 80198da:	ab02      	add	r3, sp, #8
 80198dc:	4632      	mov	r2, r6
 80198de:	4651      	mov	r1, sl
 80198e0:	a803      	add	r0, sp, #12
 80198e2:	f001 f8a3 	bl	801aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80198e6:	4604      	mov	r4, r0
 80198e8:	b108      	cbz	r0, 80198ee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80198ea:	280a      	cmp	r0, #10
 80198ec:	d10a      	bne.n	8019904 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80198ee:	45c1      	cmp	r9, r8
 80198f0:	bf38      	it	cc
 80198f2:	46c1      	movcc	r9, r8
 80198f4:	f04f 0800 	mov.w	r8, #0
 80198f8:	2c00      	cmp	r4, #0
 80198fa:	d1e5      	bne.n	80198c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80198fc:	4648      	mov	r0, r9
 80198fe:	b01d      	add	sp, #116	; 0x74
 8019900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019904:	9a02      	ldr	r2, [sp, #8]
 8019906:	2a00      	cmp	r2, #0
 8019908:	d0de      	beq.n	80198c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801990a:	7b57      	ldrb	r7, [r2, #13]
 801990c:	4629      	mov	r1, r5
 801990e:	6833      	ldr	r3, [r6, #0]
 8019910:	007f      	lsls	r7, r7, #1
 8019912:	8894      	ldrh	r4, [r2, #4]
 8019914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019916:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801991a:	7a97      	ldrb	r7, [r2, #10]
 801991c:	4307      	orrs	r7, r0
 801991e:	4630      	mov	r0, r6
 8019920:	4798      	blx	r3
 8019922:	4438      	add	r0, r7
 8019924:	4480      	add	r8, r0
 8019926:	fa1f f888 	uxth.w	r8, r8
 801992a:	e7e5      	b.n	80198f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801992c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801992c:	b508      	push	{r3, lr}
 801992e:	6803      	ldr	r3, [r0, #0]
 8019930:	68db      	ldr	r3, [r3, #12]
 8019932:	4798      	blx	r3
 8019934:	b128      	cbz	r0, 8019942 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019936:	7b43      	ldrb	r3, [r0, #13]
 8019938:	7a80      	ldrb	r0, [r0, #10]
 801993a:	005b      	lsls	r3, r3, #1
 801993c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019940:	4318      	orrs	r0, r3
 8019942:	bd08      	pop	{r3, pc}

08019944 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019944:	b40e      	push	{r1, r2, r3}
 8019946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019948:	b09e      	sub	sp, #120	; 0x78
 801994a:	4605      	mov	r5, r0
 801994c:	ab23      	add	r3, sp, #140	; 0x8c
 801994e:	a805      	add	r0, sp, #20
 8019950:	f853 4b04 	ldr.w	r4, [r3], #4
 8019954:	9303      	str	r3, [sp, #12]
 8019956:	f000 fd21 	bl	801a39c <_ZN8touchgfx12TextProviderC1Ev>
 801995a:	682b      	ldr	r3, [r5, #0]
 801995c:	4628      	mov	r0, r5
 801995e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019960:	4798      	blx	r3
 8019962:	682b      	ldr	r3, [r5, #0]
 8019964:	4606      	mov	r6, r0
 8019966:	4628      	mov	r0, r5
 8019968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801996a:	4798      	blx	r3
 801996c:	4633      	mov	r3, r6
 801996e:	4621      	mov	r1, r4
 8019970:	ae1e      	add	r6, sp, #120	; 0x78
 8019972:	2400      	movs	r4, #0
 8019974:	9000      	str	r0, [sp, #0]
 8019976:	9a03      	ldr	r2, [sp, #12]
 8019978:	a805      	add	r0, sp, #20
 801997a:	f000 fd62 	bl	801a442 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801997e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019982:	462a      	mov	r2, r5
 8019984:	4633      	mov	r3, r6
 8019986:	4621      	mov	r1, r4
 8019988:	a805      	add	r0, sp, #20
 801998a:	f001 f84f 	bl	801aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801998e:	b300      	cbz	r0, 80199d2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019990:	280a      	cmp	r0, #10
 8019992:	d01a      	beq.n	80199ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019994:	9f04      	ldr	r7, [sp, #16]
 8019996:	b1c7      	cbz	r7, 80199ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019998:	7b78      	ldrb	r0, [r7, #13]
 801999a:	7a3b      	ldrb	r3, [r7, #8]
 801999c:	00c1      	lsls	r1, r0, #3
 801999e:	88ea      	ldrh	r2, [r5, #6]
 80199a0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80199a4:	4319      	orrs	r1, r3
 80199a6:	0643      	lsls	r3, r0, #25
 80199a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80199ac:	bf48      	it	mi
 80199ae:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80199b2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80199b6:	bf48      	it	mi
 80199b8:	b219      	sxthmi	r1, r3
 80199ba:	79fb      	ldrb	r3, [r7, #7]
 80199bc:	4303      	orrs	r3, r0
 80199be:	4413      	add	r3, r2
 80199c0:	1a5b      	subs	r3, r3, r1
 80199c2:	b21b      	sxth	r3, r3
 80199c4:	429c      	cmp	r4, r3
 80199c6:	bfb8      	it	lt
 80199c8:	461c      	movlt	r4, r3
 80199ca:	4633      	mov	r3, r6
 80199cc:	462a      	mov	r2, r5
 80199ce:	2100      	movs	r1, #0
 80199d0:	e7da      	b.n	8019988 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80199d2:	b2a0      	uxth	r0, r4
 80199d4:	b01e      	add	sp, #120	; 0x78
 80199d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80199da:	b003      	add	sp, #12
 80199dc:	4770      	bx	lr

080199de <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80199de:	7a43      	ldrb	r3, [r0, #9]
 80199e0:	8880      	ldrh	r0, [r0, #4]
 80199e2:	4418      	add	r0, r3
 80199e4:	b280      	uxth	r0, r0
 80199e6:	4770      	bx	lr

080199e8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80199e8:	6803      	ldr	r3, [r0, #0]
 80199ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199ec:	4718      	bx	r3

080199ee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80199ee:	b40e      	push	{r1, r2, r3}
 80199f0:	b570      	push	{r4, r5, r6, lr}
 80199f2:	b09d      	sub	sp, #116	; 0x74
 80199f4:	4604      	mov	r4, r0
 80199f6:	ab21      	add	r3, sp, #132	; 0x84
 80199f8:	a803      	add	r0, sp, #12
 80199fa:	f853 5b04 	ldr.w	r5, [r3], #4
 80199fe:	9302      	str	r3, [sp, #8]
 8019a00:	f000 fccc 	bl	801a39c <_ZN8touchgfx12TextProviderC1Ev>
 8019a04:	6823      	ldr	r3, [r4, #0]
 8019a06:	4620      	mov	r0, r4
 8019a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a0a:	4798      	blx	r3
 8019a0c:	6823      	ldr	r3, [r4, #0]
 8019a0e:	4606      	mov	r6, r0
 8019a10:	4620      	mov	r0, r4
 8019a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a14:	2401      	movs	r4, #1
 8019a16:	4798      	blx	r3
 8019a18:	4633      	mov	r3, r6
 8019a1a:	9000      	str	r0, [sp, #0]
 8019a1c:	4629      	mov	r1, r5
 8019a1e:	9a02      	ldr	r2, [sp, #8]
 8019a20:	a803      	add	r0, sp, #12
 8019a22:	f000 fd0e 	bl	801a442 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a26:	a803      	add	r0, sp, #12
 8019a28:	f001 f880 	bl	801ab2c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019a2c:	b2a3      	uxth	r3, r4
 8019a2e:	b138      	cbz	r0, 8019a40 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019a30:	280a      	cmp	r0, #10
 8019a32:	a803      	add	r0, sp, #12
 8019a34:	bf04      	itt	eq
 8019a36:	3301      	addeq	r3, #1
 8019a38:	b21c      	sxtheq	r4, r3
 8019a3a:	f001 f877 	bl	801ab2c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019a3e:	e7f5      	b.n	8019a2c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019a40:	4618      	mov	r0, r3
 8019a42:	b01d      	add	sp, #116	; 0x74
 8019a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a48:	b003      	add	sp, #12
 8019a4a:	4770      	bx	lr

08019a4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019a4c:	b40e      	push	{r1, r2, r3}
 8019a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a50:	b09e      	sub	sp, #120	; 0x78
 8019a52:	4604      	mov	r4, r0
 8019a54:	ab23      	add	r3, sp, #140	; 0x8c
 8019a56:	a805      	add	r0, sp, #20
 8019a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a5c:	9303      	str	r3, [sp, #12]
 8019a5e:	f000 fc9d 	bl	801a39c <_ZN8touchgfx12TextProviderC1Ev>
 8019a62:	6823      	ldr	r3, [r4, #0]
 8019a64:	4620      	mov	r0, r4
 8019a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a68:	4798      	blx	r3
 8019a6a:	6823      	ldr	r3, [r4, #0]
 8019a6c:	4606      	mov	r6, r0
 8019a6e:	4620      	mov	r0, r4
 8019a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a72:	4798      	blx	r3
 8019a74:	4633      	mov	r3, r6
 8019a76:	4629      	mov	r1, r5
 8019a78:	9000      	str	r0, [sp, #0]
 8019a7a:	9a03      	ldr	r2, [sp, #12]
 8019a7c:	a805      	add	r0, sp, #20
 8019a7e:	f000 fce0 	bl	801a442 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a82:	ad1e      	add	r5, sp, #120	; 0x78
 8019a84:	2100      	movs	r1, #0
 8019a86:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8019a8a:	4622      	mov	r2, r4
 8019a8c:	a805      	add	r0, sp, #20
 8019a8e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019a92:	462b      	mov	r3, r5
 8019a94:	f000 ffca 	bl	801aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a98:	b1d8      	cbz	r0, 8019ad2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019a9a:	280a      	cmp	r0, #10
 8019a9c:	d012      	beq.n	8019ac4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019a9e:	9804      	ldr	r0, [sp, #16]
 8019aa0:	b180      	cbz	r0, 8019ac4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019aa2:	7b47      	ldrb	r7, [r0, #13]
 8019aa4:	88e2      	ldrh	r2, [r4, #6]
 8019aa6:	00fb      	lsls	r3, r7, #3
 8019aa8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019aac:	7a03      	ldrb	r3, [r0, #8]
 8019aae:	430b      	orrs	r3, r1
 8019ab0:	0679      	lsls	r1, r7, #25
 8019ab2:	bf44      	itt	mi
 8019ab4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019ab8:	b21b      	sxthmi	r3, r3
 8019aba:	1ad3      	subs	r3, r2, r3
 8019abc:	b21b      	sxth	r3, r3
 8019abe:	429e      	cmp	r6, r3
 8019ac0:	bfa8      	it	ge
 8019ac2:	461e      	movge	r6, r3
 8019ac4:	462b      	mov	r3, r5
 8019ac6:	4622      	mov	r2, r4
 8019ac8:	2100      	movs	r1, #0
 8019aca:	a805      	add	r0, sp, #20
 8019acc:	f000 ffae 	bl	801aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019ad0:	e7e2      	b.n	8019a98 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019ad2:	4630      	mov	r0, r6
 8019ad4:	b01e      	add	sp, #120	; 0x78
 8019ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019ada:	b003      	add	sp, #12
 8019adc:	4770      	bx	lr

08019ade <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019ade:	b538      	push	{r3, r4, r5, lr}
 8019ae0:	680b      	ldr	r3, [r1, #0]
 8019ae2:	460c      	mov	r4, r1
 8019ae4:	4605      	mov	r5, r0
 8019ae6:	68db      	ldr	r3, [r3, #12]
 8019ae8:	4798      	blx	r3
 8019aea:	6823      	ldr	r3, [r4, #0]
 8019aec:	4620      	mov	r0, r4
 8019aee:	4629      	mov	r1, r5
 8019af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019af2:	4798      	blx	r3
 8019af4:	4628      	mov	r0, r5
 8019af6:	bd38      	pop	{r3, r4, r5, pc}

08019af8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019af8:	b410      	push	{r4}
 8019afa:	880a      	ldrh	r2, [r1, #0]
 8019afc:	8884      	ldrh	r4, [r0, #4]
 8019afe:	4422      	add	r2, r4
 8019b00:	800a      	strh	r2, [r1, #0]
 8019b02:	884a      	ldrh	r2, [r1, #2]
 8019b04:	88c4      	ldrh	r4, [r0, #6]
 8019b06:	4422      	add	r2, r4
 8019b08:	804a      	strh	r2, [r1, #2]
 8019b0a:	6940      	ldr	r0, [r0, #20]
 8019b0c:	b120      	cbz	r0, 8019b18 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019b0e:	6803      	ldr	r3, [r0, #0]
 8019b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b16:	4718      	bx	r3
 8019b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b1c:	4770      	bx	lr

08019b1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019b1e:	b570      	push	{r4, r5, r6, lr}
 8019b20:	8882      	ldrh	r2, [r0, #4]
 8019b22:	460c      	mov	r4, r1
 8019b24:	880b      	ldrh	r3, [r1, #0]
 8019b26:	4605      	mov	r5, r0
 8019b28:	4413      	add	r3, r2
 8019b2a:	800b      	strh	r3, [r1, #0]
 8019b2c:	884b      	ldrh	r3, [r1, #2]
 8019b2e:	88c2      	ldrh	r2, [r0, #6]
 8019b30:	4413      	add	r3, r2
 8019b32:	804b      	strh	r3, [r1, #2]
 8019b34:	1d01      	adds	r1, r0, #4
 8019b36:	4620      	mov	r0, r4
 8019b38:	f7fb ffa6 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 8019b3c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	dd0b      	ble.n	8019b5c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	dd07      	ble.n	8019b5c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b4c:	6968      	ldr	r0, [r5, #20]
 8019b4e:	b128      	cbz	r0, 8019b5c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b50:	6803      	ldr	r3, [r0, #0]
 8019b52:	4621      	mov	r1, r4
 8019b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b5a:	4718      	bx	r3
 8019b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019b60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019b60:	b570      	push	{r4, r5, r6, lr}
 8019b62:	8882      	ldrh	r2, [r0, #4]
 8019b64:	460c      	mov	r4, r1
 8019b66:	880b      	ldrh	r3, [r1, #0]
 8019b68:	4605      	mov	r5, r0
 8019b6a:	4413      	add	r3, r2
 8019b6c:	800b      	strh	r3, [r1, #0]
 8019b6e:	884b      	ldrh	r3, [r1, #2]
 8019b70:	88c2      	ldrh	r2, [r0, #6]
 8019b72:	4413      	add	r3, r2
 8019b74:	804b      	strh	r3, [r1, #2]
 8019b76:	1d01      	adds	r1, r0, #4
 8019b78:	4620      	mov	r0, r4
 8019b7a:	f7fb ff85 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 8019b7e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	dd19      	ble.n	8019bba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019b86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	dd15      	ble.n	8019bba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019b8e:	6968      	ldr	r0, [r5, #20]
 8019b90:	b128      	cbz	r0, 8019b9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019b92:	6803      	ldr	r3, [r0, #0]
 8019b94:	4621      	mov	r1, r4
 8019b96:	691b      	ldr	r3, [r3, #16]
 8019b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b9c:	4718      	bx	r3
 8019b9e:	4b07      	ldr	r3, [pc, #28]	; (8019bbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	3304      	adds	r3, #4
 8019ba4:	429d      	cmp	r5, r3
 8019ba6:	d108      	bne.n	8019bba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019ba8:	f7ff fe5e 	bl	8019868 <_ZN8touchgfx11Application11getInstanceEv>
 8019bac:	6803      	ldr	r3, [r0, #0]
 8019bae:	6821      	ldr	r1, [r4, #0]
 8019bb0:	6862      	ldr	r2, [r4, #4]
 8019bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bb8:	4718      	bx	r3
 8019bba:	bd70      	pop	{r4, r5, r6, pc}
 8019bbc:	200146d0 	.word	0x200146d0

08019bc0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019bc0:	b570      	push	{r4, r5, r6, lr}
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	4616      	mov	r6, r2
 8019bc6:	460d      	mov	r5, r1
 8019bc8:	b901      	cbnz	r1, 8019bcc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019bca:	b192      	cbz	r2, 8019bf2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019bcc:	6823      	ldr	r3, [r4, #0]
 8019bce:	4620      	mov	r0, r4
 8019bd0:	699b      	ldr	r3, [r3, #24]
 8019bd2:	4798      	blx	r3
 8019bd4:	88e2      	ldrh	r2, [r4, #6]
 8019bd6:	88a1      	ldrh	r1, [r4, #4]
 8019bd8:	4620      	mov	r0, r4
 8019bda:	4432      	add	r2, r6
 8019bdc:	4429      	add	r1, r5
 8019bde:	b212      	sxth	r2, r2
 8019be0:	b209      	sxth	r1, r1
 8019be2:	f7fb ff94 	bl	8015b0e <_ZN8touchgfx8Drawable5setXYEss>
 8019be6:	6823      	ldr	r3, [r4, #0]
 8019be8:	4620      	mov	r0, r4
 8019bea:	699b      	ldr	r3, [r3, #24]
 8019bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bf0:	4718      	bx	r3
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}

08019bf4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8019bf4:	4770      	bx	lr

08019bf6 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8019bf6:	b510      	push	{r4, lr}
 8019bf8:	4604      	mov	r4, r0
 8019bfa:	211c      	movs	r1, #28
 8019bfc:	f004 f9bc 	bl	801df78 <_ZdlPvj>
 8019c00:	4620      	mov	r0, r4
 8019c02:	bd10      	pop	{r4, pc}

08019c04 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8019c04:	4a04      	ldr	r2, [pc, #16]	; (8019c18 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8019c06:	6002      	str	r2, [r0, #0]
 8019c08:	2200      	movs	r2, #0
 8019c0a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8019c0e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019c12:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019c16:	4770      	bx	lr
 8019c18:	0802407c 	.word	0x0802407c

08019c1c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8019c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c20:	4604      	mov	r4, r0
 8019c22:	b087      	sub	sp, #28
 8019c24:	4696      	mov	lr, r2
 8019c26:	6880      	ldr	r0, [r0, #8]
 8019c28:	8b22      	ldrh	r2, [r4, #24]
 8019c2a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019c2e:	9105      	str	r1, [sp, #20]
 8019c30:	1c51      	adds	r1, r2, #1
 8019c32:	8321      	strh	r1, [r4, #24]
 8019c34:	2101      	movs	r1, #1
 8019c36:	5481      	strb	r1, [r0, r2]
 8019c38:	4689      	mov	r9, r1
 8019c3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c3e:	8b60      	ldrh	r0, [r4, #26]
 8019c40:	ee06 2a90 	vmov	s13, r2
 8019c44:	68e2      	ldr	r2, [r4, #12]
 8019c46:	1845      	adds	r5, r0, r1
 8019c48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019c4c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019c50:	8365      	strh	r5, [r4, #26]
 8019c52:	edc2 6a00 	vstr	s13, [r2]
 8019c56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019c5a:	8b60      	ldrh	r0, [r4, #26]
 8019c5c:	ee07 2a10 	vmov	s14, r2
 8019c60:	68e2      	ldr	r2, [r4, #12]
 8019c62:	1845      	adds	r5, r0, r1
 8019c64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c68:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019c6c:	8365      	strh	r5, [r4, #26]
 8019c6e:	1d18      	adds	r0, r3, #4
 8019c70:	460d      	mov	r5, r1
 8019c72:	ed82 7a00 	vstr	s14, [r2]
 8019c76:	f8be 2000 	ldrh.w	r2, [lr]
 8019c7a:	9203      	str	r2, [sp, #12]
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	4613      	mov	r3, r2
 8019c80:	4694      	mov	ip, r2
 8019c82:	9201      	str	r2, [sp, #4]
 8019c84:	9202      	str	r2, [sp, #8]
 8019c86:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8019c8a:	9e05      	ldr	r6, [sp, #20]
 8019c8c:	f108 0701 	add.w	r7, r8, #1
 8019c90:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8019c94:	428e      	cmp	r6, r1
 8019c96:	b2bf      	uxth	r7, r7
 8019c98:	eb0a 0b08 	add.w	fp, sl, r8
 8019c9c:	f340 80b6 	ble.w	8019e0c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8019ca0:	9b03      	ldr	r3, [sp, #12]
 8019ca2:	f9b0 c000 	ldrsh.w	ip, [r0]
 8019ca6:	fa43 fb05 	asr.w	fp, r3, r5
 8019caa:	f00b 0b01 	and.w	fp, fp, #1
 8019cae:	fa5f f38b 	uxtb.w	r3, fp
 8019cb2:	9304      	str	r3, [sp, #16]
 8019cb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019cb8:	f1bb 0f00 	cmp.w	fp, #0
 8019cbc:	d057      	beq.n	8019d6e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8019cbe:	ee07 ca90 	vmov	s15, ip
 8019cc2:	8327      	strh	r7, [r4, #24]
 8019cc4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8019cc8:	ee07 3a90 	vmov	s15, r3
 8019ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019cd0:	f1b9 0f00 	cmp.w	r9, #0
 8019cd4:	d028      	beq.n	8019d28 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8019cd6:	f04f 0602 	mov.w	r6, #2
 8019cda:	f80a 6008 	strb.w	r6, [sl, r8]
 8019cde:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019ce2:	68e7      	ldr	r7, [r4, #12]
 8019ce4:	f108 0901 	add.w	r9, r8, #1
 8019ce8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019cec:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019cf0:	edc7 5a00 	vstr	s11, [r7]
 8019cf4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019cf8:	68e7      	ldr	r7, [r4, #12]
 8019cfa:	f108 0901 	add.w	r9, r8, #1
 8019cfe:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019d02:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019d06:	edc7 7a00 	vstr	s15, [r7]
 8019d0a:	3501      	adds	r5, #1
 8019d0c:	2d10      	cmp	r5, #16
 8019d0e:	d106      	bne.n	8019d1e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8019d10:	9d02      	ldr	r5, [sp, #8]
 8019d12:	3501      	adds	r5, #1
 8019d14:	9502      	str	r5, [sp, #8]
 8019d16:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8019d1a:	9503      	str	r5, [sp, #12]
 8019d1c:	2500      	movs	r5, #0
 8019d1e:	3101      	adds	r1, #1
 8019d20:	3004      	adds	r0, #4
 8019d22:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8019d26:	e7ae      	b.n	8019c86 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8019d28:	f04f 0605 	mov.w	r6, #5
 8019d2c:	ed9d 5a01 	vldr	s10, [sp, #4]
 8019d30:	f80a 6008 	strb.w	r6, [sl, r8]
 8019d34:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019d38:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019d3c:	68e7      	ldr	r7, [r4, #12]
 8019d3e:	f108 0901 	add.w	r9, r8, #1
 8019d42:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019d46:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019d4a:	ed87 5a00 	vstr	s10, [r7]
 8019d4e:	ee05 2a10 	vmov	s10, r2
 8019d52:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019d56:	68e7      	ldr	r7, [r4, #12]
 8019d58:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019d5c:	f108 0901 	add.w	r9, r8, #1
 8019d60:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019d64:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019d68:	ed87 5a00 	vstr	s10, [r7]
 8019d6c:	e7b7      	b.n	8019cde <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8019d6e:	f1b9 0f00 	cmp.w	r9, #0
 8019d72:	d147      	bne.n	8019e04 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8019d74:	f04f 0605 	mov.w	r6, #5
 8019d78:	eddd 7a01 	vldr	s15, [sp, #4]
 8019d7c:	8327      	strh	r7, [r4, #24]
 8019d7e:	f80a 6008 	strb.w	r6, [sl, r8]
 8019d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019d8a:	68e7      	ldr	r7, [r4, #12]
 8019d8c:	f108 0901 	add.w	r9, r8, #1
 8019d90:	9e01      	ldr	r6, [sp, #4]
 8019d92:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019d96:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019d9a:	4466      	add	r6, ip
 8019d9c:	edc7 7a00 	vstr	s15, [r7]
 8019da0:	ee07 2a90 	vmov	s15, r2
 8019da4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019da8:	441a      	add	r2, r3
 8019daa:	68e7      	ldr	r7, [r4, #12]
 8019dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019db0:	f108 0901 	add.w	r9, r8, #1
 8019db4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019db8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019dbc:	edc7 7a00 	vstr	s15, [r7]
 8019dc0:	ee07 6a90 	vmov	s15, r6
 8019dc4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019dcc:	68e7      	ldr	r7, [r4, #12]
 8019dce:	f108 0901 	add.w	r9, r8, #1
 8019dd2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019dd6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019dda:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019dde:	edc7 7a00 	vstr	s15, [r7]
 8019de2:	ee07 2a90 	vmov	s15, r2
 8019de6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019dee:	68e7      	ldr	r7, [r4, #12]
 8019df0:	f108 0901 	add.w	r9, r8, #1
 8019df4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019df8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019dfc:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e00:	edc7 7a00 	vstr	s15, [r7]
 8019e04:	461a      	mov	r2, r3
 8019e06:	f8cd c004 	str.w	ip, [sp, #4]
 8019e0a:	e77e      	b.n	8019d0a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8019e0c:	f1b9 0f00 	cmp.w	r9, #0
 8019e10:	d028      	beq.n	8019e64 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8019e12:	ee07 ca90 	vmov	s15, ip
 8019e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e1a:	eef4 6a67 	vcmp.f32	s13, s15
 8019e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e22:	d108      	bne.n	8019e36 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8019e24:	ee07 3a90 	vmov	s15, r3
 8019e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e2c:	eeb4 7a67 	vcmp.f32	s14, s15
 8019e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e34:	d016      	beq.n	8019e64 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8019e36:	2302      	movs	r3, #2
 8019e38:	8327      	strh	r7, [r4, #24]
 8019e3a:	f88b 3000 	strb.w	r3, [fp]
 8019e3e:	8b62      	ldrh	r2, [r4, #26]
 8019e40:	68e3      	ldr	r3, [r4, #12]
 8019e42:	1c51      	adds	r1, r2, #1
 8019e44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019e48:	8361      	strh	r1, [r4, #26]
 8019e4a:	edc3 6a00 	vstr	s13, [r3]
 8019e4e:	8b62      	ldrh	r2, [r4, #26]
 8019e50:	68e3      	ldr	r3, [r4, #12]
 8019e52:	1c51      	adds	r1, r2, #1
 8019e54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019e58:	8361      	strh	r1, [r4, #26]
 8019e5a:	ed83 7a00 	vstr	s14, [r3]
 8019e5e:	b007      	add	sp, #28
 8019e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e64:	2305      	movs	r3, #5
 8019e66:	eddd 7a01 	vldr	s15, [sp, #4]
 8019e6a:	8327      	strh	r7, [r4, #24]
 8019e6c:	f88b 3000 	strb.w	r3, [fp]
 8019e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e74:	8b61      	ldrh	r1, [r4, #26]
 8019e76:	68e3      	ldr	r3, [r4, #12]
 8019e78:	1c4d      	adds	r5, r1, #1
 8019e7a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019e7e:	8365      	strh	r5, [r4, #26]
 8019e80:	edc3 7a00 	vstr	s15, [r3]
 8019e84:	ee07 2a90 	vmov	s15, r2
 8019e88:	8b61      	ldrh	r1, [r4, #26]
 8019e8a:	68e3      	ldr	r3, [r4, #12]
 8019e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e90:	1c4d      	adds	r5, r1, #1
 8019e92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019e96:	8365      	strh	r5, [r4, #26]
 8019e98:	edc3 7a00 	vstr	s15, [r3]
 8019e9c:	e7cf      	b.n	8019e3e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08019ea0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8019ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ea4:	4604      	mov	r4, r0
 8019ea6:	b08e      	sub	sp, #56	; 0x38
 8019ea8:	4699      	mov	r9, r3
 8019eaa:	4688      	mov	r8, r1
 8019eac:	4615      	mov	r5, r2
 8019eae:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8019eb0:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
 8019eb4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8019eb6:	f7e9 fa27 	bl	8003308 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8019eba:	6060      	str	r0, [r4, #4]
 8019ebc:	f1b9 0f00 	cmp.w	r9, #0
 8019ec0:	f000 80e8 	beq.w	801a094 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8019ec4:	2800      	cmp	r0, #0
 8019ec6:	f000 80e5 	beq.w	801a094 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8019eca:	a805      	add	r0, sp, #20
 8019ecc:	f000 f8f9 	bl	801a0c2 <_ZN8touchgfx9Matrix3x3C1Ev>
 8019ed0:	6833      	ldr	r3, [r6, #0]
 8019ed2:	4630      	mov	r0, r6
 8019ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019ed6:	4798      	blx	r3
 8019ed8:	a805      	add	r0, sp, #20
 8019eda:	eef0 0a40 	vmov.f32	s1, s0
 8019ede:	f000 f8f4 	bl	801a0ca <_ZN8touchgfx9Matrix3x35scaleEff>
 8019ee2:	6860      	ldr	r0, [r4, #4]
 8019ee4:	f1ba 0f03 	cmp.w	sl, #3
 8019ee8:	d83b      	bhi.n	8019f62 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8019eea:	e8df f00a 	tbb	[pc, sl]
 8019eee:	1002      	.short	0x1002
 8019ef0:	9f71      	.short	0x9f71
 8019ef2:	6803      	ldr	r3, [r0, #0]
 8019ef4:	462a      	mov	r2, r5
 8019ef6:	4641      	mov	r1, r8
 8019ef8:	689b      	ldr	r3, [r3, #8]
 8019efa:	4798      	blx	r3
 8019efc:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 8019f00:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019f04:	ee07 7a90 	vmov	s15, r7
 8019f08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019f0c:	e026      	b.n	8019f5c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8019f0e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8019f12:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8019f16:	8869      	ldrh	r1, [r5, #2]
 8019f18:	1a9b      	subs	r3, r3, r2
 8019f1a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019f1e:	aa03      	add	r2, sp, #12
 8019f20:	1a5b      	subs	r3, r3, r1
 8019f22:	4641      	mov	r1, r8
 8019f24:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019f28:	882b      	ldrh	r3, [r5, #0]
 8019f2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019f2e:	88ab      	ldrh	r3, [r5, #4]
 8019f30:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019f34:	6803      	ldr	r3, [r0, #0]
 8019f36:	689b      	ldr	r3, [r3, #8]
 8019f38:	4798      	blx	r3
 8019f3a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 801a09c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8019f3e:	a805      	add	r0, sp, #20
 8019f40:	f000 f8e8 	bl	801a114 <_ZN8touchgfx9Matrix3x36rotateEf>
 8019f44:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8019f48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019f4a:	ee07 7a90 	vmov	s15, r7
 8019f4e:	1a9b      	subs	r3, r3, r2
 8019f50:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019f54:	ee00 3a10 	vmov	s0, r3
 8019f58:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019f5c:	a805      	add	r0, sp, #20
 8019f5e:	f000 f927 	bl	801a1b0 <_ZN8touchgfx9Matrix3x39translateEff>
 8019f62:	6860      	ldr	r0, [r4, #4]
 8019f64:	a905      	add	r1, sp, #20
 8019f66:	2500      	movs	r5, #0
 8019f68:	f109 0602 	add.w	r6, r9, #2
 8019f6c:	6803      	ldr	r3, [r0, #0]
 8019f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f70:	4798      	blx	r3
 8019f72:	6860      	ldr	r0, [r4, #4]
 8019f74:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019f76:	6803      	ldr	r3, [r0, #0]
 8019f78:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 8019f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f7e:	4798      	blx	r3
 8019f80:	6860      	ldr	r0, [r4, #4]
 8019f82:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8019f86:	6803      	ldr	r3, [r0, #0]
 8019f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f8a:	4798      	blx	r3
 8019f8c:	6860      	ldr	r0, [r4, #4]
 8019f8e:	2101      	movs	r1, #1
 8019f90:	6803      	ldr	r3, [r0, #0]
 8019f92:	68db      	ldr	r3, [r3, #12]
 8019f94:	4798      	blx	r3
 8019f96:	f8b9 7000 	ldrh.w	r7, [r9]
 8019f9a:	f104 0310 	add.w	r3, r4, #16
 8019f9e:	61a5      	str	r5, [r4, #24]
 8019fa0:	f104 0208 	add.w	r2, r4, #8
 8019fa4:	f104 0114 	add.w	r1, r4, #20
 8019fa8:	f104 000c 	add.w	r0, r4, #12
 8019fac:	f7e9 fbec 	bl	8003788 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8019fb0:	42af      	cmp	r7, r5
 8019fb2:	dd60      	ble.n	801a076 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8019fb4:	8831      	ldrh	r1, [r6, #0]
 8019fb6:	1cb2      	adds	r2, r6, #2
 8019fb8:	4620      	mov	r0, r4
 8019fba:	3501      	adds	r5, #1
 8019fbc:	f101 030f 	add.w	r3, r1, #15
 8019fc0:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8019fc4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019fc8:	f7ff fe28 	bl	8019c1c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8019fcc:	4606      	mov	r6, r0
 8019fce:	e7ef      	b.n	8019fb0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8019fd0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019fd4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8019fd8:	8829      	ldrh	r1, [r5, #0]
 8019fda:	1a9b      	subs	r3, r3, r2
 8019fdc:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019fe0:	aa03      	add	r2, sp, #12
 8019fe2:	1a5b      	subs	r3, r3, r1
 8019fe4:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019fe8:	886d      	ldrh	r5, [r5, #2]
 8019fea:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019fee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019ff2:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019ff6:	1a5b      	subs	r3, r3, r1
 8019ff8:	4641      	mov	r1, r8
 8019ffa:	1b5b      	subs	r3, r3, r5
 8019ffc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a000:	6803      	ldr	r3, [r0, #0]
 801a002:	689b      	ldr	r3, [r3, #8]
 801a004:	4798      	blx	r3
 801a006:	ed9f 0a26 	vldr	s0, [pc, #152]	; 801a0a0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801a00a:	a805      	add	r0, sp, #20
 801a00c:	f000 f882 	bl	801a114 <_ZN8touchgfx9Matrix3x36rotateEf>
 801a010:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a014:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a016:	1a9b      	subs	r3, r3, r2
 801a018:	ee00 3a90 	vmov	s1, r3
 801a01c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801a020:	1bdb      	subs	r3, r3, r7
 801a022:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a026:	ee00 3a10 	vmov	s0, r3
 801a02a:	e795      	b.n	8019f58 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801a02c:	886b      	ldrh	r3, [r5, #2]
 801a02e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a032:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a036:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801a03a:	8829      	ldrh	r1, [r5, #0]
 801a03c:	1a9b      	subs	r3, r3, r2
 801a03e:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a042:	aa03      	add	r2, sp, #12
 801a044:	1a5b      	subs	r3, r3, r1
 801a046:	4641      	mov	r1, r8
 801a048:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a04c:	88eb      	ldrh	r3, [r5, #6]
 801a04e:	f8ad 3010 	strh.w	r3, [sp, #16]
 801a052:	6803      	ldr	r3, [r0, #0]
 801a054:	689b      	ldr	r3, [r3, #8]
 801a056:	4798      	blx	r3
 801a058:	ed9f 0a12 	vldr	s0, [pc, #72]	; 801a0a4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801a05c:	a805      	add	r0, sp, #20
 801a05e:	f000 f859 	bl	801a114 <_ZN8touchgfx9Matrix3x36rotateEf>
 801a062:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a066:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 801a06a:	1bdb      	subs	r3, r3, r7
 801a06c:	ee00 3a90 	vmov	s1, r3
 801a070:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a074:	e748      	b.n	8019f08 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801a076:	6860      	ldr	r0, [r4, #4]
 801a078:	2100      	movs	r1, #0
 801a07a:	8b22      	ldrh	r2, [r4, #24]
 801a07c:	6803      	ldr	r3, [r0, #0]
 801a07e:	9101      	str	r1, [sp, #4]
 801a080:	8b61      	ldrh	r1, [r4, #26]
 801a082:	9100      	str	r1, [sp, #0]
 801a084:	6a1d      	ldr	r5, [r3, #32]
 801a086:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801a08a:	47a8      	blx	r5
 801a08c:	6860      	ldr	r0, [r4, #4]
 801a08e:	6803      	ldr	r3, [r0, #0]
 801a090:	69db      	ldr	r3, [r3, #28]
 801a092:	4798      	blx	r3
 801a094:	b00e      	add	sp, #56	; 0x38
 801a096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a09a:	bf00      	nop
 801a09c:	42b40000 	.word	0x42b40000
 801a0a0:	43340000 	.word	0x43340000
 801a0a4:	43870000 	.word	0x43870000

0801a0a8 <_ZN8touchgfx9Matrix3x35resetEv>:
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a0ae:	6043      	str	r3, [r0, #4]
 801a0b0:	6002      	str	r2, [r0, #0]
 801a0b2:	6083      	str	r3, [r0, #8]
 801a0b4:	60c3      	str	r3, [r0, #12]
 801a0b6:	6102      	str	r2, [r0, #16]
 801a0b8:	6143      	str	r3, [r0, #20]
 801a0ba:	6183      	str	r3, [r0, #24]
 801a0bc:	61c3      	str	r3, [r0, #28]
 801a0be:	6202      	str	r2, [r0, #32]
 801a0c0:	4770      	bx	lr

0801a0c2 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801a0c2:	b508      	push	{r3, lr}
 801a0c4:	f7ff fff0 	bl	801a0a8 <_ZN8touchgfx9Matrix3x35resetEv>
 801a0c8:	bd08      	pop	{r3, pc}

0801a0ca <_ZN8touchgfx9Matrix3x35scaleEff>:
 801a0ca:	edd0 7a00 	vldr	s15, [r0]
 801a0ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a0d2:	edc0 7a00 	vstr	s15, [r0]
 801a0d6:	edd0 7a01 	vldr	s15, [r0, #4]
 801a0da:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a0de:	edc0 7a01 	vstr	s15, [r0, #4]
 801a0e2:	edd0 7a02 	vldr	s15, [r0, #8]
 801a0e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a0ea:	edd0 7a03 	vldr	s15, [r0, #12]
 801a0ee:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a0f2:	ed80 0a02 	vstr	s0, [r0, #8]
 801a0f6:	edc0 7a03 	vstr	s15, [r0, #12]
 801a0fa:	edd0 7a04 	vldr	s15, [r0, #16]
 801a0fe:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a102:	edc0 7a04 	vstr	s15, [r0, #16]
 801a106:	edd0 7a05 	vldr	s15, [r0, #20]
 801a10a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801a10e:	edc0 0a05 	vstr	s1, [r0, #20]
 801a112:	4770      	bx	lr

0801a114 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801a114:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a1a8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801a118:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a11c:	eddf 7a23 	vldr	s15, [pc, #140]	; 801a1ac <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801a120:	b510      	push	{r4, lr}
 801a122:	ed2d 8b02 	vpush	{d8}
 801a126:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801a12a:	4604      	mov	r4, r0
 801a12c:	eeb0 0a68 	vmov.f32	s0, s17
 801a130:	f003 ff6a 	bl	801e008 <cosf>
 801a134:	eeb0 8a40 	vmov.f32	s16, s0
 801a138:	eeb0 0a68 	vmov.f32	s0, s17
 801a13c:	f003 ffa8 	bl	801e090 <sinf>
 801a140:	edd4 6a03 	vldr	s13, [r4, #12]
 801a144:	edd4 4a00 	vldr	s9, [r4]
 801a148:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801a14c:	ed94 7a04 	vldr	s14, [r4, #16]
 801a150:	ed94 5a01 	vldr	s10, [r4, #4]
 801a154:	ee66 6a88 	vmul.f32	s13, s13, s16
 801a158:	edd4 5a02 	vldr	s11, [r4, #8]
 801a15c:	eee8 7a24 	vfma.f32	s15, s16, s9
 801a160:	eee0 6a24 	vfma.f32	s13, s0, s9
 801a164:	edc4 7a00 	vstr	s15, [r4]
 801a168:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801a16c:	ee27 7a08 	vmul.f32	s14, s14, s16
 801a170:	edc4 6a03 	vstr	s13, [r4, #12]
 801a174:	eee8 7a05 	vfma.f32	s15, s16, s10
 801a178:	eea0 7a05 	vfma.f32	s14, s0, s10
 801a17c:	edc4 7a01 	vstr	s15, [r4, #4]
 801a180:	edd4 7a05 	vldr	s15, [r4, #20]
 801a184:	ed84 7a04 	vstr	s14, [r4, #16]
 801a188:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801a18c:	ee67 7a88 	vmul.f32	s15, s15, s16
 801a190:	eea8 6a25 	vfma.f32	s12, s16, s11
 801a194:	eee0 7a25 	vfma.f32	s15, s0, s11
 801a198:	ecbd 8b02 	vpop	{d8}
 801a19c:	ed84 6a02 	vstr	s12, [r4, #8]
 801a1a0:	edc4 7a05 	vstr	s15, [r4, #20]
 801a1a4:	bd10      	pop	{r4, pc}
 801a1a6:	bf00      	nop
 801a1a8:	40490fdb 	.word	0x40490fdb
 801a1ac:	43340000 	.word	0x43340000

0801a1b0 <_ZN8touchgfx9Matrix3x39translateEff>:
 801a1b0:	ed90 6a06 	vldr	s12, [r0, #24]
 801a1b4:	edd0 7a00 	vldr	s15, [r0]
 801a1b8:	edd0 6a07 	vldr	s13, [r0, #28]
 801a1bc:	eee6 7a00 	vfma.f32	s15, s12, s0
 801a1c0:	ed90 7a08 	vldr	s14, [r0, #32]
 801a1c4:	edc0 7a00 	vstr	s15, [r0]
 801a1c8:	edd0 7a01 	vldr	s15, [r0, #4]
 801a1cc:	eee6 7a80 	vfma.f32	s15, s13, s0
 801a1d0:	edc0 7a01 	vstr	s15, [r0, #4]
 801a1d4:	edd0 7a02 	vldr	s15, [r0, #8]
 801a1d8:	eee7 7a00 	vfma.f32	s15, s14, s0
 801a1dc:	edc0 7a02 	vstr	s15, [r0, #8]
 801a1e0:	edd0 7a03 	vldr	s15, [r0, #12]
 801a1e4:	eee6 7a20 	vfma.f32	s15, s12, s1
 801a1e8:	edc0 7a03 	vstr	s15, [r0, #12]
 801a1ec:	edd0 7a04 	vldr	s15, [r0, #16]
 801a1f0:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801a1f4:	edc0 7a04 	vstr	s15, [r0, #16]
 801a1f8:	edd0 7a05 	vldr	s15, [r0, #20]
 801a1fc:	eee7 7a20 	vfma.f32	s15, s14, s1
 801a200:	edc0 7a05 	vstr	s15, [r0, #20]
 801a204:	4770      	bx	lr

0801a206 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801a206:	edd0 6a01 	vldr	s13, [r0, #4]
 801a20a:	b084      	sub	sp, #16
 801a20c:	edd0 7a04 	vldr	s15, [r0, #16]
 801a210:	ed90 7a03 	vldr	s14, [r0, #12]
 801a214:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801a218:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801a21c:	edd0 6a00 	vldr	s13, [r0]
 801a220:	eee7 7a00 	vfma.f32	s15, s14, s0
 801a224:	ed90 7a05 	vldr	s14, [r0, #20]
 801a228:	eee6 0a80 	vfma.f32	s1, s13, s0
 801a22c:	ed90 0a02 	vldr	s0, [r0, #8]
 801a230:	ee30 0a80 	vadd.f32	s0, s1, s0
 801a234:	ee77 0a87 	vadd.f32	s1, s15, s14
 801a238:	b004      	add	sp, #16
 801a23a:	4770      	bx	lr

0801a23c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801a23c:	b530      	push	{r4, r5, lr}
 801a23e:	8083      	strh	r3, [r0, #4]
 801a240:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a244:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801a248:	80c3      	strh	r3, [r0, #6]
 801a24a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801a24e:	6141      	str	r1, [r0, #20]
 801a250:	7203      	strb	r3, [r0, #8]
 801a252:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a256:	8302      	strh	r2, [r0, #24]
 801a258:	7243      	strb	r3, [r0, #9]
 801a25a:	7a83      	ldrb	r3, [r0, #10]
 801a25c:	f365 0306 	bfi	r3, r5, #0, #7
 801a260:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801a264:	f365 13c7 	bfi	r3, r5, #7, #1
 801a268:	7283      	strb	r3, [r0, #10]
 801a26a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801a26e:	72c3      	strb	r3, [r0, #11]
 801a270:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801a274:	7303      	strb	r3, [r0, #12]
 801a276:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a27a:	81c3      	strh	r3, [r0, #14]
 801a27c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801a280:	8203      	strh	r3, [r0, #16]
 801a282:	4b01      	ldr	r3, [pc, #4]	; (801a288 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801a284:	6003      	str	r3, [r0, #0]
 801a286:	bd30      	pop	{r4, r5, pc}
 801a288:	08024090 	.word	0x08024090

0801a28c <_ZNK8touchgfx9ConstFont4findEt>:
 801a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a28e:	6944      	ldr	r4, [r0, #20]
 801a290:	b3bc      	cbz	r4, 801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a292:	88a3      	ldrh	r3, [r4, #4]
 801a294:	8b02      	ldrh	r2, [r0, #24]
 801a296:	1acb      	subs	r3, r1, r3
 801a298:	f102 32ff 	add.w	r2, r2, #4294967295
 801a29c:	d431      	bmi.n	801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a29e:	4293      	cmp	r3, r2
 801a2a0:	dd0c      	ble.n	801a2bc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a2a2:	230e      	movs	r3, #14
 801a2a4:	fb03 4302 	mla	r3, r3, r2, r4
 801a2a8:	889b      	ldrh	r3, [r3, #4]
 801a2aa:	1a5b      	subs	r3, r3, r1
 801a2ac:	1ad3      	subs	r3, r2, r3
 801a2ae:	429a      	cmp	r2, r3
 801a2b0:	db27      	blt.n	801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	bfbc      	itt	lt
 801a2b6:	2302      	movlt	r3, #2
 801a2b8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a2bc:	2500      	movs	r5, #0
 801a2be:	260e      	movs	r6, #14
 801a2c0:	4295      	cmp	r5, r2
 801a2c2:	dc1e      	bgt.n	801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a2c4:	fb06 4003 	mla	r0, r6, r3, r4
 801a2c8:	8887      	ldrh	r7, [r0, #4]
 801a2ca:	42b9      	cmp	r1, r7
 801a2cc:	d01a      	beq.n	801a304 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a2ce:	d20d      	bcs.n	801a2ec <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a2d0:	1e5a      	subs	r2, r3, #1
 801a2d2:	4295      	cmp	r5, r2
 801a2d4:	dc15      	bgt.n	801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a2d6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a2da:	1a5b      	subs	r3, r3, r1
 801a2dc:	1ad3      	subs	r3, r2, r3
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	db0f      	blt.n	801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a2e2:	429d      	cmp	r5, r3
 801a2e4:	ddec      	ble.n	801a2c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a2e6:	1953      	adds	r3, r2, r5
 801a2e8:	105b      	asrs	r3, r3, #1
 801a2ea:	e7e9      	b.n	801a2c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a2ec:	1c5d      	adds	r5, r3, #1
 801a2ee:	42aa      	cmp	r2, r5
 801a2f0:	db07      	blt.n	801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a2f2:	8a43      	ldrh	r3, [r0, #18]
 801a2f4:	1acb      	subs	r3, r1, r3
 801a2f6:	442b      	add	r3, r5
 801a2f8:	429d      	cmp	r5, r3
 801a2fa:	dc02      	bgt.n	801a302 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a2fc:	429a      	cmp	r2, r3
 801a2fe:	dadf      	bge.n	801a2c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a300:	e7f1      	b.n	801a2e6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a302:	2000      	movs	r0, #0
 801a304:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a306 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a308:	4604      	mov	r4, r0
 801a30a:	4617      	mov	r7, r2
 801a30c:	461e      	mov	r6, r3
 801a30e:	b911      	cbnz	r1, 801a316 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a310:	2500      	movs	r5, #0
 801a312:	4628      	mov	r0, r5
 801a314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a316:	290a      	cmp	r1, #10
 801a318:	d0fa      	beq.n	801a310 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a31a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a31e:	4291      	cmp	r1, r2
 801a320:	d0f6      	beq.n	801a310 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a322:	f242 020b 	movw	r2, #8203	; 0x200b
 801a326:	4291      	cmp	r1, r2
 801a328:	d0f2      	beq.n	801a310 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a32a:	f7ff ffaf 	bl	801a28c <_ZNK8touchgfx9ConstFont4findEt>
 801a32e:	4605      	mov	r5, r0
 801a330:	b950      	cbnz	r0, 801a348 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a332:	6823      	ldr	r3, [r4, #0]
 801a334:	4620      	mov	r0, r4
 801a336:	691b      	ldr	r3, [r3, #16]
 801a338:	4798      	blx	r3
 801a33a:	4601      	mov	r1, r0
 801a33c:	4620      	mov	r0, r4
 801a33e:	f7ff ffa5 	bl	801a28c <_ZNK8touchgfx9ConstFont4findEt>
 801a342:	4605      	mov	r5, r0
 801a344:	2800      	cmp	r0, #0
 801a346:	d0e3      	beq.n	801a310 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a348:	6823      	ldr	r3, [r4, #0]
 801a34a:	4629      	mov	r1, r5
 801a34c:	4620      	mov	r0, r4
 801a34e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a350:	4798      	blx	r3
 801a352:	6038      	str	r0, [r7, #0]
 801a354:	6823      	ldr	r3, [r4, #0]
 801a356:	4620      	mov	r0, r4
 801a358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a35a:	4798      	blx	r3
 801a35c:	7030      	strb	r0, [r6, #0]
 801a35e:	e7d8      	b.n	801a312 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a360 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801a360:	2000      	movs	r0, #0
 801a362:	4770      	bx	lr

0801a364 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801a364:	2001      	movs	r0, #1
 801a366:	4770      	bx	lr

0801a368 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801a368:	2002      	movs	r0, #2
 801a36a:	4770      	bx	lr

0801a36c <_ZN8touchgfx12GestureEventD1Ev>:
 801a36c:	4770      	bx	lr

0801a36e <_ZN8touchgfx9DragEventD1Ev>:
 801a36e:	4770      	bx	lr

0801a370 <_ZN8touchgfx10ClickEventD1Ev>:
 801a370:	4770      	bx	lr

0801a372 <_ZN8touchgfx10ClickEventD0Ev>:
 801a372:	b510      	push	{r4, lr}
 801a374:	4604      	mov	r4, r0
 801a376:	210c      	movs	r1, #12
 801a378:	f003 fdfe 	bl	801df78 <_ZdlPvj>
 801a37c:	4620      	mov	r0, r4
 801a37e:	bd10      	pop	{r4, pc}

0801a380 <_ZN8touchgfx9DragEventD0Ev>:
 801a380:	b510      	push	{r4, lr}
 801a382:	4604      	mov	r4, r0
 801a384:	2110      	movs	r1, #16
 801a386:	f003 fdf7 	bl	801df78 <_ZdlPvj>
 801a38a:	4620      	mov	r0, r4
 801a38c:	bd10      	pop	{r4, pc}

0801a38e <_ZN8touchgfx12GestureEventD0Ev>:
 801a38e:	b510      	push	{r4, lr}
 801a390:	4604      	mov	r4, r0
 801a392:	210c      	movs	r1, #12
 801a394:	f003 fdf0 	bl	801df78 <_ZdlPvj>
 801a398:	4620      	mov	r0, r4
 801a39a:	bd10      	pop	{r4, pc}

0801a39c <_ZN8touchgfx12TextProviderC1Ev>:
 801a39c:	b538      	push	{r3, r4, r5, lr}
 801a39e:	2500      	movs	r5, #0
 801a3a0:	2302      	movs	r3, #2
 801a3a2:	4604      	mov	r4, r0
 801a3a4:	220e      	movs	r2, #14
 801a3a6:	7403      	strb	r3, [r0, #16]
 801a3a8:	4629      	mov	r1, r5
 801a3aa:	6145      	str	r5, [r0, #20]
 801a3ac:	7605      	strb	r5, [r0, #24]
 801a3ae:	83c5      	strh	r5, [r0, #30]
 801a3b0:	8405      	strh	r5, [r0, #32]
 801a3b2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a3b4:	8705      	strh	r5, [r0, #56]	; 0x38
 801a3b6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a3b8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a3bc:	e9c0 5500 	strd	r5, r5, [r0]
 801a3c0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a3c4:	304c      	adds	r0, #76	; 0x4c
 801a3c6:	f005 f837 	bl	801f438 <memset>
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a3d2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a3d6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a3da:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a3de:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a3e2:	f7e9 f9c7 	bl	8003774 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	bd38      	pop	{r3, r4, r5, pc}

0801a3ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a3ea:	b530      	push	{r4, r5, lr}
 801a3ec:	2500      	movs	r5, #0
 801a3ee:	2401      	movs	r4, #1
 801a3f0:	6843      	ldr	r3, [r0, #4]
 801a3f2:	b913      	cbnz	r3, 801a3fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a3f4:	6803      	ldr	r3, [r0, #0]
 801a3f6:	b313      	cbz	r3, 801a43e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a3f8:	6043      	str	r3, [r0, #4]
 801a3fa:	7e03      	ldrb	r3, [r0, #24]
 801a3fc:	b143      	cbz	r3, 801a410 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a3fe:	6943      	ldr	r3, [r0, #20]
 801a400:	b12b      	cbz	r3, 801a40e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a402:	881a      	ldrh	r2, [r3, #0]
 801a404:	b11a      	cbz	r2, 801a40e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a406:	1c9a      	adds	r2, r3, #2
 801a408:	6142      	str	r2, [r0, #20]
 801a40a:	8818      	ldrh	r0, [r3, #0]
 801a40c:	bd30      	pop	{r4, r5, pc}
 801a40e:	7605      	strb	r5, [r0, #24]
 801a410:	6843      	ldr	r3, [r0, #4]
 801a412:	8819      	ldrh	r1, [r3, #0]
 801a414:	b199      	cbz	r1, 801a43e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a416:	1c9a      	adds	r2, r3, #2
 801a418:	2902      	cmp	r1, #2
 801a41a:	6042      	str	r2, [r0, #4]
 801a41c:	d1f5      	bne.n	801a40a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a41e:	7c03      	ldrb	r3, [r0, #16]
 801a420:	2b01      	cmp	r3, #1
 801a422:	d8e5      	bhi.n	801a3f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a424:	1c5a      	adds	r2, r3, #1
 801a426:	3302      	adds	r3, #2
 801a428:	7402      	strb	r2, [r0, #16]
 801a42a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a42e:	6143      	str	r3, [r0, #20]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d0dd      	beq.n	801a3f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a434:	881b      	ldrh	r3, [r3, #0]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d0da      	beq.n	801a3f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a43a:	7604      	strb	r4, [r0, #24]
 801a43c:	e7d8      	b.n	801a3f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a43e:	2000      	movs	r0, #0
 801a440:	e7e4      	b.n	801a40c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a442 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a442:	6001      	str	r1, [r0, #0]
 801a444:	2100      	movs	r1, #0
 801a446:	b430      	push	{r4, r5}
 801a448:	6041      	str	r1, [r0, #4]
 801a44a:	6815      	ldr	r5, [r2, #0]
 801a44c:	6085      	str	r5, [r0, #8]
 801a44e:	6852      	ldr	r2, [r2, #4]
 801a450:	6443      	str	r3, [r0, #68]	; 0x44
 801a452:	9b02      	ldr	r3, [sp, #8]
 801a454:	60c2      	str	r2, [r0, #12]
 801a456:	7401      	strb	r1, [r0, #16]
 801a458:	6141      	str	r1, [r0, #20]
 801a45a:	7601      	strb	r1, [r0, #24]
 801a45c:	8701      	strh	r1, [r0, #56]	; 0x38
 801a45e:	8401      	strh	r1, [r0, #32]
 801a460:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a464:	6483      	str	r3, [r0, #72]	; 0x48
 801a466:	bc30      	pop	{r4, r5}
 801a468:	f7e9 b984 	b.w	8003774 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a46c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a46e:	4605      	mov	r5, r0
 801a470:	4608      	mov	r0, r1
 801a472:	b1f1      	cbz	r1, 801a4b2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a474:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a478:	460b      	mov	r3, r1
 801a47a:	f101 0708 	add.w	r7, r1, #8
 801a47e:	4622      	mov	r2, r4
 801a480:	6818      	ldr	r0, [r3, #0]
 801a482:	3308      	adds	r3, #8
 801a484:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a488:	4626      	mov	r6, r4
 801a48a:	42bb      	cmp	r3, r7
 801a48c:	c603      	stmia	r6!, {r0, r1}
 801a48e:	4634      	mov	r4, r6
 801a490:	d1f6      	bne.n	801a480 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a492:	6818      	ldr	r0, [r3, #0]
 801a494:	6030      	str	r0, [r6, #0]
 801a496:	4610      	mov	r0, r2
 801a498:	889b      	ldrh	r3, [r3, #4]
 801a49a:	80b3      	strh	r3, [r6, #4]
 801a49c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a4a0:	015b      	lsls	r3, r3, #5
 801a4a2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a4a6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a4aa:	430b      	orrs	r3, r1
 801a4ac:	425b      	negs	r3, r3
 801a4ae:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a4b4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a4b4:	b538      	push	{r3, r4, r5, lr}
 801a4b6:	460c      	mov	r4, r1
 801a4b8:	6811      	ldr	r1, [r2, #0]
 801a4ba:	4610      	mov	r0, r2
 801a4bc:	68cd      	ldr	r5, [r1, #12]
 801a4be:	4619      	mov	r1, r3
 801a4c0:	47a8      	blx	r5
 801a4c2:	2800      	cmp	r0, #0
 801a4c4:	bf08      	it	eq
 801a4c6:	4620      	moveq	r0, r4
 801a4c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a4cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ce:	4604      	mov	r4, r0
 801a4d0:	4615      	mov	r5, r2
 801a4d2:	4608      	mov	r0, r1
 801a4d4:	b93a      	cbnz	r2, 801a4e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a4d6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a4da:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a4de:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a4e2:	4628      	mov	r0, r5
 801a4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4e6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a4ea:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801a4ee:	8893      	ldrh	r3, [r2, #4]
 801a4f0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a4f4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a4f8:	79ee      	ldrb	r6, [r5, #7]
 801a4fa:	4316      	orrs	r6, r2
 801a4fc:	19da      	adds	r2, r3, r7
 801a4fe:	b291      	uxth	r1, r2
 801a500:	b2b7      	uxth	r7, r6
 801a502:	291d      	cmp	r1, #29
 801a504:	d87b      	bhi.n	801a5fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a506:	2201      	movs	r2, #1
 801a508:	10f6      	asrs	r6, r6, #3
 801a50a:	408a      	lsls	r2, r1
 801a50c:	4974      	ldr	r1, [pc, #464]	; (801a6e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801a50e:	420a      	tst	r2, r1
 801a510:	d12e      	bne.n	801a570 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801a512:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a516:	d072      	beq.n	801a5fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a518:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801a51c:	462b      	mov	r3, r5
 801a51e:	f105 0e08 	add.w	lr, r5, #8
 801a522:	4615      	mov	r5, r2
 801a524:	6818      	ldr	r0, [r3, #0]
 801a526:	3308      	adds	r3, #8
 801a528:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a52c:	4694      	mov	ip, r2
 801a52e:	4573      	cmp	r3, lr
 801a530:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a534:	4662      	mov	r2, ip
 801a536:	d1f5      	bne.n	801a524 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801a538:	6818      	ldr	r0, [r3, #0]
 801a53a:	f8cc 0000 	str.w	r0, [ip]
 801a53e:	889b      	ldrh	r3, [r3, #4]
 801a540:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a544:	b2b3      	uxth	r3, r6
 801a546:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a54a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801a54e:	1aca      	subs	r2, r1, r3
 801a550:	1bcf      	subs	r7, r1, r7
 801a552:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a556:	b292      	uxth	r2, r2
 801a558:	1afb      	subs	r3, r7, r3
 801a55a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801a55e:	10d2      	asrs	r2, r2, #3
 801a560:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a564:	4302      	orrs	r2, r0
 801a566:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801a56a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a56e:	e7b8      	b.n	801a4e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a570:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a572:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a576:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801a578:	f640 6333 	movw	r3, #3635	; 0xe33
 801a57c:	4299      	cmp	r1, r3
 801a57e:	d110      	bne.n	801a5a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801a580:	6803      	ldr	r3, [r0, #0]
 801a582:	68db      	ldr	r3, [r3, #12]
 801a584:	4798      	blx	r3
 801a586:	7b41      	ldrb	r1, [r0, #13]
 801a588:	00cb      	lsls	r3, r1, #3
 801a58a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a58e:	7a03      	ldrb	r3, [r0, #8]
 801a590:	0648      	lsls	r0, r1, #25
 801a592:	ea43 0302 	orr.w	r3, r3, r2
 801a596:	bf44      	itt	mi
 801a598:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a59c:	b21b      	sxthmi	r3, r3
 801a59e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a5a2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801a5a6:	462a      	mov	r2, r5
 801a5a8:	f105 0c08 	add.w	ip, r5, #8
 801a5ac:	443b      	add	r3, r7
 801a5ae:	4433      	add	r3, r6
 801a5b0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801a5b4:	b29b      	uxth	r3, r3
 801a5b6:	4635      	mov	r5, r6
 801a5b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a5bc:	6810      	ldr	r0, [r2, #0]
 801a5be:	3208      	adds	r2, #8
 801a5c0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a5c4:	4637      	mov	r7, r6
 801a5c6:	4562      	cmp	r2, ip
 801a5c8:	c703      	stmia	r7!, {r0, r1}
 801a5ca:	463e      	mov	r6, r7
 801a5cc:	d1f6      	bne.n	801a5bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801a5ce:	6810      	ldr	r0, [r2, #0]
 801a5d0:	6038      	str	r0, [r7, #0]
 801a5d2:	8892      	ldrh	r2, [r2, #4]
 801a5d4:	80ba      	strh	r2, [r7, #4]
 801a5d6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a5da:	10db      	asrs	r3, r3, #3
 801a5dc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a5e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a5e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a5e8:	4313      	orrs	r3, r2
 801a5ea:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801a5ee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a5f2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801a5f6:	1a9b      	subs	r3, r3, r2
 801a5f8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801a5fc:	e771      	b.n	801a4e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a5fe:	f023 0204 	bic.w	r2, r3, #4
 801a602:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a606:	428a      	cmp	r2, r1
 801a608:	d003      	beq.n	801a612 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801a60a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a60e:	4293      	cmp	r3, r2
 801a610:	d120      	bne.n	801a654 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801a612:	3b01      	subs	r3, #1
 801a614:	4602      	mov	r2, r0
 801a616:	4629      	mov	r1, r5
 801a618:	4620      	mov	r0, r4
 801a61a:	b29b      	uxth	r3, r3
 801a61c:	f7ff ff4a 	bl	801a4b4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a620:	7b41      	ldrb	r1, [r0, #13]
 801a622:	00cb      	lsls	r3, r1, #3
 801a624:	0649      	lsls	r1, r1, #25
 801a626:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a62a:	7a03      	ldrb	r3, [r0, #8]
 801a62c:	ea43 0302 	orr.w	r3, r3, r2
 801a630:	bf44      	itt	mi
 801a632:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a636:	b21b      	sxthmi	r3, r3
 801a638:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a63c:	7b6b      	ldrb	r3, [r5, #13]
 801a63e:	7aaa      	ldrb	r2, [r5, #10]
 801a640:	005b      	lsls	r3, r3, #1
 801a642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a646:	4313      	orrs	r3, r2
 801a648:	115a      	asrs	r2, r3, #5
 801a64a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a64e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a652:	e035      	b.n	801a6c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801a654:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a658:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a65c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a660:	7a2a      	ldrb	r2, [r5, #8]
 801a662:	ea42 0201 	orr.w	r2, r2, r1
 801a666:	f640 6109 	movw	r1, #3593	; 0xe09
 801a66a:	bf1c      	itt	ne
 801a66c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a670:	b212      	sxthne	r2, r2
 801a672:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a676:	f023 0210 	bic.w	r2, r3, #16
 801a67a:	428a      	cmp	r2, r1
 801a67c:	d003      	beq.n	801a686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801a67e:	f640 6213 	movw	r2, #3603	; 0xe13
 801a682:	4293      	cmp	r3, r2
 801a684:	d129      	bne.n	801a6da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801a686:	7b6e      	ldrb	r6, [r5, #13]
 801a688:	4629      	mov	r1, r5
 801a68a:	0076      	lsls	r6, r6, #1
 801a68c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a690:	7aae      	ldrb	r6, [r5, #10]
 801a692:	4316      	orrs	r6, r2
 801a694:	f640 6213 	movw	r2, #3603	; 0xe13
 801a698:	4293      	cmp	r3, r2
 801a69a:	4602      	mov	r2, r0
 801a69c:	4620      	mov	r0, r4
 801a69e:	bf16      	itet	ne
 801a6a0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a6a4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a6a8:	b29b      	uxthne	r3, r3
 801a6aa:	f7ff ff03 	bl	801a4b4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a6ae:	7b43      	ldrb	r3, [r0, #13]
 801a6b0:	7a82      	ldrb	r2, [r0, #10]
 801a6b2:	005b      	lsls	r3, r3, #1
 801a6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a6b8:	4313      	orrs	r3, r2
 801a6ba:	1af6      	subs	r6, r6, r3
 801a6bc:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801a6c0:	7b69      	ldrb	r1, [r5, #13]
 801a6c2:	00cb      	lsls	r3, r1, #3
 801a6c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a6c8:	7a2b      	ldrb	r3, [r5, #8]
 801a6ca:	4313      	orrs	r3, r2
 801a6cc:	064a      	lsls	r2, r1, #25
 801a6ce:	bf44      	itt	mi
 801a6d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a6d4:	b21b      	sxthmi	r3, r3
 801a6d6:	1bdb      	subs	r3, r3, r7
 801a6d8:	e747      	b.n	801a56a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801a6da:	2300      	movs	r3, #0
 801a6dc:	e7b7      	b.n	801a64e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801a6de:	bf00      	nop
 801a6e0:	3fc00079 	.word	0x3fc00079

0801a6e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	b942      	cbnz	r2, 801a6fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a6ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a6f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801a6f4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801a6f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a6fc:	e047      	b.n	801a78e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a6fe:	7b51      	ldrb	r1, [r2, #13]
 801a700:	8893      	ldrh	r3, [r2, #4]
 801a702:	010d      	lsls	r5, r1, #4
 801a704:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801a708:	79d5      	ldrb	r5, [r2, #7]
 801a70a:	4305      	orrs	r5, r0
 801a70c:	2d04      	cmp	r5, #4
 801a70e:	bfcc      	ite	gt
 801a710:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801a714:	f04f 0e01 	movle.w	lr, #1
 801a718:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801a71c:	f200 80ab 	bhi.w	801a876 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a720:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a724:	4283      	cmp	r3, r0
 801a726:	d216      	bcs.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a728:	f240 605b 	movw	r0, #1627	; 0x65b
 801a72c:	4283      	cmp	r3, r0
 801a72e:	d859      	bhi.n	801a7e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a730:	f240 6057 	movw	r0, #1623	; 0x657
 801a734:	4283      	cmp	r3, r0
 801a736:	d20e      	bcs.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a738:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a73c:	d24a      	bcs.n	801a7d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a73e:	f240 604e 	movw	r0, #1614	; 0x64e
 801a742:	4283      	cmp	r3, r0
 801a744:	d207      	bcs.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a746:	f240 601a 	movw	r0, #1562	; 0x61a
 801a74a:	4283      	cmp	r3, r0
 801a74c:	d02a      	beq.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a74e:	d821      	bhi.n	801a794 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a750:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a754:	d35b      	bcc.n	801a80e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a756:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801a75a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a75e:	f040 80d0 	bne.w	801a902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a762:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801a766:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a76a:	f040 80ca 	bne.w	801a902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a76e:	00cb      	lsls	r3, r1, #3
 801a770:	0649      	lsls	r1, r1, #25
 801a772:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a776:	7a13      	ldrb	r3, [r2, #8]
 801a778:	ea43 0300 	orr.w	r3, r3, r0
 801a77c:	bf44      	itt	mi
 801a77e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a782:	b21b      	sxthmi	r3, r3
 801a784:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a788:	1b5d      	subs	r5, r3, r5
 801a78a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a78e:	4610      	mov	r0, r2
 801a790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a794:	f240 604b 	movw	r0, #1611	; 0x64b
 801a798:	4283      	cmp	r3, r0
 801a79a:	d338      	bcc.n	801a80e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a79c:	f240 604c 	movw	r0, #1612	; 0x64c
 801a7a0:	4283      	cmp	r3, r0
 801a7a2:	d9d8      	bls.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7a4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801a7a8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801a7ac:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a7b0:	f040 80f3 	bne.w	801a99a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a7b4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a7b8:	f040 80ef 	bne.w	801a99a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a7bc:	00cb      	lsls	r3, r1, #3
 801a7be:	064e      	lsls	r6, r1, #25
 801a7c0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a7c4:	7a13      	ldrb	r3, [r2, #8]
 801a7c6:	ea43 0300 	orr.w	r3, r3, r0
 801a7ca:	bf44      	itt	mi
 801a7cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a7d0:	b21b      	sxthmi	r3, r3
 801a7d2:	e7d9      	b.n	801a788 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a7d4:	f240 6054 	movw	r0, #1620	; 0x654
 801a7d8:	4283      	cmp	r3, r0
 801a7da:	d8e3      	bhi.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7dc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a7e0:	d9e0      	bls.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7e2:	e7b8      	b.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7e4:	f240 6074 	movw	r0, #1652	; 0x674
 801a7e8:	4283      	cmp	r3, r0
 801a7ea:	d0b4      	beq.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7ec:	d82d      	bhi.n	801a84a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a7ee:	f240 605e 	movw	r0, #1630	; 0x65e
 801a7f2:	4283      	cmp	r3, r0
 801a7f4:	d804      	bhi.n	801a800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a7f6:	f240 605d 	movw	r0, #1629	; 0x65d
 801a7fa:	4283      	cmp	r3, r0
 801a7fc:	d3d2      	bcc.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7fe:	e7aa      	b.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a800:	f240 605f 	movw	r0, #1631	; 0x65f
 801a804:	4283      	cmp	r3, r0
 801a806:	d0cd      	beq.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a808:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a80c:	d0a3      	beq.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a80e:	00cb      	lsls	r3, r1, #3
 801a810:	0649      	lsls	r1, r1, #25
 801a812:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a816:	7a13      	ldrb	r3, [r2, #8]
 801a818:	ea43 0300 	orr.w	r3, r3, r0
 801a81c:	bf44      	itt	mi
 801a81e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a822:	b21b      	sxthmi	r3, r3
 801a824:	1b5d      	subs	r5, r3, r5
 801a826:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a82a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a82e:	7b53      	ldrb	r3, [r2, #13]
 801a830:	015b      	lsls	r3, r3, #5
 801a832:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a836:	7993      	ldrb	r3, [r2, #6]
 801a838:	430b      	orrs	r3, r1
 801a83a:	2105      	movs	r1, #5
 801a83c:	005b      	lsls	r3, r3, #1
 801a83e:	fb93 f3f1 	sdiv	r3, r3, r1
 801a842:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a846:	440b      	add	r3, r1
 801a848:	e756      	b.n	801a6f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a84a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a84e:	4283      	cmp	r3, r0
 801a850:	d809      	bhi.n	801a866 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a852:	f240 60df 	movw	r0, #1759	; 0x6df
 801a856:	4283      	cmp	r3, r0
 801a858:	f4bf af7d 	bcs.w	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a85c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a860:	2b05      	cmp	r3, #5
 801a862:	d8d4      	bhi.n	801a80e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a864:	e777      	b.n	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a866:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a86a:	4283      	cmp	r3, r0
 801a86c:	d09a      	beq.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a86e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a872:	4283      	cmp	r3, r0
 801a874:	e7ca      	b.n	801a80c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a876:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a87a:	d22b      	bcs.n	801a8d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a87c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a880:	4283      	cmp	r3, r0
 801a882:	d28f      	bcs.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a884:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a888:	4283      	cmp	r3, r0
 801a88a:	d816      	bhi.n	801a8ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a88c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a890:	4283      	cmp	r3, r0
 801a892:	f4bf af60 	bcs.w	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a896:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a89a:	4283      	cmp	r3, r0
 801a89c:	d80a      	bhi.n	801a8b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a89e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a8a2:	4283      	cmp	r3, r0
 801a8a4:	f4bf af57 	bcs.w	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a8a8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a8ac:	4283      	cmp	r3, r0
 801a8ae:	f43f af79 	beq.w	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8b2:	e7ac      	b.n	801a80e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a8b4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a8b8:	e7f8      	b.n	801a8ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a8ba:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a8be:	4283      	cmp	r3, r0
 801a8c0:	d802      	bhi.n	801a8c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a8c2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a8c6:	e798      	b.n	801a7fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a8c8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a8cc:	4283      	cmp	r3, r0
 801a8ce:	f47f af42 	bne.w	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a8d2:	e767      	b.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8d4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a8d8:	4283      	cmp	r3, r0
 801a8da:	f43f af63 	beq.w	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8de:	d802      	bhi.n	801a8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a8e0:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a8e4:	e7f2      	b.n	801a8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a8e6:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a8ea:	4283      	cmp	r3, r0
 801a8ec:	d805      	bhi.n	801a8fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a8ee:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a8f2:	4283      	cmp	r3, r0
 801a8f4:	f4ff af2f 	bcc.w	801a756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a8f8:	e754      	b.n	801a7a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8fa:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a8fe:	4283      	cmp	r3, r0
 801a900:	e7af      	b.n	801a862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a902:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a906:	4617      	mov	r7, r2
 801a908:	f102 0808 	add.w	r8, r2, #8
 801a90c:	4666      	mov	r6, ip
 801a90e:	6838      	ldr	r0, [r7, #0]
 801a910:	3708      	adds	r7, #8
 801a912:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a916:	46e6      	mov	lr, ip
 801a918:	4547      	cmp	r7, r8
 801a91a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a91e:	46f4      	mov	ip, lr
 801a920:	d1f5      	bne.n	801a90e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a922:	6838      	ldr	r0, [r7, #0]
 801a924:	f8ce 0000 	str.w	r0, [lr]
 801a928:	88b9      	ldrh	r1, [r7, #4]
 801a92a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a92e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a932:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a936:	d009      	beq.n	801a94c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801a938:	7b51      	ldrb	r1, [r2, #13]
 801a93a:	7992      	ldrb	r2, [r2, #6]
 801a93c:	0149      	lsls	r1, r1, #5
 801a93e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a942:	4311      	orrs	r1, r2
 801a944:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a948:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a94c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a950:	b2ad      	uxth	r5, r5
 801a952:	d00d      	beq.n	801a970 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801a954:	442b      	add	r3, r5
 801a956:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a95a:	b29b      	uxth	r3, r3
 801a95c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a960:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a964:	10db      	asrs	r3, r3, #3
 801a966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a96a:	4313      	orrs	r3, r2
 801a96c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a970:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a974:	00cb      	lsls	r3, r1, #3
 801a976:	064f      	lsls	r7, r1, #25
 801a978:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a97c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a980:	ea43 0302 	orr.w	r3, r3, r2
 801a984:	bf44      	itt	mi
 801a986:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a98a:	b21b      	sxthmi	r3, r3
 801a98c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a990:	1b5b      	subs	r3, r3, r5
 801a992:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a996:	4632      	mov	r2, r6
 801a998:	e6f9      	b.n	801a78e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a99a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a99e:	4617      	mov	r7, r2
 801a9a0:	f102 0908 	add.w	r9, r2, #8
 801a9a4:	4666      	mov	r6, ip
 801a9a6:	6838      	ldr	r0, [r7, #0]
 801a9a8:	3708      	adds	r7, #8
 801a9aa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a9ae:	46e0      	mov	r8, ip
 801a9b0:	454f      	cmp	r7, r9
 801a9b2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a9b6:	46c4      	mov	ip, r8
 801a9b8:	d1f5      	bne.n	801a9a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801a9ba:	6838      	ldr	r0, [r7, #0]
 801a9bc:	f8c8 0000 	str.w	r0, [r8]
 801a9c0:	88b9      	ldrh	r1, [r7, #4]
 801a9c2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a9c6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a9ca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a9ce:	d009      	beq.n	801a9e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801a9d0:	7b51      	ldrb	r1, [r2, #13]
 801a9d2:	7992      	ldrb	r2, [r2, #6]
 801a9d4:	0149      	lsls	r1, r1, #5
 801a9d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a9da:	4311      	orrs	r1, r2
 801a9dc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a9e0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a9e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a9e8:	d00e      	beq.n	801aa08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801a9ea:	eba3 030e 	sub.w	r3, r3, lr
 801a9ee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a9f2:	b29b      	uxth	r3, r3
 801a9f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a9f8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a9fc:	10db      	asrs	r3, r3, #3
 801a9fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801aa02:	4313      	orrs	r3, r2
 801aa04:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801aa08:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801aa0c:	00cb      	lsls	r3, r1, #3
 801aa0e:	0648      	lsls	r0, r1, #25
 801aa10:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aa14:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801aa18:	ea43 0302 	orr.w	r3, r3, r2
 801aa1c:	bf44      	itt	mi
 801aa1e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa22:	b21b      	sxthmi	r3, r3
 801aa24:	1b5d      	subs	r5, r3, r5
 801aa26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801aa2a:	e7b4      	b.n	801a996 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa30:	461e      	mov	r6, r3
 801aa32:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801aa34:	4604      	mov	r4, r0
 801aa36:	4617      	mov	r7, r2
 801aa38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801aa3c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801aa40:	f7e8 fe56 	bl	80036f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aa44:	4605      	mov	r5, r0
 801aa46:	b918      	cbnz	r0, 801aa50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801aa48:	6030      	str	r0, [r6, #0]
 801aa4a:	4628      	mov	r0, r5
 801aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa50:	683b      	ldr	r3, [r7, #0]
 801aa52:	4601      	mov	r1, r0
 801aa54:	4638      	mov	r0, r7
 801aa56:	68db      	ldr	r3, [r3, #12]
 801aa58:	4798      	blx	r3
 801aa5a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801aa5e:	4602      	mov	r2, r0
 801aa60:	6030      	str	r0, [r6, #0]
 801aa62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801aa66:	d213      	bcs.n	801aa90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801aa68:	4643      	mov	r3, r8
 801aa6a:	4639      	mov	r1, r7
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	f7ff fe39 	bl	801a6e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801aa72:	6030      	str	r0, [r6, #0]
 801aa74:	6833      	ldr	r3, [r6, #0]
 801aa76:	b143      	cbz	r3, 801aa8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801aa78:	7b5a      	ldrb	r2, [r3, #13]
 801aa7a:	7a9b      	ldrb	r3, [r3, #10]
 801aa7c:	0052      	lsls	r2, r2, #1
 801aa7e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801aa82:	4313      	orrs	r3, r2
 801aa84:	bf0c      	ite	eq
 801aa86:	2301      	moveq	r3, #1
 801aa88:	2300      	movne	r3, #0
 801aa8a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801aa8e:	e7dc      	b.n	801aa4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801aa90:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801aa94:	b29b      	uxth	r3, r3
 801aa96:	2b7f      	cmp	r3, #127	; 0x7f
 801aa98:	d804      	bhi.n	801aaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801aa9a:	4639      	mov	r1, r7
 801aa9c:	4620      	mov	r0, r4
 801aa9e:	f7ff fd15 	bl	801a4cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aaa2:	e7e6      	b.n	801aa72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801aaa4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d0e3      	beq.n	801aa74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801aaac:	f640 1302 	movw	r3, #2306	; 0x902
 801aab0:	429d      	cmp	r5, r3
 801aab2:	d1df      	bne.n	801aa74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801aab4:	4601      	mov	r1, r0
 801aab6:	4620      	mov	r0, r4
 801aab8:	f7ff fcd8 	bl	801a46c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aabc:	e7d9      	b.n	801aa72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801aabe:	b510      	push	{r4, lr}
 801aac0:	4604      	mov	r4, r0
 801aac2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801aac6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801aac8:	b1e1      	cbz	r1, 801ab04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801aaca:	2b0a      	cmp	r3, #10
 801aacc:	d02d      	beq.n	801ab2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801aace:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801aad0:	3901      	subs	r1, #1
 801aad2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aad6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801aad8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801aadc:	1c51      	adds	r1, r2, #1
 801aade:	b289      	uxth	r1, r1
 801aae0:	2901      	cmp	r1, #1
 801aae2:	bf8a      	itet	hi
 801aae4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aae8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801aaea:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801aaec:	1c5a      	adds	r2, r3, #1
 801aaee:	8722      	strh	r2, [r4, #56]	; 0x38
 801aaf0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aaf2:	4413      	add	r3, r2
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	2b09      	cmp	r3, #9
 801aaf8:	bf88      	it	hi
 801aafa:	3b0a      	subhi	r3, #10
 801aafc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ab00:	8458      	strh	r0, [r3, #34]	; 0x22
 801ab02:	e7de      	b.n	801aac2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ab04:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ab06:	2b0a      	cmp	r3, #10
 801ab08:	d00f      	beq.n	801ab2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ab0a:	4620      	mov	r0, r4
 801ab0c:	f7ff fc6d 	bl	801a3ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ab10:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ab12:	1c5a      	adds	r2, r3, #1
 801ab14:	8722      	strh	r2, [r4, #56]	; 0x38
 801ab16:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ab18:	4413      	add	r3, r2
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	2b09      	cmp	r3, #9
 801ab1e:	bf88      	it	hi
 801ab20:	3b0a      	subhi	r3, #10
 801ab22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ab26:	8458      	strh	r0, [r3, #34]	; 0x22
 801ab28:	e7ec      	b.n	801ab04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ab2a:	bd10      	pop	{r4, pc}

0801ab2c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ab2c:	b538      	push	{r3, r4, r5, lr}
 801ab2e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ab30:	4604      	mov	r4, r0
 801ab32:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801ab36:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801ab38:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801ab3a:	3a01      	subs	r2, #1
 801ab3c:	8702      	strh	r2, [r0, #56]	; 0x38
 801ab3e:	1c5a      	adds	r2, r3, #1
 801ab40:	b292      	uxth	r2, r2
 801ab42:	2a09      	cmp	r2, #9
 801ab44:	bf8a      	itet	hi
 801ab46:	3b09      	subhi	r3, #9
 801ab48:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801ab4a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801ab4c:	f7ff ffb7 	bl	801aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ab50:	8c23      	ldrh	r3, [r4, #32]
 801ab52:	2b01      	cmp	r3, #1
 801ab54:	bf9c      	itt	ls
 801ab56:	3301      	addls	r3, #1
 801ab58:	8423      	strhls	r3, [r4, #32]
 801ab5a:	8be3      	ldrh	r3, [r4, #30]
 801ab5c:	b90b      	cbnz	r3, 801ab62 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ab5e:	2302      	movs	r3, #2
 801ab60:	83e3      	strh	r3, [r4, #30]
 801ab62:	8be3      	ldrh	r3, [r4, #30]
 801ab64:	4628      	mov	r0, r5
 801ab66:	3b01      	subs	r3, #1
 801ab68:	b29b      	uxth	r3, r3
 801ab6a:	83e3      	strh	r3, [r4, #30]
 801ab6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ab70:	8365      	strh	r5, [r4, #26]
 801ab72:	bd38      	pop	{r3, r4, r5, pc}

0801ab74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ab74:	428a      	cmp	r2, r1
 801ab76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab7a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801ab7c:	d932      	bls.n	801abe4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801ab7e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801ab80:	1a54      	subs	r4, r2, r1
 801ab82:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801ab86:	19ee      	adds	r6, r5, r7
 801ab88:	fa1f fe84 	uxth.w	lr, r4
 801ab8c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801ab90:	3e01      	subs	r6, #1
 801ab92:	b2b4      	uxth	r4, r6
 801ab94:	eba4 090e 	sub.w	r9, r4, lr
 801ab98:	fa1f f989 	uxth.w	r9, r9
 801ab9c:	2c09      	cmp	r4, #9
 801ab9e:	4626      	mov	r6, r4
 801aba0:	bf88      	it	hi
 801aba2:	f1a4 060a 	subhi.w	r6, r4, #10
 801aba6:	f1bc 0f00 	cmp.w	ip, #0
 801abaa:	f104 34ff 	add.w	r4, r4, #4294967295
 801abae:	bf08      	it	eq
 801abb0:	f04f 0c02 	moveq.w	ip, #2
 801abb4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801abb8:	b2a4      	uxth	r4, r4
 801abba:	f10c 3cff 	add.w	ip, ip, #4294967295
 801abbe:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801abc2:	454c      	cmp	r4, r9
 801abc4:	fa1f fc8c 	uxth.w	ip, ip
 801abc8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801abcc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801abd0:	d1e4      	bne.n	801ab9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801abd2:	eba5 050e 	sub.w	r5, r5, lr
 801abd6:	eb0e 0408 	add.w	r4, lr, r8
 801abda:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801abde:	8705      	strh	r5, [r0, #56]	; 0x38
 801abe0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801abe4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801abe6:	250a      	movs	r5, #10
 801abe8:	1a64      	subs	r4, r4, r1
 801abea:	4439      	add	r1, r7
 801abec:	b289      	uxth	r1, r1
 801abee:	8704      	strh	r4, [r0, #56]	; 0x38
 801abf0:	2909      	cmp	r1, #9
 801abf2:	bf88      	it	hi
 801abf4:	390a      	subhi	r1, #10
 801abf6:	86c1      	strh	r1, [r0, #54]	; 0x36
 801abf8:	b18a      	cbz	r2, 801ac1e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801abfa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801abfc:	3a01      	subs	r2, #1
 801abfe:	3101      	adds	r1, #1
 801ac00:	b292      	uxth	r2, r2
 801ac02:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ac06:	8701      	strh	r1, [r0, #56]	; 0x38
 801ac08:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ac0a:	b901      	cbnz	r1, 801ac0e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ac0c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ac0e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ac10:	3901      	subs	r1, #1
 801ac12:	b289      	uxth	r1, r1
 801ac14:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ac16:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ac1a:	844c      	strh	r4, [r1, #34]	; 0x22
 801ac1c:	e7ec      	b.n	801abf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801ac1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac22:	f7ff bf4c 	b.w	801aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ac26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ac26:	b570      	push	{r4, r5, r6, lr}
 801ac28:	2500      	movs	r5, #0
 801ac2a:	4295      	cmp	r5, r2
 801ac2c:	d011      	beq.n	801ac52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ac2e:	8bc4      	ldrh	r4, [r0, #30]
 801ac30:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ac34:	4414      	add	r4, r2
 801ac36:	3c01      	subs	r4, #1
 801ac38:	1b64      	subs	r4, r4, r5
 801ac3a:	b2a4      	uxth	r4, r4
 801ac3c:	2c01      	cmp	r4, #1
 801ac3e:	bf88      	it	hi
 801ac40:	3c02      	subhi	r4, #2
 801ac42:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ac46:	8b64      	ldrh	r4, [r4, #26]
 801ac48:	42b4      	cmp	r4, r6
 801ac4a:	d117      	bne.n	801ac7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801ac4c:	3501      	adds	r5, #1
 801ac4e:	b2ad      	uxth	r5, r5
 801ac50:	e7eb      	b.n	801ac2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801ac52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ac56:	2400      	movs	r4, #0
 801ac58:	4413      	add	r3, r2
 801ac5a:	b2a2      	uxth	r2, r4
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	da0f      	bge.n	801ac80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801ac60:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801ac62:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801ac66:	3401      	adds	r4, #1
 801ac68:	4432      	add	r2, r6
 801ac6a:	b292      	uxth	r2, r2
 801ac6c:	2a09      	cmp	r2, #9
 801ac6e:	bf88      	it	hi
 801ac70:	3a0a      	subhi	r2, #10
 801ac72:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ac76:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801ac78:	42aa      	cmp	r2, r5
 801ac7a:	d0ee      	beq.n	801ac5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801ac7c:	2000      	movs	r0, #0
 801ac7e:	bd70      	pop	{r4, r5, r6, pc}
 801ac80:	2001      	movs	r0, #1
 801ac82:	e7fc      	b.n	801ac7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801ac84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ac84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac88:	4605      	mov	r5, r0
 801ac8a:	4616      	mov	r6, r2
 801ac8c:	1c8c      	adds	r4, r1, #2
 801ac8e:	8809      	ldrh	r1, [r1, #0]
 801ac90:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ac94:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ac98:	42b3      	cmp	r3, r6
 801ac9a:	d124      	bne.n	801ace6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ac9c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801aca0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801aca4:	f001 070f 	and.w	r7, r1, #15
 801aca8:	4652      	mov	r2, sl
 801acaa:	f8cd 8000 	str.w	r8, [sp]
 801acae:	464b      	mov	r3, r9
 801acb0:	4621      	mov	r1, r4
 801acb2:	4628      	mov	r0, r5
 801acb4:	f7ff ffb7 	bl	801ac26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801acb8:	4683      	mov	fp, r0
 801acba:	b168      	cbz	r0, 801acd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801acbc:	eb0a 0109 	add.w	r1, sl, r9
 801acc0:	463a      	mov	r2, r7
 801acc2:	4628      	mov	r0, r5
 801acc4:	4441      	add	r1, r8
 801acc6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801acca:	4649      	mov	r1, r9
 801accc:	f7ff ff52 	bl	801ab74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801acd0:	4658      	mov	r0, fp
 801acd2:	b003      	add	sp, #12
 801acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acd8:	eb07 010a 	add.w	r1, r7, sl
 801acdc:	4449      	add	r1, r9
 801acde:	4441      	add	r1, r8
 801ace0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ace4:	e7d2      	b.n	801ac8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ace6:	f04f 0b00 	mov.w	fp, #0
 801acea:	e7f1      	b.n	801acd0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801acec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801acec:	b570      	push	{r4, r5, r6, lr}
 801acee:	8810      	ldrh	r0, [r2, #0]
 801acf0:	4298      	cmp	r0, r3
 801acf2:	d817      	bhi.n	801ad24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801acf4:	1e48      	subs	r0, r1, #1
 801acf6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801acfa:	4298      	cmp	r0, r3
 801acfc:	d312      	bcc.n	801ad24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801acfe:	2400      	movs	r4, #0
 801ad00:	428c      	cmp	r4, r1
 801ad02:	d20f      	bcs.n	801ad24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ad04:	1860      	adds	r0, r4, r1
 801ad06:	1040      	asrs	r0, r0, #1
 801ad08:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ad0c:	0085      	lsls	r5, r0, #2
 801ad0e:	42b3      	cmp	r3, r6
 801ad10:	d902      	bls.n	801ad18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ad12:	3001      	adds	r0, #1
 801ad14:	b284      	uxth	r4, r0
 801ad16:	e7f3      	b.n	801ad00 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ad18:	d201      	bcs.n	801ad1e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ad1a:	b281      	uxth	r1, r0
 801ad1c:	e7f0      	b.n	801ad00 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ad1e:	442a      	add	r2, r5
 801ad20:	8850      	ldrh	r0, [r2, #2]
 801ad22:	bd70      	pop	{r4, r5, r6, pc}
 801ad24:	2000      	movs	r0, #0
 801ad26:	e7fc      	b.n	801ad22 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ad28 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ad28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad2c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801ad2e:	4604      	mov	r4, r0
 801ad30:	260b      	movs	r6, #11
 801ad32:	886f      	ldrh	r7, [r5, #2]
 801ad34:	087f      	lsrs	r7, r7, #1
 801ad36:	3e01      	subs	r6, #1
 801ad38:	d013      	beq.n	801ad62 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ad3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ad3c:	462a      	mov	r2, r5
 801ad3e:	4639      	mov	r1, r7
 801ad40:	4620      	mov	r0, r4
 801ad42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ad46:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ad4a:	4643      	mov	r3, r8
 801ad4c:	f7ff ffce 	bl	801acec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ad50:	b138      	cbz	r0, 801ad62 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ad52:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ad56:	4642      	mov	r2, r8
 801ad58:	4620      	mov	r0, r4
 801ad5a:	f7ff ff93 	bl	801ac84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ad5e:	2800      	cmp	r0, #0
 801ad60:	d1e9      	bne.n	801ad36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801ad68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ad68:	b570      	push	{r4, r5, r6, lr}
 801ad6a:	694a      	ldr	r2, [r1, #20]
 801ad6c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ad6e:	684b      	ldr	r3, [r1, #4]
 801ad70:	1b54      	subs	r4, r2, r5
 801ad72:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ad74:	f000 8106 	beq.w	801af84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801ad78:	1b9b      	subs	r3, r3, r6
 801ad7a:	d003      	beq.n	801ad84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ad7c:	4363      	muls	r3, r4
 801ad7e:	2210      	movs	r2, #16
 801ad80:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad84:	680c      	ldr	r4, [r1, #0]
 801ad86:	698a      	ldr	r2, [r1, #24]
 801ad88:	1b65      	subs	r5, r4, r5
 801ad8a:	f000 80fd 	beq.w	801af88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ad8e:	1b92      	subs	r2, r2, r6
 801ad90:	d003      	beq.n	801ad9a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ad92:	436a      	muls	r2, r5
 801ad94:	2410      	movs	r4, #16
 801ad96:	fb92 f2f4 	sdiv	r2, r2, r4
 801ad9a:	1a9b      	subs	r3, r3, r2
 801ad9c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801afc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ada0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ada4:	460a      	mov	r2, r1
 801ada6:	ee07 3a90 	vmov	s15, r3
 801adaa:	f100 040c 	add.w	r4, r0, #12
 801adae:	4603      	mov	r3, r0
 801adb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801adb4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801adb8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801adbc:	eeb1 6a43 	vneg.f32	s12, s6
 801adc0:	edd2 7a02 	vldr	s15, [r2, #8]
 801adc4:	3214      	adds	r2, #20
 801adc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801adca:	ece3 6a01 	vstmia	r3!, {s13}
 801adce:	429c      	cmp	r4, r3
 801add0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801add4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801add8:	edc3 7a02 	vstr	s15, [r3, #8]
 801addc:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ade0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ade4:	edc3 7a05 	vstr	s15, [r3, #20]
 801ade8:	d1ea      	bne.n	801adc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801adea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801adec:	698b      	ldr	r3, [r1, #24]
 801adee:	edd0 4a02 	vldr	s9, [r0, #8]
 801adf2:	1a9b      	subs	r3, r3, r2
 801adf4:	edd0 3a00 	vldr	s7, [r0]
 801adf8:	edd0 6a01 	vldr	s13, [r0, #4]
 801adfc:	ee07 3a90 	vmov	s15, r3
 801ae00:	684b      	ldr	r3, [r1, #4]
 801ae02:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ae06:	ed90 5a05 	vldr	s10, [r0, #20]
 801ae0a:	1a9b      	subs	r3, r3, r2
 801ae0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae10:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ae14:	ed90 2a03 	vldr	s4, [r0, #12]
 801ae18:	ee07 3a10 	vmov	s14, r3
 801ae1c:	edd0 5a04 	vldr	s11, [r0, #16]
 801ae20:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ae24:	ed90 1a07 	vldr	s2, [r0, #28]
 801ae28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae2c:	edd0 2a06 	vldr	s5, [r0, #24]
 801ae30:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ae34:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ae38:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae3c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ae40:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ae44:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ae48:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801ae4c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ae4e:	694a      	ldr	r2, [r1, #20]
 801ae50:	1b13      	subs	r3, r2, r4
 801ae52:	ee07 3a10 	vmov	s14, r3
 801ae56:	680b      	ldr	r3, [r1, #0]
 801ae58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae5c:	1b1b      	subs	r3, r3, r4
 801ae5e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae62:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801ae66:	ee07 3a10 	vmov	s14, r3
 801ae6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae72:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ae76:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ae7a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ae7e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ae80:	698b      	ldr	r3, [r1, #24]
 801ae82:	1a9b      	subs	r3, r3, r2
 801ae84:	ee06 3a90 	vmov	s13, r3
 801ae88:	684b      	ldr	r3, [r1, #4]
 801ae8a:	1a9b      	subs	r3, r3, r2
 801ae8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ae90:	ee07 3a10 	vmov	s14, r3
 801ae94:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ae98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae9c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801aea0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aea4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801aea8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801aeac:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801aeb0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801aeb2:	694a      	ldr	r2, [r1, #20]
 801aeb4:	1b13      	subs	r3, r2, r4
 801aeb6:	ee07 3a10 	vmov	s14, r3
 801aeba:	680b      	ldr	r3, [r1, #0]
 801aebc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aec0:	1b1b      	subs	r3, r3, r4
 801aec2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aec6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801aeca:	ee07 3a10 	vmov	s14, r3
 801aece:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aed2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aed6:	eea5 5a87 	vfma.f32	s10, s11, s14
 801aeda:	edd0 5a08 	vldr	s11, [r0, #32]
 801aede:	ee31 1a65 	vsub.f32	s2, s2, s11
 801aee2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801aee6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801aeea:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801aeee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801aef0:	698b      	ldr	r3, [r1, #24]
 801aef2:	1a9b      	subs	r3, r3, r2
 801aef4:	ee07 3a10 	vmov	s14, r3
 801aef8:	684b      	ldr	r3, [r1, #4]
 801aefa:	1a9b      	subs	r3, r3, r2
 801aefc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af00:	ee01 3a90 	vmov	s3, r3
 801af04:	ee27 7a04 	vmul.f32	s14, s14, s8
 801af08:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801af0c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801af10:	ee61 1a84 	vmul.f32	s3, s3, s8
 801af14:	eea1 7a21 	vfma.f32	s14, s2, s3
 801af18:	ee27 7a03 	vmul.f32	s14, s14, s6
 801af1c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801af20:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801af22:	694a      	ldr	r2, [r1, #20]
 801af24:	1b13      	subs	r3, r2, r4
 801af26:	ee03 3a10 	vmov	s6, r3
 801af2a:	680b      	ldr	r3, [r1, #0]
 801af2c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801af30:	1b1b      	subs	r3, r3, r4
 801af32:	ee23 3a04 	vmul.f32	s6, s6, s8
 801af36:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801af3a:	ee03 3a10 	vmov	s6, r3
 801af3e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801af42:	ee23 4a04 	vmul.f32	s8, s6, s8
 801af46:	eee1 5a04 	vfma.f32	s11, s2, s8
 801af4a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801af4e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801af52:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801af56:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801af5a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801af5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af62:	dd13      	ble.n	801af8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801af64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af68:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801af6c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801af6e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801af72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af7a:	dd15      	ble.n	801afa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801af7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af80:	6403      	str	r3, [r0, #64]	; 0x40
 801af82:	bd70      	pop	{r4, r5, r6, pc}
 801af84:	4623      	mov	r3, r4
 801af86:	e6fd      	b.n	801ad84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801af88:	462a      	mov	r2, r5
 801af8a:	e706      	b.n	801ad9a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801af8c:	d502      	bpl.n	801af94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801af8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801af92:	e7e9      	b.n	801af68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801af94:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801af98:	eea3 2a85 	vfma.f32	s4, s7, s10
 801af9c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801afa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afa4:	dade      	bge.n	801af64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801afa6:	e7f2      	b.n	801af8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801afa8:	d502      	bpl.n	801afb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801afaa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801afae:	e7e7      	b.n	801af80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801afb0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801afb4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801afb8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801afbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc0:	dadc      	bge.n	801af7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801afc2:	e7f2      	b.n	801afaa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801afc4:	3d800000 	.word	0x3d800000

0801afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afcc:	2714      	movs	r7, #20
 801afce:	435f      	muls	r7, r3
 801afd0:	eb02 0c07 	add.w	ip, r2, r7
 801afd4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801afd8:	f115 0e0f 	adds.w	lr, r5, #15
 801afdc:	f100 80a2 	bmi.w	801b124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801afe0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801afe4:	9c08      	ldr	r4, [sp, #32]
 801afe6:	2614      	movs	r6, #20
 801afe8:	f8c0 e014 	str.w	lr, [r0, #20]
 801afec:	4366      	muls	r6, r4
 801afee:	eb02 0806 	add.w	r8, r2, r6
 801aff2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801aff6:	f115 040f 	adds.w	r4, r5, #15
 801affa:	f100 809f 	bmi.w	801b13c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801affe:	1124      	asrs	r4, r4, #4
 801b000:	eba4 040e 	sub.w	r4, r4, lr
 801b004:	6184      	str	r4, [r0, #24]
 801b006:	2c00      	cmp	r4, #0
 801b008:	f000 808a 	beq.w	801b120 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b00c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b010:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b014:	5995      	ldr	r5, [r2, r6]
 801b016:	eba4 0809 	sub.w	r8, r4, r9
 801b01a:	59d4      	ldr	r4, [r2, r7]
 801b01c:	eba5 0a04 	sub.w	sl, r5, r4
 801b020:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b024:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b028:	fb0e fe05 	mul.w	lr, lr, r5
 801b02c:	fb0a ee19 	mls	lr, sl, r9, lr
 801b030:	fb08 e404 	mla	r4, r8, r4, lr
 801b034:	3c01      	subs	r4, #1
 801b036:	19a4      	adds	r4, r4, r6
 801b038:	f100 808c 	bmi.w	801b154 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b03c:	fb94 fef6 	sdiv	lr, r4, r6
 801b040:	fb06 441e 	mls	r4, r6, lr, r4
 801b044:	f8c0 e000 	str.w	lr, [r0]
 801b048:	6104      	str	r4, [r0, #16]
 801b04a:	2d00      	cmp	r5, #0
 801b04c:	f2c0 8095 	blt.w	801b17a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b050:	fb95 f4f6 	sdiv	r4, r5, r6
 801b054:	fb06 5514 	mls	r5, r6, r4, r5
 801b058:	6044      	str	r4, [r0, #4]
 801b05a:	6085      	str	r5, [r0, #8]
 801b05c:	60c6      	str	r6, [r0, #12]
 801b05e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b062:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b066:	6945      	ldr	r5, [r0, #20]
 801b068:	59d2      	ldr	r2, [r2, r7]
 801b06a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b06e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801b19c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b072:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b076:	ee07 4a10 	vmov	s14, r4
 801b07a:	6804      	ldr	r4, [r0, #0]
 801b07c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b084:	ee07 2a90 	vmov	s15, r2
 801b088:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b090:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b094:	edd3 6a00 	vldr	s13, [r3]
 801b098:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b09c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801b0a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b0a4:	edc0 6a07 	vstr	s13, [r0, #28]
 801b0a8:	edd0 6a01 	vldr	s13, [r0, #4]
 801b0ac:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801b0b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b0b4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b0b8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b0bc:	ed80 6a08 	vstr	s12, [r0, #32]
 801b0c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801b0c2:	6242      	str	r2, [r0, #36]	; 0x24
 801b0c4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801b0c8:	ed93 6a03 	vldr	s12, [r3, #12]
 801b0cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b0d0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b0d4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b0d8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801b0dc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b0e0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801b0e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b0e8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801b0ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b0ee:	6302      	str	r2, [r0, #48]	; 0x30
 801b0f0:	ed93 6a06 	vldr	s12, [r3, #24]
 801b0f4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801b0f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b0fc:	eeb0 7a46 	vmov.f32	s14, s12
 801b100:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801b104:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b108:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b10c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801b110:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801b114:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b118:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801b11c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801b11e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b124:	2410      	movs	r4, #16
 801b126:	f1c5 0501 	rsb	r5, r5, #1
 801b12a:	fb9e fef4 	sdiv	lr, lr, r4
 801b12e:	f015 050f 	ands.w	r5, r5, #15
 801b132:	bf18      	it	ne
 801b134:	2501      	movne	r5, #1
 801b136:	ebae 0e05 	sub.w	lr, lr, r5
 801b13a:	e753      	b.n	801afe4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b13c:	f04f 0910 	mov.w	r9, #16
 801b140:	f1c5 0501 	rsb	r5, r5, #1
 801b144:	fb94 f4f9 	sdiv	r4, r4, r9
 801b148:	f015 050f 	ands.w	r5, r5, #15
 801b14c:	bf18      	it	ne
 801b14e:	2501      	movne	r5, #1
 801b150:	1b64      	subs	r4, r4, r5
 801b152:	e755      	b.n	801b000 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b154:	4264      	negs	r4, r4
 801b156:	fb94 fef6 	sdiv	lr, r4, r6
 801b15a:	f1ce 0800 	rsb	r8, lr, #0
 801b15e:	fb06 441e 	mls	r4, r6, lr, r4
 801b162:	f8c0 8000 	str.w	r8, [r0]
 801b166:	6104      	str	r4, [r0, #16]
 801b168:	2c00      	cmp	r4, #0
 801b16a:	f43f af6e 	beq.w	801b04a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b16e:	ea6f 0e0e 	mvn.w	lr, lr
 801b172:	1b34      	subs	r4, r6, r4
 801b174:	f8c0 e000 	str.w	lr, [r0]
 801b178:	e766      	b.n	801b048 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b17a:	426d      	negs	r5, r5
 801b17c:	fb95 f4f6 	sdiv	r4, r5, r6
 801b180:	f1c4 0e00 	rsb	lr, r4, #0
 801b184:	fb06 5514 	mls	r5, r6, r4, r5
 801b188:	f8c0 e004 	str.w	lr, [r0, #4]
 801b18c:	6085      	str	r5, [r0, #8]
 801b18e:	2d00      	cmp	r5, #0
 801b190:	f43f af64 	beq.w	801b05c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b194:	43e4      	mvns	r4, r4
 801b196:	1b75      	subs	r5, r6, r5
 801b198:	6044      	str	r4, [r0, #4]
 801b19a:	e75e      	b.n	801b05a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b19c:	3d800000 	.word	0x3d800000

0801b1a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b1a0:	4b06      	ldr	r3, [pc, #24]	; (801b1bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b1a2:	881a      	ldrh	r2, [r3, #0]
 801b1a4:	4282      	cmp	r2, r0
 801b1a6:	d807      	bhi.n	801b1b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b1a8:	4b05      	ldr	r3, [pc, #20]	; (801b1c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b1aa:	881b      	ldrh	r3, [r3, #0]
 801b1ac:	4413      	add	r3, r2
 801b1ae:	4298      	cmp	r0, r3
 801b1b0:	bfac      	ite	ge
 801b1b2:	2000      	movge	r0, #0
 801b1b4:	2001      	movlt	r0, #1
 801b1b6:	4770      	bx	lr
 801b1b8:	2000      	movs	r0, #0
 801b1ba:	4770      	bx	lr
 801b1bc:	200146e8 	.word	0x200146e8
 801b1c0:	200146ea 	.word	0x200146ea

0801b1c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b1c4:	b508      	push	{r3, lr}
 801b1c6:	4601      	mov	r1, r0
 801b1c8:	f7ff ffea 	bl	801b1a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b1cc:	b118      	cbz	r0, 801b1d6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b1ce:	4b02      	ldr	r3, [pc, #8]	; (801b1d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b1d6:	bd08      	pop	{r3, pc}
 801b1d8:	200146e0 	.word	0x200146e0

0801b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b1dc:	4a12      	ldr	r2, [pc, #72]	; (801b228 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b1de:	8803      	ldrh	r3, [r0, #0]
 801b1e0:	8812      	ldrh	r2, [r2, #0]
 801b1e2:	4293      	cmp	r3, r2
 801b1e4:	d207      	bcs.n	801b1f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b1e6:	4a11      	ldr	r2, [pc, #68]	; (801b22c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b1e8:	2114      	movs	r1, #20
 801b1ea:	6812      	ldr	r2, [r2, #0]
 801b1ec:	fb01 2303 	mla	r3, r1, r3, r2
 801b1f0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b1f4:	4770      	bx	lr
 801b1f6:	490e      	ldr	r1, [pc, #56]	; (801b230 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b1f8:	8809      	ldrh	r1, [r1, #0]
 801b1fa:	4411      	add	r1, r2
 801b1fc:	428b      	cmp	r3, r1
 801b1fe:	da04      	bge.n	801b20a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b200:	1a9b      	subs	r3, r3, r2
 801b202:	4a0c      	ldr	r2, [pc, #48]	; (801b234 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b204:	210e      	movs	r1, #14
 801b206:	6812      	ldr	r2, [r2, #0]
 801b208:	e7f0      	b.n	801b1ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b20a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b20e:	4293      	cmp	r3, r2
 801b210:	d108      	bne.n	801b224 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b212:	4b09      	ldr	r3, [pc, #36]	; (801b238 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b214:	781b      	ldrb	r3, [r3, #0]
 801b216:	b91b      	cbnz	r3, 801b220 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b218:	4b08      	ldr	r3, [pc, #32]	; (801b23c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b21a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b21e:	4770      	bx	lr
 801b220:	4b07      	ldr	r3, [pc, #28]	; (801b240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b222:	e7fa      	b.n	801b21a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b224:	2000      	movs	r0, #0
 801b226:	4770      	bx	lr
 801b228:	200146e8 	.word	0x200146e8
 801b22c:	200146ec 	.word	0x200146ec
 801b230:	200146ea 	.word	0x200146ea
 801b234:	200146e4 	.word	0x200146e4
 801b238:	20014688 	.word	0x20014688
 801b23c:	2001468a 	.word	0x2001468a
 801b240:	2001468c 	.word	0x2001468c

0801b244 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b244:	4a12      	ldr	r2, [pc, #72]	; (801b290 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b246:	8803      	ldrh	r3, [r0, #0]
 801b248:	8812      	ldrh	r2, [r2, #0]
 801b24a:	4293      	cmp	r3, r2
 801b24c:	d207      	bcs.n	801b25e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b24e:	4a11      	ldr	r2, [pc, #68]	; (801b294 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b250:	2114      	movs	r1, #20
 801b252:	6812      	ldr	r2, [r2, #0]
 801b254:	fb01 2303 	mla	r3, r1, r3, r2
 801b258:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b25c:	4770      	bx	lr
 801b25e:	490e      	ldr	r1, [pc, #56]	; (801b298 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b260:	8809      	ldrh	r1, [r1, #0]
 801b262:	4411      	add	r1, r2
 801b264:	428b      	cmp	r3, r1
 801b266:	da04      	bge.n	801b272 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b268:	1a9b      	subs	r3, r3, r2
 801b26a:	4a0c      	ldr	r2, [pc, #48]	; (801b29c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b26c:	210e      	movs	r1, #14
 801b26e:	6812      	ldr	r2, [r2, #0]
 801b270:	e7f0      	b.n	801b254 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b272:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b276:	4293      	cmp	r3, r2
 801b278:	d108      	bne.n	801b28c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b27a:	4b09      	ldr	r3, [pc, #36]	; (801b2a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b27c:	781b      	ldrb	r3, [r3, #0]
 801b27e:	b91b      	cbnz	r3, 801b288 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b280:	4b08      	ldr	r3, [pc, #32]	; (801b2a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b282:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b286:	4770      	bx	lr
 801b288:	4b07      	ldr	r3, [pc, #28]	; (801b2a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b28a:	e7fa      	b.n	801b282 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b28c:	2000      	movs	r0, #0
 801b28e:	4770      	bx	lr
 801b290:	200146e8 	.word	0x200146e8
 801b294:	200146ec 	.word	0x200146ec
 801b298:	200146ea 	.word	0x200146ea
 801b29c:	200146e4 	.word	0x200146e4
 801b2a0:	20014688 	.word	0x20014688
 801b2a4:	2001468c 	.word	0x2001468c
 801b2a8:	2001468a 	.word	0x2001468a

0801b2ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b2ac:	4a1f      	ldr	r2, [pc, #124]	; (801b32c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801b2ae:	b510      	push	{r4, lr}
 801b2b0:	880b      	ldrh	r3, [r1, #0]
 801b2b2:	8812      	ldrh	r2, [r2, #0]
 801b2b4:	4293      	cmp	r3, r2
 801b2b6:	d213      	bcs.n	801b2e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801b2b8:	4a1d      	ldr	r2, [pc, #116]	; (801b330 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801b2ba:	2114      	movs	r1, #20
 801b2bc:	6812      	ldr	r2, [r2, #0]
 801b2be:	fb01 2303 	mla	r3, r1, r3, r2
 801b2c2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b2c6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b2ca:	8a1a      	ldrh	r2, [r3, #16]
 801b2cc:	8a5b      	ldrh	r3, [r3, #18]
 801b2ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b2d2:	8004      	strh	r4, [r0, #0]
 801b2d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2d8:	8041      	strh	r1, [r0, #2]
 801b2da:	8082      	strh	r2, [r0, #4]
 801b2dc:	80c3      	strh	r3, [r0, #6]
 801b2de:	e00e      	b.n	801b2fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b2e0:	4914      	ldr	r1, [pc, #80]	; (801b334 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801b2e2:	8809      	ldrh	r1, [r1, #0]
 801b2e4:	4411      	add	r1, r2
 801b2e6:	428b      	cmp	r3, r1
 801b2e8:	da0a      	bge.n	801b300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801b2ea:	1a9b      	subs	r3, r3, r2
 801b2ec:	4a12      	ldr	r2, [pc, #72]	; (801b338 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801b2ee:	210e      	movs	r1, #14
 801b2f0:	6812      	ldr	r2, [r2, #0]
 801b2f2:	fb01 2303 	mla	r3, r1, r3, r2
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	6002      	str	r2, [r0, #0]
 801b2fa:	685a      	ldr	r2, [r3, #4]
 801b2fc:	6042      	str	r2, [r0, #4]
 801b2fe:	bd10      	pop	{r4, pc}
 801b300:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b304:	4293      	cmp	r3, r2
 801b306:	d10b      	bne.n	801b320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801b308:	4b0c      	ldr	r3, [pc, #48]	; (801b33c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b30a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b30e:	4b0c      	ldr	r3, [pc, #48]	; (801b340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b310:	8081      	strh	r1, [r0, #4]
 801b312:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b316:	2300      	movs	r3, #0
 801b318:	80c2      	strh	r2, [r0, #6]
 801b31a:	8003      	strh	r3, [r0, #0]
 801b31c:	8043      	strh	r3, [r0, #2]
 801b31e:	e7ee      	b.n	801b2fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b320:	2300      	movs	r3, #0
 801b322:	8003      	strh	r3, [r0, #0]
 801b324:	8043      	strh	r3, [r0, #2]
 801b326:	8083      	strh	r3, [r0, #4]
 801b328:	e7d8      	b.n	801b2dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801b32a:	bf00      	nop
 801b32c:	200146e8 	.word	0x200146e8
 801b330:	200146ec 	.word	0x200146ec
 801b334:	200146ea 	.word	0x200146ea
 801b338:	200146e4 	.word	0x200146e4
 801b33c:	20014684 	.word	0x20014684
 801b340:	20014686 	.word	0x20014686

0801b344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b344:	4a17      	ldr	r2, [pc, #92]	; (801b3a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801b346:	8803      	ldrh	r3, [r0, #0]
 801b348:	8812      	ldrh	r2, [r2, #0]
 801b34a:	4293      	cmp	r3, r2
 801b34c:	d213      	bcs.n	801b376 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801b34e:	4a16      	ldr	r2, [pc, #88]	; (801b3a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b350:	2114      	movs	r1, #20
 801b352:	6812      	ldr	r2, [r2, #0]
 801b354:	fb01 2303 	mla	r3, r1, r3, r2
 801b358:	8a1a      	ldrh	r2, [r3, #16]
 801b35a:	8919      	ldrh	r1, [r3, #8]
 801b35c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b360:	428a      	cmp	r2, r1
 801b362:	db1d      	blt.n	801b3a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b364:	8a58      	ldrh	r0, [r3, #18]
 801b366:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b36a:	895b      	ldrh	r3, [r3, #10]
 801b36c:	4298      	cmp	r0, r3
 801b36e:	bfac      	ite	ge
 801b370:	2000      	movge	r0, #0
 801b372:	2001      	movlt	r0, #1
 801b374:	4770      	bx	lr
 801b376:	490d      	ldr	r1, [pc, #52]	; (801b3ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b378:	8809      	ldrh	r1, [r1, #0]
 801b37a:	4411      	add	r1, r2
 801b37c:	428b      	cmp	r3, r1
 801b37e:	da0d      	bge.n	801b39c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801b380:	1a9b      	subs	r3, r3, r2
 801b382:	4a0b      	ldr	r2, [pc, #44]	; (801b3b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b384:	210e      	movs	r1, #14
 801b386:	6812      	ldr	r2, [r2, #0]
 801b388:	fb01 2303 	mla	r3, r1, r3, r2
 801b38c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b390:	891a      	ldrh	r2, [r3, #8]
 801b392:	4291      	cmp	r1, r2
 801b394:	db04      	blt.n	801b3a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b396:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b39a:	e7e6      	b.n	801b36a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801b39c:	2000      	movs	r0, #0
 801b39e:	4770      	bx	lr
 801b3a0:	2001      	movs	r0, #1
 801b3a2:	4770      	bx	lr
 801b3a4:	200146e8 	.word	0x200146e8
 801b3a8:	200146ec 	.word	0x200146ec
 801b3ac:	200146ea 	.word	0x200146ea
 801b3b0:	200146e4 	.word	0x200146e4

0801b3b4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b3b4:	4a12      	ldr	r2, [pc, #72]	; (801b400 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b3b6:	8803      	ldrh	r3, [r0, #0]
 801b3b8:	8811      	ldrh	r1, [r2, #0]
 801b3ba:	428b      	cmp	r3, r1
 801b3bc:	d20b      	bcs.n	801b3d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b3be:	4a11      	ldr	r2, [pc, #68]	; (801b404 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b3c0:	6812      	ldr	r2, [r2, #0]
 801b3c2:	b112      	cbz	r2, 801b3ca <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b3c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3c8:	b9c0      	cbnz	r0, 801b3fc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b3ca:	4a0f      	ldr	r2, [pc, #60]	; (801b408 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b3cc:	6811      	ldr	r1, [r2, #0]
 801b3ce:	2214      	movs	r2, #20
 801b3d0:	4353      	muls	r3, r2
 801b3d2:	58c8      	ldr	r0, [r1, r3]
 801b3d4:	4770      	bx	lr
 801b3d6:	4a0d      	ldr	r2, [pc, #52]	; (801b40c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b3d8:	8812      	ldrh	r2, [r2, #0]
 801b3da:	440a      	add	r2, r1
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	da04      	bge.n	801b3ea <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b3e0:	4a08      	ldr	r2, [pc, #32]	; (801b404 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b3e2:	6812      	ldr	r2, [r2, #0]
 801b3e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3e8:	4770      	bx	lr
 801b3ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b3ee:	4293      	cmp	r3, r2
 801b3f0:	d103      	bne.n	801b3fa <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b3f2:	4b07      	ldr	r3, [pc, #28]	; (801b410 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b3f8:	4770      	bx	lr
 801b3fa:	2000      	movs	r0, #0
 801b3fc:	4770      	bx	lr
 801b3fe:	bf00      	nop
 801b400:	200146e8 	.word	0x200146e8
 801b404:	200146e0 	.word	0x200146e0
 801b408:	200146ec 	.word	0x200146ec
 801b40c:	200146ea 	.word	0x200146ea
 801b410:	20014690 	.word	0x20014690

0801b414 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b414:	4b24      	ldr	r3, [pc, #144]	; (801b4a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b416:	8802      	ldrh	r2, [r0, #0]
 801b418:	8818      	ldrh	r0, [r3, #0]
 801b41a:	4282      	cmp	r2, r0
 801b41c:	d221      	bcs.n	801b462 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b41e:	4b23      	ldr	r3, [pc, #140]	; (801b4ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b420:	6819      	ldr	r1, [r3, #0]
 801b422:	2314      	movs	r3, #20
 801b424:	fb03 1302 	mla	r3, r3, r2, r1
 801b428:	6858      	ldr	r0, [r3, #4]
 801b42a:	2800      	cmp	r0, #0
 801b42c:	d03a      	beq.n	801b4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b42e:	4920      	ldr	r1, [pc, #128]	; (801b4b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b430:	6809      	ldr	r1, [r1, #0]
 801b432:	2900      	cmp	r1, #0
 801b434:	d036      	beq.n	801b4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b436:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b43a:	2900      	cmp	r1, #0
 801b43c:	d032      	beq.n	801b4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b43e:	891a      	ldrh	r2, [r3, #8]
 801b440:	8958      	ldrh	r0, [r3, #10]
 801b442:	4350      	muls	r0, r2
 801b444:	7c5a      	ldrb	r2, [r3, #17]
 801b446:	7cdb      	ldrb	r3, [r3, #19]
 801b448:	0952      	lsrs	r2, r2, #5
 801b44a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b44e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b452:	2b0b      	cmp	r3, #11
 801b454:	bf18      	it	ne
 801b456:	0040      	lslne	r0, r0, #1
 801b458:	3003      	adds	r0, #3
 801b45a:	f020 0003 	bic.w	r0, r0, #3
 801b45e:	4408      	add	r0, r1
 801b460:	4770      	bx	lr
 801b462:	4b14      	ldr	r3, [pc, #80]	; (801b4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b464:	881b      	ldrh	r3, [r3, #0]
 801b466:	4403      	add	r3, r0
 801b468:	429a      	cmp	r2, r3
 801b46a:	da1a      	bge.n	801b4a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b46c:	4b12      	ldr	r3, [pc, #72]	; (801b4b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b46e:	1a10      	subs	r0, r2, r0
 801b470:	210e      	movs	r1, #14
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	fb01 3000 	mla	r0, r1, r0, r3
 801b478:	7b03      	ldrb	r3, [r0, #12]
 801b47a:	f003 031f 	and.w	r3, r3, #31
 801b47e:	2b0b      	cmp	r3, #11
 801b480:	d10b      	bne.n	801b49a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b482:	8903      	ldrh	r3, [r0, #8]
 801b484:	8940      	ldrh	r0, [r0, #10]
 801b486:	4358      	muls	r0, r3
 801b488:	4b09      	ldr	r3, [pc, #36]	; (801b4b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b48a:	3003      	adds	r0, #3
 801b48c:	6819      	ldr	r1, [r3, #0]
 801b48e:	f020 0303 	bic.w	r3, r0, #3
 801b492:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b496:	4418      	add	r0, r3
 801b498:	4770      	bx	lr
 801b49a:	2b0d      	cmp	r3, #13
 801b49c:	d101      	bne.n	801b4a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b49e:	300d      	adds	r0, #13
 801b4a0:	4770      	bx	lr
 801b4a2:	2000      	movs	r0, #0
 801b4a4:	4770      	bx	lr
 801b4a6:	bf00      	nop
 801b4a8:	200146e8 	.word	0x200146e8
 801b4ac:	200146ec 	.word	0x200146ec
 801b4b0:	200146e0 	.word	0x200146e0
 801b4b4:	200146ea 	.word	0x200146ea
 801b4b8:	200146e4 	.word	0x200146e4

0801b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b4bc:	4a17      	ldr	r2, [pc, #92]	; (801b51c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b4be:	b510      	push	{r4, lr}
 801b4c0:	8803      	ldrh	r3, [r0, #0]
 801b4c2:	8812      	ldrh	r2, [r2, #0]
 801b4c4:	4293      	cmp	r3, r2
 801b4c6:	d20c      	bcs.n	801b4e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b4c8:	4a15      	ldr	r2, [pc, #84]	; (801b520 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b4ca:	2114      	movs	r1, #20
 801b4cc:	6812      	ldr	r2, [r2, #0]
 801b4ce:	fb01 2303 	mla	r3, r1, r3, r2
 801b4d2:	7c58      	ldrb	r0, [r3, #17]
 801b4d4:	0942      	lsrs	r2, r0, #5
 801b4d6:	7cd8      	ldrb	r0, [r3, #19]
 801b4d8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b4dc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b4e0:	bd10      	pop	{r4, pc}
 801b4e2:	4910      	ldr	r1, [pc, #64]	; (801b524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b4e4:	8809      	ldrh	r1, [r1, #0]
 801b4e6:	4411      	add	r1, r2
 801b4e8:	428b      	cmp	r3, r1
 801b4ea:	da09      	bge.n	801b500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b4ec:	1a9b      	subs	r3, r3, r2
 801b4ee:	4a0e      	ldr	r2, [pc, #56]	; (801b528 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b4f0:	210e      	movs	r1, #14
 801b4f2:	6812      	ldr	r2, [r2, #0]
 801b4f4:	fb01 2303 	mla	r3, r1, r3, r2
 801b4f8:	7b18      	ldrb	r0, [r3, #12]
 801b4fa:	f000 001f 	and.w	r0, r0, #31
 801b4fe:	e7ef      	b.n	801b4e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b504:	4293      	cmp	r3, r2
 801b506:	d106      	bne.n	801b516 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b508:	f7e8 f828 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 801b50c:	6803      	ldr	r3, [r0, #0]
 801b50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b514:	4718      	bx	r3
 801b516:	2000      	movs	r0, #0
 801b518:	e7e2      	b.n	801b4e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b51a:	bf00      	nop
 801b51c:	200146e8 	.word	0x200146e8
 801b520:	200146ec 	.word	0x200146ec
 801b524:	200146ea 	.word	0x200146ea
 801b528:	200146e4 	.word	0x200146e4

0801b52c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801b52c:	2010      	movs	r0, #16
 801b52e:	4770      	bx	lr

0801b530 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801b530:	2000      	movs	r0, #0
 801b532:	4770      	bx	lr

0801b534 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801b534:	4b02      	ldr	r3, [pc, #8]	; (801b540 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801b536:	8818      	ldrh	r0, [r3, #0]
 801b538:	0040      	lsls	r0, r0, #1
 801b53a:	b280      	uxth	r0, r0
 801b53c:	4770      	bx	lr
 801b53e:	bf00      	nop
 801b540:	2001468a 	.word	0x2001468a

0801b544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b544:	2bff      	cmp	r3, #255	; 0xff
 801b546:	d050      	beq.n	801b5ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801b548:	2a0b      	cmp	r2, #11
 801b54a:	d04a      	beq.n	801b5e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b54c:	d80e      	bhi.n	801b56c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801b54e:	2a03      	cmp	r2, #3
 801b550:	d03f      	beq.n	801b5d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801b552:	d804      	bhi.n	801b55e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b554:	2a01      	cmp	r2, #1
 801b556:	d03e      	beq.n	801b5d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b558:	d93f      	bls.n	801b5da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b55a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b55c:	4770      	bx	lr
 801b55e:	2a09      	cmp	r2, #9
 801b560:	d03f      	beq.n	801b5e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b562:	d83c      	bhi.n	801b5de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b564:	2a08      	cmp	r2, #8
 801b566:	d03a      	beq.n	801b5de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b568:	2000      	movs	r0, #0
 801b56a:	4770      	bx	lr
 801b56c:	2a2f      	cmp	r2, #47	; 0x2f
 801b56e:	d024      	beq.n	801b5ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801b570:	d80d      	bhi.n	801b58e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801b572:	2a2d      	cmp	r2, #45	; 0x2d
 801b574:	d014      	beq.n	801b5a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801b576:	d826      	bhi.n	801b5c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b578:	2a2c      	cmp	r2, #44	; 0x2c
 801b57a:	d1f5      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b57c:	684b      	ldr	r3, [r1, #4]
 801b57e:	781b      	ldrb	r3, [r3, #0]
 801b580:	2b01      	cmp	r3, #1
 801b582:	d018      	beq.n	801b5b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801b584:	d323      	bcc.n	801b5ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801b586:	2b02      	cmp	r3, #2
 801b588:	d1ee      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b58a:	68c0      	ldr	r0, [r0, #12]
 801b58c:	4770      	bx	lr
 801b58e:	2a31      	cmp	r2, #49	; 0x31
 801b590:	d004      	beq.n	801b59c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801b592:	d328      	bcc.n	801b5e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b594:	2a32      	cmp	r2, #50	; 0x32
 801b596:	d026      	beq.n	801b5e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b598:	2a33      	cmp	r2, #51	; 0x33
 801b59a:	d1e5      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b59c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801b59e:	4770      	bx	lr
 801b5a0:	684b      	ldr	r3, [r1, #4]
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	2b01      	cmp	r3, #1
 801b5a6:	d004      	beq.n	801b5b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5a8:	d30b      	bcc.n	801b5c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b5aa:	2b02      	cmp	r3, #2
 801b5ac:	d1dc      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b5ae:	6940      	ldr	r0, [r0, #20]
 801b5b0:	4770      	bx	lr
 801b5b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b5b4:	4770      	bx	lr
 801b5b6:	69c0      	ldr	r0, [r0, #28]
 801b5b8:	4770      	bx	lr
 801b5ba:	684b      	ldr	r3, [r1, #4]
 801b5bc:	781b      	ldrb	r3, [r3, #0]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d1d2      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b5c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b5c4:	4770      	bx	lr
 801b5c6:	684b      	ldr	r3, [r1, #4]
 801b5c8:	781b      	ldrb	r3, [r3, #0]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d1cc      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b5ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b5d0:	4770      	bx	lr
 801b5d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b5d4:	4770      	bx	lr
 801b5d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b5d8:	4770      	bx	lr
 801b5da:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b5dc:	4770      	bx	lr
 801b5de:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801b5e0:	4770      	bx	lr
 801b5e2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801b5e4:	4770      	bx	lr
 801b5e6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801b5e8:	4770      	bx	lr
 801b5ea:	2a0b      	cmp	r2, #11
 801b5ec:	d049      	beq.n	801b682 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b5ee:	d80e      	bhi.n	801b60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801b5f0:	2a03      	cmp	r2, #3
 801b5f2:	d040      	beq.n	801b676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b5f4:	d804      	bhi.n	801b600 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801b5f6:	2a01      	cmp	r2, #1
 801b5f8:	d03f      	beq.n	801b67a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801b5fa:	d940      	bls.n	801b67e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b5fc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b5fe:	4770      	bx	lr
 801b600:	2a09      	cmp	r2, #9
 801b602:	d03e      	beq.n	801b682 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b604:	d801      	bhi.n	801b60a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801b606:	2a08      	cmp	r2, #8
 801b608:	d1ae      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b60a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801b60c:	4770      	bx	lr
 801b60e:	2a2f      	cmp	r2, #47	; 0x2f
 801b610:	d024      	beq.n	801b65c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801b612:	d80d      	bhi.n	801b630 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801b614:	2a2d      	cmp	r2, #45	; 0x2d
 801b616:	d014      	beq.n	801b642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801b618:	d826      	bhi.n	801b668 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801b61a:	2a2c      	cmp	r2, #44	; 0x2c
 801b61c:	d1a4      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b61e:	684b      	ldr	r3, [r1, #4]
 801b620:	781b      	ldrb	r3, [r3, #0]
 801b622:	2b01      	cmp	r3, #1
 801b624:	d018      	beq.n	801b658 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801b626:	d324      	bcc.n	801b672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b628:	2b02      	cmp	r3, #2
 801b62a:	d19d      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b62c:	6900      	ldr	r0, [r0, #16]
 801b62e:	4770      	bx	lr
 801b630:	2a31      	cmp	r2, #49	; 0x31
 801b632:	d004      	beq.n	801b63e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801b634:	d327      	bcc.n	801b686 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b636:	2a32      	cmp	r2, #50	; 0x32
 801b638:	d025      	beq.n	801b686 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b63a:	2a33      	cmp	r2, #51	; 0x33
 801b63c:	d194      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b63e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801b640:	4770      	bx	lr
 801b642:	684b      	ldr	r3, [r1, #4]
 801b644:	781b      	ldrb	r3, [r3, #0]
 801b646:	2b01      	cmp	r3, #1
 801b648:	d004      	beq.n	801b654 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801b64a:	d30b      	bcc.n	801b664 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801b64c:	2b02      	cmp	r3, #2
 801b64e:	d18b      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b650:	6980      	ldr	r0, [r0, #24]
 801b652:	4770      	bx	lr
 801b654:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b656:	4770      	bx	lr
 801b658:	6a00      	ldr	r0, [r0, #32]
 801b65a:	4770      	bx	lr
 801b65c:	684b      	ldr	r3, [r1, #4]
 801b65e:	781b      	ldrb	r3, [r3, #0]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d181      	bne.n	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b664:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b666:	4770      	bx	lr
 801b668:	684b      	ldr	r3, [r1, #4]
 801b66a:	781b      	ldrb	r3, [r3, #0]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	f47f af7b 	bne.w	801b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b672:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b674:	4770      	bx	lr
 801b676:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b678:	4770      	bx	lr
 801b67a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801b67c:	4770      	bx	lr
 801b67e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b680:	4770      	bx	lr
 801b682:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b684:	4770      	bx	lr
 801b686:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801b688:	4770      	bx	lr

0801b68a <_ZN8touchgfx8LCD16bppD1Ev>:
 801b68a:	4770      	bx	lr

0801b68c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b690:	b088      	sub	sp, #32
 801b692:	4606      	mov	r6, r0
 801b694:	4688      	mov	r8, r1
 801b696:	4691      	mov	r9, r2
 801b698:	ac08      	add	r4, sp, #32
 801b69a:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b69e:	4620      	mov	r0, r4
 801b6a0:	f7ff fe88 	bl	801b3b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b6a4:	6833      	ldr	r3, [r6, #0]
 801b6a6:	4605      	mov	r5, r0
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	699f      	ldr	r7, [r3, #24]
 801b6ac:	f7ff fd96 	bl	801b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6b0:	4682      	mov	sl, r0
 801b6b2:	4620      	mov	r0, r4
 801b6b4:	f7ff fdc6 	bl	801b244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b6b8:	9500      	str	r5, [sp, #0]
 801b6ba:	464b      	mov	r3, r9
 801b6bc:	4642      	mov	r2, r8
 801b6be:	4631      	mov	r1, r6
 801b6c0:	e9cd a001 	strd	sl, r0, [sp, #4]
 801b6c4:	a806      	add	r0, sp, #24
 801b6c6:	47b8      	blx	r7
 801b6c8:	4628      	mov	r0, r5
 801b6ca:	b008      	add	sp, #32
 801b6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b6d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	9300      	str	r3, [sp, #0]
 801b6d8:	4b3d      	ldr	r3, [pc, #244]	; (801b7d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d137      	bne.n	801b750 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801b6e0:	4a3c      	ldr	r2, [pc, #240]	; (801b7d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b6e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b6e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d132      	bne.n	801b754 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801b6ee:	4b3a      	ldr	r3, [pc, #232]	; (801b7d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6f4:	ac02      	add	r4, sp, #8
 801b6f6:	6808      	ldr	r0, [r1, #0]
 801b6f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b6fc:	ab02      	add	r3, sp, #8
 801b6fe:	6849      	ldr	r1, [r1, #4]
 801b700:	4d36      	ldr	r5, [pc, #216]	; (801b7dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801b702:	c303      	stmia	r3!, {r0, r1}
 801b704:	4669      	mov	r1, sp
 801b706:	4620      	mov	r0, r4
 801b708:	f7fe f888 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b70c:	4668      	mov	r0, sp
 801b70e:	f7fe f85d 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b712:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b716:	f8bd 2000 	ldrh.w	r2, [sp]
 801b71a:	462f      	mov	r7, r5
 801b71c:	6828      	ldr	r0, [r5, #0]
 801b71e:	4413      	add	r3, r2
 801b720:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b724:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b728:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b72c:	4413      	add	r3, r2
 801b72e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b732:	6803      	ldr	r3, [r0, #0]
 801b734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b736:	4798      	blx	r3
 801b738:	f010 0f01 	tst.w	r0, #1
 801b73c:	d00c      	beq.n	801b758 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801b73e:	6828      	ldr	r0, [r5, #0]
 801b740:	6803      	ldr	r3, [r0, #0]
 801b742:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b748:	4798      	blx	r3
 801b74a:	b004      	add	sp, #16
 801b74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b750:	4a21      	ldr	r2, [pc, #132]	; (801b7d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b752:	e7c6      	b.n	801b6e2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b754:	4b1f      	ldr	r3, [pc, #124]	; (801b7d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b756:	e7cb      	b.n	801b6f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b758:	6838      	ldr	r0, [r7, #0]
 801b75a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801b75e:	6803      	ldr	r3, [r0, #0]
 801b760:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801b764:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b76a:	4798      	blx	r3
 801b76c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b770:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b774:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801b778:	fb16 3602 	smlabb	r6, r6, r2, r3
 801b77c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b780:	6838      	ldr	r0, [r7, #0]
 801b782:	6803      	ldr	r3, [r0, #0]
 801b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b786:	4798      	blx	r3
 801b788:	4a12      	ldr	r2, [pc, #72]	; (801b7d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b78a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801b78e:	8813      	ldrh	r3, [r2, #0]
 801b790:	4691      	mov	r9, r2
 801b792:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b796:	435d      	muls	r5, r3
 801b798:	fb03 1404 	mla	r4, r3, r4, r1
 801b79c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b7a0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b7a4:	6838      	ldr	r0, [r7, #0]
 801b7a6:	42ac      	cmp	r4, r5
 801b7a8:	6803      	ldr	r3, [r0, #0]
 801b7aa:	d20e      	bcs.n	801b7ca <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801b7ac:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801b7b0:	4632      	mov	r2, r6
 801b7b2:	4643      	mov	r3, r8
 801b7b4:	4621      	mov	r1, r4
 801b7b6:	47d0      	blx	sl
 801b7b8:	f8b9 3000 	ldrh.w	r3, [r9]
 801b7bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b7c0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b7c4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b7c8:	e7ec      	b.n	801b7a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7cc:	4798      	blx	r3
 801b7ce:	e7bc      	b.n	801b74a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b7d0:	20014688 	.word	0x20014688
 801b7d4:	2001468a 	.word	0x2001468a
 801b7d8:	2001468c 	.word	0x2001468c
 801b7dc:	20014690 	.word	0x20014690

0801b7e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7e4:	b08b      	sub	sp, #44	; 0x2c
 801b7e6:	460f      	mov	r7, r1
 801b7e8:	4616      	mov	r6, r2
 801b7ea:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801b7ee:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801b7f2:	f1bb 0f00 	cmp.w	fp, #0
 801b7f6:	d04a      	beq.n	801b88e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b7f8:	6810      	ldr	r0, [r2, #0]
 801b7fa:	ad06      	add	r5, sp, #24
 801b7fc:	6851      	ldr	r1, [r2, #4]
 801b7fe:	c503      	stmia	r5!, {r0, r1}
 801b800:	6818      	ldr	r0, [r3, #0]
 801b802:	ad08      	add	r5, sp, #32
 801b804:	6859      	ldr	r1, [r3, #4]
 801b806:	c503      	stmia	r5!, {r0, r1}
 801b808:	a806      	add	r0, sp, #24
 801b80a:	f7fd ffdf 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b80e:	4631      	mov	r1, r6
 801b810:	a808      	add	r0, sp, #32
 801b812:	f7fe f803 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b816:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b81a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b81e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b822:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b826:	fb16 2103 	smlabb	r1, r6, r3, r2
 801b82a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b82e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801b832:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b836:	4f5f      	ldr	r7, [pc, #380]	; (801b9b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b838:	440a      	add	r2, r1
 801b83a:	6838      	ldr	r0, [r7, #0]
 801b83c:	46b9      	mov	r9, r7
 801b83e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b842:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b846:	4413      	add	r3, r2
 801b848:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b84c:	6803      	ldr	r3, [r0, #0]
 801b84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b850:	4798      	blx	r3
 801b852:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b856:	d11d      	bne.n	801b894 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801b858:	b9fc      	cbnz	r4, 801b89a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b85a:	f010 0f01 	tst.w	r0, #1
 801b85e:	d01c      	beq.n	801b89a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b860:	f8d9 0000 	ldr.w	r0, [r9]
 801b864:	2700      	movs	r7, #0
 801b866:	b2ad      	uxth	r5, r5
 801b868:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b86c:	6801      	ldr	r1, [r0, #0]
 801b86e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b872:	f8cd b00c 	str.w	fp, [sp, #12]
 801b876:	9501      	str	r5, [sp, #4]
 801b878:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801b87c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801b880:	9402      	str	r4, [sp, #8]
 801b882:	fa1f f488 	uxth.w	r4, r8
 801b886:	9400      	str	r4, [sp, #0]
 801b888:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801b88a:	4631      	mov	r1, r6
 801b88c:	47a0      	blx	r4
 801b88e:	b00b      	add	sp, #44	; 0x2c
 801b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b894:	f010 0f04 	tst.w	r0, #4
 801b898:	e7e1      	b.n	801b85e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801b89a:	f8d9 0000 	ldr.w	r0, [r9]
 801b89e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801b8a2:	6803      	ldr	r3, [r0, #0]
 801b8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8a6:	4798      	blx	r3
 801b8a8:	4b43      	ldr	r3, [pc, #268]	; (801b9b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801b8aa:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b8ae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b8b2:	881a      	ldrh	r2, [r3, #0]
 801b8b4:	469a      	mov	sl, r3
 801b8b6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b8ba:	fb05 f502 	mul.w	r5, r5, r2
 801b8be:	fb02 1404 	mla	r4, r2, r4, r1
 801b8c2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b8c6:	d059      	beq.n	801b97c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801b8c8:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801b8cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b8d0:	fa1f f28b 	uxth.w	r2, fp
 801b8d4:	469e      	mov	lr, r3
 801b8d6:	fa1f f989 	uxth.w	r9, r9
 801b8da:	42ac      	cmp	r4, r5
 801b8dc:	d264      	bcs.n	801b9a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b8de:	eb04 0a07 	add.w	sl, r4, r7
 801b8e2:	4554      	cmp	r4, sl
 801b8e4:	d23d      	bcs.n	801b962 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801b8e6:	8821      	ldrh	r1, [r4, #0]
 801b8e8:	f836 3b02 	ldrh.w	r3, [r6], #2
 801b8ec:	1208      	asrs	r0, r1, #8
 801b8ee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b8f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b8f6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801b8fa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b8fe:	00c9      	lsls	r1, r1, #3
 801b900:	fb10 f009 	smulbb	r0, r0, r9
 801b904:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801b908:	b2c9      	uxtb	r1, r1
 801b90a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b90e:	10d8      	asrs	r0, r3, #3
 801b910:	fb1b fb09 	smulbb	fp, fp, r9
 801b914:	00db      	lsls	r3, r3, #3
 801b916:	fa1f fc8c 	uxth.w	ip, ip
 801b91a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b91e:	fb11 f109 	smulbb	r1, r1, r9
 801b922:	b2db      	uxtb	r3, r3
 801b924:	fb00 b002 	mla	r0, r0, r2, fp
 801b928:	f10c 0b01 	add.w	fp, ip, #1
 801b92c:	fb03 1302 	mla	r3, r3, r2, r1
 801b930:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b934:	b29b      	uxth	r3, r3
 801b936:	b280      	uxth	r0, r0
 801b938:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801b93c:	f103 0c01 	add.w	ip, r3, #1
 801b940:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b944:	1c43      	adds	r3, r0, #1
 801b946:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b94a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b94e:	0940      	lsrs	r0, r0, #5
 801b950:	ea4c 0c0b 	orr.w	ip, ip, fp
 801b954:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b958:	ea4c 0c00 	orr.w	ip, ip, r0
 801b95c:	f824 cb02 	strh.w	ip, [r4], #2
 801b960:	e7bf      	b.n	801b8e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801b962:	f8be 3000 	ldrh.w	r3, [lr]
 801b966:	eba3 0308 	sub.w	r3, r3, r8
 801b96a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b96e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b972:	eba3 0308 	sub.w	r3, r3, r8
 801b976:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b97a:	e7ae      	b.n	801b8da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801b97c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b980:	f8d9 0000 	ldr.w	r0, [r9]
 801b984:	42ac      	cmp	r4, r5
 801b986:	6803      	ldr	r3, [r0, #0]
 801b988:	d20e      	bcs.n	801b9a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b98a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801b98e:	4632      	mov	r2, r6
 801b990:	463b      	mov	r3, r7
 801b992:	4621      	mov	r1, r4
 801b994:	47c0      	blx	r8
 801b996:	f8ba 3000 	ldrh.w	r3, [sl]
 801b99a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b99e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b9a2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b9a6:	e7eb      	b.n	801b980 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801b9a8:	4b02      	ldr	r3, [pc, #8]	; (801b9b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b9aa:	6818      	ldr	r0, [r3, #0]
 801b9ac:	6803      	ldr	r3, [r0, #0]
 801b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9b0:	4798      	blx	r3
 801b9b2:	e76c      	b.n	801b88e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b9b4:	20014690 	.word	0x20014690
 801b9b8:	2001468a 	.word	0x2001468a

0801b9bc <_ZN8touchgfx8LCD16bppD0Ev>:
 801b9bc:	b510      	push	{r4, lr}
 801b9be:	4604      	mov	r4, r0
 801b9c0:	2188      	movs	r1, #136	; 0x88
 801b9c2:	f002 fad9 	bl	801df78 <_ZdlPvj>
 801b9c6:	4620      	mov	r0, r4
 801b9c8:	bd10      	pop	{r4, pc}
	...

0801b9cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9d0:	b091      	sub	sp, #68	; 0x44
 801b9d2:	469b      	mov	fp, r3
 801b9d4:	4616      	mov	r6, r2
 801b9d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b9da:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801b9de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b9e2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801b9e6:	4604      	mov	r4, r0
 801b9e8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801b9ec:	4640      	mov	r0, r8
 801b9ee:	460d      	mov	r5, r1
 801b9f0:	4659      	mov	r1, fp
 801b9f2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b9f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b9fa:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801b9fe:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801ba02:	f7fa f841 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 801ba06:	4631      	mov	r1, r6
 801ba08:	4640      	mov	r0, r8
 801ba0a:	f7fa f83d 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 801ba0e:	4b74      	ldr	r3, [pc, #464]	; (801bbe0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801ba10:	8818      	ldrh	r0, [r3, #0]
 801ba12:	4b74      	ldr	r3, [pc, #464]	; (801bbe4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801ba14:	b202      	sxth	r2, r0
 801ba16:	8819      	ldrh	r1, [r3, #0]
 801ba18:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ba1c:	b20e      	sxth	r6, r1
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	da07      	bge.n	801ba32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801ba22:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801ba26:	4463      	add	r3, ip
 801ba28:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801ba32:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ba36:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ba3a:	1ad2      	subs	r2, r2, r3
 801ba3c:	4594      	cmp	ip, r2
 801ba3e:	bfc4      	itt	gt
 801ba40:	1ac2      	subgt	r2, r0, r3
 801ba42:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801ba46:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ba4a:	2a00      	cmp	r2, #0
 801ba4c:	da07      	bge.n	801ba5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801ba4e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801ba52:	4462      	add	r2, ip
 801ba54:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801ba58:	2200      	movs	r2, #0
 801ba5a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801ba5e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801ba62:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801ba66:	eba6 060a 	sub.w	r6, r6, sl
 801ba6a:	42b2      	cmp	r2, r6
 801ba6c:	bfc4      	itt	gt
 801ba6e:	eba1 020a 	subgt.w	r2, r1, sl
 801ba72:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801ba76:	4a5c      	ldr	r2, [pc, #368]	; (801bbe8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801ba78:	7812      	ldrb	r2, [r2, #0]
 801ba7a:	b9a2      	cbnz	r2, 801baa6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801ba7c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801ba80:	4286      	cmp	r6, r0
 801ba82:	4640      	mov	r0, r8
 801ba84:	9303      	str	r3, [sp, #12]
 801ba86:	bf14      	ite	ne
 801ba88:	2600      	movne	r6, #0
 801ba8a:	2601      	moveq	r6, #1
 801ba8c:	f7fd fede 	bl	801984c <_ZNK8touchgfx4Rect7isEmptyEv>
 801ba90:	9b03      	ldr	r3, [sp, #12]
 801ba92:	b160      	cbz	r0, 801baae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801ba94:	2300      	movs	r3, #0
 801ba96:	8023      	strh	r3, [r4, #0]
 801ba98:	8063      	strh	r3, [r4, #2]
 801ba9a:	80a3      	strh	r3, [r4, #4]
 801ba9c:	4620      	mov	r0, r4
 801ba9e:	80e3      	strh	r3, [r4, #6]
 801baa0:	b011      	add	sp, #68	; 0x44
 801baa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baa6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801baaa:	428e      	cmp	r6, r1
 801baac:	e7e9      	b.n	801ba82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801baae:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801bab2:	a90e      	add	r1, sp, #56	; 0x38
 801bab4:	900e      	str	r0, [sp, #56]	; 0x38
 801bab6:	a80c      	add	r0, sp, #48	; 0x30
 801bab8:	9205      	str	r2, [sp, #20]
 801baba:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801babe:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801bac2:	9206      	str	r2, [sp, #24]
 801bac4:	f8bb 2000 	ldrh.w	r2, [fp]
 801bac8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801bacc:	1a9b      	subs	r3, r3, r2
 801bace:	b21b      	sxth	r3, r3
 801bad0:	9303      	str	r3, [sp, #12]
 801bad2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801bad6:	f8df b118 	ldr.w	fp, [pc, #280]	; 801bbf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801bada:	ebaa 0a03 	sub.w	sl, sl, r3
 801bade:	fa0f f38a 	sxth.w	r3, sl
 801bae2:	9304      	str	r3, [sp, #16]
 801bae4:	9b03      	ldr	r3, [sp, #12]
 801bae6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801baea:	9b04      	ldr	r3, [sp, #16]
 801baec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801baf0:	9b05      	ldr	r3, [sp, #20]
 801baf2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801baf6:	9b06      	ldr	r3, [sp, #24]
 801baf8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801bafc:	f7fd fe8e 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb00:	4640      	mov	r0, r8
 801bb02:	f7fd fe63 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb06:	a80e      	add	r0, sp, #56	; 0x38
 801bb08:	f7fd fe60 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb0c:	4b37      	ldr	r3, [pc, #220]	; (801bbec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801bb0e:	4628      	mov	r0, r5
 801bb10:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801bb14:	881b      	ldrh	r3, [r3, #0]
 801bb16:	9307      	str	r3, [sp, #28]
 801bb18:	682b      	ldr	r3, [r5, #0]
 801bb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb1c:	4798      	blx	r3
 801bb1e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801bb22:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801bb26:	4681      	mov	r9, r0
 801bb28:	f8db 0000 	ldr.w	r0, [fp]
 801bb2c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801bb30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801bb32:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801bb36:	6803      	ldr	r3, [r0, #0]
 801bb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb3a:	4798      	blx	r3
 801bb3c:	4607      	mov	r7, r0
 801bb3e:	f8db 0000 	ldr.w	r0, [fp]
 801bb42:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801bb46:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801bb4a:	6803      	ldr	r3, [r0, #0]
 801bb4c:	9109      	str	r1, [sp, #36]	; 0x24
 801bb4e:	9208      	str	r2, [sp, #32]
 801bb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb52:	4798      	blx	r3
 801bb54:	f010 0f01 	tst.w	r0, #1
 801bb58:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801bb5c:	d012      	beq.n	801bb84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801bb5e:	f8db 0000 	ldr.w	r0, [fp]
 801bb62:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801bb66:	6803      	ldr	r3, [r0, #0]
 801bb68:	9200      	str	r2, [sp, #0]
 801bb6a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801bb6c:	462b      	mov	r3, r5
 801bb6e:	e898 0006 	ldmia.w	r8, {r1, r2}
 801bb72:	47b0      	blx	r6
 801bb74:	9b03      	ldr	r3, [sp, #12]
 801bb76:	8023      	strh	r3, [r4, #0]
 801bb78:	9b04      	ldr	r3, [sp, #16]
 801bb7a:	8063      	strh	r3, [r4, #2]
 801bb7c:	9b05      	ldr	r3, [sp, #20]
 801bb7e:	80a3      	strh	r3, [r4, #4]
 801bb80:	9b06      	ldr	r3, [sp, #24]
 801bb82:	e78b      	b.n	801ba9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801bb84:	fb09 f202 	mul.w	r2, r9, r2
 801bb88:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801bb8c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801bb90:	440f      	add	r7, r1
 801bb92:	b166      	cbz	r6, 801bbae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801bb94:	9a07      	ldr	r2, [sp, #28]
 801bb96:	4592      	cmp	sl, r2
 801bb98:	d109      	bne.n	801bbae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801bb9a:	f8db 0000 	ldr.w	r0, [fp]
 801bb9e:	fb09 f303 	mul.w	r3, r9, r3
 801bba2:	4629      	mov	r1, r5
 801bba4:	6802      	ldr	r2, [r0, #0]
 801bba6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801bba8:	463a      	mov	r2, r7
 801bbaa:	47b0      	blx	r6
 801bbac:	e7e2      	b.n	801bb74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801bbae:	fb0a f303 	mul.w	r3, sl, r3
 801bbb2:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801bbb6:	f8df b038 	ldr.w	fp, [pc, #56]	; 801bbf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801bbba:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801bbbe:	4545      	cmp	r5, r8
 801bbc0:	d2d8      	bcs.n	801bb74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801bbc2:	f8db 0000 	ldr.w	r0, [fp]
 801bbc6:	4629      	mov	r1, r5
 801bbc8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801bbcc:	4435      	add	r5, r6
 801bbce:	6802      	ldr	r2, [r0, #0]
 801bbd0:	005b      	lsls	r3, r3, #1
 801bbd2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801bbd6:	463a      	mov	r2, r7
 801bbd8:	47d0      	blx	sl
 801bbda:	444f      	add	r7, r9
 801bbdc:	e7ef      	b.n	801bbbe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801bbde:	bf00      	nop
 801bbe0:	20014684 	.word	0x20014684
 801bbe4:	20014686 	.word	0x20014686
 801bbe8:	20014688 	.word	0x20014688
 801bbec:	2001468a 	.word	0x2001468a
 801bbf0:	20014690 	.word	0x20014690

0801bbf4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbf6:	4606      	mov	r6, r0
 801bbf8:	b087      	sub	sp, #28
 801bbfa:	460c      	mov	r4, r1
 801bbfc:	4617      	mov	r7, r2
 801bbfe:	461d      	mov	r5, r3
 801bc00:	b333      	cbz	r3, 801bc50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801bc02:	4608      	mov	r0, r1
 801bc04:	f7fd fe22 	bl	801984c <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc08:	bb10      	cbnz	r0, 801bc50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801bc0a:	6820      	ldr	r0, [r4, #0]
 801bc0c:	ab04      	add	r3, sp, #16
 801bc0e:	6861      	ldr	r1, [r4, #4]
 801bc10:	4c1b      	ldr	r4, [pc, #108]	; (801bc80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801bc12:	c303      	stmia	r3!, {r0, r1}
 801bc14:	a804      	add	r0, sp, #16
 801bc16:	f7fd fdd9 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bc1a:	6820      	ldr	r0, [r4, #0]
 801bc1c:	6803      	ldr	r3, [r0, #0]
 801bc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc20:	4798      	blx	r3
 801bc22:	2dff      	cmp	r5, #255	; 0xff
 801bc24:	d016      	beq.n	801bc54 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801bc26:	f010 0f08 	tst.w	r0, #8
 801bc2a:	6820      	ldr	r0, [r4, #0]
 801bc2c:	d015      	beq.n	801bc5a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801bc2e:	2400      	movs	r4, #0
 801bc30:	6801      	ldr	r1, [r0, #0]
 801bc32:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bc36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bc3a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801bc3e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801bc42:	9401      	str	r4, [sp, #4]
 801bc44:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801bc48:	9400      	str	r4, [sp, #0]
 801bc4a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801bc4c:	4639      	mov	r1, r7
 801bc4e:	47a0      	blx	r4
 801bc50:	b007      	add	sp, #28
 801bc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc54:	f010 0f02 	tst.w	r0, #2
 801bc58:	e7e7      	b.n	801bc2a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801bc5a:	6803      	ldr	r3, [r0, #0]
 801bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc5e:	4798      	blx	r3
 801bc60:	4b08      	ldr	r3, [pc, #32]	; (801bc84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801bc62:	4601      	mov	r1, r0
 801bc64:	4630      	mov	r0, r6
 801bc66:	881a      	ldrh	r2, [r3, #0]
 801bc68:	6833      	ldr	r3, [r6, #0]
 801bc6a:	e9cd 7500 	strd	r7, r5, [sp]
 801bc6e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801bc70:	ab04      	add	r3, sp, #16
 801bc72:	47a8      	blx	r5
 801bc74:	6820      	ldr	r0, [r4, #0]
 801bc76:	6803      	ldr	r3, [r0, #0]
 801bc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc7a:	4798      	blx	r3
 801bc7c:	e7e8      	b.n	801bc50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801bc7e:	bf00      	nop
 801bc80:	20014690 	.word	0x20014690
 801bc84:	2001468a 	.word	0x2001468a

0801bc88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801bc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc8c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801bc90:	4688      	mov	r8, r1
 801bc92:	4614      	mov	r4, r2
 801bc94:	461d      	mov	r5, r3
 801bc96:	9e08      	ldr	r6, [sp, #32]
 801bc98:	2f00      	cmp	r7, #0
 801bc9a:	f000 80ab 	beq.w	801bdf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bc9e:	4618      	mov	r0, r3
 801bca0:	f7fd fdd4 	bl	801984c <_ZNK8touchgfx4Rect7isEmptyEv>
 801bca4:	2800      	cmp	r0, #0
 801bca6:	f040 80a5 	bne.w	801bdf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bcaa:	f9b5 1000 	ldrsh.w	r1, [r5]
 801bcae:	2fff      	cmp	r7, #255	; 0xff
 801bcb0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bcb4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801bcb8:	fb04 1303 	mla	r3, r4, r3, r1
 801bcbc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801bcc0:	eba4 0200 	sub.w	r2, r4, r0
 801bcc4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801bcc8:	fb04 f505 	mul.w	r5, r4, r5
 801bccc:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801bcd0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801bcd4:	d04a      	beq.n	801bd6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801bcd6:	b2bc      	uxth	r4, r7
 801bcd8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801bcdc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801bce0:	fa5f f788 	uxtb.w	r7, r8
 801bce4:	b2f3      	uxtb	r3, r6
 801bce6:	0040      	lsls	r0, r0, #1
 801bce8:	fb0e fe04 	mul.w	lr, lr, r4
 801bcec:	4367      	muls	r7, r4
 801bcee:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801bcf2:	4363      	muls	r3, r4
 801bcf4:	fa1f fc8c 	uxth.w	ip, ip
 801bcf8:	42a9      	cmp	r1, r5
 801bcfa:	d27b      	bcs.n	801bdf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bcfc:	eb01 0900 	add.w	r9, r1, r0
 801bd00:	4549      	cmp	r1, r9
 801bd02:	d231      	bcs.n	801bd68 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801bd04:	880a      	ldrh	r2, [r1, #0]
 801bd06:	1214      	asrs	r4, r2, #8
 801bd08:	10d6      	asrs	r6, r2, #3
 801bd0a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801bd0e:	00d2      	lsls	r2, r2, #3
 801bd10:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bd14:	b2d2      	uxtb	r2, r2
 801bd16:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801bd1a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bd1e:	fb14 f40c 	smulbb	r4, r4, ip
 801bd22:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801bd26:	fb12 f20c 	smulbb	r2, r2, ip
 801bd2a:	fb16 f60c 	smulbb	r6, r6, ip
 801bd2e:	4474      	add	r4, lr
 801bd30:	441a      	add	r2, r3
 801bd32:	b2a4      	uxth	r4, r4
 801bd34:	443e      	add	r6, r7
 801bd36:	b292      	uxth	r2, r2
 801bd38:	f104 0a01 	add.w	sl, r4, #1
 801bd3c:	b2b6      	uxth	r6, r6
 801bd3e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801bd42:	f102 0a01 	add.w	sl, r2, #1
 801bd46:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801bd4a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801bd4e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bd52:	4322      	orrs	r2, r4
 801bd54:	1c74      	adds	r4, r6, #1
 801bd56:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801bd5a:	0976      	lsrs	r6, r6, #5
 801bd5c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bd60:	4332      	orrs	r2, r6
 801bd62:	f821 2b02 	strh.w	r2, [r1], #2
 801bd66:	e7cb      	b.n	801bd00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801bd68:	4441      	add	r1, r8
 801bd6a:	e7c5      	b.n	801bcf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801bd6c:	0973      	lsrs	r3, r6, #5
 801bd6e:	4f22      	ldr	r7, [pc, #136]	; (801bdf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801bd70:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bd74:	ea08 0707 	and.w	r7, r8, r7
 801bd78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bd7c:	433b      	orrs	r3, r7
 801bd7e:	07e7      	lsls	r7, r4, #31
 801bd80:	ea43 0306 	orr.w	r3, r3, r6
 801bd84:	b29b      	uxth	r3, r3
 801bd86:	d50b      	bpl.n	801bda0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801bd88:	0040      	lsls	r0, r0, #1
 801bd8a:	0052      	lsls	r2, r2, #1
 801bd8c:	42a9      	cmp	r1, r5
 801bd8e:	d231      	bcs.n	801bdf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bd90:	180c      	adds	r4, r1, r0
 801bd92:	42a1      	cmp	r1, r4
 801bd94:	d202      	bcs.n	801bd9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801bd96:	f821 3b02 	strh.w	r3, [r1], #2
 801bd9a:	e7fa      	b.n	801bd92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801bd9c:	4411      	add	r1, r2
 801bd9e:	e7f5      	b.n	801bd8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801bda0:	078e      	lsls	r6, r1, #30
 801bda2:	d008      	beq.n	801bdb6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801bda4:	0066      	lsls	r6, r4, #1
 801bda6:	460a      	mov	r2, r1
 801bda8:	42aa      	cmp	r2, r5
 801bdaa:	d202      	bcs.n	801bdb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801bdac:	8013      	strh	r3, [r2, #0]
 801bdae:	4432      	add	r2, r6
 801bdb0:	e7fa      	b.n	801bda8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801bdb2:	3102      	adds	r1, #2
 801bdb4:	3801      	subs	r0, #1
 801bdb6:	07c2      	lsls	r2, r0, #31
 801bdb8:	d50b      	bpl.n	801bdd2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801bdba:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801bdbe:	0066      	lsls	r6, r4, #1
 801bdc0:	3a01      	subs	r2, #1
 801bdc2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801bdc6:	42aa      	cmp	r2, r5
 801bdc8:	d202      	bcs.n	801bdd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801bdca:	8013      	strh	r3, [r2, #0]
 801bdcc:	4432      	add	r2, r6
 801bdce:	e7fa      	b.n	801bdc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801bdd0:	3801      	subs	r0, #1
 801bdd2:	b178      	cbz	r0, 801bdf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bdd4:	1040      	asrs	r0, r0, #1
 801bdd6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801bdda:	0080      	lsls	r0, r0, #2
 801bddc:	0064      	lsls	r4, r4, #1
 801bdde:	42a9      	cmp	r1, r5
 801bde0:	d208      	bcs.n	801bdf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bde2:	180e      	adds	r6, r1, r0
 801bde4:	460a      	mov	r2, r1
 801bde6:	42b2      	cmp	r2, r6
 801bde8:	d202      	bcs.n	801bdf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801bdea:	f842 3b04 	str.w	r3, [r2], #4
 801bdee:	e7fa      	b.n	801bde6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801bdf0:	4421      	add	r1, r4
 801bdf2:	e7f4      	b.n	801bdde <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801bdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdf8:	00fff800 	.word	0x00fff800

0801bdfc <_ZN8touchgfx8LCD16bppC1Ev>:
 801bdfc:	2200      	movs	r2, #0
 801bdfe:	4912      	ldr	r1, [pc, #72]	; (801be48 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801be00:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801be04:	6001      	str	r1, [r0, #0]
 801be06:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801be0a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801be0e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801be12:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 801be16:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801be1a:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
 801be1e:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801be22:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
 801be26:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
 801be2a:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 801be2e:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 801be32:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
 801be36:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
 801be3a:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
 801be3e:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
 801be42:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801be46:	4770      	bx	lr
 801be48:	08024134 	.word	0x08024134

0801be4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801be4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be50:	b08d      	sub	sp, #52	; 0x34
 801be52:	460d      	mov	r5, r1
 801be54:	4604      	mov	r4, r0
 801be56:	4699      	mov	r9, r3
 801be58:	6808      	ldr	r0, [r1, #0]
 801be5a:	ab08      	add	r3, sp, #32
 801be5c:	6849      	ldr	r1, [r1, #4]
 801be5e:	c303      	stmia	r3!, {r0, r1}
 801be60:	6810      	ldr	r0, [r2, #0]
 801be62:	ab0a      	add	r3, sp, #40	; 0x28
 801be64:	6851      	ldr	r1, [r2, #4]
 801be66:	c303      	stmia	r3!, {r0, r1}
 801be68:	a808      	add	r0, sp, #32
 801be6a:	f7fd fcaf 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be6e:	4629      	mov	r1, r5
 801be70:	a80a      	add	r0, sp, #40	; 0x28
 801be72:	4d67      	ldr	r5, [pc, #412]	; (801c010 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801be74:	f7fd fcd2 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be78:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801be7c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801be80:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801be84:	6828      	ldr	r0, [r5, #0]
 801be86:	fb11 2103 	smlabb	r1, r1, r3, r2
 801be8a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801be8e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801be92:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801be96:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801be9a:	440a      	add	r2, r1
 801be9c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bea0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bea4:	4413      	add	r3, r2
 801bea6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801beaa:	6803      	ldr	r3, [r0, #0]
 801beac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801beae:	4798      	blx	r3
 801beb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801beb4:	d119      	bne.n	801beea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801beb6:	f010 0f20 	tst.w	r0, #32
 801beba:	6828      	ldr	r0, [r5, #0]
 801bebc:	d018      	beq.n	801bef0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801bebe:	2500      	movs	r5, #0
 801bec0:	6801      	ldr	r1, [r0, #0]
 801bec2:	b2b6      	uxth	r6, r6
 801bec4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801bec8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801becc:	9601      	str	r6, [sp, #4]
 801bece:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801bed2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801bed6:	9502      	str	r5, [sp, #8]
 801bed8:	fa1f f588 	uxth.w	r5, r8
 801bedc:	9500      	str	r5, [sp, #0]
 801bede:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801bee0:	4621      	mov	r1, r4
 801bee2:	47a8      	blx	r5
 801bee4:	b00d      	add	sp, #52	; 0x34
 801bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beea:	f010 0f40 	tst.w	r0, #64	; 0x40
 801beee:	e7e4      	b.n	801beba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801bef0:	6803      	ldr	r3, [r0, #0]
 801bef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bef4:	4798      	blx	r3
 801bef6:	4947      	ldr	r1, [pc, #284]	; (801c014 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801bef8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801befc:	880b      	ldrh	r3, [r1, #0]
 801befe:	468a      	mov	sl, r1
 801bf00:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801bf04:	fb03 5202 	mla	r2, r3, r2, r5
 801bf08:	4373      	muls	r3, r6
 801bf0a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bf0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bf12:	9307      	str	r3, [sp, #28]
 801bf14:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801bf18:	9306      	str	r3, [sp, #24]
 801bf1a:	9b07      	ldr	r3, [sp, #28]
 801bf1c:	4298      	cmp	r0, r3
 801bf1e:	d270      	bcs.n	801c002 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801bf20:	9b06      	ldr	r3, [sp, #24]
 801bf22:	4621      	mov	r1, r4
 801bf24:	eb00 0b03 	add.w	fp, r0, r3
 801bf28:	4558      	cmp	r0, fp
 801bf2a:	d25d      	bcs.n	801bfe8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801bf2c:	f851 4b04 	ldr.w	r4, [r1], #4
 801bf30:	0e23      	lsrs	r3, r4, #24
 801bf32:	d014      	beq.n	801bf5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801bf34:	2bff      	cmp	r3, #255	; 0xff
 801bf36:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801bf3a:	d112      	bne.n	801bf62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801bf3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bf40:	d10f      	bne.n	801bf62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801bf42:	0963      	lsrs	r3, r4, #5
 801bf44:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801bf48:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bf4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bf50:	f02c 0c07 	bic.w	ip, ip, #7
 801bf54:	ea43 0c0c 	orr.w	ip, r3, ip
 801bf58:	ea4c 0404 	orr.w	r4, ip, r4
 801bf5c:	8004      	strh	r4, [r0, #0]
 801bf5e:	3002      	adds	r0, #2
 801bf60:	e7e2      	b.n	801bf28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801bf62:	fb09 f303 	mul.w	r3, r9, r3
 801bf66:	8807      	ldrh	r7, [r0, #0]
 801bf68:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801bf6c:	fa5f fc8c 	uxtb.w	ip, ip
 801bf70:	1c5a      	adds	r2, r3, #1
 801bf72:	123e      	asrs	r6, r7, #8
 801bf74:	10fd      	asrs	r5, r7, #3
 801bf76:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801bf7a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bf7e:	00ff      	lsls	r7, r7, #3
 801bf80:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bf84:	1212      	asrs	r2, r2, #8
 801bf86:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801bf8a:	b293      	uxth	r3, r2
 801bf8c:	43d2      	mvns	r2, r2
 801bf8e:	b2ff      	uxtb	r7, r7
 801bf90:	fb1e fe03 	smulbb	lr, lr, r3
 801bf94:	b2d2      	uxtb	r2, r2
 801bf96:	fb1c fc03 	smulbb	ip, ip, r3
 801bf9a:	b2e4      	uxtb	r4, r4
 801bf9c:	fb06 e602 	mla	r6, r6, r2, lr
 801bfa0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801bfa4:	fb14 f403 	smulbb	r4, r4, r3
 801bfa8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801bfac:	b2b6      	uxth	r6, r6
 801bfae:	fb05 c502 	mla	r5, r5, r2, ip
 801bfb2:	fb07 4702 	mla	r7, r7, r2, r4
 801bfb6:	f106 0e01 	add.w	lr, r6, #1
 801bfba:	b2ad      	uxth	r5, r5
 801bfbc:	b2bf      	uxth	r7, r7
 801bfbe:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801bfc2:	f105 0c01 	add.w	ip, r5, #1
 801bfc6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801bfca:	1c7e      	adds	r6, r7, #1
 801bfcc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801bfd0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801bfd4:	096d      	lsrs	r5, r5, #5
 801bfd6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bfda:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bfde:	ea46 060e 	orr.w	r6, r6, lr
 801bfe2:	432e      	orrs	r6, r5
 801bfe4:	8006      	strh	r6, [r0, #0]
 801bfe6:	e7ba      	b.n	801bf5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801bfe8:	f8ba 3000 	ldrh.w	r3, [sl]
 801bfec:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801bff0:	eba3 0308 	sub.w	r3, r3, r8
 801bff4:	eba4 0408 	sub.w	r4, r4, r8
 801bff8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bffc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801c000:	e78b      	b.n	801bf1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801c002:	4b03      	ldr	r3, [pc, #12]	; (801c010 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801c004:	6818      	ldr	r0, [r3, #0]
 801c006:	6803      	ldr	r3, [r0, #0]
 801c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c00a:	4798      	blx	r3
 801c00c:	e76a      	b.n	801bee4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801c00e:	bf00      	nop
 801c010:	20014690 	.word	0x20014690
 801c014:	2001468a 	.word	0x2001468a

0801c018 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801c018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c01c:	b085      	sub	sp, #20
 801c01e:	6810      	ldr	r0, [r2, #0]
 801c020:	460c      	mov	r4, r1
 801c022:	6851      	ldr	r1, [r2, #4]
 801c024:	466d      	mov	r5, sp
 801c026:	4616      	mov	r6, r2
 801c028:	c503      	stmia	r5!, {r0, r1}
 801c02a:	6818      	ldr	r0, [r3, #0]
 801c02c:	6859      	ldr	r1, [r3, #4]
 801c02e:	c503      	stmia	r5!, {r0, r1}
 801c030:	4668      	mov	r0, sp
 801c032:	4d2e      	ldr	r5, [pc, #184]	; (801c0ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801c034:	f7fd fbca 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c038:	4631      	mov	r1, r6
 801c03a:	a802      	add	r0, sp, #8
 801c03c:	4e2c      	ldr	r6, [pc, #176]	; (801c0f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801c03e:	f7fd fbed 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c042:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801c046:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801c04a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801c04e:	6828      	ldr	r0, [r5, #0]
 801c050:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c054:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c058:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801c05c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c060:	f8bd 1000 	ldrh.w	r1, [sp]
 801c064:	440a      	add	r2, r1
 801c066:	f8ad 2008 	strh.w	r2, [sp, #8]
 801c06a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c06e:	4413      	add	r3, r2
 801c070:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c074:	6803      	ldr	r3, [r0, #0]
 801c076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c078:	4798      	blx	r3
 801c07a:	8833      	ldrh	r3, [r6, #0]
 801c07c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c080:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801c084:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c088:	f8df e068 	ldr.w	lr, [pc, #104]	; 801c0f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801c08c:	fb03 1202 	mla	r2, r3, r2, r1
 801c090:	fb08 f303 	mul.w	r3, r8, r3
 801c094:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c098:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c09c:	4298      	cmp	r0, r3
 801c09e:	d21d      	bcs.n	801c0dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801c0a0:	eb00 080c 	add.w	r8, r0, ip
 801c0a4:	4540      	cmp	r0, r8
 801c0a6:	d20f      	bcs.n	801c0c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801c0a8:	f854 1b04 	ldr.w	r1, [r4], #4
 801c0ac:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801c0b0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801c0b4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801c0b8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c0bc:	ea42 0209 	orr.w	r2, r2, r9
 801c0c0:	430a      	orrs	r2, r1
 801c0c2:	f820 2b02 	strh.w	r2, [r0], #2
 801c0c6:	e7ed      	b.n	801c0a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801c0c8:	8832      	ldrh	r2, [r6, #0]
 801c0ca:	1bd2      	subs	r2, r2, r7
 801c0cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c0d0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801c0d4:	1bd2      	subs	r2, r2, r7
 801c0d6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801c0da:	e7df      	b.n	801c09c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801c0dc:	6828      	ldr	r0, [r5, #0]
 801c0de:	6803      	ldr	r3, [r0, #0]
 801c0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0e2:	4798      	blx	r3
 801c0e4:	b005      	add	sp, #20
 801c0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0ea:	bf00      	nop
 801c0ec:	20014690 	.word	0x20014690
 801c0f0:	2001468a 	.word	0x2001468a
 801c0f4:	fffff800 	.word	0xfffff800

0801c0f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801c0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0fc:	b08e      	sub	sp, #56	; 0x38
 801c0fe:	460e      	mov	r6, r1
 801c100:	4604      	mov	r4, r0
 801c102:	461d      	mov	r5, r3
 801c104:	6808      	ldr	r0, [r1, #0]
 801c106:	ab0a      	add	r3, sp, #40	; 0x28
 801c108:	6849      	ldr	r1, [r1, #4]
 801c10a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801c2e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801c10e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801c2e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801c112:	c303      	stmia	r3!, {r0, r1}
 801c114:	6810      	ldr	r0, [r2, #0]
 801c116:	ab0c      	add	r3, sp, #48	; 0x30
 801c118:	6851      	ldr	r1, [r2, #4]
 801c11a:	c303      	stmia	r3!, {r0, r1}
 801c11c:	a80a      	add	r0, sp, #40	; 0x28
 801c11e:	f7fd fb55 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c122:	4631      	mov	r1, r6
 801c124:	a80c      	add	r0, sp, #48	; 0x30
 801c126:	f7fd fb79 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c12a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801c12e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c132:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c136:	f8d8 0000 	ldr.w	r0, [r8]
 801c13a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c13e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801c142:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801c146:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c14a:	440c      	add	r4, r1
 801c14c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801c150:	440a      	add	r2, r1
 801c152:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801c156:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801c15a:	4413      	add	r3, r2
 801c15c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c160:	6803      	ldr	r3, [r0, #0]
 801c162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c164:	4798      	blx	r3
 801c166:	2dff      	cmp	r5, #255	; 0xff
 801c168:	d124      	bne.n	801c1b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801c16a:	f010 0f01 	tst.w	r0, #1
 801c16e:	f8d8 0000 	ldr.w	r0, [r8]
 801c172:	d022      	beq.n	801c1ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801c174:	2100      	movs	r1, #0
 801c176:	f04f 0e01 	mov.w	lr, #1
 801c17a:	f8d0 c000 	ldr.w	ip, [r0]
 801c17e:	b2b6      	uxth	r6, r6
 801c180:	f8cd e018 	str.w	lr, [sp, #24]
 801c184:	b2bf      	uxth	r7, r7
 801c186:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801c18a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801c18e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801c192:	f8b9 e000 	ldrh.w	lr, [r9]
 801c196:	9503      	str	r5, [sp, #12]
 801c198:	9601      	str	r6, [sp, #4]
 801c19a:	9700      	str	r7, [sp, #0]
 801c19c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801c1a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c1a4:	9102      	str	r1, [sp, #8]
 801c1a6:	4621      	mov	r1, r4
 801c1a8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801c1ac:	47a8      	blx	r5
 801c1ae:	b00e      	add	sp, #56	; 0x38
 801c1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1b4:	f010 0f04 	tst.w	r0, #4
 801c1b8:	e7d9      	b.n	801c16e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801c1ba:	6803      	ldr	r3, [r0, #0]
 801c1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1be:	4798      	blx	r3
 801c1c0:	f8b9 3000 	ldrh.w	r3, [r9]
 801c1c4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c1c8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801c1cc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c1d0:	435e      	muls	r6, r3
 801c1d2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c1d6:	2dff      	cmp	r5, #255	; 0xff
 801c1d8:	fb03 1202 	mla	r2, r3, r2, r1
 801c1dc:	ebac 0c07 	sub.w	ip, ip, r7
 801c1e0:	eba3 0707 	sub.w	r7, r3, r7
 801c1e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c1e8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c1ec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c1f0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801c1f4:	d049      	beq.n	801c28a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801c1f6:	43eb      	mvns	r3, r5
 801c1f8:	fa1f f985 	uxth.w	r9, r5
 801c1fc:	b2db      	uxtb	r3, r3
 801c1fe:	42b0      	cmp	r0, r6
 801c200:	d266      	bcs.n	801c2d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801c202:	eb00 0a0e 	add.w	sl, r0, lr
 801c206:	4550      	cmp	r0, sl
 801c208:	4621      	mov	r1, r4
 801c20a:	f104 0403 	add.w	r4, r4, #3
 801c20e:	d25b      	bcs.n	801c2c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801c210:	8802      	ldrh	r2, [r0, #0]
 801c212:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801c216:	ea4f 2822 	mov.w	r8, r2, asr #8
 801c21a:	fb11 f109 	smulbb	r1, r1, r9
 801c21e:	10d5      	asrs	r5, r2, #3
 801c220:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801c224:	00d2      	lsls	r2, r2, #3
 801c226:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c22a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801c22e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c232:	fb08 1803 	mla	r8, r8, r3, r1
 801c236:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801c23a:	b2d2      	uxtb	r2, r2
 801c23c:	fb11 f109 	smulbb	r1, r1, r9
 801c240:	fa1f f888 	uxth.w	r8, r8
 801c244:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c248:	fb05 1503 	mla	r5, r5, r3, r1
 801c24c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801c250:	fb11 f109 	smulbb	r1, r1, r9
 801c254:	b2ad      	uxth	r5, r5
 801c256:	fb02 1203 	mla	r2, r2, r3, r1
 801c25a:	f108 0101 	add.w	r1, r8, #1
 801c25e:	b292      	uxth	r2, r2
 801c260:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801c264:	1c51      	adds	r1, r2, #1
 801c266:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801c26a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c26e:	1c69      	adds	r1, r5, #1
 801c270:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801c274:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c278:	096d      	lsrs	r5, r5, #5
 801c27a:	ea42 0208 	orr.w	r2, r2, r8
 801c27e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c282:	432a      	orrs	r2, r5
 801c284:	f820 2b02 	strh.w	r2, [r0], #2
 801c288:	e7bd      	b.n	801c206 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801c28a:	4a14      	ldr	r2, [pc, #80]	; (801c2dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801c28c:	42b0      	cmp	r0, r6
 801c28e:	d21f      	bcs.n	801c2d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801c290:	eb00 050e 	add.w	r5, r0, lr
 801c294:	42a8      	cmp	r0, r5
 801c296:	4621      	mov	r1, r4
 801c298:	f104 0403 	add.w	r4, r4, #3
 801c29c:	d210      	bcs.n	801c2c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801c29e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801c2a2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801c2a6:	00db      	lsls	r3, r3, #3
 801c2a8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801c2ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c2b0:	430b      	orrs	r3, r1
 801c2b2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801c2b6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801c2ba:	f820 3b02 	strh.w	r3, [r0], #2
 801c2be:	e7e9      	b.n	801c294 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801c2c0:	4438      	add	r0, r7
 801c2c2:	eb01 040c 	add.w	r4, r1, ip
 801c2c6:	e7e1      	b.n	801c28c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801c2c8:	4438      	add	r0, r7
 801c2ca:	eb01 040c 	add.w	r4, r1, ip
 801c2ce:	e796      	b.n	801c1fe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801c2d0:	4b03      	ldr	r3, [pc, #12]	; (801c2e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801c2d2:	6818      	ldr	r0, [r3, #0]
 801c2d4:	6803      	ldr	r3, [r0, #0]
 801c2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2d8:	4798      	blx	r3
 801c2da:	e768      	b.n	801c1ae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801c2dc:	fffff800 	.word	0xfffff800
 801c2e0:	20014690 	.word	0x20014690
 801c2e4:	2001468a 	.word	0x2001468a

0801c2e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c2e8:	b4f0      	push	{r4, r5, r6, r7}
 801c2ea:	4616      	mov	r6, r2
 801c2ec:	461c      	mov	r4, r3
 801c2ee:	460d      	mov	r5, r1
 801c2f0:	9a04      	ldr	r2, [sp, #16]
 801c2f2:	2e01      	cmp	r6, #1
 801c2f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c2f8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801c2fc:	d012      	beq.n	801c324 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801c2fe:	d303      	bcc.n	801c308 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801c300:	2e02      	cmp	r6, #2
 801c302:	d00a      	beq.n	801c31a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801c304:	bcf0      	pop	{r4, r5, r6, r7}
 801c306:	4770      	bx	lr
 801c308:	6805      	ldr	r5, [r0, #0]
 801c30a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801c30e:	68ed      	ldr	r5, [r5, #12]
 801c310:	4613      	mov	r3, r2
 801c312:	4622      	mov	r2, r4
 801c314:	46ac      	mov	ip, r5
 801c316:	bcf0      	pop	{r4, r5, r6, r7}
 801c318:	4760      	bx	ip
 801c31a:	4621      	mov	r1, r4
 801c31c:	4628      	mov	r0, r5
 801c31e:	bcf0      	pop	{r4, r5, r6, r7}
 801c320:	f7ff bd94 	b.w	801be4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c324:	4621      	mov	r1, r4
 801c326:	4628      	mov	r0, r5
 801c328:	bcf0      	pop	{r4, r5, r6, r7}
 801c32a:	f7ff bee5 	b.w	801c0f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801c330 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c334:	b093      	sub	sp, #76	; 0x4c
 801c336:	4681      	mov	r9, r0
 801c338:	4688      	mov	r8, r1
 801c33a:	6810      	ldr	r0, [r2, #0]
 801c33c:	6851      	ldr	r1, [r2, #4]
 801c33e:	ac0e      	add	r4, sp, #56	; 0x38
 801c340:	4616      	mov	r6, r2
 801c342:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801c346:	4f6b      	ldr	r7, [pc, #428]	; (801c4f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801c348:	c403      	stmia	r4!, {r0, r1}
 801c34a:	6818      	ldr	r0, [r3, #0]
 801c34c:	ac10      	add	r4, sp, #64	; 0x40
 801c34e:	6859      	ldr	r1, [r3, #4]
 801c350:	c403      	stmia	r4!, {r0, r1}
 801c352:	a80e      	add	r0, sp, #56	; 0x38
 801c354:	f7fd fa3a 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c358:	4631      	mov	r1, r6
 801c35a:	a810      	add	r0, sp, #64	; 0x40
 801c35c:	4e66      	ldr	r6, [pc, #408]	; (801c4f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801c35e:	f7fd fa5d 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c362:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c366:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c36a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c36e:	6830      	ldr	r0, [r6, #0]
 801c370:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c374:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801c378:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801c37c:	4489      	add	r9, r1
 801c37e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c382:	440a      	add	r2, r1
 801c384:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c388:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c38c:	4413      	add	r3, r2
 801c38e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c392:	6803      	ldr	r3, [r0, #0]
 801c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c396:	4798      	blx	r3
 801c398:	f010 0f80 	tst.w	r0, #128	; 0x80
 801c39c:	6830      	ldr	r0, [r6, #0]
 801c39e:	d01d      	beq.n	801c3dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	6801      	ldr	r1, [r0, #0]
 801c3a4:	b2a4      	uxth	r4, r4
 801c3a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c3aa:	b2ad      	uxth	r5, r5
 801c3ac:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801c3b0:	220b      	movs	r2, #11
 801c3b2:	9207      	str	r2, [sp, #28]
 801c3b4:	883a      	ldrh	r2, [r7, #0]
 801c3b6:	9502      	str	r5, [sp, #8]
 801c3b8:	9206      	str	r2, [sp, #24]
 801c3ba:	2201      	movs	r2, #1
 801c3bc:	9401      	str	r4, [sp, #4]
 801c3be:	e9cd a204 	strd	sl, r2, [sp, #16]
 801c3c2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c3c6:	9203      	str	r2, [sp, #12]
 801c3c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c3cc:	9200      	str	r2, [sp, #0]
 801c3ce:	4642      	mov	r2, r8
 801c3d0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801c3d2:	4649      	mov	r1, r9
 801c3d4:	47a0      	blx	r4
 801c3d6:	b013      	add	sp, #76	; 0x4c
 801c3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3dc:	6803      	ldr	r3, [r0, #0]
 801c3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3e0:	4798      	blx	r3
 801c3e2:	883b      	ldrh	r3, [r7, #0]
 801c3e4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c3e8:	f04f 0e04 	mov.w	lr, #4
 801c3ec:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801c3f0:	435d      	muls	r5, r3
 801c3f2:	fb03 1202 	mla	r2, r3, r2, r1
 801c3f6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c3fa:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801c3fe:	920c      	str	r2, [sp, #48]	; 0x30
 801c400:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801c404:	1b12      	subs	r2, r2, r4
 801c406:	920d      	str	r2, [sp, #52]	; 0x34
 801c408:	0062      	lsls	r2, r4, #1
 801c40a:	1b1c      	subs	r4, r3, r4
 801c40c:	920a      	str	r2, [sp, #40]	; 0x28
 801c40e:	0063      	lsls	r3, r4, #1
 801c410:	930b      	str	r3, [sp, #44]	; 0x2c
 801c412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c414:	4298      	cmp	r0, r3
 801c416:	d266      	bcs.n	801c4e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801c418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c41a:	eb00 0b03 	add.w	fp, r0, r3
 801c41e:	4558      	cmp	r0, fp
 801c420:	d25c      	bcs.n	801c4dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801c422:	f819 3b01 	ldrb.w	r3, [r9], #1
 801c426:	fb1e e303 	smlabb	r3, lr, r3, lr
 801c42a:	f858 2003 	ldr.w	r2, [r8, r3]
 801c42e:	0e11      	lsrs	r1, r2, #24
 801c430:	d012      	beq.n	801c458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c432:	29ff      	cmp	r1, #255	; 0xff
 801c434:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801c438:	d110      	bne.n	801c45c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c43a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c43e:	d10d      	bne.n	801c45c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c440:	0953      	lsrs	r3, r2, #5
 801c442:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801c446:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c44a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c44e:	f027 0707 	bic.w	r7, r7, #7
 801c452:	431f      	orrs	r7, r3
 801c454:	433a      	orrs	r2, r7
 801c456:	8002      	strh	r2, [r0, #0]
 801c458:	3002      	adds	r0, #2
 801c45a:	e7e0      	b.n	801c41e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801c45c:	fb0a f101 	mul.w	r1, sl, r1
 801c460:	8806      	ldrh	r6, [r0, #0]
 801c462:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801c466:	b2d2      	uxtb	r2, r2
 801c468:	1c4b      	adds	r3, r1, #1
 801c46a:	1235      	asrs	r5, r6, #8
 801c46c:	10f4      	asrs	r4, r6, #3
 801c46e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801c472:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c476:	00f6      	lsls	r6, r6, #3
 801c478:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801c47c:	121b      	asrs	r3, r3, #8
 801c47e:	b2f6      	uxtb	r6, r6
 801c480:	b299      	uxth	r1, r3
 801c482:	43db      	mvns	r3, r3
 801c484:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801c488:	fb1c fc01 	smulbb	ip, ip, r1
 801c48c:	b2db      	uxtb	r3, r3
 801c48e:	fb12 f201 	smulbb	r2, r2, r1
 801c492:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801c496:	fb05 c503 	mla	r5, r5, r3, ip
 801c49a:	b2ff      	uxtb	r7, r7
 801c49c:	fb06 2203 	mla	r2, r6, r3, r2
 801c4a0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801c4a4:	fb17 f701 	smulbb	r7, r7, r1
 801c4a8:	b2ad      	uxth	r5, r5
 801c4aa:	b292      	uxth	r2, r2
 801c4ac:	fb04 7403 	mla	r4, r4, r3, r7
 801c4b0:	f105 0c01 	add.w	ip, r5, #1
 801c4b4:	1c57      	adds	r7, r2, #1
 801c4b6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801c4ba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801c4be:	b2a4      	uxth	r4, r4
 801c4c0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c4c4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c4c8:	433d      	orrs	r5, r7
 801c4ca:	1c67      	adds	r7, r4, #1
 801c4cc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801c4d0:	0964      	lsrs	r4, r4, #5
 801c4d2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801c4d6:	4325      	orrs	r5, r4
 801c4d8:	8005      	strh	r5, [r0, #0]
 801c4da:	e7bd      	b.n	801c458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4de:	4418      	add	r0, r3
 801c4e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c4e2:	4499      	add	r9, r3
 801c4e4:	e795      	b.n	801c412 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801c4e6:	4b04      	ldr	r3, [pc, #16]	; (801c4f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801c4e8:	6818      	ldr	r0, [r3, #0]
 801c4ea:	6803      	ldr	r3, [r0, #0]
 801c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4ee:	4798      	blx	r3
 801c4f0:	e771      	b.n	801c3d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801c4f2:	bf00      	nop
 801c4f4:	2001468a 	.word	0x2001468a
 801c4f8:	20014690 	.word	0x20014690

0801c4fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c500:	b087      	sub	sp, #28
 801c502:	4680      	mov	r8, r0
 801c504:	460d      	mov	r5, r1
 801c506:	4614      	mov	r4, r2
 801c508:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801c50c:	2e00      	cmp	r6, #0
 801c50e:	f000 80b9 	beq.w	801c684 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801c512:	6810      	ldr	r0, [r2, #0]
 801c514:	af02      	add	r7, sp, #8
 801c516:	6851      	ldr	r1, [r2, #4]
 801c518:	c703      	stmia	r7!, {r0, r1}
 801c51a:	6818      	ldr	r0, [r3, #0]
 801c51c:	af04      	add	r7, sp, #16
 801c51e:	6859      	ldr	r1, [r3, #4]
 801c520:	c703      	stmia	r7!, {r0, r1}
 801c522:	a802      	add	r0, sp, #8
 801c524:	f7fd f952 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c528:	4621      	mov	r1, r4
 801c52a:	a804      	add	r0, sp, #16
 801c52c:	f7fd f976 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c530:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c534:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c538:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801c53c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801c540:	fb14 2103 	smlabb	r1, r4, r3, r2
 801c544:	eb08 0401 	add.w	r4, r8, r1
 801c548:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c54c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801c550:	440a      	add	r2, r1
 801c552:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801c556:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c55a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c55e:	4413      	add	r3, r2
 801c560:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c564:	4b49      	ldr	r3, [pc, #292]	; (801c68c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801c566:	6818      	ldr	r0, [r3, #0]
 801c568:	6803      	ldr	r3, [r0, #0]
 801c56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c56c:	4798      	blx	r3
 801c56e:	4b48      	ldr	r3, [pc, #288]	; (801c690 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801c570:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801c574:	2eff      	cmp	r6, #255	; 0xff
 801c576:	881a      	ldrh	r2, [r3, #0]
 801c578:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801c57c:	fb02 c101 	mla	r1, r2, r1, ip
 801c580:	fb02 f207 	mul.w	r2, r2, r7
 801c584:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c588:	f105 0104 	add.w	r1, r5, #4
 801c58c:	461d      	mov	r5, r3
 801c58e:	d05a      	beq.n	801c646 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801c590:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801c594:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c598:	b2b6      	uxth	r6, r6
 801c59a:	9301      	str	r3, [sp, #4]
 801c59c:	fa1f fe8e 	uxth.w	lr, lr
 801c5a0:	4282      	cmp	r2, r0
 801c5a2:	d96a      	bls.n	801c67a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801c5a4:	eb00 0b0a 	add.w	fp, r0, sl
 801c5a8:	4583      	cmp	fp, r0
 801c5aa:	d940      	bls.n	801c62e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801c5ac:	8805      	ldrh	r5, [r0, #0]
 801c5ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c5b2:	122f      	asrs	r7, r5, #8
 801c5b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801c5b8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c5bc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c5c0:	00ed      	lsls	r5, r5, #3
 801c5c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c5c6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801c5ca:	fb17 f70e 	smulbb	r7, r7, lr
 801c5ce:	b2ed      	uxtb	r5, r5
 801c5d0:	fb19 f90e 	smulbb	r9, r9, lr
 801c5d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c5d8:	fb15 f50e 	smulbb	r5, r5, lr
 801c5dc:	fb0c 7c06 	mla	ip, ip, r6, r7
 801c5e0:	10df      	asrs	r7, r3, #3
 801c5e2:	00db      	lsls	r3, r3, #3
 801c5e4:	fa1f fc8c 	uxth.w	ip, ip
 801c5e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c5ec:	b2db      	uxtb	r3, r3
 801c5ee:	fb07 9706 	mla	r7, r7, r6, r9
 801c5f2:	f10c 0901 	add.w	r9, ip, #1
 801c5f6:	fb03 5306 	mla	r3, r3, r6, r5
 801c5fa:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801c5fe:	b29b      	uxth	r3, r3
 801c600:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801c604:	b2bf      	uxth	r7, r7
 801c606:	f103 0c01 	add.w	ip, r3, #1
 801c60a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c60e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c612:	ea4c 0c09 	orr.w	ip, ip, r9
 801c616:	f107 0901 	add.w	r9, r7, #1
 801c61a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801c61e:	097f      	lsrs	r7, r7, #5
 801c620:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c624:	ea4c 0c07 	orr.w	ip, ip, r7
 801c628:	f820 cb02 	strh.w	ip, [r0], #2
 801c62c:	e7bc      	b.n	801c5a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801c62e:	9b01      	ldr	r3, [sp, #4]
 801c630:	881b      	ldrh	r3, [r3, #0]
 801c632:	eba3 0308 	sub.w	r3, r3, r8
 801c636:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c63a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c63e:	eba3 0308 	sub.w	r3, r3, r8
 801c642:	441c      	add	r4, r3
 801c644:	e7ac      	b.n	801c5a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801c646:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c64a:	4282      	cmp	r2, r0
 801c64c:	d915      	bls.n	801c67a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801c64e:	eb00 060a 	add.w	r6, r0, sl
 801c652:	4286      	cmp	r6, r0
 801c654:	d906      	bls.n	801c664 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801c656:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c65a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801c65e:	f820 3b02 	strh.w	r3, [r0], #2
 801c662:	e7f6      	b.n	801c652 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801c664:	882b      	ldrh	r3, [r5, #0]
 801c666:	eba3 0308 	sub.w	r3, r3, r8
 801c66a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c66e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c672:	eba3 0308 	sub.w	r3, r3, r8
 801c676:	441c      	add	r4, r3
 801c678:	e7e7      	b.n	801c64a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801c67a:	4b04      	ldr	r3, [pc, #16]	; (801c68c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801c67c:	6818      	ldr	r0, [r3, #0]
 801c67e:	6803      	ldr	r3, [r0, #0]
 801c680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c682:	4798      	blx	r3
 801c684:	b007      	add	sp, #28
 801c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c68a:	bf00      	nop
 801c68c:	20014690 	.word	0x20014690
 801c690:	2001468a 	.word	0x2001468a

0801c694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801c694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c698:	b091      	sub	sp, #68	; 0x44
 801c69a:	4680      	mov	r8, r0
 801c69c:	460f      	mov	r7, r1
 801c69e:	4614      	mov	r4, r2
 801c6a0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801c6a4:	2d00      	cmp	r5, #0
 801c6a6:	d051      	beq.n	801c74c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801c6a8:	6810      	ldr	r0, [r2, #0]
 801c6aa:	ae0c      	add	r6, sp, #48	; 0x30
 801c6ac:	6851      	ldr	r1, [r2, #4]
 801c6ae:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801c8b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801c6b2:	c603      	stmia	r6!, {r0, r1}
 801c6b4:	6818      	ldr	r0, [r3, #0]
 801c6b6:	ae0e      	add	r6, sp, #56	; 0x38
 801c6b8:	6859      	ldr	r1, [r3, #4]
 801c6ba:	c603      	stmia	r6!, {r0, r1}
 801c6bc:	a80c      	add	r0, sp, #48	; 0x30
 801c6be:	f7fd f885 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c6c2:	4621      	mov	r1, r4
 801c6c4:	a80e      	add	r0, sp, #56	; 0x38
 801c6c6:	f7fd f8a9 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c6ca:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c6ce:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c6d2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c6d6:	f8d9 0000 	ldr.w	r0, [r9]
 801c6da:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c6de:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801c6e2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801c6e6:	eb08 0401 	add.w	r4, r8, r1
 801c6ea:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801c6ee:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801c8b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801c6f2:	440a      	add	r2, r1
 801c6f4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801c6f8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c6fc:	4413      	add	r3, r2
 801c6fe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c702:	6803      	ldr	r3, [r0, #0]
 801c704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c706:	4798      	blx	r3
 801c708:	f010 0f80 	tst.w	r0, #128	; 0x80
 801c70c:	f8d9 0000 	ldr.w	r0, [r9]
 801c710:	d01f      	beq.n	801c752 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801c712:	2200      	movs	r2, #0
 801c714:	6801      	ldr	r1, [r0, #0]
 801c716:	b2b6      	uxth	r6, r6
 801c718:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c71c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801c720:	220b      	movs	r2, #11
 801c722:	9207      	str	r2, [sp, #28]
 801c724:	f8b8 2000 	ldrh.w	r2, [r8]
 801c728:	9601      	str	r6, [sp, #4]
 801c72a:	9206      	str	r2, [sp, #24]
 801c72c:	2201      	movs	r2, #1
 801c72e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801c732:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801c736:	9203      	str	r2, [sp, #12]
 801c738:	fa1f f28a 	uxth.w	r2, sl
 801c73c:	9202      	str	r2, [sp, #8]
 801c73e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c742:	9200      	str	r2, [sp, #0]
 801c744:	463a      	mov	r2, r7
 801c746:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801c748:	4621      	mov	r1, r4
 801c74a:	47a8      	blx	r5
 801c74c:	b011      	add	sp, #68	; 0x44
 801c74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801c758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c75a:	4798      	blx	r3
 801c75c:	f8b8 2000 	ldrh.w	r2, [r8]
 801c760:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c764:	2dff      	cmp	r5, #255	; 0xff
 801c766:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801c76a:	fb0a fa02 	mul.w	sl, sl, r2
 801c76e:	fb02 1303 	mla	r3, r2, r3, r1
 801c772:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c776:	d062      	beq.n	801c83e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801c778:	ea6f 0c05 	mvn.w	ip, r5
 801c77c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801c780:	b2ad      	uxth	r5, r5
 801c782:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801c786:	fa5f fc8c 	uxtb.w	ip, ip
 801c78a:	930a      	str	r3, [sp, #40]	; 0x28
 801c78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c78e:	4298      	cmp	r0, r3
 801c790:	f080 8085 	bcs.w	801c89e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801c794:	eb00 0b09 	add.w	fp, r0, r9
 801c798:	4558      	cmp	r0, fp
 801c79a:	d246      	bcs.n	801c82a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801c79c:	f814 eb01 	ldrb.w	lr, [r4], #1
 801c7a0:	2303      	movs	r3, #3
 801c7a2:	2204      	movs	r2, #4
 801c7a4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801c7a8:	8803      	ldrh	r3, [r0, #0]
 801c7aa:	eb07 0a0e 	add.w	sl, r7, lr
 801c7ae:	1219      	asrs	r1, r3, #8
 801c7b0:	10da      	asrs	r2, r3, #3
 801c7b2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c7b6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801c7ba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c7be:	00db      	lsls	r3, r3, #3
 801c7c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c7c4:	fb18 f805 	smulbb	r8, r8, r5
 801c7c8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801c7cc:	fb1e fe05 	smulbb	lr, lr, r5
 801c7d0:	b2db      	uxtb	r3, r3
 801c7d2:	fb01 810c 	mla	r1, r1, ip, r8
 801c7d6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801c7da:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801c7de:	fb18 f805 	smulbb	r8, r8, r5
 801c7e2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801c7e6:	b289      	uxth	r1, r1
 801c7e8:	fb02 820c 	mla	r2, r2, ip, r8
 801c7ec:	fb03 e30c 	mla	r3, r3, ip, lr
 801c7f0:	f101 0801 	add.w	r8, r1, #1
 801c7f4:	b292      	uxth	r2, r2
 801c7f6:	b29b      	uxth	r3, r3
 801c7f8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c7fc:	f102 0801 	add.w	r8, r2, #1
 801c800:	f103 0e01 	add.w	lr, r3, #1
 801c804:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801c808:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801c80c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801c810:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c814:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801c818:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c81c:	ea4e 0101 	orr.w	r1, lr, r1
 801c820:	ea41 0108 	orr.w	r1, r1, r8
 801c824:	f820 1b02 	strh.w	r1, [r0], #2
 801c828:	e7b6      	b.n	801c798 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801c82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c82c:	881b      	ldrh	r3, [r3, #0]
 801c82e:	1b9b      	subs	r3, r3, r6
 801c830:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c834:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c838:	1b9b      	subs	r3, r3, r6
 801c83a:	441c      	add	r4, r3
 801c83c:	e7a6      	b.n	801c78c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801c83e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801c842:	2203      	movs	r2, #3
 801c844:	2504      	movs	r5, #4
 801c846:	4919      	ldr	r1, [pc, #100]	; (801c8ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801c848:	4550      	cmp	r0, sl
 801c84a:	d228      	bcs.n	801c89e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801c84c:	eb00 0c09 	add.w	ip, r0, r9
 801c850:	4560      	cmp	r0, ip
 801c852:	4623      	mov	r3, r4
 801c854:	d219      	bcs.n	801c88a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801c856:	f893 e000 	ldrb.w	lr, [r3]
 801c85a:	3401      	adds	r4, #1
 801c85c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801c860:	eb07 0b0e 	add.w	fp, r7, lr
 801c864:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c868:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c86c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c870:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801c874:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801c878:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c87c:	ea43 030b 	orr.w	r3, r3, fp
 801c880:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801c884:	f820 3b02 	strh.w	r3, [r0], #2
 801c888:	e7e2      	b.n	801c850 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801c88a:	f8b8 3000 	ldrh.w	r3, [r8]
 801c88e:	1b9b      	subs	r3, r3, r6
 801c890:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c894:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c898:	1b9b      	subs	r3, r3, r6
 801c89a:	441c      	add	r4, r3
 801c89c:	e7d4      	b.n	801c848 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801c89e:	4b04      	ldr	r3, [pc, #16]	; (801c8b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801c8a0:	6818      	ldr	r0, [r3, #0]
 801c8a2:	6803      	ldr	r3, [r0, #0]
 801c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8a6:	4798      	blx	r3
 801c8a8:	e750      	b.n	801c74c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801c8aa:	bf00      	nop
 801c8ac:	fffff800 	.word	0xfffff800
 801c8b0:	20014690 	.word	0x20014690
 801c8b4:	2001468a 	.word	0x2001468a

0801c8b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801c8b8:	b4f0      	push	{r4, r5, r6, r7}
 801c8ba:	460c      	mov	r4, r1
 801c8bc:	4611      	mov	r1, r2
 801c8be:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c8c2:	461a      	mov	r2, r3
 801c8c4:	780f      	ldrb	r7, [r1, #0]
 801c8c6:	9b04      	ldr	r3, [sp, #16]
 801c8c8:	2f01      	cmp	r7, #1
 801c8ca:	784e      	ldrb	r6, [r1, #1]
 801c8cc:	d038      	beq.n	801c940 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 801c8ce:	d31f      	bcc.n	801c910 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 801c8d0:	2f02      	cmp	r7, #2
 801c8d2:	d14d      	bne.n	801c970 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c8d4:	2e03      	cmp	r6, #3
 801c8d6:	d84b      	bhi.n	801c970 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c8d8:	e8df f006 	tbb	[pc, r6]
 801c8dc:	17140702 	.word	0x17140702
 801c8e0:	9504      	str	r5, [sp, #16]
 801c8e2:	4620      	mov	r0, r4
 801c8e4:	bcf0      	pop	{r4, r5, r6, r7}
 801c8e6:	f7ff be09 	b.w	801c4fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801c8ea:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801c8ec:	2800      	cmp	r0, #0
 801c8ee:	d03f      	beq.n	801c970 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c8f0:	6806      	ldr	r6, [r0, #0]
 801c8f2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c8f6:	68b5      	ldr	r5, [r6, #8]
 801c8f8:	4613      	mov	r3, r2
 801c8fa:	46ac      	mov	ip, r5
 801c8fc:	460a      	mov	r2, r1
 801c8fe:	4621      	mov	r1, r4
 801c900:	bcf0      	pop	{r4, r5, r6, r7}
 801c902:	4760      	bx	ip
 801c904:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801c908:	e7f0      	b.n	801c8ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c90a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 801c90e:	e7ed      	b.n	801c8ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c910:	2e03      	cmp	r6, #3
 801c912:	d82d      	bhi.n	801c970 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c914:	e8df f006 	tbb	[pc, r6]
 801c918:	110e0702 	.word	0x110e0702
 801c91c:	9504      	str	r5, [sp, #16]
 801c91e:	4620      	mov	r0, r4
 801c920:	bcf0      	pop	{r4, r5, r6, r7}
 801c922:	f7ff bd05 	b.w	801c330 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801c926:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801c928:	b310      	cbz	r0, 801c970 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c92a:	6806      	ldr	r6, [r0, #0]
 801c92c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c930:	68f5      	ldr	r5, [r6, #12]
 801c932:	e7e1      	b.n	801c8f8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801c934:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801c938:	e7f6      	b.n	801c928 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801c93a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 801c93e:	e7f3      	b.n	801c928 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801c940:	2e03      	cmp	r6, #3
 801c942:	d815      	bhi.n	801c970 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c944:	e8df f006 	tbb	[pc, r6]
 801c948:	110e0702 	.word	0x110e0702
 801c94c:	9504      	str	r5, [sp, #16]
 801c94e:	4620      	mov	r0, r4
 801c950:	bcf0      	pop	{r4, r5, r6, r7}
 801c952:	f7ff be9f 	b.w	801c694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801c956:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801c958:	b150      	cbz	r0, 801c970 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801c95a:	6806      	ldr	r6, [r0, #0]
 801c95c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c960:	6935      	ldr	r5, [r6, #16]
 801c962:	e7c9      	b.n	801c8f8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801c964:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801c968:	e7f6      	b.n	801c958 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801c96a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 801c96e:	e7f3      	b.n	801c958 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801c970:	bcf0      	pop	{r4, r5, r6, r7}
 801c972:	4770      	bx	lr

0801c974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c978:	b087      	sub	sp, #28
 801c97a:	4604      	mov	r4, r0
 801c97c:	460e      	mov	r6, r1
 801c97e:	6810      	ldr	r0, [r2, #0]
 801c980:	6851      	ldr	r1, [r2, #4]
 801c982:	ad02      	add	r5, sp, #8
 801c984:	4617      	mov	r7, r2
 801c986:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801c98a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801cbbc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801c98e:	c503      	stmia	r5!, {r0, r1}
 801c990:	6818      	ldr	r0, [r3, #0]
 801c992:	ad04      	add	r5, sp, #16
 801c994:	6859      	ldr	r1, [r3, #4]
 801c996:	c503      	stmia	r5!, {r0, r1}
 801c998:	a802      	add	r0, sp, #8
 801c99a:	f7fc ff17 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c99e:	4639      	mov	r1, r7
 801c9a0:	a804      	add	r0, sp, #16
 801c9a2:	f7fc ff3b 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c9a6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c9aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c9ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c9b2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801c9b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c9ba:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801c9be:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c9c2:	440e      	add	r6, r1
 801c9c4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c9c8:	440a      	add	r2, r1
 801c9ca:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c9ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c9d2:	4413      	add	r3, r2
 801c9d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c9d8:	4b77      	ldr	r3, [pc, #476]	; (801cbb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801c9da:	6818      	ldr	r0, [r3, #0]
 801c9dc:	6803      	ldr	r3, [r0, #0]
 801c9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9e0:	4798      	blx	r3
 801c9e2:	f8b9 b000 	ldrh.w	fp, [r9]
 801c9e6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c9ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c9ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c9f2:	fb05 f50b 	mul.w	r5, r5, fp
 801c9f6:	fb0b 2303 	mla	r3, fp, r3, r2
 801c9fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c9fe:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801ca02:	9300      	str	r3, [sp, #0]
 801ca04:	d069      	beq.n	801cada <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801ca06:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801ca0a:	4558      	cmp	r0, fp
 801ca0c:	f080 80cc 	bcs.w	801cba8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801ca10:	9b00      	ldr	r3, [sp, #0]
 801ca12:	4631      	mov	r1, r6
 801ca14:	18c3      	adds	r3, r0, r3
 801ca16:	9301      	str	r3, [sp, #4]
 801ca18:	9b01      	ldr	r3, [sp, #4]
 801ca1a:	4298      	cmp	r0, r3
 801ca1c:	d24f      	bcs.n	801cabe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801ca1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ca22:	2a00      	cmp	r2, #0
 801ca24:	d048      	beq.n	801cab8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ca26:	fb0a f202 	mul.w	r2, sl, r2
 801ca2a:	1c53      	adds	r3, r2, #1
 801ca2c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ca30:	121b      	asrs	r3, r3, #8
 801ca32:	d041      	beq.n	801cab8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ca34:	8802      	ldrh	r2, [r0, #0]
 801ca36:	b29e      	uxth	r6, r3
 801ca38:	f8b4 c000 	ldrh.w	ip, [r4]
 801ca3c:	43db      	mvns	r3, r3
 801ca3e:	1215      	asrs	r5, r2, #8
 801ca40:	b2db      	uxtb	r3, r3
 801ca42:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ca46:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ca4a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801ca4e:	fb15 f503 	smulbb	r5, r5, r3
 801ca52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ca56:	00d2      	lsls	r2, r2, #3
 801ca58:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ca5c:	fb07 5706 	mla	r7, r7, r6, r5
 801ca60:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ca64:	b2d2      	uxtb	r2, r2
 801ca66:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ca6a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ca6e:	fb1e fe03 	smulbb	lr, lr, r3
 801ca72:	b2bf      	uxth	r7, r7
 801ca74:	fb12 f203 	smulbb	r2, r2, r3
 801ca78:	fa5f fc8c 	uxtb.w	ip, ip
 801ca7c:	fb05 e506 	mla	r5, r5, r6, lr
 801ca80:	f107 0e01 	add.w	lr, r7, #1
 801ca84:	fb0c 2c06 	mla	ip, ip, r6, r2
 801ca88:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ca8c:	fa1f fc8c 	uxth.w	ip, ip
 801ca90:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801ca94:	b2ad      	uxth	r5, r5
 801ca96:	f10c 0701 	add.w	r7, ip, #1
 801ca9a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ca9e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801caa2:	ea47 070e 	orr.w	r7, r7, lr
 801caa6:	f105 0e01 	add.w	lr, r5, #1
 801caaa:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801caae:	096d      	lsrs	r5, r5, #5
 801cab0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cab4:	432f      	orrs	r7, r5
 801cab6:	8007      	strh	r7, [r0, #0]
 801cab8:	3002      	adds	r0, #2
 801caba:	3402      	adds	r4, #2
 801cabc:	e7ac      	b.n	801ca18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801cabe:	f8b9 3000 	ldrh.w	r3, [r9]
 801cac2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801cac6:	eba3 0308 	sub.w	r3, r3, r8
 801caca:	eba6 0608 	sub.w	r6, r6, r8
 801cace:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cad2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801cad6:	440e      	add	r6, r1
 801cad8:	e797      	b.n	801ca0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801cada:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801cade:	42a8      	cmp	r0, r5
 801cae0:	d262      	bcs.n	801cba8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801cae2:	9b00      	ldr	r3, [sp, #0]
 801cae4:	4631      	mov	r1, r6
 801cae6:	eb00 0b03 	add.w	fp, r0, r3
 801caea:	4558      	cmp	r0, fp
 801caec:	d24e      	bcs.n	801cb8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801caee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801caf2:	b12b      	cbz	r3, 801cb00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801caf4:	2bff      	cmp	r3, #255	; 0xff
 801caf6:	f8b4 e000 	ldrh.w	lr, [r4]
 801cafa:	d104      	bne.n	801cb06 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801cafc:	f8a0 e000 	strh.w	lr, [r0]
 801cb00:	3002      	adds	r0, #2
 801cb02:	3402      	adds	r4, #2
 801cb04:	e7f1      	b.n	801caea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801cb06:	8802      	ldrh	r2, [r0, #0]
 801cb08:	b29f      	uxth	r7, r3
 801cb0a:	43db      	mvns	r3, r3
 801cb0c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cb10:	1216      	asrs	r6, r2, #8
 801cb12:	b2db      	uxtb	r3, r3
 801cb14:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cb18:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cb1c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801cb20:	00d2      	lsls	r2, r2, #3
 801cb22:	fb16 f603 	smulbb	r6, r6, r3
 801cb26:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cb2a:	b2d2      	uxtb	r2, r2
 801cb2c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cb30:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cb34:	fb1a fa03 	smulbb	sl, sl, r3
 801cb38:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cb3c:	fa1f fc8c 	uxth.w	ip, ip
 801cb40:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cb44:	fb12 f303 	smulbb	r3, r2, r3
 801cb48:	fa5f fe8e 	uxtb.w	lr, lr
 801cb4c:	fb06 a607 	mla	r6, r6, r7, sl
 801cb50:	f10c 0201 	add.w	r2, ip, #1
 801cb54:	fb0e 3307 	mla	r3, lr, r7, r3
 801cb58:	b2b6      	uxth	r6, r6
 801cb5a:	b29b      	uxth	r3, r3
 801cb5c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801cb60:	f106 0a01 	add.w	sl, r6, #1
 801cb64:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801cb68:	f103 0c01 	add.w	ip, r3, #1
 801cb6c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801cb70:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801cb74:	0976      	lsrs	r6, r6, #5
 801cb76:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cb7a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cb7e:	ea4c 0c02 	orr.w	ip, ip, r2
 801cb82:	ea4c 0c06 	orr.w	ip, ip, r6
 801cb86:	f8a0 c000 	strh.w	ip, [r0]
 801cb8a:	e7b9      	b.n	801cb00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801cb8c:	f8b9 3000 	ldrh.w	r3, [r9]
 801cb90:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801cb94:	eba3 0308 	sub.w	r3, r3, r8
 801cb98:	eba6 0608 	sub.w	r6, r6, r8
 801cb9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cba0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801cba4:	440e      	add	r6, r1
 801cba6:	e79a      	b.n	801cade <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801cba8:	4b03      	ldr	r3, [pc, #12]	; (801cbb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801cbaa:	6818      	ldr	r0, [r3, #0]
 801cbac:	6803      	ldr	r3, [r0, #0]
 801cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbb0:	4798      	blx	r3
 801cbb2:	b007      	add	sp, #28
 801cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbb8:	20014690 	.word	0x20014690
 801cbbc:	2001468a 	.word	0x2001468a

0801cbc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbc4:	b089      	sub	sp, #36	; 0x24
 801cbc6:	4682      	mov	sl, r0
 801cbc8:	460f      	mov	r7, r1
 801cbca:	4691      	mov	r9, r2
 801cbcc:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801cbd0:	4698      	mov	r8, r3
 801cbd2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cbd4:	2e00      	cmp	r6, #0
 801cbd6:	d03d      	beq.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cbd8:	4608      	mov	r0, r1
 801cbda:	f7fe faff 	bl	801b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cbde:	4605      	mov	r5, r0
 801cbe0:	4638      	mov	r0, r7
 801cbe2:	f7fe fb2f 	bl	801b244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cbe6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801cbea:	4638      	mov	r0, r7
 801cbec:	f8ad 9008 	strh.w	r9, [sp, #8]
 801cbf0:	f8ad 500c 	strh.w	r5, [sp, #12]
 801cbf4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801cbf8:	f7fe fbdc 	bl	801b3b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cbfc:	4605      	mov	r5, r0
 801cbfe:	4638      	mov	r0, r7
 801cc00:	f7fe fc08 	bl	801b414 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801cc04:	4681      	mov	r9, r0
 801cc06:	4638      	mov	r0, r7
 801cc08:	f7fe fc58 	bl	801b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cc0c:	280b      	cmp	r0, #11
 801cc0e:	d821      	bhi.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cc10:	e8df f000 	tbb	[pc, r0]
 801cc14:	2006aebe 	.word	0x2006aebe
 801cc18:	20202020 	.word	0x20202020
 801cc1c:	b5202020 	.word	0xb5202020
 801cc20:	4bb0      	ldr	r3, [pc, #704]	; (801cee4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801cc22:	6818      	ldr	r0, [r3, #0]
 801cc24:	6803      	ldr	r3, [r0, #0]
 801cc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc28:	4798      	blx	r3
 801cc2a:	2eff      	cmp	r6, #255	; 0xff
 801cc2c:	d101      	bne.n	801cc32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801cc2e:	0683      	lsls	r3, r0, #26
 801cc30:	d506      	bpl.n	801cc40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 801cc32:	4633      	mov	r3, r6
 801cc34:	4622      	mov	r2, r4
 801cc36:	a902      	add	r1, sp, #8
 801cc38:	4628      	mov	r0, r5
 801cc3a:	f7ff f907 	bl	801be4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cc3e:	e009      	b.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cc40:	4638      	mov	r0, r7
 801cc42:	f7fe fb7f 	bl	801b344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801cc46:	b940      	cbnz	r0, 801cc5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801cc48:	4623      	mov	r3, r4
 801cc4a:	aa02      	add	r2, sp, #8
 801cc4c:	4629      	mov	r1, r5
 801cc4e:	4650      	mov	r0, sl
 801cc50:	f7ff f9e2 	bl	801c018 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801cc54:	b009      	add	sp, #36	; 0x24
 801cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc5a:	f10d 0818 	add.w	r8, sp, #24
 801cc5e:	4639      	mov	r1, r7
 801cc60:	af04      	add	r7, sp, #16
 801cc62:	4640      	mov	r0, r8
 801cc64:	f7fe fb22 	bl	801b2ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801cc68:	e898 0003 	ldmia.w	r8, {r0, r1}
 801cc6c:	e887 0003 	stmia.w	r7, {r0, r1}
 801cc70:	4638      	mov	r0, r7
 801cc72:	4621      	mov	r1, r4
 801cc74:	f7f8 ff08 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 801cc78:	4638      	mov	r0, r7
 801cc7a:	f7fc fde7 	bl	801984c <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc7e:	2800      	cmp	r0, #0
 801cc80:	d1d7      	bne.n	801cc32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801cc82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cc86:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cc8a:	4293      	cmp	r3, r2
 801cc8c:	dd12      	ble.n	801ccb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 801cc8e:	1a9b      	subs	r3, r3, r2
 801cc90:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cc94:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cc98:	f8ad 0018 	strh.w	r0, [sp, #24]
 801cc9c:	4628      	mov	r0, r5
 801cc9e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801cca2:	4642      	mov	r2, r8
 801cca4:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cca8:	a902      	add	r1, sp, #8
 801ccaa:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ccae:	4633      	mov	r3, r6
 801ccb0:	f7ff f8cc 	bl	801be4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ccb4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ccb8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ccbc:	4293      	cmp	r3, r2
 801ccbe:	dd12      	ble.n	801cce6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 801ccc0:	1a9b      	subs	r3, r3, r2
 801ccc2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ccc6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ccca:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ccce:	4642      	mov	r2, r8
 801ccd0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ccd4:	4628      	mov	r0, r5
 801ccd6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ccda:	23ff      	movs	r3, #255	; 0xff
 801ccdc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801cce0:	a902      	add	r1, sp, #8
 801cce2:	f7ff f8b3 	bl	801be4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cce6:	463b      	mov	r3, r7
 801cce8:	aa02      	add	r2, sp, #8
 801ccea:	4629      	mov	r1, r5
 801ccec:	4650      	mov	r0, sl
 801ccee:	f7ff f993 	bl	801c018 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801ccf2:	88a2      	ldrh	r2, [r4, #4]
 801ccf4:	8823      	ldrh	r3, [r4, #0]
 801ccf6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ccfa:	4413      	add	r3, r2
 801ccfc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cd00:	440a      	add	r2, r1
 801cd02:	b29b      	uxth	r3, r3
 801cd04:	b292      	uxth	r2, r2
 801cd06:	b218      	sxth	r0, r3
 801cd08:	b211      	sxth	r1, r2
 801cd0a:	4288      	cmp	r0, r1
 801cd0c:	dd12      	ble.n	801cd34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801cd0e:	1a9b      	subs	r3, r3, r2
 801cd10:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801cd14:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801cd18:	4642      	mov	r2, r8
 801cd1a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801cd1e:	a902      	add	r1, sp, #8
 801cd20:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cd24:	23ff      	movs	r3, #255	; 0xff
 801cd26:	f8ad 001e 	strh.w	r0, [sp, #30]
 801cd2a:	4628      	mov	r0, r5
 801cd2c:	f8ad 601a 	strh.w	r6, [sp, #26]
 801cd30:	f7ff f88c 	bl	801be4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cd34:	88e2      	ldrh	r2, [r4, #6]
 801cd36:	8863      	ldrh	r3, [r4, #2]
 801cd38:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801cd3c:	4413      	add	r3, r2
 801cd3e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801cd42:	440a      	add	r2, r1
 801cd44:	b29b      	uxth	r3, r3
 801cd46:	b292      	uxth	r2, r2
 801cd48:	b218      	sxth	r0, r3
 801cd4a:	b211      	sxth	r1, r2
 801cd4c:	4288      	cmp	r0, r1
 801cd4e:	dd81      	ble.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cd50:	1a9b      	subs	r3, r3, r2
 801cd52:	f9b4 6000 	ldrsh.w	r6, [r4]
 801cd56:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cd5a:	4642      	mov	r2, r8
 801cd5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cd60:	23ff      	movs	r3, #255	; 0xff
 801cd62:	f8ad 6018 	strh.w	r6, [sp, #24]
 801cd66:	f8ad 101a 	strh.w	r1, [sp, #26]
 801cd6a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801cd6e:	e762      	b.n	801cc36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801cd70:	4633      	mov	r3, r6
 801cd72:	4622      	mov	r2, r4
 801cd74:	a902      	add	r1, sp, #8
 801cd76:	4628      	mov	r0, r5
 801cd78:	f7ff f9be 	bl	801c0f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801cd7c:	e76a      	b.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cd7e:	e9cd 4600 	strd	r4, r6, [sp]
 801cd82:	ab02      	add	r3, sp, #8
 801cd84:	464a      	mov	r2, r9
 801cd86:	4629      	mov	r1, r5
 801cd88:	4650      	mov	r0, sl
 801cd8a:	f7ff fd95 	bl	801c8b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801cd8e:	e761      	b.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cd90:	4638      	mov	r0, r7
 801cd92:	f7fe fad7 	bl	801b344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801cd96:	b950      	cbnz	r0, 801cdae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 801cd98:	f8da 3000 	ldr.w	r3, [sl]
 801cd9c:	aa02      	add	r2, sp, #8
 801cd9e:	4629      	mov	r1, r5
 801cda0:	e9cd 6000 	strd	r6, r0, [sp]
 801cda4:	4650      	mov	r0, sl
 801cda6:	68de      	ldr	r6, [r3, #12]
 801cda8:	4623      	mov	r3, r4
 801cdaa:	47b0      	blx	r6
 801cdac:	e752      	b.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cdae:	f10d 0818 	add.w	r8, sp, #24
 801cdb2:	4639      	mov	r1, r7
 801cdb4:	af04      	add	r7, sp, #16
 801cdb6:	4640      	mov	r0, r8
 801cdb8:	f7fe fa78 	bl	801b2ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801cdbc:	e898 0003 	ldmia.w	r8, {r0, r1}
 801cdc0:	e887 0003 	stmia.w	r7, {r0, r1}
 801cdc4:	4638      	mov	r0, r7
 801cdc6:	4621      	mov	r1, r4
 801cdc8:	f7f8 fe5e 	bl	8015a88 <_ZN8touchgfx4RectaNERKS0_>
 801cdcc:	4638      	mov	r0, r7
 801cdce:	f7fc fd3d 	bl	801984c <_ZNK8touchgfx4Rect7isEmptyEv>
 801cdd2:	b138      	cbz	r0, 801cde4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801cdd4:	4623      	mov	r3, r4
 801cdd6:	9600      	str	r6, [sp, #0]
 801cdd8:	aa02      	add	r2, sp, #8
 801cdda:	4649      	mov	r1, r9
 801cddc:	4628      	mov	r0, r5
 801cdde:	f7ff fdc9 	bl	801c974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cde2:	e737      	b.n	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cde4:	f8da 3000 	ldr.w	r3, [sl]
 801cde8:	aa02      	add	r2, sp, #8
 801cdea:	4629      	mov	r1, r5
 801cdec:	e9cd 6000 	strd	r6, r0, [sp]
 801cdf0:	4650      	mov	r0, sl
 801cdf2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801cdf6:	463b      	mov	r3, r7
 801cdf8:	47d8      	blx	fp
 801cdfa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cdfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ce02:	4293      	cmp	r3, r2
 801ce04:	dd13      	ble.n	801ce2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 801ce06:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ce0a:	1a9b      	subs	r3, r3, r2
 801ce0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ce10:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ce14:	4628      	mov	r0, r5
 801ce16:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ce1a:	aa02      	add	r2, sp, #8
 801ce1c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ce20:	4649      	mov	r1, r9
 801ce22:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ce26:	4643      	mov	r3, r8
 801ce28:	9600      	str	r6, [sp, #0]
 801ce2a:	f7ff fda3 	bl	801c974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ce2e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ce32:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ce36:	4293      	cmp	r3, r2
 801ce38:	dd13      	ble.n	801ce62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 801ce3a:	1a9b      	subs	r3, r3, r2
 801ce3c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ce40:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ce44:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ce48:	aa02      	add	r2, sp, #8
 801ce4a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ce4e:	4628      	mov	r0, r5
 801ce50:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ce54:	4643      	mov	r3, r8
 801ce56:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ce5a:	4649      	mov	r1, r9
 801ce5c:	9600      	str	r6, [sp, #0]
 801ce5e:	f7ff fd89 	bl	801c974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ce62:	88a2      	ldrh	r2, [r4, #4]
 801ce64:	8823      	ldrh	r3, [r4, #0]
 801ce66:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ce6a:	4413      	add	r3, r2
 801ce6c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ce70:	440a      	add	r2, r1
 801ce72:	b29b      	uxth	r3, r3
 801ce74:	b292      	uxth	r2, r2
 801ce76:	b218      	sxth	r0, r3
 801ce78:	b211      	sxth	r1, r2
 801ce7a:	4288      	cmp	r0, r1
 801ce7c:	dd13      	ble.n	801cea6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 801ce7e:	1a9b      	subs	r3, r3, r2
 801ce80:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ce84:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801ce88:	aa02      	add	r2, sp, #8
 801ce8a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ce8e:	4649      	mov	r1, r9
 801ce90:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ce94:	4643      	mov	r3, r8
 801ce96:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ce9a:	4628      	mov	r0, r5
 801ce9c:	9600      	str	r6, [sp, #0]
 801ce9e:	f8ad 701a 	strh.w	r7, [sp, #26]
 801cea2:	f7ff fd67 	bl	801c974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cea6:	88e2      	ldrh	r2, [r4, #6]
 801cea8:	8863      	ldrh	r3, [r4, #2]
 801ceaa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ceae:	4413      	add	r3, r2
 801ceb0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ceb4:	440a      	add	r2, r1
 801ceb6:	b29b      	uxth	r3, r3
 801ceb8:	b292      	uxth	r2, r2
 801ceba:	b218      	sxth	r0, r3
 801cebc:	b211      	sxth	r1, r2
 801cebe:	4288      	cmp	r0, r1
 801cec0:	f77f aec8 	ble.w	801cc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801cec4:	f9b4 7000 	ldrsh.w	r7, [r4]
 801cec8:	1a9b      	subs	r3, r3, r2
 801ceca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cece:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ced2:	4643      	mov	r3, r8
 801ced4:	f8ad 7018 	strh.w	r7, [sp, #24]
 801ced8:	f8ad 101a 	strh.w	r1, [sp, #26]
 801cedc:	f8ad 001c 	strh.w	r0, [sp, #28]
 801cee0:	9600      	str	r6, [sp, #0]
 801cee2:	e779      	b.n	801cdd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 801cee4:	20014690 	.word	0x20014690

0801cee8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801cee8:	b180      	cbz	r0, 801cf0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ceea:	2903      	cmp	r1, #3
 801ceec:	d81c      	bhi.n	801cf28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ceee:	e8df f001 	tbb	[pc, r1]
 801cef2:	1d02      	.short	0x1d02
 801cef4:	1f08      	.short	0x1f08
 801cef6:	4b10      	ldr	r3, [pc, #64]	; (801cf38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801cef8:	8818      	ldrh	r0, [r3, #0]
 801cefa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801cefe:	4240      	negs	r0, r0
 801cf00:	4770      	bx	lr
 801cf02:	4b0d      	ldr	r3, [pc, #52]	; (801cf38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801cf04:	8818      	ldrh	r0, [r3, #0]
 801cf06:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801cf0a:	4770      	bx	lr
 801cf0c:	2903      	cmp	r1, #3
 801cf0e:	d80b      	bhi.n	801cf28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801cf10:	a301      	add	r3, pc, #4	; (adr r3, 801cf18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801cf12:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801cf16:	bf00      	nop
 801cf18:	0801cf2d 	.word	0x0801cf2d
 801cf1c:	0801cf03 	.word	0x0801cf03
 801cf20:	0801cf31 	.word	0x0801cf31
 801cf24:	0801cef7 	.word	0x0801cef7
 801cf28:	2000      	movs	r0, #0
 801cf2a:	4770      	bx	lr
 801cf2c:	2001      	movs	r0, #1
 801cf2e:	4770      	bx	lr
 801cf30:	f04f 30ff 	mov.w	r0, #4294967295
 801cf34:	4770      	bx	lr
 801cf36:	bf00      	nop
 801cf38:	2001468a 	.word	0x2001468a

0801cf3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801cf3c:	b180      	cbz	r0, 801cf60 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801cf3e:	2903      	cmp	r1, #3
 801cf40:	d81c      	bhi.n	801cf7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801cf42:	e8df f001 	tbb	[pc, r1]
 801cf46:	021d      	.short	0x021d
 801cf48:	071f      	.short	0x071f
 801cf4a:	4b10      	ldr	r3, [pc, #64]	; (801cf8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801cf4c:	8818      	ldrh	r0, [r3, #0]
 801cf4e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801cf52:	4770      	bx	lr
 801cf54:	4b0d      	ldr	r3, [pc, #52]	; (801cf8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801cf56:	8818      	ldrh	r0, [r3, #0]
 801cf58:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801cf5c:	4240      	negs	r0, r0
 801cf5e:	4770      	bx	lr
 801cf60:	2903      	cmp	r1, #3
 801cf62:	d80b      	bhi.n	801cf7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801cf64:	a301      	add	r3, pc, #4	; (adr r3, 801cf6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801cf66:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801cf6a:	bf00      	nop
 801cf6c:	0801cf4b 	.word	0x0801cf4b
 801cf70:	0801cf85 	.word	0x0801cf85
 801cf74:	0801cf55 	.word	0x0801cf55
 801cf78:	0801cf81 	.word	0x0801cf81
 801cf7c:	2000      	movs	r0, #0
 801cf7e:	4770      	bx	lr
 801cf80:	2001      	movs	r0, #1
 801cf82:	4770      	bx	lr
 801cf84:	f04f 30ff 	mov.w	r0, #4294967295
 801cf88:	4770      	bx	lr
 801cf8a:	bf00      	nop
 801cf8c:	2001468a 	.word	0x2001468a

0801cf90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf94:	b099      	sub	sp, #100	; 0x64
 801cf96:	910b      	str	r1, [sp, #44]	; 0x2c
 801cf98:	a914      	add	r1, sp, #80	; 0x50
 801cf9a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801cf9e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801cfa2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801cfa6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801cfaa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801cfae:	e881 000c 	stmia.w	r1, {r2, r3}
 801cfb2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801cfb6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801cfba:	9309      	str	r3, [sp, #36]	; 0x24
 801cfbc:	f891 900d 	ldrb.w	r9, [r1, #13]
 801cfc0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801cfc4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801cfc8:	9310      	str	r3, [sp, #64]	; 0x40
 801cfca:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801cfce:	930c      	str	r3, [sp, #48]	; 0x30
 801cfd0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801cfd4:	798f      	ldrb	r7, [r1, #6]
 801cfd6:	431f      	orrs	r7, r3
 801cfd8:	f000 8195 	beq.w	801d306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cfdc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801cfe0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801cfe4:	f891 9007 	ldrb.w	r9, [r1, #7]
 801cfe8:	ea59 0903 	orrs.w	r9, r9, r3
 801cfec:	f000 818b 	beq.w	801d306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cff0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801cff4:	b29b      	uxth	r3, r3
 801cff6:	2d00      	cmp	r5, #0
 801cff8:	f000 812e 	beq.w	801d258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801cffc:	1aed      	subs	r5, r5, r3
 801cffe:	b2ad      	uxth	r5, r5
 801d000:	042b      	lsls	r3, r5, #16
 801d002:	d502      	bpl.n	801d00a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d004:	1b64      	subs	r4, r4, r5
 801d006:	2500      	movs	r5, #0
 801d008:	b224      	sxth	r4, r4
 801d00a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d00e:	a814      	add	r0, sp, #80	; 0x50
 801d010:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801d014:	428c      	cmp	r4, r1
 801d016:	b28b      	uxth	r3, r1
 801d018:	bfbf      	itttt	lt
 801d01a:	18ed      	addlt	r5, r5, r3
 801d01c:	1b2c      	sublt	r4, r5, r4
 801d01e:	b2a5      	uxthlt	r5, r4
 801d020:	460c      	movlt	r4, r1
 801d022:	8891      	ldrh	r1, [r2, #4]
 801d024:	440b      	add	r3, r1
 801d026:	4621      	mov	r1, r4
 801d028:	b21b      	sxth	r3, r3
 801d02a:	930f      	str	r3, [sp, #60]	; 0x3c
 801d02c:	88d3      	ldrh	r3, [r2, #6]
 801d02e:	8852      	ldrh	r2, [r2, #2]
 801d030:	4413      	add	r3, r2
 801d032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d034:	b21b      	sxth	r3, r3
 801d036:	930d      	str	r3, [sp, #52]	; 0x34
 801d038:	4bbd      	ldr	r3, [pc, #756]	; (801d330 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801d03a:	f893 b000 	ldrb.w	fp, [r3]
 801d03e:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d042:	f1dc 0300 	rsbs	r3, ip, #0
 801d046:	eb43 030c 	adc.w	r3, r3, ip
 801d04a:	930e      	str	r3, [sp, #56]	; 0x38
 801d04c:	4653      	mov	r3, sl
 801d04e:	f7fc fa4b 	bl	80194e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d052:	4621      	mov	r1, r4
 801d054:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801d058:	4653      	mov	r3, sl
 801d05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d05c:	a814      	add	r0, sp, #80	; 0x50
 801d05e:	f7fc fa60 	bl	8019522 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d062:	a918      	add	r1, sp, #96	; 0x60
 801d064:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d068:	a817      	add	r0, sp, #92	; 0x5c
 801d06a:	f7fc fb87 	bl	801977c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d06e:	f1ba 0f00 	cmp.w	sl, #0
 801d072:	f040 80f4 	bne.w	801d25e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801d076:	f1bb 0f01 	cmp.w	fp, #1
 801d07a:	f040 80f8 	bne.w	801d26e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801d07e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d080:	2b00      	cmp	r3, #0
 801d082:	f040 8145 	bne.w	801d310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801d086:	b2ba      	uxth	r2, r7
 801d088:	b905      	cbnz	r5, 801d08c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801d08a:	b16e      	cbz	r6, 801d0a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801d08c:	fb06 5302 	mla	r3, r6, r2, r5
 801d090:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d092:	4631      	mov	r1, r6
 801d094:	fb08 f303 	mul.w	r3, r8, r3
 801d098:	f003 0607 	and.w	r6, r3, #7
 801d09c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801d0a0:	9328      	str	r3, [sp, #160]	; 0xa0
 801d0a2:	eba9 0301 	sub.w	r3, r9, r1
 801d0a6:	930a      	str	r3, [sp, #40]	; 0x28
 801d0a8:	4651      	mov	r1, sl
 801d0aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d0ac:	f7ff ff1c 	bl	801cee8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801d0b0:	4681      	mov	r9, r0
 801d0b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d0b4:	f7ff ff42 	bl	801cf3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801d0b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d0ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d0bc:	4683      	mov	fp, r0
 801d0be:	eba3 0a01 	sub.w	sl, r3, r1
 801d0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0c4:	459a      	cmp	sl, r3
 801d0c6:	bfa8      	it	ge
 801d0c8:	469a      	movge	sl, r3
 801d0ca:	f1ba 0f00 	cmp.w	sl, #0
 801d0ce:	f340 811a 	ble.w	801d306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d0d2:	1b64      	subs	r4, r4, r5
 801d0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d0d6:	1b1c      	subs	r4, r3, r4
 801d0d8:	42bc      	cmp	r4, r7
 801d0da:	bfd4      	ite	le
 801d0dc:	ebc5 0504 	rsble	r5, r5, r4
 801d0e0:	ebc5 0507 	rsbgt	r5, r5, r7
 801d0e4:	2d00      	cmp	r5, #0
 801d0e6:	f340 810e 	ble.w	801d306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d0ea:	1b52      	subs	r2, r2, r5
 801d0ec:	fb08 f302 	mul.w	r3, r8, r2
 801d0f0:	930f      	str	r3, [sp, #60]	; 0x3c
 801d0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	f040 8116 	bne.w	801d326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801d0fa:	4b8e      	ldr	r3, [pc, #568]	; (801d334 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801d0fc:	6818      	ldr	r0, [r3, #0]
 801d0fe:	6803      	ldr	r3, [r0, #0]
 801d100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d102:	4798      	blx	r3
 801d104:	2301      	movs	r3, #1
 801d106:	4a8c      	ldr	r2, [pc, #560]	; (801d338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801d108:	fa03 f308 	lsl.w	r3, r3, r8
 801d10c:	8811      	ldrh	r1, [r2, #0]
 801d10e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d112:	3b01      	subs	r3, #1
 801d114:	b2db      	uxtb	r3, r3
 801d116:	930e      	str	r3, [sp, #56]	; 0x38
 801d118:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801d11c:	fb01 2303 	mla	r3, r1, r3, r2
 801d120:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d124:	930a      	str	r3, [sp, #40]	; 0x28
 801d126:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d128:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d12c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d12e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d130:	0a19      	lsrs	r1, r3, #8
 801d132:	b2cb      	uxtb	r3, r1
 801d134:	9312      	str	r3, [sp, #72]	; 0x48
 801d136:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d138:	b2db      	uxtb	r3, r3
 801d13a:	9311      	str	r3, [sp, #68]	; 0x44
 801d13c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d13e:	095a      	lsrs	r2, r3, #5
 801d140:	4b7e      	ldr	r3, [pc, #504]	; (801d33c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801d142:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d146:	400b      	ands	r3, r1
 801d148:	4313      	orrs	r3, r2
 801d14a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d14c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d150:	4313      	orrs	r3, r2
 801d152:	b29b      	uxth	r3, r3
 801d154:	9310      	str	r3, [sp, #64]	; 0x40
 801d156:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d158:	781a      	ldrb	r2, [r3, #0]
 801d15a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801d15e:	fb05 b919 	mls	r9, r5, r9, fp
 801d162:	4132      	asrs	r2, r6
 801d164:	fb03 fb05 	mul.w	fp, r3, r5
 801d168:	930d      	str	r3, [sp, #52]	; 0x34
 801d16a:	b2d2      	uxtb	r2, r2
 801d16c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801d170:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801d174:	f0c0 80f5 	bcc.w	801d362 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801d178:	46ae      	mov	lr, r5
 801d17a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801d17e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801d182:	f0c0 80dd 	bcc.w	801d340 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801d186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d188:	4013      	ands	r3, r2
 801d18a:	d055      	beq.n	801d238 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801d18c:	20ff      	movs	r0, #255	; 0xff
 801d18e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d190:	fb90 f1f1 	sdiv	r1, r0, r1
 801d194:	434b      	muls	r3, r1
 801d196:	2bfe      	cmp	r3, #254	; 0xfe
 801d198:	dd03      	ble.n	801d1a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801d19a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d19c:	4281      	cmp	r1, r0
 801d19e:	f000 80c4 	beq.w	801d32a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801d1a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d1a4:	f8bc 4000 	ldrh.w	r4, [ip]
 801d1a8:	fb11 f303 	smulbb	r3, r1, r3
 801d1ac:	1220      	asrs	r0, r4, #8
 801d1ae:	b29b      	uxth	r3, r3
 801d1b0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d1b4:	1c59      	adds	r1, r3, #1
 801d1b6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801d1ba:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d1be:	10e1      	asrs	r1, r4, #3
 801d1c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d1c4:	00e4      	lsls	r4, r4, #3
 801d1c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d1ca:	b29f      	uxth	r7, r3
 801d1cc:	43db      	mvns	r3, r3
 801d1ce:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801d1d2:	b2db      	uxtb	r3, r3
 801d1d4:	b2e4      	uxtb	r4, r4
 801d1d6:	9309      	str	r3, [sp, #36]	; 0x24
 801d1d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d1da:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801d1de:	fb13 f907 	smulbb	r9, r3, r7
 801d1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1e4:	fb00 9003 	mla	r0, r0, r3, r9
 801d1e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d1ea:	fb13 f907 	smulbb	r9, r3, r7
 801d1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1f0:	b280      	uxth	r0, r0
 801d1f2:	fb01 9103 	mla	r1, r1, r3, r9
 801d1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d1f8:	fb13 f707 	smulbb	r7, r3, r7
 801d1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1fe:	b289      	uxth	r1, r1
 801d200:	fb04 7403 	mla	r4, r4, r3, r7
 801d204:	1c43      	adds	r3, r0, #1
 801d206:	b2a4      	uxth	r4, r4
 801d208:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d20c:	f104 0901 	add.w	r9, r4, #1
 801d210:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d214:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801d218:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801d21c:	ea49 0000 	orr.w	r0, r9, r0
 801d220:	f101 0901 	add.w	r9, r1, #1
 801d224:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801d228:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d22c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d230:	ea40 0009 	orr.w	r0, r0, r9
 801d234:	f8ac 0000 	strh.w	r0, [ip]
 801d238:	4446      	add	r6, r8
 801d23a:	b2b6      	uxth	r6, r6
 801d23c:	2e07      	cmp	r6, #7
 801d23e:	bf89      	itett	hi
 801d240:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801d242:	fa42 f208 	asrls.w	r2, r2, r8
 801d246:	2600      	movhi	r6, #0
 801d248:	785a      	ldrbhi	r2, [r3, #1]
 801d24a:	bf8a      	itet	hi
 801d24c:	3301      	addhi	r3, #1
 801d24e:	b2d2      	uxtbls	r2, r2
 801d250:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801d252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d254:	449c      	add	ip, r3
 801d256:	e792      	b.n	801d17e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801d258:	441c      	add	r4, r3
 801d25a:	b224      	sxth	r4, r4
 801d25c:	e6d5      	b.n	801d00a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d25e:	f1ba 0f01 	cmp.w	sl, #1
 801d262:	f47f af0c 	bne.w	801d07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d266:	f1bb 0f01 	cmp.w	fp, #1
 801d26a:	f47f af08 	bne.w	801d07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d26e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801d334 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801d272:	f8db 0000 	ldr.w	r0, [fp]
 801d276:	6803      	ldr	r3, [r0, #0]
 801d278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d27a:	4798      	blx	r3
 801d27c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801d280:	465a      	mov	r2, fp
 801d282:	d006      	beq.n	801d292 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801d284:	f1b8 0f04 	cmp.w	r8, #4
 801d288:	d140      	bne.n	801d30c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801d28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d28c:	3300      	adds	r3, #0
 801d28e:	bf18      	it	ne
 801d290:	2301      	movne	r3, #1
 801d292:	0580      	lsls	r0, r0, #22
 801d294:	d56e      	bpl.n	801d374 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801d296:	f1b8 0f08 	cmp.w	r8, #8
 801d29a:	d16b      	bne.n	801d374 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	bf0c      	ite	eq
 801d2a0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801d2a4:	f44f 7180 	movne.w	r1, #256	; 0x100
 801d2a8:	2d00      	cmp	r5, #0
 801d2aa:	f47f aee8 	bne.w	801d07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d2ae:	2e00      	cmp	r6, #0
 801d2b0:	f47f aee5 	bne.w	801d07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d2b4:	19e3      	adds	r3, r4, r7
 801d2b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d2b8:	4283      	cmp	r3, r0
 801d2ba:	f73f aee0 	bgt.w	801d07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d2c2:	444b      	add	r3, r9
 801d2c4:	4283      	cmp	r3, r0
 801d2c6:	f73f aeda 	bgt.w	801d07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d2ca:	b2bf      	uxth	r7, r7
 801d2cc:	f1b8 0f08 	cmp.w	r8, #8
 801d2d0:	6810      	ldr	r0, [r2, #0]
 801d2d2:	f04f 0500 	mov.w	r5, #0
 801d2d6:	bf18      	it	ne
 801d2d8:	3701      	addne	r7, #1
 801d2da:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801d2de:	6804      	ldr	r4, [r0, #0]
 801d2e0:	bf18      	it	ne
 801d2e2:	f027 0701 	bicne.w	r7, r7, #1
 801d2e6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801d2ea:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801d2ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d2f0:	bf18      	it	ne
 801d2f2:	b2bf      	uxthne	r7, r7
 801d2f4:	9104      	str	r1, [sp, #16]
 801d2f6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d2f8:	e9cd 7900 	strd	r7, r9, [sp]
 801d2fc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801d300:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d302:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801d304:	47a0      	blx	r4
 801d306:	b019      	add	sp, #100	; 0x64
 801d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d30c:	2300      	movs	r3, #0
 801d30e:	e7c0      	b.n	801d292 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801d310:	2208      	movs	r2, #8
 801d312:	fb92 f3f8 	sdiv	r3, r2, r8
 801d316:	1e5a      	subs	r2, r3, #1
 801d318:	443a      	add	r2, r7
 801d31a:	fb92 f2f3 	sdiv	r2, r2, r3
 801d31e:	fb12 f203 	smulbb	r2, r2, r3
 801d322:	b292      	uxth	r2, r2
 801d324:	e6b0      	b.n	801d088 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801d326:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d328:	e6ec      	b.n	801d104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801d32a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d32c:	e782      	b.n	801d234 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801d32e:	bf00      	nop
 801d330:	20014688 	.word	0x20014688
 801d334:	20014690 	.word	0x20014690
 801d338:	2001468a 	.word	0x2001468a
 801d33c:	00fff800 	.word	0x00fff800
 801d340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d342:	b153      	cbz	r3, 801d35a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801d344:	441e      	add	r6, r3
 801d346:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d348:	b2b6      	uxth	r6, r6
 801d34a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801d34e:	f006 0607 	and.w	r6, r6, #7
 801d352:	781a      	ldrb	r2, [r3, #0]
 801d354:	9328      	str	r3, [sp, #160]	; 0xa0
 801d356:	4132      	asrs	r2, r6
 801d358:	b2d2      	uxtb	r2, r2
 801d35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d35c:	445b      	add	r3, fp
 801d35e:	930a      	str	r3, [sp, #40]	; 0x28
 801d360:	e706      	b.n	801d170 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801d362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d364:	2b00      	cmp	r3, #0
 801d366:	d1ce      	bne.n	801d306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d368:	4b05      	ldr	r3, [pc, #20]	; (801d380 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801d36a:	6818      	ldr	r0, [r3, #0]
 801d36c:	6803      	ldr	r3, [r0, #0]
 801d36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d370:	4798      	blx	r3
 801d372:	e7c8      	b.n	801d306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d374:	2b00      	cmp	r3, #0
 801d376:	f43f ae82 	beq.w	801d07e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d37a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d37e:	e793      	b.n	801d2a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801d380:	20014690 	.word	0x20014690

0801d384 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d384:	6101      	str	r1, [r0, #16]
 801d386:	4770      	bx	lr

0801d388 <_ZN8touchgfx8Gestures4tickEv>:
 801d388:	7b83      	ldrb	r3, [r0, #14]
 801d38a:	b14b      	cbz	r3, 801d3a0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d38c:	8903      	ldrh	r3, [r0, #8]
 801d38e:	3301      	adds	r3, #1
 801d390:	b29b      	uxth	r3, r3
 801d392:	2b07      	cmp	r3, #7
 801d394:	8103      	strh	r3, [r0, #8]
 801d396:	bf81      	itttt	hi
 801d398:	2300      	movhi	r3, #0
 801d39a:	8143      	strhhi	r3, [r0, #10]
 801d39c:	8183      	strhhi	r3, [r0, #12]
 801d39e:	7383      	strbhi	r3, [r0, #14]
 801d3a0:	4770      	bx	lr
	...

0801d3a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d3a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d3a8:	4698      	mov	r8, r3
 801d3aa:	8883      	ldrh	r3, [r0, #4]
 801d3ac:	4604      	mov	r4, r0
 801d3ae:	4617      	mov	r7, r2
 801d3b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d3b4:	eba8 0303 	sub.w	r3, r8, r3
 801d3b8:	4a19      	ldr	r2, [pc, #100]	; (801d420 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801d3ba:	460e      	mov	r6, r1
 801d3bc:	b21b      	sxth	r3, r3
 801d3be:	88c1      	ldrh	r1, [r0, #6]
 801d3c0:	9200      	str	r2, [sp, #0]
 801d3c2:	2000      	movs	r0, #0
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	8aa2      	ldrh	r2, [r4, #20]
 801d3c8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d3cc:	bfb8      	it	lt
 801d3ce:	425b      	neglt	r3, r3
 801d3d0:	f88d 0004 	strb.w	r0, [sp, #4]
 801d3d4:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d3d8:	b21b      	sxth	r3, r3
 801d3da:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d3de:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d3e2:	4293      	cmp	r3, r2
 801d3e4:	dc07      	bgt.n	801d3f6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801d3e6:	1a69      	subs	r1, r5, r1
 801d3e8:	b209      	sxth	r1, r1
 801d3ea:	2900      	cmp	r1, #0
 801d3ec:	bfb8      	it	lt
 801d3ee:	4249      	neglt	r1, r1
 801d3f0:	b209      	sxth	r1, r1
 801d3f2:	428a      	cmp	r2, r1
 801d3f4:	da10      	bge.n	801d418 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801d3f6:	6920      	ldr	r0, [r4, #16]
 801d3f8:	4669      	mov	r1, sp
 801d3fa:	eba8 0606 	sub.w	r6, r8, r6
 801d3fe:	1bef      	subs	r7, r5, r7
 801d400:	6803      	ldr	r3, [r0, #0]
 801d402:	685b      	ldr	r3, [r3, #4]
 801d404:	4798      	blx	r3
 801d406:	2300      	movs	r3, #0
 801d408:	2001      	movs	r0, #1
 801d40a:	8166      	strh	r6, [r4, #10]
 801d40c:	8123      	strh	r3, [r4, #8]
 801d40e:	81a7      	strh	r7, [r4, #12]
 801d410:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d414:	80e5      	strh	r5, [r4, #6]
 801d416:	73a0      	strb	r0, [r4, #14]
 801d418:	b004      	add	sp, #16
 801d41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d41e:	bf00      	nop
 801d420:	0802410c 	.word	0x0802410c

0801d424 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d424:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d426:	461e      	mov	r6, r3
 801d428:	1e4b      	subs	r3, r1, #1
 801d42a:	b085      	sub	sp, #20
 801d42c:	4604      	mov	r4, r0
 801d42e:	2b01      	cmp	r3, #1
 801d430:	460d      	mov	r5, r1
 801d432:	4617      	mov	r7, r2
 801d434:	d84b      	bhi.n	801d4ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d436:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d43a:	1cd3      	adds	r3, r2, #3
 801d43c:	b29b      	uxth	r3, r3
 801d43e:	2b06      	cmp	r3, #6
 801d440:	d916      	bls.n	801d470 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d442:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801d4e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d446:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d44a:	f8cd c004 	str.w	ip, [sp, #4]
 801d44e:	f04f 0c00 	mov.w	ip, #0
 801d452:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d456:	6900      	ldr	r0, [r0, #16]
 801d458:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d45c:	a901      	add	r1, sp, #4
 801d45e:	f88d c008 	strb.w	ip, [sp, #8]
 801d462:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d466:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d46a:	6803      	ldr	r3, [r0, #0]
 801d46c:	689b      	ldr	r3, [r3, #8]
 801d46e:	4798      	blx	r3
 801d470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d474:	1cd3      	adds	r3, r2, #3
 801d476:	b29b      	uxth	r3, r3
 801d478:	2b06      	cmp	r3, #6
 801d47a:	d916      	bls.n	801d4aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d47c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801d4e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d480:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d484:	f8cd c004 	str.w	ip, [sp, #4]
 801d488:	f04f 0c01 	mov.w	ip, #1
 801d48c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d490:	6920      	ldr	r0, [r4, #16]
 801d492:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d496:	a901      	add	r1, sp, #4
 801d498:	f88d c008 	strb.w	ip, [sp, #8]
 801d49c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d4a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d4a4:	6803      	ldr	r3, [r0, #0]
 801d4a6:	689b      	ldr	r3, [r3, #8]
 801d4a8:	4798      	blx	r3
 801d4aa:	4b0d      	ldr	r3, [pc, #52]	; (801d4e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801d4ac:	a901      	add	r1, sp, #4
 801d4ae:	6920      	ldr	r0, [r4, #16]
 801d4b0:	9301      	str	r3, [sp, #4]
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	f88d 5008 	strb.w	r5, [sp, #8]
 801d4b8:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d4bc:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d4c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d4c4:	6803      	ldr	r3, [r0, #0]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	4798      	blx	r3
 801d4ca:	b005      	add	sp, #20
 801d4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4ce:	2900      	cmp	r1, #0
 801d4d0:	d1eb      	bne.n	801d4aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d4d2:	80a2      	strh	r2, [r4, #4]
 801d4d4:	80c6      	strh	r6, [r0, #6]
 801d4d6:	60a1      	str	r1, [r4, #8]
 801d4d8:	81a1      	strh	r1, [r4, #12]
 801d4da:	73a1      	strb	r1, [r4, #14]
 801d4dc:	e7e5      	b.n	801d4aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d4de:	bf00      	nop
 801d4e0:	080240f8 	.word	0x080240f8
 801d4e4:	08024120 	.word	0x08024120

0801d4e8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 801d4e8:	10c9      	asrs	r1, r1, #3
 801d4ea:	2900      	cmp	r1, #0
 801d4ec:	bfb8      	it	lt
 801d4ee:	4249      	neglt	r1, r1
 801d4f0:	2801      	cmp	r0, #1
 801d4f2:	d108      	bne.n	801d506 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801d4f4:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801d4f8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801d4fc:	4601      	mov	r1, r0
 801d4fe:	dd02      	ble.n	801d506 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801d500:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801d504:	4770      	bx	lr
 801d506:	29ff      	cmp	r1, #255	; 0xff
 801d508:	bfa8      	it	ge
 801d50a:	21ff      	movge	r1, #255	; 0xff
 801d50c:	4608      	mov	r0, r1
 801d50e:	4770      	bx	lr

0801d510 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801d510:	b410      	push	{r4}
 801d512:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801d516:	429c      	cmp	r4, r3
 801d518:	d803      	bhi.n	801d522 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801d51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d51e:	f7fb b923 	b.w	8018768 <_ZN8touchgfx7Outline6lineToEii>
 801d522:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d526:	4770      	bx	lr

0801d528 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d52c:	b08b      	sub	sp, #44	; 0x2c
 801d52e:	4606      	mov	r6, r0
 801d530:	468a      	mov	sl, r1
 801d532:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d536:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801d53a:	9308      	str	r3, [sp, #32]
 801d53c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801d540:	9309      	str	r3, [sp, #36]	; 0x24
 801d542:	f7fb fa7c 	bl	8018a3e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801d546:	68b5      	ldr	r5, [r6, #8]
 801d548:	4604      	mov	r4, r0
 801d54a:	2d00      	cmp	r5, #0
 801d54c:	d044      	beq.n	801d5d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801d54e:	6873      	ldr	r3, [r6, #4]
 801d550:	42ab      	cmp	r3, r5
 801d552:	d33d      	bcc.n	801d5d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801d554:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d558:	f04f 0800 	mov.w	r8, #0
 801d55c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 801d560:	eb02 0b03 	add.w	fp, r2, r3
 801d564:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801d568:	fb02 1203 	mla	r2, r2, r3, r1
 801d56c:	9205      	str	r2, [sp, #20]
 801d56e:	1e6a      	subs	r2, r5, #1
 801d570:	9204      	str	r2, [sp, #16]
 801d572:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801d576:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d57a:	454b      	cmp	r3, r9
 801d57c:	463a      	mov	r2, r7
 801d57e:	d008      	beq.n	801d592 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801d580:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 801d584:	eb03 0b09 	add.w	fp, r3, r9
 801d588:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801d58c:	fb03 1309 	mla	r3, r3, r9, r1
 801d590:	9305      	str	r3, [sp, #20]
 801d592:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d596:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d59a:	4498      	add	r8, r3
 801d59c:	9b04      	ldr	r3, [sp, #16]
 801d59e:	3b01      	subs	r3, #1
 801d5a0:	9304      	str	r3, [sp, #16]
 801d5a2:	9b04      	ldr	r3, [sp, #16]
 801d5a4:	3301      	adds	r3, #1
 801d5a6:	d015      	beq.n	801d5d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801d5a8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801d5ac:	42bb      	cmp	r3, r7
 801d5ae:	d117      	bne.n	801d5e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801d5b0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801d5b4:	9b04      	ldr	r3, [sp, #16]
 801d5b6:	4548      	cmp	r0, r9
 801d5b8:	f103 33ff 	add.w	r3, r3, #4294967295
 801d5bc:	d17d      	bne.n	801d6ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801d5be:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801d5c2:	4401      	add	r1, r0
 801d5c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d5c8:	4480      	add	r8, r0
 801d5ca:	e7e9      	b.n	801d5a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801d5cc:	461f      	mov	r7, r3
 801d5ce:	e042      	b.n	801d656 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801d5d0:	2000      	movs	r0, #0
 801d5d2:	e002      	b.n	801d5da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801d5d4:	2900      	cmp	r1, #0
 801d5d6:	d16d      	bne.n	801d6b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801d5d8:	2001      	movs	r0, #1
 801d5da:	b00b      	add	sp, #44	; 0x2c
 801d5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5e0:	b379      	cbz	r1, 801d642 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801d5e2:	2f00      	cmp	r7, #0
 801d5e4:	db29      	blt.n	801d63a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d5e6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801d5ea:	42bb      	cmp	r3, r7
 801d5ec:	dd25      	ble.n	801d63a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d5ee:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801d5f2:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801d5f6:	f7ff ff77 	bl	801d4e8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801d5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5fc:	fb10 f003 	smulbb	r0, r0, r3
 801d600:	b280      	uxth	r0, r0
 801d602:	1c41      	adds	r1, r0, #1
 801d604:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801d608:	1209      	asrs	r1, r1, #8
 801d60a:	f011 0fff 	tst.w	r1, #255	; 0xff
 801d60e:	d014      	beq.n	801d63a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d610:	b2c9      	uxtb	r1, r1
 801d612:	9808      	ldr	r0, [sp, #32]
 801d614:	b2ba      	uxth	r2, r7
 801d616:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801d618:	9102      	str	r1, [sp, #8]
 801d61a:	2101      	movs	r1, #1
 801d61c:	4413      	add	r3, r2
 801d61e:	4402      	add	r2, r0
 801d620:	9101      	str	r1, [sp, #4]
 801d622:	fa0f f18b 	sxth.w	r1, fp
 801d626:	f8da 0000 	ldr.w	r0, [sl]
 801d62a:	b21b      	sxth	r3, r3
 801d62c:	9100      	str	r1, [sp, #0]
 801d62e:	b212      	sxth	r2, r2
 801d630:	6941      	ldr	r1, [r0, #20]
 801d632:	4650      	mov	r0, sl
 801d634:	460d      	mov	r5, r1
 801d636:	9905      	ldr	r1, [sp, #20]
 801d638:	47a8      	blx	r5
 801d63a:	9b04      	ldr	r3, [sp, #16]
 801d63c:	1c7a      	adds	r2, r7, #1
 801d63e:	3301      	adds	r3, #1
 801d640:	d0ca      	beq.n	801d5d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801d642:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d646:	1abb      	subs	r3, r7, r2
 801d648:	2b00      	cmp	r3, #0
 801d64a:	dd31      	ble.n	801d6b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d64c:	2a00      	cmp	r2, #0
 801d64e:	dabd      	bge.n	801d5cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801d650:	2f00      	cmp	r7, #0
 801d652:	dd2d      	ble.n	801d6b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d654:	2200      	movs	r2, #0
 801d656:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801d65a:	19d1      	adds	r1, r2, r7
 801d65c:	4299      	cmp	r1, r3
 801d65e:	db02      	blt.n	801d666 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801d660:	1a9f      	subs	r7, r3, r2
 801d662:	2f00      	cmp	r7, #0
 801d664:	dd24      	ble.n	801d6b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d666:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801d66a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801d66e:	f7ff ff3b 	bl	801d4e8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801d672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d674:	fb10 f003 	smulbb	r0, r0, r3
 801d678:	b280      	uxth	r0, r0
 801d67a:	1c41      	adds	r1, r0, #1
 801d67c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801d680:	1209      	asrs	r1, r1, #8
 801d682:	f011 0fff 	tst.w	r1, #255	; 0xff
 801d686:	d013      	beq.n	801d6b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d688:	b292      	uxth	r2, r2
 801d68a:	9808      	ldr	r0, [sp, #32]
 801d68c:	b2c9      	uxtb	r1, r1
 801d68e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801d690:	b23f      	sxth	r7, r7
 801d692:	4413      	add	r3, r2
 801d694:	9102      	str	r1, [sp, #8]
 801d696:	4402      	add	r2, r0
 801d698:	fa0f f18b 	sxth.w	r1, fp
 801d69c:	f8da 0000 	ldr.w	r0, [sl]
 801d6a0:	b21b      	sxth	r3, r3
 801d6a2:	9100      	str	r1, [sp, #0]
 801d6a4:	b212      	sxth	r2, r2
 801d6a6:	9701      	str	r7, [sp, #4]
 801d6a8:	9905      	ldr	r1, [sp, #20]
 801d6aa:	6947      	ldr	r7, [r0, #20]
 801d6ac:	4650      	mov	r0, sl
 801d6ae:	47b8      	blx	r7
 801d6b0:	464b      	mov	r3, r9
 801d6b2:	e75e      	b.n	801d572 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801d6b4:	2f00      	cmp	r7, #0
 801d6b6:	da96      	bge.n	801d5e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801d6b8:	e78e      	b.n	801d5d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801d6ba:	2900      	cmp	r1, #0
 801d6bc:	d0f8      	beq.n	801d6b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d6be:	e790      	b.n	801d5e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801d6c0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 801d6c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d6c4:	461e      	mov	r6, r3
 801d6c6:	4b36      	ldr	r3, [pc, #216]	; (801d7a0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 801d6c8:	2500      	movs	r5, #0
 801d6ca:	f100 0814 	add.w	r8, r0, #20
 801d6ce:	4604      	mov	r4, r0
 801d6d0:	4617      	mov	r7, r2
 801d6d2:	e9c0 3100 	strd	r3, r1, [r0]
 801d6d6:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801d6da:	8185      	strh	r5, [r0, #12]
 801d6dc:	8103      	strh	r3, [r0, #8]
 801d6de:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801d6e2:	81c5      	strh	r5, [r0, #14]
 801d6e4:	7283      	strb	r3, [r0, #10]
 801d6e6:	8205      	strh	r5, [r0, #16]
 801d6e8:	8245      	strh	r5, [r0, #18]
 801d6ea:	4640      	mov	r0, r8
 801d6ec:	f7fa fb82 	bl	8017df4 <_ZN8touchgfx7OutlineC1Ev>
 801d6f0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 801d6f4:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
 801d6f8:	466b      	mov	r3, sp
 801d6fa:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
 801d6fe:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
 801d702:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
 801d706:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 801d70a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 801d70e:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
 801d712:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
 801d716:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
 801d71a:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
 801d71e:	6830      	ldr	r0, [r6, #0]
 801d720:	6871      	ldr	r1, [r6, #4]
 801d722:	8872      	ldrh	r2, [r6, #2]
 801d724:	8835      	ldrh	r5, [r6, #0]
 801d726:	c303      	stmia	r3!, {r0, r1}
 801d728:	887b      	ldrh	r3, [r7, #2]
 801d72a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801d72e:	4413      	add	r3, r2
 801d730:	883a      	ldrh	r2, [r7, #0]
 801d732:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801d736:	442a      	add	r2, r5
 801d738:	81e3      	strh	r3, [r4, #14]
 801d73a:	8220      	strh	r0, [r4, #16]
 801d73c:	4668      	mov	r0, sp
 801d73e:	81a2      	strh	r2, [r4, #12]
 801d740:	8261      	strh	r1, [r4, #18]
 801d742:	4639      	mov	r1, r7
 801d744:	f7fc f86a 	bl	801981c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d748:	f104 000c 	add.w	r0, r4, #12
 801d74c:	f7fc f83e 	bl	80197cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d750:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801d754:	f8bd 2000 	ldrh.w	r2, [sp]
 801d758:	4640      	mov	r0, r8
 801d75a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801d75e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 801d762:	f7fa fb2b 	bl	8017dbc <_ZN8touchgfx7Outline5resetEv>
 801d766:	f9bd 3000 	ldrsh.w	r3, [sp]
 801d76a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801d76e:	4620      	mov	r0, r4
 801d770:	015b      	lsls	r3, r3, #5
 801d772:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d774:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801d778:	015b      	lsls	r3, r3, #5
 801d77a:	6523      	str	r3, [r4, #80]	; 0x50
 801d77c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d780:	015b      	lsls	r3, r3, #5
 801d782:	6563      	str	r3, [r4, #84]	; 0x54
 801d784:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801d788:	015b      	lsls	r3, r3, #5
 801d78a:	65a3      	str	r3, [r4, #88]	; 0x58
 801d78c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801d790:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 801d794:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801d798:	b002      	add	sp, #8
 801d79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d79e:	bf00      	nop
 801d7a0:	0802418c 	.word	0x0802418c

0801d7a4 <_ZN8touchgfx6Canvas5closeEv>:
 801d7a4:	b538      	push	{r3, r4, r5, lr}
 801d7a6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801d7aa:	4604      	mov	r4, r0
 801d7ac:	b193      	cbz	r3, 801d7d4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801d7ae:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 801d7b2:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
 801d7b6:	4213      	tst	r3, r2
 801d7b8:	d10c      	bne.n	801d7d4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801d7ba:	f100 0514 	add.w	r5, r0, #20
 801d7be:	b123      	cbz	r3, 801d7ca <_ZN8touchgfx6Canvas5closeEv+0x26>
 801d7c0:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	; 0x60
 801d7c4:	4628      	mov	r0, r5
 801d7c6:	f7ff fea3 	bl	801d510 <_ZN8touchgfx10Rasterizer6lineToEii>
 801d7ca:	4628      	mov	r0, r5
 801d7cc:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	; 0x6c
 801d7d0:	f7ff fe9e 	bl	801d510 <_ZN8touchgfx10Rasterizer6lineToEii>
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 801d7da:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 801d7de:	4298      	cmp	r0, r3
 801d7e0:	bf34      	ite	cc
 801d7e2:	2000      	movcc	r0, #0
 801d7e4:	2001      	movcs	r0, #1
 801d7e6:	bd38      	pop	{r3, r4, r5, pc}

0801d7e8 <_ZN8touchgfx6Canvas6renderEh>:
 801d7e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d7ec:	7a85      	ldrb	r5, [r0, #10]
 801d7ee:	4604      	mov	r4, r0
 801d7f0:	4369      	muls	r1, r5
 801d7f2:	1c4d      	adds	r5, r1, #1
 801d7f4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801d7f8:	122d      	asrs	r5, r5, #8
 801d7fa:	f000 8098 	beq.w	801d92e <_ZN8touchgfx6Canvas6renderEh+0x146>
 801d7fe:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 801d802:	2b00      	cmp	r3, #0
 801d804:	f000 8093 	beq.w	801d92e <_ZN8touchgfx6Canvas6renderEh+0x146>
 801d808:	f7ff ffcc 	bl	801d7a4 <_ZN8touchgfx6Canvas5closeEv>
 801d80c:	4607      	mov	r7, r0
 801d80e:	2800      	cmp	r0, #0
 801d810:	d045      	beq.n	801d89e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801d812:	6860      	ldr	r0, [r4, #4]
 801d814:	4e47      	ldr	r6, [pc, #284]	; (801d934 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 801d816:	6803      	ldr	r3, [r0, #0]
 801d818:	6837      	ldr	r7, [r6, #0]
 801d81a:	689b      	ldr	r3, [r3, #8]
 801d81c:	4798      	blx	r3
 801d81e:	4601      	mov	r1, r0
 801d820:	4638      	mov	r0, r7
 801d822:	f7f8 fd99 	bl	8016358 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801d826:	4607      	mov	r7, r0
 801d828:	f7e5 fe98 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 801d82c:	6803      	ldr	r3, [r0, #0]
 801d82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d830:	4798      	blx	r3
 801d832:	4680      	mov	r8, r0
 801d834:	f7e5 fe92 	bl	800355c <_ZN8touchgfx3HAL3lcdEv>
 801d838:	6803      	ldr	r3, [r0, #0]
 801d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d83c:	4798      	blx	r3
 801d83e:	280b      	cmp	r0, #11
 801d840:	d85a      	bhi.n	801d8f8 <_ZN8touchgfx6Canvas6renderEh+0x110>
 801d842:	e8df f000 	tbb	[pc, r0]
 801d846:	5b50      	.short	0x5b50
 801d848:	3059066b 	.word	0x3059066b
 801d84c:	64646440 	.word	0x64646440
 801d850:	6464      	.short	0x6464
 801d852:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801d856:	2208      	movs	r2, #8
 801d858:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801d85c:	fb91 f2f2 	sdiv	r2, r1, r2
 801d860:	fb08 2303 	mla	r3, r8, r3, r2
 801d864:	441f      	add	r7, r3
 801d866:	424b      	negs	r3, r1
 801d868:	f001 0107 	and.w	r1, r1, #7
 801d86c:	f003 0307 	and.w	r3, r3, #7
 801d870:	bf58      	it	pl
 801d872:	4259      	negpl	r1, r3
 801d874:	b2c9      	uxtb	r1, r1
 801d876:	b2ed      	uxtb	r5, r5
 801d878:	463a      	mov	r2, r7
 801d87a:	fa0f f388 	sxth.w	r3, r8
 801d87e:	f104 0014 	add.w	r0, r4, #20
 801d882:	e9cd 1500 	strd	r1, r5, [sp]
 801d886:	6861      	ldr	r1, [r4, #4]
 801d888:	f7ff fe4e 	bl	801d528 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801d88c:	4607      	mov	r7, r0
 801d88e:	6860      	ldr	r0, [r4, #4]
 801d890:	6803      	ldr	r3, [r0, #0]
 801d892:	691b      	ldr	r3, [r3, #16]
 801d894:	4798      	blx	r3
 801d896:	6830      	ldr	r0, [r6, #0]
 801d898:	6803      	ldr	r3, [r0, #0]
 801d89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d89c:	4798      	blx	r3
 801d89e:	4638      	mov	r0, r7
 801d8a0:	b002      	add	sp, #8
 801d8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8a6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801d8aa:	2204      	movs	r2, #4
 801d8ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801d8b0:	fb91 f2f2 	sdiv	r2, r1, r2
 801d8b4:	fb08 2303 	mla	r3, r8, r3, r2
 801d8b8:	441f      	add	r7, r3
 801d8ba:	424b      	negs	r3, r1
 801d8bc:	f001 0103 	and.w	r1, r1, #3
 801d8c0:	f003 0303 	and.w	r3, r3, #3
 801d8c4:	e7d4      	b.n	801d870 <_ZN8touchgfx6Canvas6renderEh+0x88>
 801d8c6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801d8ca:	2202      	movs	r2, #2
 801d8cc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801d8d0:	2900      	cmp	r1, #0
 801d8d2:	fb91 f2f2 	sdiv	r2, r1, r2
 801d8d6:	f001 0101 	and.w	r1, r1, #1
 801d8da:	fb08 2303 	mla	r3, r8, r3, r2
 801d8de:	bfb8      	it	lt
 801d8e0:	4249      	neglt	r1, r1
 801d8e2:	441f      	add	r7, r3
 801d8e4:	e7c6      	b.n	801d874 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 801d8e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801d8ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d8ee:	fb08 f303 	mul.w	r3, r8, r3
 801d8f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801d8f6:	441f      	add	r7, r3
 801d8f8:	2100      	movs	r1, #0
 801d8fa:	e7bc      	b.n	801d876 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 801d8fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801d900:	2103      	movs	r1, #3
 801d902:	fb08 f203 	mul.w	r2, r8, r3
 801d906:	89a3      	ldrh	r3, [r4, #12]
 801d908:	fb13 2301 	smlabb	r3, r3, r1, r2
 801d90c:	e7f3      	b.n	801d8f6 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801d90e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801d912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d916:	fb08 2303 	mla	r3, r8, r3, r2
 801d91a:	e7ec      	b.n	801d8f6 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801d91c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801d920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d924:	fb08 f303 	mul.w	r3, r8, r3
 801d928:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d92c:	e7e3      	b.n	801d8f6 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801d92e:	2701      	movs	r7, #1
 801d930:	e7b5      	b.n	801d89e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801d932:	bf00      	nop
 801d934:	20014690 	.word	0x20014690

0801d938 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801d938:	4b06      	ldr	r3, [pc, #24]	; (801d954 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 801d93a:	b510      	push	{r4, lr}
 801d93c:	781b      	ldrb	r3, [r3, #0]
 801d93e:	2b01      	cmp	r3, #1
 801d940:	d107      	bne.n	801d952 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 801d942:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801d946:	680b      	ldr	r3, [r1, #0]
 801d948:	6814      	ldr	r4, [r2, #0]
 801d94a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801d94e:	6013      	str	r3, [r2, #0]
 801d950:	600c      	str	r4, [r1, #0]
 801d952:	bd10      	pop	{r4, pc}
 801d954:	20014688 	.word	0x20014688

0801d958 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801d958:	b513      	push	{r0, r1, r4, lr}
 801d95a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801d95e:	4604      	mov	r4, r0
 801d960:	e9cd 2100 	strd	r2, r1, [sp]
 801d964:	b9a3      	cbnz	r3, 801d990 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801d966:	466a      	mov	r2, sp
 801d968:	a901      	add	r1, sp, #4
 801d96a:	4620      	mov	r0, r4
 801d96c:	f7ff ffe4 	bl	801d938 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801d970:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801d972:	9901      	ldr	r1, [sp, #4]
 801d974:	9a00      	ldr	r2, [sp, #0]
 801d976:	1ac9      	subs	r1, r1, r3
 801d978:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d97a:	1ad2      	subs	r2, r2, r3
 801d97c:	9101      	str	r1, [sp, #4]
 801d97e:	2a00      	cmp	r2, #0
 801d980:	9200      	str	r2, [sp, #0]
 801d982:	da0b      	bge.n	801d99c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801d984:	2301      	movs	r3, #1
 801d986:	2900      	cmp	r1, #0
 801d988:	da0e      	bge.n	801d9a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801d98a:	f043 0304 	orr.w	r3, r3, #4
 801d98e:	e013      	b.n	801d9b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801d990:	f7ff ff08 	bl	801d7a4 <_ZN8touchgfx6Canvas5closeEv>
 801d994:	2800      	cmp	r0, #0
 801d996:	d1e6      	bne.n	801d966 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801d998:	b002      	add	sp, #8
 801d99a:	bd10      	pop	{r4, pc}
 801d99c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	bfac      	ite	ge
 801d9a2:	2302      	movge	r3, #2
 801d9a4:	2300      	movlt	r3, #0
 801d9a6:	e7ee      	b.n	801d986 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801d9a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d9aa:	4281      	cmp	r1, r0
 801d9ac:	bfac      	ite	ge
 801d9ae:	2008      	movge	r0, #8
 801d9b0:	2000      	movlt	r0, #0
 801d9b2:	4318      	orrs	r0, r3
 801d9b4:	b2c3      	uxtb	r3, r0
 801d9b6:	b158      	cbz	r0, 801d9d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801d9b8:	2200      	movs	r2, #0
 801d9ba:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
 801d9be:	9901      	ldr	r1, [sp, #4]
 801d9c0:	9a00      	ldr	r2, [sp, #0]
 801d9c2:	66e1      	str	r1, [r4, #108]	; 0x6c
 801d9c4:	6722      	str	r2, [r4, #112]	; 0x70
 801d9c6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801d9ca:	e9c4 1218 	strd	r1, r2, [r4, #96]	; 0x60
 801d9ce:	e7e3      	b.n	801d998 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801d9d0:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
 801d9d4:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801d9d8:	4298      	cmp	r0, r3
 801d9da:	d803      	bhi.n	801d9e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801d9dc:	f104 0014 	add.w	r0, r4, #20
 801d9e0:	f7fa fedc 	bl	801879c <_ZN8touchgfx7Outline6moveToEii>
 801d9e4:	2301      	movs	r3, #1
 801d9e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 801d9ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 801d9ee:	2300      	movs	r3, #0
 801d9f0:	e7e5      	b.n	801d9be <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801d9f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801d9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d9f4:	ab02      	add	r3, sp, #8
 801d9f6:	4604      	mov	r4, r0
 801d9f8:	9101      	str	r1, [sp, #4]
 801d9fa:	a901      	add	r1, sp, #4
 801d9fc:	f843 2d08 	str.w	r2, [r3, #-8]!
 801da00:	461a      	mov	r2, r3
 801da02:	f7ff ff99 	bl	801d938 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801da06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801da08:	9901      	ldr	r1, [sp, #4]
 801da0a:	9a00      	ldr	r2, [sp, #0]
 801da0c:	1ac9      	subs	r1, r1, r3
 801da0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801da10:	1ad2      	subs	r2, r2, r3
 801da12:	9101      	str	r1, [sp, #4]
 801da14:	2a00      	cmp	r2, #0
 801da16:	9200      	str	r2, [sp, #0]
 801da18:	db1c      	blt.n	801da54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801da1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801da1c:	429a      	cmp	r2, r3
 801da1e:	bfac      	ite	ge
 801da20:	2002      	movge	r0, #2
 801da22:	2000      	movlt	r0, #0
 801da24:	2900      	cmp	r1, #0
 801da26:	db17      	blt.n	801da58 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801da28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801da2a:	4299      	cmp	r1, r3
 801da2c:	bfac      	ite	ge
 801da2e:	2308      	movge	r3, #8
 801da30:	2300      	movlt	r3, #0
 801da32:	4303      	orrs	r3, r0
 801da34:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
 801da38:	b2dd      	uxtb	r5, r3
 801da3a:	b978      	cbnz	r0, 801da5c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801da3c:	f104 0014 	add.w	r0, r4, #20
 801da40:	f7ff fd66 	bl	801d510 <_ZN8touchgfx10Rasterizer6lineToEii>
 801da44:	9b01      	ldr	r3, [sp, #4]
 801da46:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
 801da4a:	6623      	str	r3, [r4, #96]	; 0x60
 801da4c:	9b00      	ldr	r3, [sp, #0]
 801da4e:	6663      	str	r3, [r4, #100]	; 0x64
 801da50:	b002      	add	sp, #8
 801da52:	bd70      	pop	{r4, r5, r6, pc}
 801da54:	2001      	movs	r0, #1
 801da56:	e7e5      	b.n	801da24 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801da58:	2304      	movs	r3, #4
 801da5a:	e7ea      	b.n	801da32 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801da5c:	b113      	cbz	r3, 801da64 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801da5e:	ea10 0305 	ands.w	r3, r0, r5
 801da62:	d11c      	bne.n	801da9e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801da64:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801da68:	f104 0614 	add.w	r6, r4, #20
 801da6c:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	; 0x60
 801da70:	b98b      	cbnz	r3, 801da96 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801da72:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
 801da76:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801da7a:	4298      	cmp	r0, r3
 801da7c:	d802      	bhi.n	801da84 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801da7e:	4630      	mov	r0, r6
 801da80:	f7fa fe8c 	bl	801879c <_ZN8touchgfx7Outline6moveToEii>
 801da84:	2301      	movs	r3, #1
 801da86:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 801da8a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 801da8e:	4630      	mov	r0, r6
 801da90:	e9dd 2100 	ldrd	r2, r1, [sp]
 801da94:	e7d4      	b.n	801da40 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801da96:	4630      	mov	r0, r6
 801da98:	f7ff fd3a 	bl	801d510 <_ZN8touchgfx10Rasterizer6lineToEii>
 801da9c:	e7f7      	b.n	801da8e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801da9e:	461d      	mov	r5, r3
 801daa0:	e7d0      	b.n	801da44 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801daa4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 801daa4:	b538      	push	{r3, r4, r5, lr}
 801daa6:	ed2d 8b10 	vpush	{d8-d15}
 801daaa:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 801daae:	4605      	mov	r5, r0
 801dab0:	eeb0 ca40 	vmov.f32	s24, s0
 801dab4:	460c      	mov	r4, r1
 801dab6:	eef0 ca60 	vmov.f32	s25, s1
 801daba:	ed9f ba57 	vldr	s22, [pc, #348]	; 801dc18 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 801dabe:	eeb0 da41 	vmov.f32	s26, s2
 801dac2:	eef0 da61 	vmov.f32	s27, s3
 801dac6:	eeb0 ea42 	vmov.f32	s28, s4
 801daca:	eef0 ea62 	vmov.f32	s29, s5
 801dace:	eef0 aa6b 	vmov.f32	s21, s23
 801dad2:	2c08      	cmp	r4, #8
 801dad4:	d86e      	bhi.n	801dbb4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 801dad6:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 801dada:	ee7d 7aee 	vsub.f32	s15, s27, s29
 801dade:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 801dae2:	ee3e 7aec 	vsub.f32	s14, s29, s25
 801dae6:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 801daea:	ee3c fa0d 	vadd.f32	s30, s24, s26
 801daee:	ee7c faad 	vadd.f32	s31, s25, s27
 801daf2:	eee6 7a07 	vfma.f32	s15, s12, s14
 801daf6:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 801dafa:	ee3d aaae 	vadd.f32	s20, s27, s29
 801dafe:	ee2f fa2b 	vmul.f32	s30, s30, s23
 801db02:	ee6f faab 	vmul.f32	s31, s31, s23
 801db06:	ee69 9aab 	vmul.f32	s19, s19, s23
 801db0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801db0e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 801db12:	ee7f 8a29 	vadd.f32	s17, s30, s19
 801db16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db1a:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 801db1e:	ee68 8aab 	vmul.f32	s17, s17, s23
 801db22:	bf48      	it	mi
 801db24:	eef1 7a67 	vnegmi.f32	s15, s15
 801db28:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801db2c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 801db30:	eef4 7acb 	vcmpe.f32	s15, s22
 801db34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db38:	dd3f      	ble.n	801dbba <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 801db3a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801db3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801db42:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801db46:	ee27 7a06 	vmul.f32	s14, s14, s12
 801db4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801db4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db52:	d847      	bhi.n	801dbe4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801db54:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 801db58:	ee3e 0aed 	vsub.f32	s0, s29, s27
 801db5c:	f000 fa33 	bl	801dfc6 <atan2f>
 801db60:	eeb0 8a40 	vmov.f32	s16, s0
 801db64:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 801db68:	ee3d 0aec 	vsub.f32	s0, s27, s25
 801db6c:	f000 fa2b 	bl	801dfc6 <atan2f>
 801db70:	ee38 0a40 	vsub.f32	s0, s16, s0
 801db74:	eddf 7a29 	vldr	s15, [pc, #164]	; 801dc1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 801db78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801db7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db80:	bf48      	it	mi
 801db82:	eeb1 0a40 	vnegmi.f32	s0, s0
 801db86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801db8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db8e:	bfa4      	itt	ge
 801db90:	eddf 7a23 	vldrge	s15, [pc, #140]	; 801dc20 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 801db94:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801db98:	eddf 7a22 	vldr	s15, [pc, #136]	; 801dc24 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 801db9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dba4:	d51e      	bpl.n	801dbe4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801dba6:	eef0 0a49 	vmov.f32	s1, s18
 801dbaa:	4628      	mov	r0, r5
 801dbac:	eeb0 0a68 	vmov.f32	s0, s17
 801dbb0:	f7f9 fd58 	bl	8017664 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801dbb4:	ecbd 8b10 	vpop	{d8-d15}
 801dbb8:	bd38      	pop	{r3, r4, r5, pc}
 801dbba:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 801dbbe:	eeb0 7a68 	vmov.f32	s14, s17
 801dbc2:	eef0 6a49 	vmov.f32	s13, s18
 801dbc6:	eea7 7aea 	vfms.f32	s14, s15, s21
 801dbca:	ee7c 7aae 	vadd.f32	s15, s25, s29
 801dbce:	eee7 6aea 	vfms.f32	s13, s15, s21
 801dbd2:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801dbd6:	eee7 7a07 	vfma.f32	s15, s14, s14
 801dbda:	eef4 7ac6 	vcmpe.f32	s15, s12
 801dbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbe2:	d9e0      	bls.n	801dba6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 801dbe4:	3401      	adds	r4, #1
 801dbe6:	eef0 0a6c 	vmov.f32	s1, s25
 801dbea:	eeb0 0a4c 	vmov.f32	s0, s24
 801dbee:	4628      	mov	r0, r5
 801dbf0:	4621      	mov	r1, r4
 801dbf2:	eef0 2a49 	vmov.f32	s5, s18
 801dbf6:	eeb0 2a68 	vmov.f32	s4, s17
 801dbfa:	eef0 1a6f 	vmov.f32	s3, s31
 801dbfe:	eeb0 1a4f 	vmov.f32	s2, s30
 801dc02:	f7ff ff4f 	bl	801daa4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801dc06:	eef0 da4a 	vmov.f32	s27, s20
 801dc0a:	eeb0 da69 	vmov.f32	s26, s19
 801dc0e:	eef0 ca49 	vmov.f32	s25, s18
 801dc12:	eeb0 ca68 	vmov.f32	s24, s17
 801dc16:	e75c      	b.n	801dad2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 801dc18:	2edbe6ff 	.word	0x2edbe6ff
 801dc1c:	40490fdb 	.word	0x40490fdb
 801dc20:	40c90fdb 	.word	0x40c90fdb
 801dc24:	3dcccccd 	.word	0x3dcccccd

0801dc28 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 801dc28:	b530      	push	{r4, r5, lr}
 801dc2a:	ed2d 8b10 	vpush	{d8-d15}
 801dc2e:	eef0 8a40 	vmov.f32	s17, s0
 801dc32:	b085      	sub	sp, #20
 801dc34:	eef0 9a60 	vmov.f32	s19, s1
 801dc38:	4604      	mov	r4, r0
 801dc3a:	eef0 fa41 	vmov.f32	s31, s2
 801dc3e:	460d      	mov	r5, r1
 801dc40:	eeb0 fa61 	vmov.f32	s30, s3
 801dc44:	eef0 ba42 	vmov.f32	s23, s4
 801dc48:	eeb0 ca62 	vmov.f32	s24, s5
 801dc4c:	eef0 aa43 	vmov.f32	s21, s6
 801dc50:	eeb0 ba63 	vmov.f32	s22, s7
 801dc54:	2d08      	cmp	r5, #8
 801dc56:	f200 8113 	bhi.w	801de80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 801dc5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dc5e:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 801dc62:	ee7f 6aab 	vadd.f32	s13, s31, s23
 801dc66:	ee38 daaf 	vadd.f32	s26, s17, s31
 801dc6a:	ee26 6a27 	vmul.f32	s12, s12, s15
 801dc6e:	ee7c ca0b 	vadd.f32	s25, s24, s22
 801dc72:	ee2d da27 	vmul.f32	s26, s26, s15
 801dc76:	ed8d 6a01 	vstr	s12, [sp, #4]
 801dc7a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dc7e:	ee6c caa7 	vmul.f32	s25, s25, s15
 801dc82:	eeb0 ea4d 	vmov.f32	s28, s26
 801dc86:	ee79 da8f 	vadd.f32	s27, s19, s30
 801dc8a:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 801dc8e:	eea6 eaa7 	vfma.f32	s28, s13, s15
 801dc92:	ee66 6a27 	vmul.f32	s13, s12, s15
 801dc96:	ee6d daa7 	vmul.f32	s27, s27, s15
 801dc9a:	edcd 6a03 	vstr	s13, [sp, #12]
 801dc9e:	eef0 6a6c 	vmov.f32	s13, s25
 801dca2:	eef0 ea6d 	vmov.f32	s29, s27
 801dca6:	ee2e ea27 	vmul.f32	s28, s28, s15
 801dcaa:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dcae:	eee7 ea27 	vfma.f32	s29, s14, s15
 801dcb2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801dcb6:	ee6e eaa7 	vmul.f32	s29, s29, s15
 801dcba:	eef0 6a67 	vmov.f32	s13, s15
 801dcbe:	ed8d 7a02 	vstr	s14, [sp, #8]
 801dcc2:	ed9d 7a03 	vldr	s14, [sp, #12]
 801dcc6:	ee3e 9a07 	vadd.f32	s18, s28, s14
 801dcca:	ed9d 7a02 	vldr	s14, [sp, #8]
 801dcce:	ee3e aa87 	vadd.f32	s20, s29, s14
 801dcd2:	ee29 9a27 	vmul.f32	s18, s18, s15
 801dcd6:	ee2a aa27 	vmul.f32	s20, s20, s15
 801dcda:	2d00      	cmp	r5, #0
 801dcdc:	f000 810b 	beq.w	801def6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801dce0:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 801dce4:	eddf 4a95 	vldr	s9, [pc, #596]	; 801df3c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801dce8:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 801dcec:	ee7b 7a69 	vsub.f32	s15, s22, s19
 801dcf0:	ee3f 6aea 	vsub.f32	s12, s31, s21
 801dcf4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801dcf8:	ee3b 5aea 	vsub.f32	s10, s23, s21
 801dcfc:	eea6 7a27 	vfma.f32	s14, s12, s15
 801dd00:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 801dd04:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 801dd08:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801dd0c:	eea5 6a27 	vfma.f32	s12, s10, s15
 801dd10:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 801dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd18:	bf48      	it	mi
 801dd1a:	eeb1 7a47 	vnegmi.f32	s14, s14
 801dd1e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801dd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd26:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801dd2a:	bf48      	it	mi
 801dd2c:	eeb1 6a46 	vnegmi.f32	s12, s12
 801dd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd34:	f340 80a8 	ble.w	801de88 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 801dd38:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801dd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd40:	dd5a      	ble.n	801ddf8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 801dd42:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801dd46:	ee37 7a06 	vadd.f32	s14, s14, s12
 801dd4a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801dd4e:	ee27 7a07 	vmul.f32	s14, s14, s14
 801dd52:	ee65 7a85 	vmul.f32	s15, s11, s10
 801dd56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801dd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd5e:	f200 80ca 	bhi.w	801def6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801dd62:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801dd66:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801dd6a:	f000 f92c 	bl	801dfc6 <atan2f>
 801dd6e:	eeb0 8a40 	vmov.f32	s16, s0
 801dd72:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801dd76:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801dd7a:	f000 f924 	bl	801dfc6 <atan2f>
 801dd7e:	ee38 fa40 	vsub.f32	s30, s16, s0
 801dd82:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801dd86:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801dd8a:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 801dd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd92:	bf48      	it	mi
 801dd94:	eeb1 fa4f 	vnegmi.f32	s30, s30
 801dd98:	f000 f915 	bl	801dfc6 <atan2f>
 801dd9c:	ee30 0a48 	vsub.f32	s0, s0, s16
 801dda0:	eddf 7a67 	vldr	s15, [pc, #412]	; 801df40 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801dda4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801dda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddac:	eeb4 fae7 	vcmpe.f32	s30, s15
 801ddb0:	eddf 7a63 	vldr	s15, [pc, #396]	; 801df40 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801ddb4:	bf48      	it	mi
 801ddb6:	eeb1 0a40 	vnegmi.f32	s0, s0
 801ddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ddc2:	eddf 7a60 	vldr	s15, [pc, #384]	; 801df44 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801ddc6:	bfa4      	itt	ge
 801ddc8:	ed9f 7a5f 	vldrge	s14, [pc, #380]	; 801df48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801ddcc:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 801ddd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddd4:	bfa4      	itt	ge
 801ddd6:	ed9f 7a5c 	vldrge	s14, [pc, #368]	; 801df48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801ddda:	ee37 0a40 	vsubge.f32	s0, s14, s0
 801ddde:	ee3f 0a00 	vadd.f32	s0, s30, s0
 801dde2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddea:	f140 8084 	bpl.w	801def6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ddee:	eef0 0a4a 	vmov.f32	s1, s20
 801ddf2:	eeb0 0a49 	vmov.f32	s0, s18
 801ddf6:	e040      	b.n	801de7a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 801ddf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ddfc:	ee27 7a07 	vmul.f32	s14, s14, s14
 801de00:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801de04:	ee67 7a85 	vmul.f32	s15, s15, s10
 801de08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801de0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de10:	d871      	bhi.n	801def6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801de12:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801de16:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801de1a:	f000 f8d4 	bl	801dfc6 <atan2f>
 801de1e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801de22:	eeb0 8a40 	vmov.f32	s16, s0
 801de26:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801de2a:	f000 f8cc 	bl	801dfc6 <atan2f>
 801de2e:	ee38 0a40 	vsub.f32	s0, s16, s0
 801de32:	eddf 7a43 	vldr	s15, [pc, #268]	; 801df40 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801de36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801de3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de3e:	bf48      	it	mi
 801de40:	eeb1 0a40 	vnegmi.f32	s0, s0
 801de44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801de48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de4c:	bfa4      	itt	ge
 801de4e:	eddf 7a3e 	vldrge	s15, [pc, #248]	; 801df48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801de52:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801de56:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801df44 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801de5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801de5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de62:	d548      	bpl.n	801def6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801de64:	eef0 0a4f 	vmov.f32	s1, s30
 801de68:	4620      	mov	r0, r4
 801de6a:	eeb0 0a6f 	vmov.f32	s0, s31
 801de6e:	f7f9 fbf9 	bl	8017664 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801de72:	eef0 0a4c 	vmov.f32	s1, s24
 801de76:	eeb0 0a6b 	vmov.f32	s0, s23
 801de7a:	4620      	mov	r0, r4
 801de7c:	f7f9 fbf2 	bl	8017664 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801de80:	b005      	add	sp, #20
 801de82:	ecbd 8b10 	vpop	{d8-d15}
 801de86:	bd30      	pop	{r4, r5, pc}
 801de88:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801df3c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801de8c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801de90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de94:	dd19      	ble.n	801deca <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 801de96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801de9a:	ee26 7a06 	vmul.f32	s14, s12, s12
 801de9e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801dea2:	ee67 7a85 	vmul.f32	s15, s15, s10
 801dea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801deaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deae:	d822      	bhi.n	801def6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801deb0:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801deb4:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801deb8:	f000 f885 	bl	801dfc6 <atan2f>
 801debc:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801dec0:	eeb0 8a40 	vmov.f32	s16, s0
 801dec4:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801dec8:	e7af      	b.n	801de2a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 801deca:	ee78 7aaa 	vadd.f32	s15, s17, s21
 801dece:	eeb0 7a49 	vmov.f32	s14, s18
 801ded2:	eeb0 6a4a 	vmov.f32	s12, s20
 801ded6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801deda:	ee79 7a8b 	vadd.f32	s15, s19, s22
 801dede:	eea7 6ae6 	vfms.f32	s12, s15, s13
 801dee2:	ee66 7a06 	vmul.f32	s15, s12, s12
 801dee6:	eee7 7a07 	vfma.f32	s15, s14, s14
 801deea:	eef4 7ac5 	vcmpe.f32	s15, s10
 801deee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801def2:	f67f af7c 	bls.w	801ddee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 801def6:	3501      	adds	r5, #1
 801def8:	eef0 0a69 	vmov.f32	s1, s19
 801defc:	eeb0 0a68 	vmov.f32	s0, s17
 801df00:	4620      	mov	r0, r4
 801df02:	4629      	mov	r1, r5
 801df04:	eef0 3a4a 	vmov.f32	s7, s20
 801df08:	eeb0 3a49 	vmov.f32	s6, s18
 801df0c:	eef0 2a6e 	vmov.f32	s5, s29
 801df10:	eeb0 2a4e 	vmov.f32	s4, s28
 801df14:	eef0 1a6d 	vmov.f32	s3, s27
 801df18:	eeb0 1a4d 	vmov.f32	s2, s26
 801df1c:	f7ff fe84 	bl	801dc28 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 801df20:	eeb0 ca6c 	vmov.f32	s24, s25
 801df24:	eddd ba01 	vldr	s23, [sp, #4]
 801df28:	eef0 9a4a 	vmov.f32	s19, s20
 801df2c:	ed9d fa02 	vldr	s30, [sp, #8]
 801df30:	eef0 8a49 	vmov.f32	s17, s18
 801df34:	eddd fa03 	vldr	s31, [sp, #12]
 801df38:	e68c      	b.n	801dc54 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 801df3a:	bf00      	nop
 801df3c:	2edbe6ff 	.word	0x2edbe6ff
 801df40:	40490fdb 	.word	0x40490fdb
 801df44:	3dcccccd 	.word	0x3dcccccd
 801df48:	40c90fdb 	.word	0x40c90fdb

0801df4c <_ZN8touchgfx6CanvasD1Ev>:
 801df4c:	4b04      	ldr	r3, [pc, #16]	; (801df60 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801df4e:	b510      	push	{r4, lr}
 801df50:	4604      	mov	r4, r0
 801df52:	f840 3b14 	str.w	r3, [r0], #20
 801df56:	f7f9 ff29 	bl	8017dac <_ZN8touchgfx7OutlineD1Ev>
 801df5a:	4620      	mov	r0, r4
 801df5c:	bd10      	pop	{r4, pc}
 801df5e:	bf00      	nop
 801df60:	0802418c 	.word	0x0802418c

0801df64 <_ZN8touchgfx6CanvasD0Ev>:
 801df64:	b510      	push	{r4, lr}
 801df66:	4604      	mov	r4, r0
 801df68:	f7ff fff0 	bl	801df4c <_ZN8touchgfx6CanvasD1Ev>
 801df6c:	2174      	movs	r1, #116	; 0x74
 801df6e:	4620      	mov	r0, r4
 801df70:	f000 f802 	bl	801df78 <_ZdlPvj>
 801df74:	4620      	mov	r0, r4
 801df76:	bd10      	pop	{r4, pc}

0801df78 <_ZdlPvj>:
 801df78:	f000 b812 	b.w	801dfa0 <_ZdlPv>

0801df7c <__cxa_guard_acquire>:
 801df7c:	6803      	ldr	r3, [r0, #0]
 801df7e:	07db      	lsls	r3, r3, #31
 801df80:	d406      	bmi.n	801df90 <__cxa_guard_acquire+0x14>
 801df82:	7843      	ldrb	r3, [r0, #1]
 801df84:	b103      	cbz	r3, 801df88 <__cxa_guard_acquire+0xc>
 801df86:	deff      	udf	#255	; 0xff
 801df88:	2301      	movs	r3, #1
 801df8a:	7043      	strb	r3, [r0, #1]
 801df8c:	4618      	mov	r0, r3
 801df8e:	4770      	bx	lr
 801df90:	2000      	movs	r0, #0
 801df92:	4770      	bx	lr

0801df94 <__cxa_guard_release>:
 801df94:	2301      	movs	r3, #1
 801df96:	6003      	str	r3, [r0, #0]
 801df98:	4770      	bx	lr

0801df9a <__cxa_pure_virtual>:
 801df9a:	b508      	push	{r3, lr}
 801df9c:	f000 f80e 	bl	801dfbc <_ZSt9terminatev>

0801dfa0 <_ZdlPv>:
 801dfa0:	f000 bf5c 	b.w	801ee5c <free>

0801dfa4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801dfa4:	b508      	push	{r3, lr}
 801dfa6:	4780      	blx	r0
 801dfa8:	f000 ff24 	bl	801edf4 <abort>

0801dfac <_ZSt13get_terminatev>:
 801dfac:	4b02      	ldr	r3, [pc, #8]	; (801dfb8 <_ZSt13get_terminatev+0xc>)
 801dfae:	6818      	ldr	r0, [r3, #0]
 801dfb0:	f3bf 8f5b 	dmb	ish
 801dfb4:	4770      	bx	lr
 801dfb6:	bf00      	nop
 801dfb8:	2000003c 	.word	0x2000003c

0801dfbc <_ZSt9terminatev>:
 801dfbc:	b508      	push	{r3, lr}
 801dfbe:	f7ff fff5 	bl	801dfac <_ZSt13get_terminatev>
 801dfc2:	f7ff ffef 	bl	801dfa4 <_ZN10__cxxabiv111__terminateEPFvvE>

0801dfc6 <atan2f>:
 801dfc6:	f000 b953 	b.w	801e270 <__ieee754_atan2f>
	...

0801dfcc <sqrtf>:
 801dfcc:	b508      	push	{r3, lr}
 801dfce:	ed2d 8b02 	vpush	{d8}
 801dfd2:	eeb0 8a40 	vmov.f32	s16, s0
 801dfd6:	f000 f8a1 	bl	801e11c <__ieee754_sqrtf>
 801dfda:	eeb4 8a48 	vcmp.f32	s16, s16
 801dfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfe2:	d60c      	bvs.n	801dffe <sqrtf+0x32>
 801dfe4:	eddf 8a07 	vldr	s17, [pc, #28]	; 801e004 <sqrtf+0x38>
 801dfe8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801dfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dff0:	d505      	bpl.n	801dffe <sqrtf+0x32>
 801dff2:	f001 fad5 	bl	801f5a0 <__errno>
 801dff6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801dffa:	2321      	movs	r3, #33	; 0x21
 801dffc:	6003      	str	r3, [r0, #0]
 801dffe:	ecbd 8b02 	vpop	{d8}
 801e002:	bd08      	pop	{r3, pc}
 801e004:	00000000 	.word	0x00000000

0801e008 <cosf>:
 801e008:	ee10 3a10 	vmov	r3, s0
 801e00c:	b507      	push	{r0, r1, r2, lr}
 801e00e:	4a1e      	ldr	r2, [pc, #120]	; (801e088 <cosf+0x80>)
 801e010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e014:	4293      	cmp	r3, r2
 801e016:	dc06      	bgt.n	801e026 <cosf+0x1e>
 801e018:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801e08c <cosf+0x84>
 801e01c:	b003      	add	sp, #12
 801e01e:	f85d eb04 	ldr.w	lr, [sp], #4
 801e022:	f000 b87f 	b.w	801e124 <__kernel_cosf>
 801e026:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e02a:	db04      	blt.n	801e036 <cosf+0x2e>
 801e02c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e030:	b003      	add	sp, #12
 801e032:	f85d fb04 	ldr.w	pc, [sp], #4
 801e036:	4668      	mov	r0, sp
 801e038:	f000 f9ba 	bl	801e3b0 <__ieee754_rem_pio2f>
 801e03c:	f000 0003 	and.w	r0, r0, #3
 801e040:	2801      	cmp	r0, #1
 801e042:	d009      	beq.n	801e058 <cosf+0x50>
 801e044:	2802      	cmp	r0, #2
 801e046:	d010      	beq.n	801e06a <cosf+0x62>
 801e048:	b9b0      	cbnz	r0, 801e078 <cosf+0x70>
 801e04a:	eddd 0a01 	vldr	s1, [sp, #4]
 801e04e:	ed9d 0a00 	vldr	s0, [sp]
 801e052:	f000 f867 	bl	801e124 <__kernel_cosf>
 801e056:	e7eb      	b.n	801e030 <cosf+0x28>
 801e058:	eddd 0a01 	vldr	s1, [sp, #4]
 801e05c:	ed9d 0a00 	vldr	s0, [sp]
 801e060:	f000 f8be 	bl	801e1e0 <__kernel_sinf>
 801e064:	eeb1 0a40 	vneg.f32	s0, s0
 801e068:	e7e2      	b.n	801e030 <cosf+0x28>
 801e06a:	eddd 0a01 	vldr	s1, [sp, #4]
 801e06e:	ed9d 0a00 	vldr	s0, [sp]
 801e072:	f000 f857 	bl	801e124 <__kernel_cosf>
 801e076:	e7f5      	b.n	801e064 <cosf+0x5c>
 801e078:	eddd 0a01 	vldr	s1, [sp, #4]
 801e07c:	ed9d 0a00 	vldr	s0, [sp]
 801e080:	2001      	movs	r0, #1
 801e082:	f000 f8ad 	bl	801e1e0 <__kernel_sinf>
 801e086:	e7d3      	b.n	801e030 <cosf+0x28>
 801e088:	3f490fd8 	.word	0x3f490fd8
 801e08c:	00000000 	.word	0x00000000

0801e090 <sinf>:
 801e090:	ee10 3a10 	vmov	r3, s0
 801e094:	b507      	push	{r0, r1, r2, lr}
 801e096:	4a1f      	ldr	r2, [pc, #124]	; (801e114 <sinf+0x84>)
 801e098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e09c:	4293      	cmp	r3, r2
 801e09e:	dc07      	bgt.n	801e0b0 <sinf+0x20>
 801e0a0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801e118 <sinf+0x88>
 801e0a4:	2000      	movs	r0, #0
 801e0a6:	b003      	add	sp, #12
 801e0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0ac:	f000 b898 	b.w	801e1e0 <__kernel_sinf>
 801e0b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e0b4:	db04      	blt.n	801e0c0 <sinf+0x30>
 801e0b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e0ba:	b003      	add	sp, #12
 801e0bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801e0c0:	4668      	mov	r0, sp
 801e0c2:	f000 f975 	bl	801e3b0 <__ieee754_rem_pio2f>
 801e0c6:	f000 0003 	and.w	r0, r0, #3
 801e0ca:	2801      	cmp	r0, #1
 801e0cc:	d00a      	beq.n	801e0e4 <sinf+0x54>
 801e0ce:	2802      	cmp	r0, #2
 801e0d0:	d00f      	beq.n	801e0f2 <sinf+0x62>
 801e0d2:	b9c0      	cbnz	r0, 801e106 <sinf+0x76>
 801e0d4:	eddd 0a01 	vldr	s1, [sp, #4]
 801e0d8:	ed9d 0a00 	vldr	s0, [sp]
 801e0dc:	2001      	movs	r0, #1
 801e0de:	f000 f87f 	bl	801e1e0 <__kernel_sinf>
 801e0e2:	e7ea      	b.n	801e0ba <sinf+0x2a>
 801e0e4:	eddd 0a01 	vldr	s1, [sp, #4]
 801e0e8:	ed9d 0a00 	vldr	s0, [sp]
 801e0ec:	f000 f81a 	bl	801e124 <__kernel_cosf>
 801e0f0:	e7e3      	b.n	801e0ba <sinf+0x2a>
 801e0f2:	eddd 0a01 	vldr	s1, [sp, #4]
 801e0f6:	ed9d 0a00 	vldr	s0, [sp]
 801e0fa:	2001      	movs	r0, #1
 801e0fc:	f000 f870 	bl	801e1e0 <__kernel_sinf>
 801e100:	eeb1 0a40 	vneg.f32	s0, s0
 801e104:	e7d9      	b.n	801e0ba <sinf+0x2a>
 801e106:	eddd 0a01 	vldr	s1, [sp, #4]
 801e10a:	ed9d 0a00 	vldr	s0, [sp]
 801e10e:	f000 f809 	bl	801e124 <__kernel_cosf>
 801e112:	e7f5      	b.n	801e100 <sinf+0x70>
 801e114:	3f490fd8 	.word	0x3f490fd8
 801e118:	00000000 	.word	0x00000000

0801e11c <__ieee754_sqrtf>:
 801e11c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e120:	4770      	bx	lr
	...

0801e124 <__kernel_cosf>:
 801e124:	ee10 3a10 	vmov	r3, s0
 801e128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e12c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e134:	da05      	bge.n	801e142 <__kernel_cosf+0x1e>
 801e136:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e13a:	ee17 2a90 	vmov	r2, s15
 801e13e:	2a00      	cmp	r2, #0
 801e140:	d03b      	beq.n	801e1ba <__kernel_cosf+0x96>
 801e142:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e146:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801e1c0 <__kernel_cosf+0x9c>
 801e14a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801e1c4 <__kernel_cosf+0xa0>
 801e14e:	4a1e      	ldr	r2, [pc, #120]	; (801e1c8 <__kernel_cosf+0xa4>)
 801e150:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e154:	4293      	cmp	r3, r2
 801e156:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801e1cc <__kernel_cosf+0xa8>
 801e15a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e15e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801e1d0 <__kernel_cosf+0xac>
 801e162:	eea7 6a87 	vfma.f32	s12, s15, s14
 801e166:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801e1d4 <__kernel_cosf+0xb0>
 801e16a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e16e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801e1d8 <__kernel_cosf+0xb4>
 801e172:	eea7 6a87 	vfma.f32	s12, s15, s14
 801e176:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801e17a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801e17e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e182:	eee7 0a06 	vfma.f32	s1, s14, s12
 801e186:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e18a:	dc04      	bgt.n	801e196 <__kernel_cosf+0x72>
 801e18c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e190:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801e194:	4770      	bx	lr
 801e196:	4a11      	ldr	r2, [pc, #68]	; (801e1dc <__kernel_cosf+0xb8>)
 801e198:	4293      	cmp	r3, r2
 801e19a:	bfda      	itte	le
 801e19c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801e1a0:	ee07 3a10 	vmovle	s14, r3
 801e1a4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801e1a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e1ac:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801e1b0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e1b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e1b8:	4770      	bx	lr
 801e1ba:	eeb0 0a66 	vmov.f32	s0, s13
 801e1be:	4770      	bx	lr
 801e1c0:	ad47d74e 	.word	0xad47d74e
 801e1c4:	310f74f6 	.word	0x310f74f6
 801e1c8:	3e999999 	.word	0x3e999999
 801e1cc:	b493f27c 	.word	0xb493f27c
 801e1d0:	37d00d01 	.word	0x37d00d01
 801e1d4:	bab60b61 	.word	0xbab60b61
 801e1d8:	3d2aaaab 	.word	0x3d2aaaab
 801e1dc:	3f480000 	.word	0x3f480000

0801e1e0 <__kernel_sinf>:
 801e1e0:	ee10 3a10 	vmov	r3, s0
 801e1e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e1e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e1ec:	da04      	bge.n	801e1f8 <__kernel_sinf+0x18>
 801e1ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e1f2:	ee17 3a90 	vmov	r3, s15
 801e1f6:	b35b      	cbz	r3, 801e250 <__kernel_sinf+0x70>
 801e1f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e1fc:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e254 <__kernel_sinf+0x74>
 801e200:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801e258 <__kernel_sinf+0x78>
 801e204:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e208:	eddf 7a14 	vldr	s15, [pc, #80]	; 801e25c <__kernel_sinf+0x7c>
 801e20c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e210:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801e260 <__kernel_sinf+0x80>
 801e214:	eea7 6a87 	vfma.f32	s12, s15, s14
 801e218:	eddf 7a12 	vldr	s15, [pc, #72]	; 801e264 <__kernel_sinf+0x84>
 801e21c:	ee60 6a07 	vmul.f32	s13, s0, s14
 801e220:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e224:	b930      	cbnz	r0, 801e234 <__kernel_sinf+0x54>
 801e226:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801e268 <__kernel_sinf+0x88>
 801e22a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e22e:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e232:	4770      	bx	lr
 801e234:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801e238:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e23c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801e240:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801e244:	eddf 7a09 	vldr	s15, [pc, #36]	; 801e26c <__kernel_sinf+0x8c>
 801e248:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801e24c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e250:	4770      	bx	lr
 801e252:	bf00      	nop
 801e254:	2f2ec9d3 	.word	0x2f2ec9d3
 801e258:	b2d72f34 	.word	0xb2d72f34
 801e25c:	3638ef1b 	.word	0x3638ef1b
 801e260:	b9500d01 	.word	0xb9500d01
 801e264:	3c088889 	.word	0x3c088889
 801e268:	be2aaaab 	.word	0xbe2aaaab
 801e26c:	3e2aaaab 	.word	0x3e2aaaab

0801e270 <__ieee754_atan2f>:
 801e270:	ee10 2a90 	vmov	r2, s1
 801e274:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801e278:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e27c:	b510      	push	{r4, lr}
 801e27e:	eef0 7a40 	vmov.f32	s15, s0
 801e282:	dc06      	bgt.n	801e292 <__ieee754_atan2f+0x22>
 801e284:	ee10 0a10 	vmov	r0, s0
 801e288:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801e28c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e290:	dd04      	ble.n	801e29c <__ieee754_atan2f+0x2c>
 801e292:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801e296:	eeb0 0a67 	vmov.f32	s0, s15
 801e29a:	bd10      	pop	{r4, pc}
 801e29c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801e2a0:	d103      	bne.n	801e2aa <__ieee754_atan2f+0x3a>
 801e2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2a6:	f000 b9af 	b.w	801e608 <atanf>
 801e2aa:	1794      	asrs	r4, r2, #30
 801e2ac:	f004 0402 	and.w	r4, r4, #2
 801e2b0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801e2b4:	b943      	cbnz	r3, 801e2c8 <__ieee754_atan2f+0x58>
 801e2b6:	2c02      	cmp	r4, #2
 801e2b8:	d05e      	beq.n	801e378 <__ieee754_atan2f+0x108>
 801e2ba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801e38c <__ieee754_atan2f+0x11c>
 801e2be:	2c03      	cmp	r4, #3
 801e2c0:	bf08      	it	eq
 801e2c2:	eef0 7a47 	vmoveq.f32	s15, s14
 801e2c6:	e7e6      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e2c8:	b941      	cbnz	r1, 801e2dc <__ieee754_atan2f+0x6c>
 801e2ca:	eddf 7a31 	vldr	s15, [pc, #196]	; 801e390 <__ieee754_atan2f+0x120>
 801e2ce:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801e394 <__ieee754_atan2f+0x124>
 801e2d2:	2800      	cmp	r0, #0
 801e2d4:	bfb8      	it	lt
 801e2d6:	eef0 7a47 	vmovlt.f32	s15, s14
 801e2da:	e7dc      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e2dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e2e0:	d110      	bne.n	801e304 <__ieee754_atan2f+0x94>
 801e2e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e2e6:	f104 34ff 	add.w	r4, r4, #4294967295
 801e2ea:	d107      	bne.n	801e2fc <__ieee754_atan2f+0x8c>
 801e2ec:	2c02      	cmp	r4, #2
 801e2ee:	d846      	bhi.n	801e37e <__ieee754_atan2f+0x10e>
 801e2f0:	4b29      	ldr	r3, [pc, #164]	; (801e398 <__ieee754_atan2f+0x128>)
 801e2f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801e2f6:	edd3 7a00 	vldr	s15, [r3]
 801e2fa:	e7cc      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e2fc:	2c02      	cmp	r4, #2
 801e2fe:	d841      	bhi.n	801e384 <__ieee754_atan2f+0x114>
 801e300:	4b26      	ldr	r3, [pc, #152]	; (801e39c <__ieee754_atan2f+0x12c>)
 801e302:	e7f6      	b.n	801e2f2 <__ieee754_atan2f+0x82>
 801e304:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e308:	d0df      	beq.n	801e2ca <__ieee754_atan2f+0x5a>
 801e30a:	1a5b      	subs	r3, r3, r1
 801e30c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801e310:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801e314:	da1a      	bge.n	801e34c <__ieee754_atan2f+0xdc>
 801e316:	2a00      	cmp	r2, #0
 801e318:	da01      	bge.n	801e31e <__ieee754_atan2f+0xae>
 801e31a:	313c      	adds	r1, #60	; 0x3c
 801e31c:	db19      	blt.n	801e352 <__ieee754_atan2f+0xe2>
 801e31e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801e322:	f000 fa45 	bl	801e7b0 <fabsf>
 801e326:	f000 f96f 	bl	801e608 <atanf>
 801e32a:	eef0 7a40 	vmov.f32	s15, s0
 801e32e:	2c01      	cmp	r4, #1
 801e330:	d012      	beq.n	801e358 <__ieee754_atan2f+0xe8>
 801e332:	2c02      	cmp	r4, #2
 801e334:	d017      	beq.n	801e366 <__ieee754_atan2f+0xf6>
 801e336:	2c00      	cmp	r4, #0
 801e338:	d0ad      	beq.n	801e296 <__ieee754_atan2f+0x26>
 801e33a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801e3a0 <__ieee754_atan2f+0x130>
 801e33e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e342:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801e3a4 <__ieee754_atan2f+0x134>
 801e346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e34a:	e7a4      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e34c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801e390 <__ieee754_atan2f+0x120>
 801e350:	e7ed      	b.n	801e32e <__ieee754_atan2f+0xbe>
 801e352:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e3a8 <__ieee754_atan2f+0x138>
 801e356:	e7ea      	b.n	801e32e <__ieee754_atan2f+0xbe>
 801e358:	ee17 3a90 	vmov	r3, s15
 801e35c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e360:	ee07 3a90 	vmov	s15, r3
 801e364:	e797      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e366:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801e3a0 <__ieee754_atan2f+0x130>
 801e36a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e36e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801e3a4 <__ieee754_atan2f+0x134>
 801e372:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e376:	e78e      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e378:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801e3a4 <__ieee754_atan2f+0x134>
 801e37c:	e78b      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e37e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801e3ac <__ieee754_atan2f+0x13c>
 801e382:	e788      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e384:	eddf 7a08 	vldr	s15, [pc, #32]	; 801e3a8 <__ieee754_atan2f+0x138>
 801e388:	e785      	b.n	801e296 <__ieee754_atan2f+0x26>
 801e38a:	bf00      	nop
 801e38c:	c0490fdb 	.word	0xc0490fdb
 801e390:	3fc90fdb 	.word	0x3fc90fdb
 801e394:	bfc90fdb 	.word	0xbfc90fdb
 801e398:	08024198 	.word	0x08024198
 801e39c:	080241a4 	.word	0x080241a4
 801e3a0:	33bbbd2e 	.word	0x33bbbd2e
 801e3a4:	40490fdb 	.word	0x40490fdb
 801e3a8:	00000000 	.word	0x00000000
 801e3ac:	3f490fdb 	.word	0x3f490fdb

0801e3b0 <__ieee754_rem_pio2f>:
 801e3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3b2:	ee10 6a10 	vmov	r6, s0
 801e3b6:	4b86      	ldr	r3, [pc, #536]	; (801e5d0 <__ieee754_rem_pio2f+0x220>)
 801e3b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801e3bc:	429d      	cmp	r5, r3
 801e3be:	b087      	sub	sp, #28
 801e3c0:	4604      	mov	r4, r0
 801e3c2:	dc05      	bgt.n	801e3d0 <__ieee754_rem_pio2f+0x20>
 801e3c4:	2300      	movs	r3, #0
 801e3c6:	ed80 0a00 	vstr	s0, [r0]
 801e3ca:	6043      	str	r3, [r0, #4]
 801e3cc:	2000      	movs	r0, #0
 801e3ce:	e020      	b.n	801e412 <__ieee754_rem_pio2f+0x62>
 801e3d0:	4b80      	ldr	r3, [pc, #512]	; (801e5d4 <__ieee754_rem_pio2f+0x224>)
 801e3d2:	429d      	cmp	r5, r3
 801e3d4:	dc38      	bgt.n	801e448 <__ieee754_rem_pio2f+0x98>
 801e3d6:	2e00      	cmp	r6, #0
 801e3d8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801e5d8 <__ieee754_rem_pio2f+0x228>
 801e3dc:	4b7f      	ldr	r3, [pc, #508]	; (801e5dc <__ieee754_rem_pio2f+0x22c>)
 801e3de:	f025 050f 	bic.w	r5, r5, #15
 801e3e2:	dd18      	ble.n	801e416 <__ieee754_rem_pio2f+0x66>
 801e3e4:	429d      	cmp	r5, r3
 801e3e6:	ee70 7a47 	vsub.f32	s15, s0, s14
 801e3ea:	bf09      	itett	eq
 801e3ec:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801e5e0 <__ieee754_rem_pio2f+0x230>
 801e3f0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801e5e4 <__ieee754_rem_pio2f+0x234>
 801e3f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801e3f8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801e5e8 <__ieee754_rem_pio2f+0x238>
 801e3fc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801e400:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e404:	edc0 6a00 	vstr	s13, [r0]
 801e408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e40c:	edc0 7a01 	vstr	s15, [r0, #4]
 801e410:	2001      	movs	r0, #1
 801e412:	b007      	add	sp, #28
 801e414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e416:	429d      	cmp	r5, r3
 801e418:	ee70 7a07 	vadd.f32	s15, s0, s14
 801e41c:	bf09      	itett	eq
 801e41e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801e5e0 <__ieee754_rem_pio2f+0x230>
 801e422:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801e5e4 <__ieee754_rem_pio2f+0x234>
 801e426:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801e42a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801e5e8 <__ieee754_rem_pio2f+0x238>
 801e42e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801e432:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e436:	edc0 6a00 	vstr	s13, [r0]
 801e43a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e43e:	edc0 7a01 	vstr	s15, [r0, #4]
 801e442:	f04f 30ff 	mov.w	r0, #4294967295
 801e446:	e7e4      	b.n	801e412 <__ieee754_rem_pio2f+0x62>
 801e448:	4b68      	ldr	r3, [pc, #416]	; (801e5ec <__ieee754_rem_pio2f+0x23c>)
 801e44a:	429d      	cmp	r5, r3
 801e44c:	dc71      	bgt.n	801e532 <__ieee754_rem_pio2f+0x182>
 801e44e:	f000 f9af 	bl	801e7b0 <fabsf>
 801e452:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801e5f0 <__ieee754_rem_pio2f+0x240>
 801e456:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e45a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e45e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e466:	ee17 0a90 	vmov	r0, s15
 801e46a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801e5d8 <__ieee754_rem_pio2f+0x228>
 801e46e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801e472:	281f      	cmp	r0, #31
 801e474:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801e5e4 <__ieee754_rem_pio2f+0x234>
 801e478:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e47c:	eeb1 6a47 	vneg.f32	s12, s14
 801e480:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e484:	ee16 2a90 	vmov	r2, s13
 801e488:	dc1c      	bgt.n	801e4c4 <__ieee754_rem_pio2f+0x114>
 801e48a:	495a      	ldr	r1, [pc, #360]	; (801e5f4 <__ieee754_rem_pio2f+0x244>)
 801e48c:	1e47      	subs	r7, r0, #1
 801e48e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801e492:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801e496:	428b      	cmp	r3, r1
 801e498:	d014      	beq.n	801e4c4 <__ieee754_rem_pio2f+0x114>
 801e49a:	6022      	str	r2, [r4, #0]
 801e49c:	ed94 7a00 	vldr	s14, [r4]
 801e4a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e4a4:	2e00      	cmp	r6, #0
 801e4a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e4aa:	ed84 0a01 	vstr	s0, [r4, #4]
 801e4ae:	dab0      	bge.n	801e412 <__ieee754_rem_pio2f+0x62>
 801e4b0:	eeb1 7a47 	vneg.f32	s14, s14
 801e4b4:	eeb1 0a40 	vneg.f32	s0, s0
 801e4b8:	ed84 7a00 	vstr	s14, [r4]
 801e4bc:	ed84 0a01 	vstr	s0, [r4, #4]
 801e4c0:	4240      	negs	r0, r0
 801e4c2:	e7a6      	b.n	801e412 <__ieee754_rem_pio2f+0x62>
 801e4c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e4c8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801e4cc:	2908      	cmp	r1, #8
 801e4ce:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801e4d2:	dde2      	ble.n	801e49a <__ieee754_rem_pio2f+0xea>
 801e4d4:	eddf 5a42 	vldr	s11, [pc, #264]	; 801e5e0 <__ieee754_rem_pio2f+0x230>
 801e4d8:	eef0 6a40 	vmov.f32	s13, s0
 801e4dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801e4e0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801e4e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e4e8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801e5e8 <__ieee754_rem_pio2f+0x238>
 801e4ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801e4f0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801e4f4:	ee15 2a90 	vmov	r2, s11
 801e4f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e4fc:	1a5b      	subs	r3, r3, r1
 801e4fe:	2b19      	cmp	r3, #25
 801e500:	dc04      	bgt.n	801e50c <__ieee754_rem_pio2f+0x15c>
 801e502:	edc4 5a00 	vstr	s11, [r4]
 801e506:	eeb0 0a66 	vmov.f32	s0, s13
 801e50a:	e7c7      	b.n	801e49c <__ieee754_rem_pio2f+0xec>
 801e50c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801e5f8 <__ieee754_rem_pio2f+0x248>
 801e510:	eeb0 0a66 	vmov.f32	s0, s13
 801e514:	eea6 0a25 	vfma.f32	s0, s12, s11
 801e518:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801e51c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801e5fc <__ieee754_rem_pio2f+0x24c>
 801e520:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e524:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801e528:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e52c:	ed84 7a00 	vstr	s14, [r4]
 801e530:	e7b4      	b.n	801e49c <__ieee754_rem_pio2f+0xec>
 801e532:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801e536:	db06      	blt.n	801e546 <__ieee754_rem_pio2f+0x196>
 801e538:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e53c:	edc0 7a01 	vstr	s15, [r0, #4]
 801e540:	edc0 7a00 	vstr	s15, [r0]
 801e544:	e742      	b.n	801e3cc <__ieee754_rem_pio2f+0x1c>
 801e546:	15ea      	asrs	r2, r5, #23
 801e548:	3a86      	subs	r2, #134	; 0x86
 801e54a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801e54e:	ee07 3a90 	vmov	s15, r3
 801e552:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e556:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801e600 <__ieee754_rem_pio2f+0x250>
 801e55a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e55e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e562:	ed8d 7a03 	vstr	s14, [sp, #12]
 801e566:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e56a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e56e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e576:	ed8d 7a04 	vstr	s14, [sp, #16]
 801e57a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e57e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e586:	edcd 7a05 	vstr	s15, [sp, #20]
 801e58a:	d11e      	bne.n	801e5ca <__ieee754_rem_pio2f+0x21a>
 801e58c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801e590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e594:	bf14      	ite	ne
 801e596:	2302      	movne	r3, #2
 801e598:	2301      	moveq	r3, #1
 801e59a:	491a      	ldr	r1, [pc, #104]	; (801e604 <__ieee754_rem_pio2f+0x254>)
 801e59c:	9101      	str	r1, [sp, #4]
 801e59e:	2102      	movs	r1, #2
 801e5a0:	9100      	str	r1, [sp, #0]
 801e5a2:	a803      	add	r0, sp, #12
 801e5a4:	4621      	mov	r1, r4
 801e5a6:	f000 f90b 	bl	801e7c0 <__kernel_rem_pio2f>
 801e5aa:	2e00      	cmp	r6, #0
 801e5ac:	f6bf af31 	bge.w	801e412 <__ieee754_rem_pio2f+0x62>
 801e5b0:	edd4 7a00 	vldr	s15, [r4]
 801e5b4:	eef1 7a67 	vneg.f32	s15, s15
 801e5b8:	edc4 7a00 	vstr	s15, [r4]
 801e5bc:	edd4 7a01 	vldr	s15, [r4, #4]
 801e5c0:	eef1 7a67 	vneg.f32	s15, s15
 801e5c4:	edc4 7a01 	vstr	s15, [r4, #4]
 801e5c8:	e77a      	b.n	801e4c0 <__ieee754_rem_pio2f+0x110>
 801e5ca:	2303      	movs	r3, #3
 801e5cc:	e7e5      	b.n	801e59a <__ieee754_rem_pio2f+0x1ea>
 801e5ce:	bf00      	nop
 801e5d0:	3f490fd8 	.word	0x3f490fd8
 801e5d4:	4016cbe3 	.word	0x4016cbe3
 801e5d8:	3fc90f80 	.word	0x3fc90f80
 801e5dc:	3fc90fd0 	.word	0x3fc90fd0
 801e5e0:	37354400 	.word	0x37354400
 801e5e4:	37354443 	.word	0x37354443
 801e5e8:	2e85a308 	.word	0x2e85a308
 801e5ec:	43490f80 	.word	0x43490f80
 801e5f0:	3f22f984 	.word	0x3f22f984
 801e5f4:	080241b0 	.word	0x080241b0
 801e5f8:	2e85a300 	.word	0x2e85a300
 801e5fc:	248d3132 	.word	0x248d3132
 801e600:	43800000 	.word	0x43800000
 801e604:	08024230 	.word	0x08024230

0801e608 <atanf>:
 801e608:	b538      	push	{r3, r4, r5, lr}
 801e60a:	ee10 5a10 	vmov	r5, s0
 801e60e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801e612:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801e616:	eef0 7a40 	vmov.f32	s15, s0
 801e61a:	db10      	blt.n	801e63e <atanf+0x36>
 801e61c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e620:	dd04      	ble.n	801e62c <atanf+0x24>
 801e622:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e626:	eeb0 0a67 	vmov.f32	s0, s15
 801e62a:	bd38      	pop	{r3, r4, r5, pc}
 801e62c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e764 <atanf+0x15c>
 801e630:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801e768 <atanf+0x160>
 801e634:	2d00      	cmp	r5, #0
 801e636:	bfd8      	it	le
 801e638:	eef0 7a47 	vmovle.f32	s15, s14
 801e63c:	e7f3      	b.n	801e626 <atanf+0x1e>
 801e63e:	4b4b      	ldr	r3, [pc, #300]	; (801e76c <atanf+0x164>)
 801e640:	429c      	cmp	r4, r3
 801e642:	dc10      	bgt.n	801e666 <atanf+0x5e>
 801e644:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801e648:	da0a      	bge.n	801e660 <atanf+0x58>
 801e64a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e770 <atanf+0x168>
 801e64e:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e656:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e65e:	dce2      	bgt.n	801e626 <atanf+0x1e>
 801e660:	f04f 33ff 	mov.w	r3, #4294967295
 801e664:	e013      	b.n	801e68e <atanf+0x86>
 801e666:	f000 f8a3 	bl	801e7b0 <fabsf>
 801e66a:	4b42      	ldr	r3, [pc, #264]	; (801e774 <atanf+0x16c>)
 801e66c:	429c      	cmp	r4, r3
 801e66e:	dc4f      	bgt.n	801e710 <atanf+0x108>
 801e670:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801e674:	429c      	cmp	r4, r3
 801e676:	dc41      	bgt.n	801e6fc <atanf+0xf4>
 801e678:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801e67c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e680:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e684:	2300      	movs	r3, #0
 801e686:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e68a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e68e:	1c5a      	adds	r2, r3, #1
 801e690:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801e694:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801e778 <atanf+0x170>
 801e698:	eddf 5a38 	vldr	s11, [pc, #224]	; 801e77c <atanf+0x174>
 801e69c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801e780 <atanf+0x178>
 801e6a0:	ee66 6a06 	vmul.f32	s13, s12, s12
 801e6a4:	eee6 5a87 	vfma.f32	s11, s13, s14
 801e6a8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801e784 <atanf+0x17c>
 801e6ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e6b0:	eddf 5a35 	vldr	s11, [pc, #212]	; 801e788 <atanf+0x180>
 801e6b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e6b8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801e78c <atanf+0x184>
 801e6bc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e6c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e790 <atanf+0x188>
 801e6c4:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e6c8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801e794 <atanf+0x18c>
 801e6cc:	eea6 5a87 	vfma.f32	s10, s13, s14
 801e6d0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801e798 <atanf+0x190>
 801e6d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e6d8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801e79c <atanf+0x194>
 801e6dc:	eea7 5a26 	vfma.f32	s10, s14, s13
 801e6e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801e7a0 <atanf+0x198>
 801e6e4:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e6e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e6ec:	eea5 7a86 	vfma.f32	s14, s11, s12
 801e6f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e6f4:	d121      	bne.n	801e73a <atanf+0x132>
 801e6f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e6fa:	e794      	b.n	801e626 <atanf+0x1e>
 801e6fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e700:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e704:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e708:	2301      	movs	r3, #1
 801e70a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e70e:	e7be      	b.n	801e68e <atanf+0x86>
 801e710:	4b24      	ldr	r3, [pc, #144]	; (801e7a4 <atanf+0x19c>)
 801e712:	429c      	cmp	r4, r3
 801e714:	dc0b      	bgt.n	801e72e <atanf+0x126>
 801e716:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801e71a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e71e:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e722:	2302      	movs	r3, #2
 801e724:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e72c:	e7af      	b.n	801e68e <atanf+0x86>
 801e72e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e732:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e736:	2303      	movs	r3, #3
 801e738:	e7a9      	b.n	801e68e <atanf+0x86>
 801e73a:	4a1b      	ldr	r2, [pc, #108]	; (801e7a8 <atanf+0x1a0>)
 801e73c:	491b      	ldr	r1, [pc, #108]	; (801e7ac <atanf+0x1a4>)
 801e73e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e742:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e746:	edd3 6a00 	vldr	s13, [r3]
 801e74a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e74e:	2d00      	cmp	r5, #0
 801e750:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e754:	edd2 7a00 	vldr	s15, [r2]
 801e758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e75c:	bfb8      	it	lt
 801e75e:	eef1 7a67 	vneglt.f32	s15, s15
 801e762:	e760      	b.n	801e626 <atanf+0x1e>
 801e764:	3fc90fdb 	.word	0x3fc90fdb
 801e768:	bfc90fdb 	.word	0xbfc90fdb
 801e76c:	3edfffff 	.word	0x3edfffff
 801e770:	7149f2ca 	.word	0x7149f2ca
 801e774:	3f97ffff 	.word	0x3f97ffff
 801e778:	3c8569d7 	.word	0x3c8569d7
 801e77c:	3d4bda59 	.word	0x3d4bda59
 801e780:	bd6ef16b 	.word	0xbd6ef16b
 801e784:	3d886b35 	.word	0x3d886b35
 801e788:	3dba2e6e 	.word	0x3dba2e6e
 801e78c:	3e124925 	.word	0x3e124925
 801e790:	3eaaaaab 	.word	0x3eaaaaab
 801e794:	bd15a221 	.word	0xbd15a221
 801e798:	bd9d8795 	.word	0xbd9d8795
 801e79c:	bde38e38 	.word	0xbde38e38
 801e7a0:	be4ccccd 	.word	0xbe4ccccd
 801e7a4:	401bffff 	.word	0x401bffff
 801e7a8:	08024548 	.word	0x08024548
 801e7ac:	08024558 	.word	0x08024558

0801e7b0 <fabsf>:
 801e7b0:	ee10 3a10 	vmov	r3, s0
 801e7b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e7b8:	ee00 3a10 	vmov	s0, r3
 801e7bc:	4770      	bx	lr
	...

0801e7c0 <__kernel_rem_pio2f>:
 801e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7c4:	ed2d 8b04 	vpush	{d8-d9}
 801e7c8:	b0d9      	sub	sp, #356	; 0x164
 801e7ca:	4688      	mov	r8, r1
 801e7cc:	9002      	str	r0, [sp, #8]
 801e7ce:	49b8      	ldr	r1, [pc, #736]	; (801eab0 <__kernel_rem_pio2f+0x2f0>)
 801e7d0:	9866      	ldr	r0, [sp, #408]	; 0x198
 801e7d2:	9301      	str	r3, [sp, #4]
 801e7d4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801e7d8:	9901      	ldr	r1, [sp, #4]
 801e7da:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801e7dc:	f101 3bff 	add.w	fp, r1, #4294967295
 801e7e0:	1d11      	adds	r1, r2, #4
 801e7e2:	db25      	blt.n	801e830 <__kernel_rem_pio2f+0x70>
 801e7e4:	1ed0      	subs	r0, r2, #3
 801e7e6:	bf48      	it	mi
 801e7e8:	1d10      	addmi	r0, r2, #4
 801e7ea:	10c0      	asrs	r0, r0, #3
 801e7ec:	1c45      	adds	r5, r0, #1
 801e7ee:	00e9      	lsls	r1, r5, #3
 801e7f0:	eba0 070b 	sub.w	r7, r0, fp
 801e7f4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801eac0 <__kernel_rem_pio2f+0x300>
 801e7f8:	9103      	str	r1, [sp, #12]
 801e7fa:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801e7fe:	eb0a 0c0b 	add.w	ip, sl, fp
 801e802:	ae1c      	add	r6, sp, #112	; 0x70
 801e804:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801e808:	2400      	movs	r4, #0
 801e80a:	4564      	cmp	r4, ip
 801e80c:	dd12      	ble.n	801e834 <__kernel_rem_pio2f+0x74>
 801e80e:	9901      	ldr	r1, [sp, #4]
 801e810:	ac1c      	add	r4, sp, #112	; 0x70
 801e812:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e816:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801e81a:	f04f 0c00 	mov.w	ip, #0
 801e81e:	45d4      	cmp	ip, sl
 801e820:	dc27      	bgt.n	801e872 <__kernel_rem_pio2f+0xb2>
 801e822:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e826:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801eac0 <__kernel_rem_pio2f+0x300>
 801e82a:	4627      	mov	r7, r4
 801e82c:	2600      	movs	r6, #0
 801e82e:	e016      	b.n	801e85e <__kernel_rem_pio2f+0x9e>
 801e830:	2000      	movs	r0, #0
 801e832:	e7db      	b.n	801e7ec <__kernel_rem_pio2f+0x2c>
 801e834:	42e7      	cmn	r7, r4
 801e836:	bf5d      	ittte	pl
 801e838:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801e83c:	ee07 1a90 	vmovpl	s15, r1
 801e840:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801e844:	eef0 7a47 	vmovmi.f32	s15, s14
 801e848:	ece6 7a01 	vstmia	r6!, {s15}
 801e84c:	3401      	adds	r4, #1
 801e84e:	e7dc      	b.n	801e80a <__kernel_rem_pio2f+0x4a>
 801e850:	ecfe 6a01 	vldmia	lr!, {s13}
 801e854:	ed97 7a00 	vldr	s14, [r7]
 801e858:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e85c:	3601      	adds	r6, #1
 801e85e:	455e      	cmp	r6, fp
 801e860:	f1a7 0704 	sub.w	r7, r7, #4
 801e864:	ddf4      	ble.n	801e850 <__kernel_rem_pio2f+0x90>
 801e866:	ece9 7a01 	vstmia	r9!, {s15}
 801e86a:	f10c 0c01 	add.w	ip, ip, #1
 801e86e:	3404      	adds	r4, #4
 801e870:	e7d5      	b.n	801e81e <__kernel_rem_pio2f+0x5e>
 801e872:	a908      	add	r1, sp, #32
 801e874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e878:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801e87c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801eabc <__kernel_rem_pio2f+0x2fc>
 801e880:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801eab8 <__kernel_rem_pio2f+0x2f8>
 801e884:	9105      	str	r1, [sp, #20]
 801e886:	9304      	str	r3, [sp, #16]
 801e888:	4656      	mov	r6, sl
 801e88a:	00b3      	lsls	r3, r6, #2
 801e88c:	9306      	str	r3, [sp, #24]
 801e88e:	ab58      	add	r3, sp, #352	; 0x160
 801e890:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e894:	ac08      	add	r4, sp, #32
 801e896:	ab44      	add	r3, sp, #272	; 0x110
 801e898:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801e89c:	46a4      	mov	ip, r4
 801e89e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e8a2:	4637      	mov	r7, r6
 801e8a4:	2f00      	cmp	r7, #0
 801e8a6:	f1a0 0004 	sub.w	r0, r0, #4
 801e8aa:	dc4a      	bgt.n	801e942 <__kernel_rem_pio2f+0x182>
 801e8ac:	4628      	mov	r0, r5
 801e8ae:	9207      	str	r2, [sp, #28]
 801e8b0:	f000 f9f8 	bl	801eca4 <scalbnf>
 801e8b4:	eeb0 8a40 	vmov.f32	s16, s0
 801e8b8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801e8bc:	ee28 0a00 	vmul.f32	s0, s16, s0
 801e8c0:	f000 fa56 	bl	801ed70 <floorf>
 801e8c4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801e8c8:	eea0 8a67 	vfms.f32	s16, s0, s15
 801e8cc:	2d00      	cmp	r5, #0
 801e8ce:	9a07      	ldr	r2, [sp, #28]
 801e8d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801e8d4:	ee17 9a90 	vmov	r9, s15
 801e8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e8dc:	ee38 8a67 	vsub.f32	s16, s16, s15
 801e8e0:	dd41      	ble.n	801e966 <__kernel_rem_pio2f+0x1a6>
 801e8e2:	f106 3cff 	add.w	ip, r6, #4294967295
 801e8e6:	ab08      	add	r3, sp, #32
 801e8e8:	f1c5 0e08 	rsb	lr, r5, #8
 801e8ec:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801e8f0:	fa47 f00e 	asr.w	r0, r7, lr
 801e8f4:	4481      	add	r9, r0
 801e8f6:	fa00 f00e 	lsl.w	r0, r0, lr
 801e8fa:	1a3f      	subs	r7, r7, r0
 801e8fc:	f1c5 0007 	rsb	r0, r5, #7
 801e900:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801e904:	4107      	asrs	r7, r0
 801e906:	2f00      	cmp	r7, #0
 801e908:	dd3c      	ble.n	801e984 <__kernel_rem_pio2f+0x1c4>
 801e90a:	f04f 0e00 	mov.w	lr, #0
 801e90e:	f109 0901 	add.w	r9, r9, #1
 801e912:	4671      	mov	r1, lr
 801e914:	4576      	cmp	r6, lr
 801e916:	dc67      	bgt.n	801e9e8 <__kernel_rem_pio2f+0x228>
 801e918:	2d00      	cmp	r5, #0
 801e91a:	dd03      	ble.n	801e924 <__kernel_rem_pio2f+0x164>
 801e91c:	2d01      	cmp	r5, #1
 801e91e:	d074      	beq.n	801ea0a <__kernel_rem_pio2f+0x24a>
 801e920:	2d02      	cmp	r5, #2
 801e922:	d07b      	beq.n	801ea1c <__kernel_rem_pio2f+0x25c>
 801e924:	2f02      	cmp	r7, #2
 801e926:	d12d      	bne.n	801e984 <__kernel_rem_pio2f+0x1c4>
 801e928:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e92c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e930:	b341      	cbz	r1, 801e984 <__kernel_rem_pio2f+0x1c4>
 801e932:	4628      	mov	r0, r5
 801e934:	9207      	str	r2, [sp, #28]
 801e936:	f000 f9b5 	bl	801eca4 <scalbnf>
 801e93a:	9a07      	ldr	r2, [sp, #28]
 801e93c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e940:	e020      	b.n	801e984 <__kernel_rem_pio2f+0x1c4>
 801e942:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e946:	3f01      	subs	r7, #1
 801e948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e94c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e950:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e954:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e958:	ecac 0a01 	vstmia	ip!, {s0}
 801e95c:	ed90 0a00 	vldr	s0, [r0]
 801e960:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e964:	e79e      	b.n	801e8a4 <__kernel_rem_pio2f+0xe4>
 801e966:	d105      	bne.n	801e974 <__kernel_rem_pio2f+0x1b4>
 801e968:	1e70      	subs	r0, r6, #1
 801e96a:	ab08      	add	r3, sp, #32
 801e96c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801e970:	11ff      	asrs	r7, r7, #7
 801e972:	e7c8      	b.n	801e906 <__kernel_rem_pio2f+0x146>
 801e974:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e978:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e980:	da30      	bge.n	801e9e4 <__kernel_rem_pio2f+0x224>
 801e982:	2700      	movs	r7, #0
 801e984:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e98c:	f040 809a 	bne.w	801eac4 <__kernel_rem_pio2f+0x304>
 801e990:	1e74      	subs	r4, r6, #1
 801e992:	46a4      	mov	ip, r4
 801e994:	2100      	movs	r1, #0
 801e996:	45d4      	cmp	ip, sl
 801e998:	da47      	bge.n	801ea2a <__kernel_rem_pio2f+0x26a>
 801e99a:	2900      	cmp	r1, #0
 801e99c:	d063      	beq.n	801ea66 <__kernel_rem_pio2f+0x2a6>
 801e99e:	ab08      	add	r3, sp, #32
 801e9a0:	3d08      	subs	r5, #8
 801e9a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d07f      	beq.n	801eaaa <__kernel_rem_pio2f+0x2ea>
 801e9aa:	4628      	mov	r0, r5
 801e9ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e9b0:	f000 f978 	bl	801eca4 <scalbnf>
 801e9b4:	1c63      	adds	r3, r4, #1
 801e9b6:	aa44      	add	r2, sp, #272	; 0x110
 801e9b8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801eabc <__kernel_rem_pio2f+0x2fc>
 801e9bc:	0099      	lsls	r1, r3, #2
 801e9be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e9c2:	4623      	mov	r3, r4
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	f280 80ad 	bge.w	801eb24 <__kernel_rem_pio2f+0x364>
 801e9ca:	4623      	mov	r3, r4
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	f2c0 80cb 	blt.w	801eb68 <__kernel_rem_pio2f+0x3a8>
 801e9d2:	aa44      	add	r2, sp, #272	; 0x110
 801e9d4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e9d8:	4e36      	ldr	r6, [pc, #216]	; (801eab4 <__kernel_rem_pio2f+0x2f4>)
 801e9da:	eddf 7a39 	vldr	s15, [pc, #228]	; 801eac0 <__kernel_rem_pio2f+0x300>
 801e9de:	2000      	movs	r0, #0
 801e9e0:	1ae2      	subs	r2, r4, r3
 801e9e2:	e0b6      	b.n	801eb52 <__kernel_rem_pio2f+0x392>
 801e9e4:	2702      	movs	r7, #2
 801e9e6:	e790      	b.n	801e90a <__kernel_rem_pio2f+0x14a>
 801e9e8:	6820      	ldr	r0, [r4, #0]
 801e9ea:	b949      	cbnz	r1, 801ea00 <__kernel_rem_pio2f+0x240>
 801e9ec:	b118      	cbz	r0, 801e9f6 <__kernel_rem_pio2f+0x236>
 801e9ee:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e9f2:	6020      	str	r0, [r4, #0]
 801e9f4:	2001      	movs	r0, #1
 801e9f6:	f10e 0e01 	add.w	lr, lr, #1
 801e9fa:	3404      	adds	r4, #4
 801e9fc:	4601      	mov	r1, r0
 801e9fe:	e789      	b.n	801e914 <__kernel_rem_pio2f+0x154>
 801ea00:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ea04:	6020      	str	r0, [r4, #0]
 801ea06:	4608      	mov	r0, r1
 801ea08:	e7f5      	b.n	801e9f6 <__kernel_rem_pio2f+0x236>
 801ea0a:	1e74      	subs	r4, r6, #1
 801ea0c:	ab08      	add	r3, sp, #32
 801ea0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ea12:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ea16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ea1a:	e783      	b.n	801e924 <__kernel_rem_pio2f+0x164>
 801ea1c:	1e74      	subs	r4, r6, #1
 801ea1e:	ab08      	add	r3, sp, #32
 801ea20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ea24:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801ea28:	e7f5      	b.n	801ea16 <__kernel_rem_pio2f+0x256>
 801ea2a:	ab08      	add	r3, sp, #32
 801ea2c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801ea30:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ea34:	4301      	orrs	r1, r0
 801ea36:	e7ae      	b.n	801e996 <__kernel_rem_pio2f+0x1d6>
 801ea38:	3001      	adds	r0, #1
 801ea3a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801ea3e:	2f00      	cmp	r7, #0
 801ea40:	d0fa      	beq.n	801ea38 <__kernel_rem_pio2f+0x278>
 801ea42:	9b06      	ldr	r3, [sp, #24]
 801ea44:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801ea48:	eb0d 0403 	add.w	r4, sp, r3
 801ea4c:	9b01      	ldr	r3, [sp, #4]
 801ea4e:	18f7      	adds	r7, r6, r3
 801ea50:	ab1c      	add	r3, sp, #112	; 0x70
 801ea52:	f106 0c01 	add.w	ip, r6, #1
 801ea56:	3c4c      	subs	r4, #76	; 0x4c
 801ea58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ea5c:	4430      	add	r0, r6
 801ea5e:	4560      	cmp	r0, ip
 801ea60:	da04      	bge.n	801ea6c <__kernel_rem_pio2f+0x2ac>
 801ea62:	4606      	mov	r6, r0
 801ea64:	e711      	b.n	801e88a <__kernel_rem_pio2f+0xca>
 801ea66:	9c05      	ldr	r4, [sp, #20]
 801ea68:	2001      	movs	r0, #1
 801ea6a:	e7e6      	b.n	801ea3a <__kernel_rem_pio2f+0x27a>
 801ea6c:	9b04      	ldr	r3, [sp, #16]
 801ea6e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ea72:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ea76:	9306      	str	r3, [sp, #24]
 801ea78:	ee07 3a90 	vmov	s15, r3
 801ea7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea80:	2600      	movs	r6, #0
 801ea82:	ece7 7a01 	vstmia	r7!, {s15}
 801ea86:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801eac0 <__kernel_rem_pio2f+0x300>
 801ea8a:	46b9      	mov	r9, r7
 801ea8c:	455e      	cmp	r6, fp
 801ea8e:	dd04      	ble.n	801ea9a <__kernel_rem_pio2f+0x2da>
 801ea90:	ece4 7a01 	vstmia	r4!, {s15}
 801ea94:	f10c 0c01 	add.w	ip, ip, #1
 801ea98:	e7e1      	b.n	801ea5e <__kernel_rem_pio2f+0x29e>
 801ea9a:	ecfe 6a01 	vldmia	lr!, {s13}
 801ea9e:	ed39 7a01 	vldmdb	r9!, {s14}
 801eaa2:	3601      	adds	r6, #1
 801eaa4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801eaa8:	e7f0      	b.n	801ea8c <__kernel_rem_pio2f+0x2cc>
 801eaaa:	3c01      	subs	r4, #1
 801eaac:	e777      	b.n	801e99e <__kernel_rem_pio2f+0x1de>
 801eaae:	bf00      	nop
 801eab0:	08024594 	.word	0x08024594
 801eab4:	08024568 	.word	0x08024568
 801eab8:	43800000 	.word	0x43800000
 801eabc:	3b800000 	.word	0x3b800000
 801eac0:	00000000 	.word	0x00000000
 801eac4:	9b03      	ldr	r3, [sp, #12]
 801eac6:	eeb0 0a48 	vmov.f32	s0, s16
 801eaca:	1a98      	subs	r0, r3, r2
 801eacc:	f000 f8ea 	bl	801eca4 <scalbnf>
 801ead0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801eab8 <__kernel_rem_pio2f+0x2f8>
 801ead4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ead8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eadc:	db19      	blt.n	801eb12 <__kernel_rem_pio2f+0x352>
 801eade:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801eabc <__kernel_rem_pio2f+0x2fc>
 801eae2:	ee60 7a27 	vmul.f32	s15, s0, s15
 801eae6:	aa08      	add	r2, sp, #32
 801eae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eaec:	1c74      	adds	r4, r6, #1
 801eaee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eaf2:	3508      	adds	r5, #8
 801eaf4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801eaf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eafc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eb00:	ee10 3a10 	vmov	r3, s0
 801eb04:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801eb08:	ee17 3a90 	vmov	r3, s15
 801eb0c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801eb10:	e74b      	b.n	801e9aa <__kernel_rem_pio2f+0x1ea>
 801eb12:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eb16:	aa08      	add	r2, sp, #32
 801eb18:	ee10 3a10 	vmov	r3, s0
 801eb1c:	4634      	mov	r4, r6
 801eb1e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801eb22:	e742      	b.n	801e9aa <__kernel_rem_pio2f+0x1ea>
 801eb24:	a808      	add	r0, sp, #32
 801eb26:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801eb2a:	9001      	str	r0, [sp, #4]
 801eb2c:	ee07 0a90 	vmov	s15, r0
 801eb30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eb34:	3b01      	subs	r3, #1
 801eb36:	ee67 7a80 	vmul.f32	s15, s15, s0
 801eb3a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801eb3e:	ed62 7a01 	vstmdb	r2!, {s15}
 801eb42:	e73f      	b.n	801e9c4 <__kernel_rem_pio2f+0x204>
 801eb44:	ecf6 6a01 	vldmia	r6!, {s13}
 801eb48:	ecb5 7a01 	vldmia	r5!, {s14}
 801eb4c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801eb50:	3001      	adds	r0, #1
 801eb52:	4550      	cmp	r0, sl
 801eb54:	dc01      	bgt.n	801eb5a <__kernel_rem_pio2f+0x39a>
 801eb56:	4290      	cmp	r0, r2
 801eb58:	ddf4      	ble.n	801eb44 <__kernel_rem_pio2f+0x384>
 801eb5a:	a858      	add	r0, sp, #352	; 0x160
 801eb5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801eb60:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801eb64:	3b01      	subs	r3, #1
 801eb66:	e731      	b.n	801e9cc <__kernel_rem_pio2f+0x20c>
 801eb68:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801eb6a:	2b02      	cmp	r3, #2
 801eb6c:	dc09      	bgt.n	801eb82 <__kernel_rem_pio2f+0x3c2>
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	dc2b      	bgt.n	801ebca <__kernel_rem_pio2f+0x40a>
 801eb72:	d044      	beq.n	801ebfe <__kernel_rem_pio2f+0x43e>
 801eb74:	f009 0007 	and.w	r0, r9, #7
 801eb78:	b059      	add	sp, #356	; 0x164
 801eb7a:	ecbd 8b04 	vpop	{d8-d9}
 801eb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb82:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801eb84:	2b03      	cmp	r3, #3
 801eb86:	d1f5      	bne.n	801eb74 <__kernel_rem_pio2f+0x3b4>
 801eb88:	aa30      	add	r2, sp, #192	; 0xc0
 801eb8a:	1f0b      	subs	r3, r1, #4
 801eb8c:	4413      	add	r3, r2
 801eb8e:	461a      	mov	r2, r3
 801eb90:	4620      	mov	r0, r4
 801eb92:	2800      	cmp	r0, #0
 801eb94:	f1a2 0204 	sub.w	r2, r2, #4
 801eb98:	dc52      	bgt.n	801ec40 <__kernel_rem_pio2f+0x480>
 801eb9a:	4622      	mov	r2, r4
 801eb9c:	2a01      	cmp	r2, #1
 801eb9e:	f1a3 0304 	sub.w	r3, r3, #4
 801eba2:	dc5d      	bgt.n	801ec60 <__kernel_rem_pio2f+0x4a0>
 801eba4:	ab30      	add	r3, sp, #192	; 0xc0
 801eba6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801eac0 <__kernel_rem_pio2f+0x300>
 801ebaa:	440b      	add	r3, r1
 801ebac:	2c01      	cmp	r4, #1
 801ebae:	dc67      	bgt.n	801ec80 <__kernel_rem_pio2f+0x4c0>
 801ebb0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ebb4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801ebb8:	2f00      	cmp	r7, #0
 801ebba:	d167      	bne.n	801ec8c <__kernel_rem_pio2f+0x4cc>
 801ebbc:	edc8 6a00 	vstr	s13, [r8]
 801ebc0:	ed88 7a01 	vstr	s14, [r8, #4]
 801ebc4:	edc8 7a02 	vstr	s15, [r8, #8]
 801ebc8:	e7d4      	b.n	801eb74 <__kernel_rem_pio2f+0x3b4>
 801ebca:	ab30      	add	r3, sp, #192	; 0xc0
 801ebcc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801eac0 <__kernel_rem_pio2f+0x300>
 801ebd0:	440b      	add	r3, r1
 801ebd2:	4622      	mov	r2, r4
 801ebd4:	2a00      	cmp	r2, #0
 801ebd6:	da24      	bge.n	801ec22 <__kernel_rem_pio2f+0x462>
 801ebd8:	b34f      	cbz	r7, 801ec2e <__kernel_rem_pio2f+0x46e>
 801ebda:	eef1 7a47 	vneg.f32	s15, s14
 801ebde:	edc8 7a00 	vstr	s15, [r8]
 801ebe2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ebe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ebea:	aa31      	add	r2, sp, #196	; 0xc4
 801ebec:	2301      	movs	r3, #1
 801ebee:	429c      	cmp	r4, r3
 801ebf0:	da20      	bge.n	801ec34 <__kernel_rem_pio2f+0x474>
 801ebf2:	b10f      	cbz	r7, 801ebf8 <__kernel_rem_pio2f+0x438>
 801ebf4:	eef1 7a67 	vneg.f32	s15, s15
 801ebf8:	edc8 7a01 	vstr	s15, [r8, #4]
 801ebfc:	e7ba      	b.n	801eb74 <__kernel_rem_pio2f+0x3b4>
 801ebfe:	ab30      	add	r3, sp, #192	; 0xc0
 801ec00:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801eac0 <__kernel_rem_pio2f+0x300>
 801ec04:	440b      	add	r3, r1
 801ec06:	2c00      	cmp	r4, #0
 801ec08:	da05      	bge.n	801ec16 <__kernel_rem_pio2f+0x456>
 801ec0a:	b10f      	cbz	r7, 801ec10 <__kernel_rem_pio2f+0x450>
 801ec0c:	eef1 7a67 	vneg.f32	s15, s15
 801ec10:	edc8 7a00 	vstr	s15, [r8]
 801ec14:	e7ae      	b.n	801eb74 <__kernel_rem_pio2f+0x3b4>
 801ec16:	ed33 7a01 	vldmdb	r3!, {s14}
 801ec1a:	3c01      	subs	r4, #1
 801ec1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ec20:	e7f1      	b.n	801ec06 <__kernel_rem_pio2f+0x446>
 801ec22:	ed73 7a01 	vldmdb	r3!, {s15}
 801ec26:	3a01      	subs	r2, #1
 801ec28:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ec2c:	e7d2      	b.n	801ebd4 <__kernel_rem_pio2f+0x414>
 801ec2e:	eef0 7a47 	vmov.f32	s15, s14
 801ec32:	e7d4      	b.n	801ebde <__kernel_rem_pio2f+0x41e>
 801ec34:	ecb2 7a01 	vldmia	r2!, {s14}
 801ec38:	3301      	adds	r3, #1
 801ec3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ec3e:	e7d6      	b.n	801ebee <__kernel_rem_pio2f+0x42e>
 801ec40:	edd2 7a00 	vldr	s15, [r2]
 801ec44:	edd2 6a01 	vldr	s13, [r2, #4]
 801ec48:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ec4c:	3801      	subs	r0, #1
 801ec4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ec52:	ed82 7a00 	vstr	s14, [r2]
 801ec56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec5a:	edc2 7a01 	vstr	s15, [r2, #4]
 801ec5e:	e798      	b.n	801eb92 <__kernel_rem_pio2f+0x3d2>
 801ec60:	edd3 7a00 	vldr	s15, [r3]
 801ec64:	edd3 6a01 	vldr	s13, [r3, #4]
 801ec68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ec6c:	3a01      	subs	r2, #1
 801ec6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ec72:	ed83 7a00 	vstr	s14, [r3]
 801ec76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec7a:	edc3 7a01 	vstr	s15, [r3, #4]
 801ec7e:	e78d      	b.n	801eb9c <__kernel_rem_pio2f+0x3dc>
 801ec80:	ed33 7a01 	vldmdb	r3!, {s14}
 801ec84:	3c01      	subs	r4, #1
 801ec86:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ec8a:	e78f      	b.n	801ebac <__kernel_rem_pio2f+0x3ec>
 801ec8c:	eef1 6a66 	vneg.f32	s13, s13
 801ec90:	eeb1 7a47 	vneg.f32	s14, s14
 801ec94:	edc8 6a00 	vstr	s13, [r8]
 801ec98:	ed88 7a01 	vstr	s14, [r8, #4]
 801ec9c:	eef1 7a67 	vneg.f32	s15, s15
 801eca0:	e790      	b.n	801ebc4 <__kernel_rem_pio2f+0x404>
 801eca2:	bf00      	nop

0801eca4 <scalbnf>:
 801eca4:	ee10 3a10 	vmov	r3, s0
 801eca8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801ecac:	d02b      	beq.n	801ed06 <scalbnf+0x62>
 801ecae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801ecb2:	d302      	bcc.n	801ecba <scalbnf+0x16>
 801ecb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ecb8:	4770      	bx	lr
 801ecba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801ecbe:	d123      	bne.n	801ed08 <scalbnf+0x64>
 801ecc0:	4b24      	ldr	r3, [pc, #144]	; (801ed54 <scalbnf+0xb0>)
 801ecc2:	eddf 7a25 	vldr	s15, [pc, #148]	; 801ed58 <scalbnf+0xb4>
 801ecc6:	4298      	cmp	r0, r3
 801ecc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801eccc:	db17      	blt.n	801ecfe <scalbnf+0x5a>
 801ecce:	ee10 3a10 	vmov	r3, s0
 801ecd2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ecd6:	3a19      	subs	r2, #25
 801ecd8:	f24c 3150 	movw	r1, #50000	; 0xc350
 801ecdc:	4288      	cmp	r0, r1
 801ecde:	dd15      	ble.n	801ed0c <scalbnf+0x68>
 801ece0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801ed5c <scalbnf+0xb8>
 801ece4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801ed60 <scalbnf+0xbc>
 801ece8:	ee10 3a10 	vmov	r3, s0
 801ecec:	eeb0 7a67 	vmov.f32	s14, s15
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	bfb8      	it	lt
 801ecf4:	eef0 7a66 	vmovlt.f32	s15, s13
 801ecf8:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ecfc:	4770      	bx	lr
 801ecfe:	eddf 7a19 	vldr	s15, [pc, #100]	; 801ed64 <scalbnf+0xc0>
 801ed02:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ed06:	4770      	bx	lr
 801ed08:	0dd2      	lsrs	r2, r2, #23
 801ed0a:	e7e5      	b.n	801ecd8 <scalbnf+0x34>
 801ed0c:	4410      	add	r0, r2
 801ed0e:	28fe      	cmp	r0, #254	; 0xfe
 801ed10:	dce6      	bgt.n	801ece0 <scalbnf+0x3c>
 801ed12:	2800      	cmp	r0, #0
 801ed14:	dd06      	ble.n	801ed24 <scalbnf+0x80>
 801ed16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ed1a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ed1e:	ee00 3a10 	vmov	s0, r3
 801ed22:	4770      	bx	lr
 801ed24:	f110 0f16 	cmn.w	r0, #22
 801ed28:	da09      	bge.n	801ed3e <scalbnf+0x9a>
 801ed2a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ed64 <scalbnf+0xc0>
 801ed2e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801ed68 <scalbnf+0xc4>
 801ed32:	ee10 3a10 	vmov	r3, s0
 801ed36:	eeb0 7a67 	vmov.f32	s14, s15
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	e7d9      	b.n	801ecf2 <scalbnf+0x4e>
 801ed3e:	3019      	adds	r0, #25
 801ed40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ed44:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ed48:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801ed6c <scalbnf+0xc8>
 801ed4c:	ee07 3a90 	vmov	s15, r3
 801ed50:	e7d7      	b.n	801ed02 <scalbnf+0x5e>
 801ed52:	bf00      	nop
 801ed54:	ffff3cb0 	.word	0xffff3cb0
 801ed58:	4c000000 	.word	0x4c000000
 801ed5c:	7149f2ca 	.word	0x7149f2ca
 801ed60:	f149f2ca 	.word	0xf149f2ca
 801ed64:	0da24260 	.word	0x0da24260
 801ed68:	8da24260 	.word	0x8da24260
 801ed6c:	33000000 	.word	0x33000000

0801ed70 <floorf>:
 801ed70:	ee10 3a10 	vmov	r3, s0
 801ed74:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ed78:	3a7f      	subs	r2, #127	; 0x7f
 801ed7a:	2a16      	cmp	r2, #22
 801ed7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ed80:	dc2a      	bgt.n	801edd8 <floorf+0x68>
 801ed82:	2a00      	cmp	r2, #0
 801ed84:	da11      	bge.n	801edaa <floorf+0x3a>
 801ed86:	eddf 7a18 	vldr	s15, [pc, #96]	; 801ede8 <floorf+0x78>
 801ed8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ed8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ed92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed96:	dd05      	ble.n	801eda4 <floorf+0x34>
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	da23      	bge.n	801ede4 <floorf+0x74>
 801ed9c:	4a13      	ldr	r2, [pc, #76]	; (801edec <floorf+0x7c>)
 801ed9e:	2900      	cmp	r1, #0
 801eda0:	bf18      	it	ne
 801eda2:	4613      	movne	r3, r2
 801eda4:	ee00 3a10 	vmov	s0, r3
 801eda8:	4770      	bx	lr
 801edaa:	4911      	ldr	r1, [pc, #68]	; (801edf0 <floorf+0x80>)
 801edac:	4111      	asrs	r1, r2
 801edae:	420b      	tst	r3, r1
 801edb0:	d0fa      	beq.n	801eda8 <floorf+0x38>
 801edb2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801ede8 <floorf+0x78>
 801edb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801edba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801edbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edc2:	ddef      	ble.n	801eda4 <floorf+0x34>
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	bfbe      	ittt	lt
 801edc8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801edcc:	fa40 f202 	asrlt.w	r2, r0, r2
 801edd0:	189b      	addlt	r3, r3, r2
 801edd2:	ea23 0301 	bic.w	r3, r3, r1
 801edd6:	e7e5      	b.n	801eda4 <floorf+0x34>
 801edd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801eddc:	d3e4      	bcc.n	801eda8 <floorf+0x38>
 801edde:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ede2:	4770      	bx	lr
 801ede4:	2300      	movs	r3, #0
 801ede6:	e7dd      	b.n	801eda4 <floorf+0x34>
 801ede8:	7149f2ca 	.word	0x7149f2ca
 801edec:	bf800000 	.word	0xbf800000
 801edf0:	007fffff 	.word	0x007fffff

0801edf4 <abort>:
 801edf4:	b508      	push	{r3, lr}
 801edf6:	2006      	movs	r0, #6
 801edf8:	f000 fb60 	bl	801f4bc <raise>
 801edfc:	2001      	movs	r0, #1
 801edfe:	f7e2 fec7 	bl	8001b90 <_exit>
	...

0801ee04 <__assert_func>:
 801ee04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ee06:	4614      	mov	r4, r2
 801ee08:	461a      	mov	r2, r3
 801ee0a:	4b09      	ldr	r3, [pc, #36]	; (801ee30 <__assert_func+0x2c>)
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	4605      	mov	r5, r0
 801ee10:	68d8      	ldr	r0, [r3, #12]
 801ee12:	b14c      	cbz	r4, 801ee28 <__assert_func+0x24>
 801ee14:	4b07      	ldr	r3, [pc, #28]	; (801ee34 <__assert_func+0x30>)
 801ee16:	9100      	str	r1, [sp, #0]
 801ee18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ee1c:	4906      	ldr	r1, [pc, #24]	; (801ee38 <__assert_func+0x34>)
 801ee1e:	462b      	mov	r3, r5
 801ee20:	f000 f974 	bl	801f10c <fiprintf>
 801ee24:	f7ff ffe6 	bl	801edf4 <abort>
 801ee28:	4b04      	ldr	r3, [pc, #16]	; (801ee3c <__assert_func+0x38>)
 801ee2a:	461c      	mov	r4, r3
 801ee2c:	e7f3      	b.n	801ee16 <__assert_func+0x12>
 801ee2e:	bf00      	nop
 801ee30:	20000098 	.word	0x20000098
 801ee34:	080245a0 	.word	0x080245a0
 801ee38:	080245ad 	.word	0x080245ad
 801ee3c:	08020306 	.word	0x08020306

0801ee40 <atexit>:
 801ee40:	2300      	movs	r3, #0
 801ee42:	4601      	mov	r1, r0
 801ee44:	461a      	mov	r2, r3
 801ee46:	4618      	mov	r0, r3
 801ee48:	f000 bbe6 	b.w	801f618 <__register_exitproc>

0801ee4c <malloc>:
 801ee4c:	4b02      	ldr	r3, [pc, #8]	; (801ee58 <malloc+0xc>)
 801ee4e:	4601      	mov	r1, r0
 801ee50:	6818      	ldr	r0, [r3, #0]
 801ee52:	f000 b82b 	b.w	801eeac <_malloc_r>
 801ee56:	bf00      	nop
 801ee58:	20000098 	.word	0x20000098

0801ee5c <free>:
 801ee5c:	4b02      	ldr	r3, [pc, #8]	; (801ee68 <free+0xc>)
 801ee5e:	4601      	mov	r1, r0
 801ee60:	6818      	ldr	r0, [r3, #0]
 801ee62:	f000 bc37 	b.w	801f6d4 <_free_r>
 801ee66:	bf00      	nop
 801ee68:	20000098 	.word	0x20000098

0801ee6c <sbrk_aligned>:
 801ee6c:	b570      	push	{r4, r5, r6, lr}
 801ee6e:	4e0e      	ldr	r6, [pc, #56]	; (801eea8 <sbrk_aligned+0x3c>)
 801ee70:	460c      	mov	r4, r1
 801ee72:	6831      	ldr	r1, [r6, #0]
 801ee74:	4605      	mov	r5, r0
 801ee76:	b911      	cbnz	r1, 801ee7e <sbrk_aligned+0x12>
 801ee78:	f000 fb70 	bl	801f55c <_sbrk_r>
 801ee7c:	6030      	str	r0, [r6, #0]
 801ee7e:	4621      	mov	r1, r4
 801ee80:	4628      	mov	r0, r5
 801ee82:	f000 fb6b 	bl	801f55c <_sbrk_r>
 801ee86:	1c43      	adds	r3, r0, #1
 801ee88:	d00a      	beq.n	801eea0 <sbrk_aligned+0x34>
 801ee8a:	1cc4      	adds	r4, r0, #3
 801ee8c:	f024 0403 	bic.w	r4, r4, #3
 801ee90:	42a0      	cmp	r0, r4
 801ee92:	d007      	beq.n	801eea4 <sbrk_aligned+0x38>
 801ee94:	1a21      	subs	r1, r4, r0
 801ee96:	4628      	mov	r0, r5
 801ee98:	f000 fb60 	bl	801f55c <_sbrk_r>
 801ee9c:	3001      	adds	r0, #1
 801ee9e:	d101      	bne.n	801eea4 <sbrk_aligned+0x38>
 801eea0:	f04f 34ff 	mov.w	r4, #4294967295
 801eea4:	4620      	mov	r0, r4
 801eea6:	bd70      	pop	{r4, r5, r6, pc}
 801eea8:	200146f4 	.word	0x200146f4

0801eeac <_malloc_r>:
 801eeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eeb0:	1ccd      	adds	r5, r1, #3
 801eeb2:	f025 0503 	bic.w	r5, r5, #3
 801eeb6:	3508      	adds	r5, #8
 801eeb8:	2d0c      	cmp	r5, #12
 801eeba:	bf38      	it	cc
 801eebc:	250c      	movcc	r5, #12
 801eebe:	2d00      	cmp	r5, #0
 801eec0:	4607      	mov	r7, r0
 801eec2:	db01      	blt.n	801eec8 <_malloc_r+0x1c>
 801eec4:	42a9      	cmp	r1, r5
 801eec6:	d905      	bls.n	801eed4 <_malloc_r+0x28>
 801eec8:	230c      	movs	r3, #12
 801eeca:	603b      	str	r3, [r7, #0]
 801eecc:	2600      	movs	r6, #0
 801eece:	4630      	mov	r0, r6
 801eed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eed4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801efa8 <_malloc_r+0xfc>
 801eed8:	f000 f868 	bl	801efac <__malloc_lock>
 801eedc:	f8d8 3000 	ldr.w	r3, [r8]
 801eee0:	461c      	mov	r4, r3
 801eee2:	bb5c      	cbnz	r4, 801ef3c <_malloc_r+0x90>
 801eee4:	4629      	mov	r1, r5
 801eee6:	4638      	mov	r0, r7
 801eee8:	f7ff ffc0 	bl	801ee6c <sbrk_aligned>
 801eeec:	1c43      	adds	r3, r0, #1
 801eeee:	4604      	mov	r4, r0
 801eef0:	d155      	bne.n	801ef9e <_malloc_r+0xf2>
 801eef2:	f8d8 4000 	ldr.w	r4, [r8]
 801eef6:	4626      	mov	r6, r4
 801eef8:	2e00      	cmp	r6, #0
 801eefa:	d145      	bne.n	801ef88 <_malloc_r+0xdc>
 801eefc:	2c00      	cmp	r4, #0
 801eefe:	d048      	beq.n	801ef92 <_malloc_r+0xe6>
 801ef00:	6823      	ldr	r3, [r4, #0]
 801ef02:	4631      	mov	r1, r6
 801ef04:	4638      	mov	r0, r7
 801ef06:	eb04 0903 	add.w	r9, r4, r3
 801ef0a:	f000 fb27 	bl	801f55c <_sbrk_r>
 801ef0e:	4581      	cmp	r9, r0
 801ef10:	d13f      	bne.n	801ef92 <_malloc_r+0xe6>
 801ef12:	6821      	ldr	r1, [r4, #0]
 801ef14:	1a6d      	subs	r5, r5, r1
 801ef16:	4629      	mov	r1, r5
 801ef18:	4638      	mov	r0, r7
 801ef1a:	f7ff ffa7 	bl	801ee6c <sbrk_aligned>
 801ef1e:	3001      	adds	r0, #1
 801ef20:	d037      	beq.n	801ef92 <_malloc_r+0xe6>
 801ef22:	6823      	ldr	r3, [r4, #0]
 801ef24:	442b      	add	r3, r5
 801ef26:	6023      	str	r3, [r4, #0]
 801ef28:	f8d8 3000 	ldr.w	r3, [r8]
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d038      	beq.n	801efa2 <_malloc_r+0xf6>
 801ef30:	685a      	ldr	r2, [r3, #4]
 801ef32:	42a2      	cmp	r2, r4
 801ef34:	d12b      	bne.n	801ef8e <_malloc_r+0xe2>
 801ef36:	2200      	movs	r2, #0
 801ef38:	605a      	str	r2, [r3, #4]
 801ef3a:	e00f      	b.n	801ef5c <_malloc_r+0xb0>
 801ef3c:	6822      	ldr	r2, [r4, #0]
 801ef3e:	1b52      	subs	r2, r2, r5
 801ef40:	d41f      	bmi.n	801ef82 <_malloc_r+0xd6>
 801ef42:	2a0b      	cmp	r2, #11
 801ef44:	d917      	bls.n	801ef76 <_malloc_r+0xca>
 801ef46:	1961      	adds	r1, r4, r5
 801ef48:	42a3      	cmp	r3, r4
 801ef4a:	6025      	str	r5, [r4, #0]
 801ef4c:	bf18      	it	ne
 801ef4e:	6059      	strne	r1, [r3, #4]
 801ef50:	6863      	ldr	r3, [r4, #4]
 801ef52:	bf08      	it	eq
 801ef54:	f8c8 1000 	streq.w	r1, [r8]
 801ef58:	5162      	str	r2, [r4, r5]
 801ef5a:	604b      	str	r3, [r1, #4]
 801ef5c:	4638      	mov	r0, r7
 801ef5e:	f104 060b 	add.w	r6, r4, #11
 801ef62:	f000 f829 	bl	801efb8 <__malloc_unlock>
 801ef66:	f026 0607 	bic.w	r6, r6, #7
 801ef6a:	1d23      	adds	r3, r4, #4
 801ef6c:	1af2      	subs	r2, r6, r3
 801ef6e:	d0ae      	beq.n	801eece <_malloc_r+0x22>
 801ef70:	1b9b      	subs	r3, r3, r6
 801ef72:	50a3      	str	r3, [r4, r2]
 801ef74:	e7ab      	b.n	801eece <_malloc_r+0x22>
 801ef76:	42a3      	cmp	r3, r4
 801ef78:	6862      	ldr	r2, [r4, #4]
 801ef7a:	d1dd      	bne.n	801ef38 <_malloc_r+0x8c>
 801ef7c:	f8c8 2000 	str.w	r2, [r8]
 801ef80:	e7ec      	b.n	801ef5c <_malloc_r+0xb0>
 801ef82:	4623      	mov	r3, r4
 801ef84:	6864      	ldr	r4, [r4, #4]
 801ef86:	e7ac      	b.n	801eee2 <_malloc_r+0x36>
 801ef88:	4634      	mov	r4, r6
 801ef8a:	6876      	ldr	r6, [r6, #4]
 801ef8c:	e7b4      	b.n	801eef8 <_malloc_r+0x4c>
 801ef8e:	4613      	mov	r3, r2
 801ef90:	e7cc      	b.n	801ef2c <_malloc_r+0x80>
 801ef92:	230c      	movs	r3, #12
 801ef94:	603b      	str	r3, [r7, #0]
 801ef96:	4638      	mov	r0, r7
 801ef98:	f000 f80e 	bl	801efb8 <__malloc_unlock>
 801ef9c:	e797      	b.n	801eece <_malloc_r+0x22>
 801ef9e:	6025      	str	r5, [r4, #0]
 801efa0:	e7dc      	b.n	801ef5c <_malloc_r+0xb0>
 801efa2:	605b      	str	r3, [r3, #4]
 801efa4:	deff      	udf	#255	; 0xff
 801efa6:	bf00      	nop
 801efa8:	200146f0 	.word	0x200146f0

0801efac <__malloc_lock>:
 801efac:	4801      	ldr	r0, [pc, #4]	; (801efb4 <__malloc_lock+0x8>)
 801efae:	f000 bb22 	b.w	801f5f6 <__retarget_lock_acquire_recursive>
 801efb2:	bf00      	nop
 801efb4:	20014839 	.word	0x20014839

0801efb8 <__malloc_unlock>:
 801efb8:	4801      	ldr	r0, [pc, #4]	; (801efc0 <__malloc_unlock+0x8>)
 801efba:	f000 bb1d 	b.w	801f5f8 <__retarget_lock_release_recursive>
 801efbe:	bf00      	nop
 801efc0:	20014839 	.word	0x20014839

0801efc4 <std>:
 801efc4:	2300      	movs	r3, #0
 801efc6:	b510      	push	{r4, lr}
 801efc8:	4604      	mov	r4, r0
 801efca:	e9c0 3300 	strd	r3, r3, [r0]
 801efce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801efd2:	6083      	str	r3, [r0, #8]
 801efd4:	8181      	strh	r1, [r0, #12]
 801efd6:	6643      	str	r3, [r0, #100]	; 0x64
 801efd8:	81c2      	strh	r2, [r0, #14]
 801efda:	6183      	str	r3, [r0, #24]
 801efdc:	4619      	mov	r1, r3
 801efde:	2208      	movs	r2, #8
 801efe0:	305c      	adds	r0, #92	; 0x5c
 801efe2:	f000 fa29 	bl	801f438 <memset>
 801efe6:	4b0d      	ldr	r3, [pc, #52]	; (801f01c <std+0x58>)
 801efe8:	6263      	str	r3, [r4, #36]	; 0x24
 801efea:	4b0d      	ldr	r3, [pc, #52]	; (801f020 <std+0x5c>)
 801efec:	62a3      	str	r3, [r4, #40]	; 0x28
 801efee:	4b0d      	ldr	r3, [pc, #52]	; (801f024 <std+0x60>)
 801eff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801eff2:	4b0d      	ldr	r3, [pc, #52]	; (801f028 <std+0x64>)
 801eff4:	6323      	str	r3, [r4, #48]	; 0x30
 801eff6:	4b0d      	ldr	r3, [pc, #52]	; (801f02c <std+0x68>)
 801eff8:	6224      	str	r4, [r4, #32]
 801effa:	429c      	cmp	r4, r3
 801effc:	d006      	beq.n	801f00c <std+0x48>
 801effe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801f002:	4294      	cmp	r4, r2
 801f004:	d002      	beq.n	801f00c <std+0x48>
 801f006:	33d0      	adds	r3, #208	; 0xd0
 801f008:	429c      	cmp	r4, r3
 801f00a:	d105      	bne.n	801f018 <std+0x54>
 801f00c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f014:	f000 baee 	b.w	801f5f4 <__retarget_lock_init_recursive>
 801f018:	bd10      	pop	{r4, pc}
 801f01a:	bf00      	nop
 801f01c:	0801f289 	.word	0x0801f289
 801f020:	0801f2ab 	.word	0x0801f2ab
 801f024:	0801f2e3 	.word	0x0801f2e3
 801f028:	0801f307 	.word	0x0801f307
 801f02c:	200146f8 	.word	0x200146f8

0801f030 <stdio_exit_handler>:
 801f030:	4a02      	ldr	r2, [pc, #8]	; (801f03c <stdio_exit_handler+0xc>)
 801f032:	4903      	ldr	r1, [pc, #12]	; (801f040 <stdio_exit_handler+0x10>)
 801f034:	4803      	ldr	r0, [pc, #12]	; (801f044 <stdio_exit_handler+0x14>)
 801f036:	f000 b87b 	b.w	801f130 <_fwalk_sglue>
 801f03a:	bf00      	nop
 801f03c:	20000040 	.word	0x20000040
 801f040:	080200d1 	.word	0x080200d1
 801f044:	2000004c 	.word	0x2000004c

0801f048 <cleanup_stdio>:
 801f048:	6841      	ldr	r1, [r0, #4]
 801f04a:	4b0c      	ldr	r3, [pc, #48]	; (801f07c <cleanup_stdio+0x34>)
 801f04c:	4299      	cmp	r1, r3
 801f04e:	b510      	push	{r4, lr}
 801f050:	4604      	mov	r4, r0
 801f052:	d001      	beq.n	801f058 <cleanup_stdio+0x10>
 801f054:	f001 f83c 	bl	80200d0 <_fflush_r>
 801f058:	68a1      	ldr	r1, [r4, #8]
 801f05a:	4b09      	ldr	r3, [pc, #36]	; (801f080 <cleanup_stdio+0x38>)
 801f05c:	4299      	cmp	r1, r3
 801f05e:	d002      	beq.n	801f066 <cleanup_stdio+0x1e>
 801f060:	4620      	mov	r0, r4
 801f062:	f001 f835 	bl	80200d0 <_fflush_r>
 801f066:	68e1      	ldr	r1, [r4, #12]
 801f068:	4b06      	ldr	r3, [pc, #24]	; (801f084 <cleanup_stdio+0x3c>)
 801f06a:	4299      	cmp	r1, r3
 801f06c:	d004      	beq.n	801f078 <cleanup_stdio+0x30>
 801f06e:	4620      	mov	r0, r4
 801f070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f074:	f001 b82c 	b.w	80200d0 <_fflush_r>
 801f078:	bd10      	pop	{r4, pc}
 801f07a:	bf00      	nop
 801f07c:	200146f8 	.word	0x200146f8
 801f080:	20014760 	.word	0x20014760
 801f084:	200147c8 	.word	0x200147c8

0801f088 <global_stdio_init.part.0>:
 801f088:	b510      	push	{r4, lr}
 801f08a:	4b0b      	ldr	r3, [pc, #44]	; (801f0b8 <global_stdio_init.part.0+0x30>)
 801f08c:	4c0b      	ldr	r4, [pc, #44]	; (801f0bc <global_stdio_init.part.0+0x34>)
 801f08e:	4a0c      	ldr	r2, [pc, #48]	; (801f0c0 <global_stdio_init.part.0+0x38>)
 801f090:	601a      	str	r2, [r3, #0]
 801f092:	4620      	mov	r0, r4
 801f094:	2200      	movs	r2, #0
 801f096:	2104      	movs	r1, #4
 801f098:	f7ff ff94 	bl	801efc4 <std>
 801f09c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801f0a0:	2201      	movs	r2, #1
 801f0a2:	2109      	movs	r1, #9
 801f0a4:	f7ff ff8e 	bl	801efc4 <std>
 801f0a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801f0ac:	2202      	movs	r2, #2
 801f0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0b2:	2112      	movs	r1, #18
 801f0b4:	f7ff bf86 	b.w	801efc4 <std>
 801f0b8:	20014830 	.word	0x20014830
 801f0bc:	200146f8 	.word	0x200146f8
 801f0c0:	0801f031 	.word	0x0801f031

0801f0c4 <__sfp_lock_acquire>:
 801f0c4:	4801      	ldr	r0, [pc, #4]	; (801f0cc <__sfp_lock_acquire+0x8>)
 801f0c6:	f000 ba96 	b.w	801f5f6 <__retarget_lock_acquire_recursive>
 801f0ca:	bf00      	nop
 801f0cc:	2001483a 	.word	0x2001483a

0801f0d0 <__sfp_lock_release>:
 801f0d0:	4801      	ldr	r0, [pc, #4]	; (801f0d8 <__sfp_lock_release+0x8>)
 801f0d2:	f000 ba91 	b.w	801f5f8 <__retarget_lock_release_recursive>
 801f0d6:	bf00      	nop
 801f0d8:	2001483a 	.word	0x2001483a

0801f0dc <__sinit>:
 801f0dc:	b510      	push	{r4, lr}
 801f0de:	4604      	mov	r4, r0
 801f0e0:	f7ff fff0 	bl	801f0c4 <__sfp_lock_acquire>
 801f0e4:	6a23      	ldr	r3, [r4, #32]
 801f0e6:	b11b      	cbz	r3, 801f0f0 <__sinit+0x14>
 801f0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0ec:	f7ff bff0 	b.w	801f0d0 <__sfp_lock_release>
 801f0f0:	4b04      	ldr	r3, [pc, #16]	; (801f104 <__sinit+0x28>)
 801f0f2:	6223      	str	r3, [r4, #32]
 801f0f4:	4b04      	ldr	r3, [pc, #16]	; (801f108 <__sinit+0x2c>)
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d1f5      	bne.n	801f0e8 <__sinit+0xc>
 801f0fc:	f7ff ffc4 	bl	801f088 <global_stdio_init.part.0>
 801f100:	e7f2      	b.n	801f0e8 <__sinit+0xc>
 801f102:	bf00      	nop
 801f104:	0801f049 	.word	0x0801f049
 801f108:	20014830 	.word	0x20014830

0801f10c <fiprintf>:
 801f10c:	b40e      	push	{r1, r2, r3}
 801f10e:	b503      	push	{r0, r1, lr}
 801f110:	4601      	mov	r1, r0
 801f112:	ab03      	add	r3, sp, #12
 801f114:	4805      	ldr	r0, [pc, #20]	; (801f12c <fiprintf+0x20>)
 801f116:	f853 2b04 	ldr.w	r2, [r3], #4
 801f11a:	6800      	ldr	r0, [r0, #0]
 801f11c:	9301      	str	r3, [sp, #4]
 801f11e:	f000 fca7 	bl	801fa70 <_vfiprintf_r>
 801f122:	b002      	add	sp, #8
 801f124:	f85d eb04 	ldr.w	lr, [sp], #4
 801f128:	b003      	add	sp, #12
 801f12a:	4770      	bx	lr
 801f12c:	20000098 	.word	0x20000098

0801f130 <_fwalk_sglue>:
 801f130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f134:	4607      	mov	r7, r0
 801f136:	4688      	mov	r8, r1
 801f138:	4614      	mov	r4, r2
 801f13a:	2600      	movs	r6, #0
 801f13c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f140:	f1b9 0901 	subs.w	r9, r9, #1
 801f144:	d505      	bpl.n	801f152 <_fwalk_sglue+0x22>
 801f146:	6824      	ldr	r4, [r4, #0]
 801f148:	2c00      	cmp	r4, #0
 801f14a:	d1f7      	bne.n	801f13c <_fwalk_sglue+0xc>
 801f14c:	4630      	mov	r0, r6
 801f14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f152:	89ab      	ldrh	r3, [r5, #12]
 801f154:	2b01      	cmp	r3, #1
 801f156:	d907      	bls.n	801f168 <_fwalk_sglue+0x38>
 801f158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f15c:	3301      	adds	r3, #1
 801f15e:	d003      	beq.n	801f168 <_fwalk_sglue+0x38>
 801f160:	4629      	mov	r1, r5
 801f162:	4638      	mov	r0, r7
 801f164:	47c0      	blx	r8
 801f166:	4306      	orrs	r6, r0
 801f168:	3568      	adds	r5, #104	; 0x68
 801f16a:	e7e9      	b.n	801f140 <_fwalk_sglue+0x10>

0801f16c <iprintf>:
 801f16c:	b40f      	push	{r0, r1, r2, r3}
 801f16e:	b507      	push	{r0, r1, r2, lr}
 801f170:	4906      	ldr	r1, [pc, #24]	; (801f18c <iprintf+0x20>)
 801f172:	ab04      	add	r3, sp, #16
 801f174:	6808      	ldr	r0, [r1, #0]
 801f176:	f853 2b04 	ldr.w	r2, [r3], #4
 801f17a:	6881      	ldr	r1, [r0, #8]
 801f17c:	9301      	str	r3, [sp, #4]
 801f17e:	f000 fc77 	bl	801fa70 <_vfiprintf_r>
 801f182:	b003      	add	sp, #12
 801f184:	f85d eb04 	ldr.w	lr, [sp], #4
 801f188:	b004      	add	sp, #16
 801f18a:	4770      	bx	lr
 801f18c:	20000098 	.word	0x20000098

0801f190 <_puts_r>:
 801f190:	6a03      	ldr	r3, [r0, #32]
 801f192:	b570      	push	{r4, r5, r6, lr}
 801f194:	6884      	ldr	r4, [r0, #8]
 801f196:	4605      	mov	r5, r0
 801f198:	460e      	mov	r6, r1
 801f19a:	b90b      	cbnz	r3, 801f1a0 <_puts_r+0x10>
 801f19c:	f7ff ff9e 	bl	801f0dc <__sinit>
 801f1a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f1a2:	07db      	lsls	r3, r3, #31
 801f1a4:	d405      	bmi.n	801f1b2 <_puts_r+0x22>
 801f1a6:	89a3      	ldrh	r3, [r4, #12]
 801f1a8:	0598      	lsls	r0, r3, #22
 801f1aa:	d402      	bmi.n	801f1b2 <_puts_r+0x22>
 801f1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f1ae:	f000 fa22 	bl	801f5f6 <__retarget_lock_acquire_recursive>
 801f1b2:	89a3      	ldrh	r3, [r4, #12]
 801f1b4:	0719      	lsls	r1, r3, #28
 801f1b6:	d513      	bpl.n	801f1e0 <_puts_r+0x50>
 801f1b8:	6923      	ldr	r3, [r4, #16]
 801f1ba:	b18b      	cbz	r3, 801f1e0 <_puts_r+0x50>
 801f1bc:	3e01      	subs	r6, #1
 801f1be:	68a3      	ldr	r3, [r4, #8]
 801f1c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f1c4:	3b01      	subs	r3, #1
 801f1c6:	60a3      	str	r3, [r4, #8]
 801f1c8:	b9e9      	cbnz	r1, 801f206 <_puts_r+0x76>
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	da2e      	bge.n	801f22c <_puts_r+0x9c>
 801f1ce:	4622      	mov	r2, r4
 801f1d0:	210a      	movs	r1, #10
 801f1d2:	4628      	mov	r0, r5
 801f1d4:	f000 f89b 	bl	801f30e <__swbuf_r>
 801f1d8:	3001      	adds	r0, #1
 801f1da:	d007      	beq.n	801f1ec <_puts_r+0x5c>
 801f1dc:	250a      	movs	r5, #10
 801f1de:	e007      	b.n	801f1f0 <_puts_r+0x60>
 801f1e0:	4621      	mov	r1, r4
 801f1e2:	4628      	mov	r0, r5
 801f1e4:	f000 f8d0 	bl	801f388 <__swsetup_r>
 801f1e8:	2800      	cmp	r0, #0
 801f1ea:	d0e7      	beq.n	801f1bc <_puts_r+0x2c>
 801f1ec:	f04f 35ff 	mov.w	r5, #4294967295
 801f1f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f1f2:	07da      	lsls	r2, r3, #31
 801f1f4:	d405      	bmi.n	801f202 <_puts_r+0x72>
 801f1f6:	89a3      	ldrh	r3, [r4, #12]
 801f1f8:	059b      	lsls	r3, r3, #22
 801f1fa:	d402      	bmi.n	801f202 <_puts_r+0x72>
 801f1fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f1fe:	f000 f9fb 	bl	801f5f8 <__retarget_lock_release_recursive>
 801f202:	4628      	mov	r0, r5
 801f204:	bd70      	pop	{r4, r5, r6, pc}
 801f206:	2b00      	cmp	r3, #0
 801f208:	da04      	bge.n	801f214 <_puts_r+0x84>
 801f20a:	69a2      	ldr	r2, [r4, #24]
 801f20c:	429a      	cmp	r2, r3
 801f20e:	dc06      	bgt.n	801f21e <_puts_r+0x8e>
 801f210:	290a      	cmp	r1, #10
 801f212:	d004      	beq.n	801f21e <_puts_r+0x8e>
 801f214:	6823      	ldr	r3, [r4, #0]
 801f216:	1c5a      	adds	r2, r3, #1
 801f218:	6022      	str	r2, [r4, #0]
 801f21a:	7019      	strb	r1, [r3, #0]
 801f21c:	e7cf      	b.n	801f1be <_puts_r+0x2e>
 801f21e:	4622      	mov	r2, r4
 801f220:	4628      	mov	r0, r5
 801f222:	f000 f874 	bl	801f30e <__swbuf_r>
 801f226:	3001      	adds	r0, #1
 801f228:	d1c9      	bne.n	801f1be <_puts_r+0x2e>
 801f22a:	e7df      	b.n	801f1ec <_puts_r+0x5c>
 801f22c:	6823      	ldr	r3, [r4, #0]
 801f22e:	250a      	movs	r5, #10
 801f230:	1c5a      	adds	r2, r3, #1
 801f232:	6022      	str	r2, [r4, #0]
 801f234:	701d      	strb	r5, [r3, #0]
 801f236:	e7db      	b.n	801f1f0 <_puts_r+0x60>

0801f238 <puts>:
 801f238:	4b02      	ldr	r3, [pc, #8]	; (801f244 <puts+0xc>)
 801f23a:	4601      	mov	r1, r0
 801f23c:	6818      	ldr	r0, [r3, #0]
 801f23e:	f7ff bfa7 	b.w	801f190 <_puts_r>
 801f242:	bf00      	nop
 801f244:	20000098 	.word	0x20000098

0801f248 <siprintf>:
 801f248:	b40e      	push	{r1, r2, r3}
 801f24a:	b500      	push	{lr}
 801f24c:	b09c      	sub	sp, #112	; 0x70
 801f24e:	ab1d      	add	r3, sp, #116	; 0x74
 801f250:	9002      	str	r0, [sp, #8]
 801f252:	9006      	str	r0, [sp, #24]
 801f254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f258:	4809      	ldr	r0, [pc, #36]	; (801f280 <siprintf+0x38>)
 801f25a:	9107      	str	r1, [sp, #28]
 801f25c:	9104      	str	r1, [sp, #16]
 801f25e:	4909      	ldr	r1, [pc, #36]	; (801f284 <siprintf+0x3c>)
 801f260:	f853 2b04 	ldr.w	r2, [r3], #4
 801f264:	9105      	str	r1, [sp, #20]
 801f266:	6800      	ldr	r0, [r0, #0]
 801f268:	9301      	str	r3, [sp, #4]
 801f26a:	a902      	add	r1, sp, #8
 801f26c:	f000 fad8 	bl	801f820 <_svfiprintf_r>
 801f270:	9b02      	ldr	r3, [sp, #8]
 801f272:	2200      	movs	r2, #0
 801f274:	701a      	strb	r2, [r3, #0]
 801f276:	b01c      	add	sp, #112	; 0x70
 801f278:	f85d eb04 	ldr.w	lr, [sp], #4
 801f27c:	b003      	add	sp, #12
 801f27e:	4770      	bx	lr
 801f280:	20000098 	.word	0x20000098
 801f284:	ffff0208 	.word	0xffff0208

0801f288 <__sread>:
 801f288:	b510      	push	{r4, lr}
 801f28a:	460c      	mov	r4, r1
 801f28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f290:	f000 f93e 	bl	801f510 <_read_r>
 801f294:	2800      	cmp	r0, #0
 801f296:	bfab      	itete	ge
 801f298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f29a:	89a3      	ldrhlt	r3, [r4, #12]
 801f29c:	181b      	addge	r3, r3, r0
 801f29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f2a2:	bfac      	ite	ge
 801f2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f2a6:	81a3      	strhlt	r3, [r4, #12]
 801f2a8:	bd10      	pop	{r4, pc}

0801f2aa <__swrite>:
 801f2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2ae:	461f      	mov	r7, r3
 801f2b0:	898b      	ldrh	r3, [r1, #12]
 801f2b2:	05db      	lsls	r3, r3, #23
 801f2b4:	4605      	mov	r5, r0
 801f2b6:	460c      	mov	r4, r1
 801f2b8:	4616      	mov	r6, r2
 801f2ba:	d505      	bpl.n	801f2c8 <__swrite+0x1e>
 801f2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2c0:	2302      	movs	r3, #2
 801f2c2:	2200      	movs	r2, #0
 801f2c4:	f000 f912 	bl	801f4ec <_lseek_r>
 801f2c8:	89a3      	ldrh	r3, [r4, #12]
 801f2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f2d2:	81a3      	strh	r3, [r4, #12]
 801f2d4:	4632      	mov	r2, r6
 801f2d6:	463b      	mov	r3, r7
 801f2d8:	4628      	mov	r0, r5
 801f2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f2de:	f000 b94d 	b.w	801f57c <_write_r>

0801f2e2 <__sseek>:
 801f2e2:	b510      	push	{r4, lr}
 801f2e4:	460c      	mov	r4, r1
 801f2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2ea:	f000 f8ff 	bl	801f4ec <_lseek_r>
 801f2ee:	1c43      	adds	r3, r0, #1
 801f2f0:	89a3      	ldrh	r3, [r4, #12]
 801f2f2:	bf15      	itete	ne
 801f2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f2fe:	81a3      	strheq	r3, [r4, #12]
 801f300:	bf18      	it	ne
 801f302:	81a3      	strhne	r3, [r4, #12]
 801f304:	bd10      	pop	{r4, pc}

0801f306 <__sclose>:
 801f306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f30a:	f000 b8df 	b.w	801f4cc <_close_r>

0801f30e <__swbuf_r>:
 801f30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f310:	460e      	mov	r6, r1
 801f312:	4614      	mov	r4, r2
 801f314:	4605      	mov	r5, r0
 801f316:	b118      	cbz	r0, 801f320 <__swbuf_r+0x12>
 801f318:	6a03      	ldr	r3, [r0, #32]
 801f31a:	b90b      	cbnz	r3, 801f320 <__swbuf_r+0x12>
 801f31c:	f7ff fede 	bl	801f0dc <__sinit>
 801f320:	69a3      	ldr	r3, [r4, #24]
 801f322:	60a3      	str	r3, [r4, #8]
 801f324:	89a3      	ldrh	r3, [r4, #12]
 801f326:	071a      	lsls	r2, r3, #28
 801f328:	d525      	bpl.n	801f376 <__swbuf_r+0x68>
 801f32a:	6923      	ldr	r3, [r4, #16]
 801f32c:	b31b      	cbz	r3, 801f376 <__swbuf_r+0x68>
 801f32e:	6823      	ldr	r3, [r4, #0]
 801f330:	6922      	ldr	r2, [r4, #16]
 801f332:	1a98      	subs	r0, r3, r2
 801f334:	6963      	ldr	r3, [r4, #20]
 801f336:	b2f6      	uxtb	r6, r6
 801f338:	4283      	cmp	r3, r0
 801f33a:	4637      	mov	r7, r6
 801f33c:	dc04      	bgt.n	801f348 <__swbuf_r+0x3a>
 801f33e:	4621      	mov	r1, r4
 801f340:	4628      	mov	r0, r5
 801f342:	f000 fec5 	bl	80200d0 <_fflush_r>
 801f346:	b9e0      	cbnz	r0, 801f382 <__swbuf_r+0x74>
 801f348:	68a3      	ldr	r3, [r4, #8]
 801f34a:	3b01      	subs	r3, #1
 801f34c:	60a3      	str	r3, [r4, #8]
 801f34e:	6823      	ldr	r3, [r4, #0]
 801f350:	1c5a      	adds	r2, r3, #1
 801f352:	6022      	str	r2, [r4, #0]
 801f354:	701e      	strb	r6, [r3, #0]
 801f356:	6962      	ldr	r2, [r4, #20]
 801f358:	1c43      	adds	r3, r0, #1
 801f35a:	429a      	cmp	r2, r3
 801f35c:	d004      	beq.n	801f368 <__swbuf_r+0x5a>
 801f35e:	89a3      	ldrh	r3, [r4, #12]
 801f360:	07db      	lsls	r3, r3, #31
 801f362:	d506      	bpl.n	801f372 <__swbuf_r+0x64>
 801f364:	2e0a      	cmp	r6, #10
 801f366:	d104      	bne.n	801f372 <__swbuf_r+0x64>
 801f368:	4621      	mov	r1, r4
 801f36a:	4628      	mov	r0, r5
 801f36c:	f000 feb0 	bl	80200d0 <_fflush_r>
 801f370:	b938      	cbnz	r0, 801f382 <__swbuf_r+0x74>
 801f372:	4638      	mov	r0, r7
 801f374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f376:	4621      	mov	r1, r4
 801f378:	4628      	mov	r0, r5
 801f37a:	f000 f805 	bl	801f388 <__swsetup_r>
 801f37e:	2800      	cmp	r0, #0
 801f380:	d0d5      	beq.n	801f32e <__swbuf_r+0x20>
 801f382:	f04f 37ff 	mov.w	r7, #4294967295
 801f386:	e7f4      	b.n	801f372 <__swbuf_r+0x64>

0801f388 <__swsetup_r>:
 801f388:	b538      	push	{r3, r4, r5, lr}
 801f38a:	4b2a      	ldr	r3, [pc, #168]	; (801f434 <__swsetup_r+0xac>)
 801f38c:	4605      	mov	r5, r0
 801f38e:	6818      	ldr	r0, [r3, #0]
 801f390:	460c      	mov	r4, r1
 801f392:	b118      	cbz	r0, 801f39c <__swsetup_r+0x14>
 801f394:	6a03      	ldr	r3, [r0, #32]
 801f396:	b90b      	cbnz	r3, 801f39c <__swsetup_r+0x14>
 801f398:	f7ff fea0 	bl	801f0dc <__sinit>
 801f39c:	89a3      	ldrh	r3, [r4, #12]
 801f39e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f3a2:	0718      	lsls	r0, r3, #28
 801f3a4:	d422      	bmi.n	801f3ec <__swsetup_r+0x64>
 801f3a6:	06d9      	lsls	r1, r3, #27
 801f3a8:	d407      	bmi.n	801f3ba <__swsetup_r+0x32>
 801f3aa:	2309      	movs	r3, #9
 801f3ac:	602b      	str	r3, [r5, #0]
 801f3ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f3b2:	81a3      	strh	r3, [r4, #12]
 801f3b4:	f04f 30ff 	mov.w	r0, #4294967295
 801f3b8:	e034      	b.n	801f424 <__swsetup_r+0x9c>
 801f3ba:	0758      	lsls	r0, r3, #29
 801f3bc:	d512      	bpl.n	801f3e4 <__swsetup_r+0x5c>
 801f3be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f3c0:	b141      	cbz	r1, 801f3d4 <__swsetup_r+0x4c>
 801f3c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f3c6:	4299      	cmp	r1, r3
 801f3c8:	d002      	beq.n	801f3d0 <__swsetup_r+0x48>
 801f3ca:	4628      	mov	r0, r5
 801f3cc:	f000 f982 	bl	801f6d4 <_free_r>
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	6363      	str	r3, [r4, #52]	; 0x34
 801f3d4:	89a3      	ldrh	r3, [r4, #12]
 801f3d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f3da:	81a3      	strh	r3, [r4, #12]
 801f3dc:	2300      	movs	r3, #0
 801f3de:	6063      	str	r3, [r4, #4]
 801f3e0:	6923      	ldr	r3, [r4, #16]
 801f3e2:	6023      	str	r3, [r4, #0]
 801f3e4:	89a3      	ldrh	r3, [r4, #12]
 801f3e6:	f043 0308 	orr.w	r3, r3, #8
 801f3ea:	81a3      	strh	r3, [r4, #12]
 801f3ec:	6923      	ldr	r3, [r4, #16]
 801f3ee:	b94b      	cbnz	r3, 801f404 <__swsetup_r+0x7c>
 801f3f0:	89a3      	ldrh	r3, [r4, #12]
 801f3f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f3f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f3fa:	d003      	beq.n	801f404 <__swsetup_r+0x7c>
 801f3fc:	4621      	mov	r1, r4
 801f3fe:	4628      	mov	r0, r5
 801f400:	f000 feb4 	bl	802016c <__smakebuf_r>
 801f404:	89a0      	ldrh	r0, [r4, #12]
 801f406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f40a:	f010 0301 	ands.w	r3, r0, #1
 801f40e:	d00a      	beq.n	801f426 <__swsetup_r+0x9e>
 801f410:	2300      	movs	r3, #0
 801f412:	60a3      	str	r3, [r4, #8]
 801f414:	6963      	ldr	r3, [r4, #20]
 801f416:	425b      	negs	r3, r3
 801f418:	61a3      	str	r3, [r4, #24]
 801f41a:	6923      	ldr	r3, [r4, #16]
 801f41c:	b943      	cbnz	r3, 801f430 <__swsetup_r+0xa8>
 801f41e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f422:	d1c4      	bne.n	801f3ae <__swsetup_r+0x26>
 801f424:	bd38      	pop	{r3, r4, r5, pc}
 801f426:	0781      	lsls	r1, r0, #30
 801f428:	bf58      	it	pl
 801f42a:	6963      	ldrpl	r3, [r4, #20]
 801f42c:	60a3      	str	r3, [r4, #8]
 801f42e:	e7f4      	b.n	801f41a <__swsetup_r+0x92>
 801f430:	2000      	movs	r0, #0
 801f432:	e7f7      	b.n	801f424 <__swsetup_r+0x9c>
 801f434:	20000098 	.word	0x20000098

0801f438 <memset>:
 801f438:	4402      	add	r2, r0
 801f43a:	4603      	mov	r3, r0
 801f43c:	4293      	cmp	r3, r2
 801f43e:	d100      	bne.n	801f442 <memset+0xa>
 801f440:	4770      	bx	lr
 801f442:	f803 1b01 	strb.w	r1, [r3], #1
 801f446:	e7f9      	b.n	801f43c <memset+0x4>

0801f448 <strncmp>:
 801f448:	b510      	push	{r4, lr}
 801f44a:	b16a      	cbz	r2, 801f468 <strncmp+0x20>
 801f44c:	3901      	subs	r1, #1
 801f44e:	1884      	adds	r4, r0, r2
 801f450:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f454:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f458:	429a      	cmp	r2, r3
 801f45a:	d103      	bne.n	801f464 <strncmp+0x1c>
 801f45c:	42a0      	cmp	r0, r4
 801f45e:	d001      	beq.n	801f464 <strncmp+0x1c>
 801f460:	2a00      	cmp	r2, #0
 801f462:	d1f5      	bne.n	801f450 <strncmp+0x8>
 801f464:	1ad0      	subs	r0, r2, r3
 801f466:	bd10      	pop	{r4, pc}
 801f468:	4610      	mov	r0, r2
 801f46a:	e7fc      	b.n	801f466 <strncmp+0x1e>

0801f46c <_raise_r>:
 801f46c:	291f      	cmp	r1, #31
 801f46e:	b538      	push	{r3, r4, r5, lr}
 801f470:	4604      	mov	r4, r0
 801f472:	460d      	mov	r5, r1
 801f474:	d904      	bls.n	801f480 <_raise_r+0x14>
 801f476:	2316      	movs	r3, #22
 801f478:	6003      	str	r3, [r0, #0]
 801f47a:	f04f 30ff 	mov.w	r0, #4294967295
 801f47e:	bd38      	pop	{r3, r4, r5, pc}
 801f480:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f482:	b112      	cbz	r2, 801f48a <_raise_r+0x1e>
 801f484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f488:	b94b      	cbnz	r3, 801f49e <_raise_r+0x32>
 801f48a:	4620      	mov	r0, r4
 801f48c:	f000 f864 	bl	801f558 <_getpid_r>
 801f490:	462a      	mov	r2, r5
 801f492:	4601      	mov	r1, r0
 801f494:	4620      	mov	r0, r4
 801f496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f49a:	f000 b84b 	b.w	801f534 <_kill_r>
 801f49e:	2b01      	cmp	r3, #1
 801f4a0:	d00a      	beq.n	801f4b8 <_raise_r+0x4c>
 801f4a2:	1c59      	adds	r1, r3, #1
 801f4a4:	d103      	bne.n	801f4ae <_raise_r+0x42>
 801f4a6:	2316      	movs	r3, #22
 801f4a8:	6003      	str	r3, [r0, #0]
 801f4aa:	2001      	movs	r0, #1
 801f4ac:	e7e7      	b.n	801f47e <_raise_r+0x12>
 801f4ae:	2400      	movs	r4, #0
 801f4b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f4b4:	4628      	mov	r0, r5
 801f4b6:	4798      	blx	r3
 801f4b8:	2000      	movs	r0, #0
 801f4ba:	e7e0      	b.n	801f47e <_raise_r+0x12>

0801f4bc <raise>:
 801f4bc:	4b02      	ldr	r3, [pc, #8]	; (801f4c8 <raise+0xc>)
 801f4be:	4601      	mov	r1, r0
 801f4c0:	6818      	ldr	r0, [r3, #0]
 801f4c2:	f7ff bfd3 	b.w	801f46c <_raise_r>
 801f4c6:	bf00      	nop
 801f4c8:	20000098 	.word	0x20000098

0801f4cc <_close_r>:
 801f4cc:	b538      	push	{r3, r4, r5, lr}
 801f4ce:	4d06      	ldr	r5, [pc, #24]	; (801f4e8 <_close_r+0x1c>)
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	4604      	mov	r4, r0
 801f4d4:	4608      	mov	r0, r1
 801f4d6:	602b      	str	r3, [r5, #0]
 801f4d8:	f7e2 fb7c 	bl	8001bd4 <_close>
 801f4dc:	1c43      	adds	r3, r0, #1
 801f4de:	d102      	bne.n	801f4e6 <_close_r+0x1a>
 801f4e0:	682b      	ldr	r3, [r5, #0]
 801f4e2:	b103      	cbz	r3, 801f4e6 <_close_r+0x1a>
 801f4e4:	6023      	str	r3, [r4, #0]
 801f4e6:	bd38      	pop	{r3, r4, r5, pc}
 801f4e8:	20014834 	.word	0x20014834

0801f4ec <_lseek_r>:
 801f4ec:	b538      	push	{r3, r4, r5, lr}
 801f4ee:	4d07      	ldr	r5, [pc, #28]	; (801f50c <_lseek_r+0x20>)
 801f4f0:	4604      	mov	r4, r0
 801f4f2:	4608      	mov	r0, r1
 801f4f4:	4611      	mov	r1, r2
 801f4f6:	2200      	movs	r2, #0
 801f4f8:	602a      	str	r2, [r5, #0]
 801f4fa:	461a      	mov	r2, r3
 801f4fc:	f7e2 fb74 	bl	8001be8 <_lseek>
 801f500:	1c43      	adds	r3, r0, #1
 801f502:	d102      	bne.n	801f50a <_lseek_r+0x1e>
 801f504:	682b      	ldr	r3, [r5, #0]
 801f506:	b103      	cbz	r3, 801f50a <_lseek_r+0x1e>
 801f508:	6023      	str	r3, [r4, #0]
 801f50a:	bd38      	pop	{r3, r4, r5, pc}
 801f50c:	20014834 	.word	0x20014834

0801f510 <_read_r>:
 801f510:	b538      	push	{r3, r4, r5, lr}
 801f512:	4d07      	ldr	r5, [pc, #28]	; (801f530 <_read_r+0x20>)
 801f514:	4604      	mov	r4, r0
 801f516:	4608      	mov	r0, r1
 801f518:	4611      	mov	r1, r2
 801f51a:	2200      	movs	r2, #0
 801f51c:	602a      	str	r2, [r5, #0]
 801f51e:	461a      	mov	r2, r3
 801f520:	f7e2 fb3c 	bl	8001b9c <_read>
 801f524:	1c43      	adds	r3, r0, #1
 801f526:	d102      	bne.n	801f52e <_read_r+0x1e>
 801f528:	682b      	ldr	r3, [r5, #0]
 801f52a:	b103      	cbz	r3, 801f52e <_read_r+0x1e>
 801f52c:	6023      	str	r3, [r4, #0]
 801f52e:	bd38      	pop	{r3, r4, r5, pc}
 801f530:	20014834 	.word	0x20014834

0801f534 <_kill_r>:
 801f534:	b538      	push	{r3, r4, r5, lr}
 801f536:	4d07      	ldr	r5, [pc, #28]	; (801f554 <_kill_r+0x20>)
 801f538:	2300      	movs	r3, #0
 801f53a:	4604      	mov	r4, r0
 801f53c:	4608      	mov	r0, r1
 801f53e:	4611      	mov	r1, r2
 801f540:	602b      	str	r3, [r5, #0]
 801f542:	f7e2 fb1d 	bl	8001b80 <_kill>
 801f546:	1c43      	adds	r3, r0, #1
 801f548:	d102      	bne.n	801f550 <_kill_r+0x1c>
 801f54a:	682b      	ldr	r3, [r5, #0]
 801f54c:	b103      	cbz	r3, 801f550 <_kill_r+0x1c>
 801f54e:	6023      	str	r3, [r4, #0]
 801f550:	bd38      	pop	{r3, r4, r5, pc}
 801f552:	bf00      	nop
 801f554:	20014834 	.word	0x20014834

0801f558 <_getpid_r>:
 801f558:	f7e2 bb10 	b.w	8001b7c <_getpid>

0801f55c <_sbrk_r>:
 801f55c:	b538      	push	{r3, r4, r5, lr}
 801f55e:	4d06      	ldr	r5, [pc, #24]	; (801f578 <_sbrk_r+0x1c>)
 801f560:	2300      	movs	r3, #0
 801f562:	4604      	mov	r4, r0
 801f564:	4608      	mov	r0, r1
 801f566:	602b      	str	r3, [r5, #0]
 801f568:	f7e2 fb40 	bl	8001bec <_sbrk>
 801f56c:	1c43      	adds	r3, r0, #1
 801f56e:	d102      	bne.n	801f576 <_sbrk_r+0x1a>
 801f570:	682b      	ldr	r3, [r5, #0]
 801f572:	b103      	cbz	r3, 801f576 <_sbrk_r+0x1a>
 801f574:	6023      	str	r3, [r4, #0]
 801f576:	bd38      	pop	{r3, r4, r5, pc}
 801f578:	20014834 	.word	0x20014834

0801f57c <_write_r>:
 801f57c:	b538      	push	{r3, r4, r5, lr}
 801f57e:	4d07      	ldr	r5, [pc, #28]	; (801f59c <_write_r+0x20>)
 801f580:	4604      	mov	r4, r0
 801f582:	4608      	mov	r0, r1
 801f584:	4611      	mov	r1, r2
 801f586:	2200      	movs	r2, #0
 801f588:	602a      	str	r2, [r5, #0]
 801f58a:	461a      	mov	r2, r3
 801f58c:	f7e2 fb14 	bl	8001bb8 <_write>
 801f590:	1c43      	adds	r3, r0, #1
 801f592:	d102      	bne.n	801f59a <_write_r+0x1e>
 801f594:	682b      	ldr	r3, [r5, #0]
 801f596:	b103      	cbz	r3, 801f59a <_write_r+0x1e>
 801f598:	6023      	str	r3, [r4, #0]
 801f59a:	bd38      	pop	{r3, r4, r5, pc}
 801f59c:	20014834 	.word	0x20014834

0801f5a0 <__errno>:
 801f5a0:	4b01      	ldr	r3, [pc, #4]	; (801f5a8 <__errno+0x8>)
 801f5a2:	6818      	ldr	r0, [r3, #0]
 801f5a4:	4770      	bx	lr
 801f5a6:	bf00      	nop
 801f5a8:	20000098 	.word	0x20000098

0801f5ac <__libc_init_array>:
 801f5ac:	b570      	push	{r4, r5, r6, lr}
 801f5ae:	4d0d      	ldr	r5, [pc, #52]	; (801f5e4 <__libc_init_array+0x38>)
 801f5b0:	4c0d      	ldr	r4, [pc, #52]	; (801f5e8 <__libc_init_array+0x3c>)
 801f5b2:	1b64      	subs	r4, r4, r5
 801f5b4:	10a4      	asrs	r4, r4, #2
 801f5b6:	2600      	movs	r6, #0
 801f5b8:	42a6      	cmp	r6, r4
 801f5ba:	d109      	bne.n	801f5d0 <__libc_init_array+0x24>
 801f5bc:	4d0b      	ldr	r5, [pc, #44]	; (801f5ec <__libc_init_array+0x40>)
 801f5be:	4c0c      	ldr	r4, [pc, #48]	; (801f5f0 <__libc_init_array+0x44>)
 801f5c0:	f000 fe84 	bl	80202cc <_init>
 801f5c4:	1b64      	subs	r4, r4, r5
 801f5c6:	10a4      	asrs	r4, r4, #2
 801f5c8:	2600      	movs	r6, #0
 801f5ca:	42a6      	cmp	r6, r4
 801f5cc:	d105      	bne.n	801f5da <__libc_init_array+0x2e>
 801f5ce:	bd70      	pop	{r4, r5, r6, pc}
 801f5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f5d4:	4798      	blx	r3
 801f5d6:	3601      	adds	r6, #1
 801f5d8:	e7ee      	b.n	801f5b8 <__libc_init_array+0xc>
 801f5da:	f855 3b04 	ldr.w	r3, [r5], #4
 801f5de:	4798      	blx	r3
 801f5e0:	3601      	adds	r6, #1
 801f5e2:	e7f2      	b.n	801f5ca <__libc_init_array+0x1e>
 801f5e4:	08024624 	.word	0x08024624
 801f5e8:	08024624 	.word	0x08024624
 801f5ec:	08024624 	.word	0x08024624
 801f5f0:	08024640 	.word	0x08024640

0801f5f4 <__retarget_lock_init_recursive>:
 801f5f4:	4770      	bx	lr

0801f5f6 <__retarget_lock_acquire_recursive>:
 801f5f6:	4770      	bx	lr

0801f5f8 <__retarget_lock_release_recursive>:
 801f5f8:	4770      	bx	lr

0801f5fa <memcpy>:
 801f5fa:	440a      	add	r2, r1
 801f5fc:	4291      	cmp	r1, r2
 801f5fe:	f100 33ff 	add.w	r3, r0, #4294967295
 801f602:	d100      	bne.n	801f606 <memcpy+0xc>
 801f604:	4770      	bx	lr
 801f606:	b510      	push	{r4, lr}
 801f608:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f60c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f610:	4291      	cmp	r1, r2
 801f612:	d1f9      	bne.n	801f608 <memcpy+0xe>
 801f614:	bd10      	pop	{r4, pc}
	...

0801f618 <__register_exitproc>:
 801f618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f61c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801f6d0 <__register_exitproc+0xb8>
 801f620:	4606      	mov	r6, r0
 801f622:	f8d8 0000 	ldr.w	r0, [r8]
 801f626:	461f      	mov	r7, r3
 801f628:	460d      	mov	r5, r1
 801f62a:	4691      	mov	r9, r2
 801f62c:	f7ff ffe3 	bl	801f5f6 <__retarget_lock_acquire_recursive>
 801f630:	4b23      	ldr	r3, [pc, #140]	; (801f6c0 <__register_exitproc+0xa8>)
 801f632:	681c      	ldr	r4, [r3, #0]
 801f634:	b934      	cbnz	r4, 801f644 <__register_exitproc+0x2c>
 801f636:	4c23      	ldr	r4, [pc, #140]	; (801f6c4 <__register_exitproc+0xac>)
 801f638:	601c      	str	r4, [r3, #0]
 801f63a:	4b23      	ldr	r3, [pc, #140]	; (801f6c8 <__register_exitproc+0xb0>)
 801f63c:	b113      	cbz	r3, 801f644 <__register_exitproc+0x2c>
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801f644:	6863      	ldr	r3, [r4, #4]
 801f646:	2b1f      	cmp	r3, #31
 801f648:	dd07      	ble.n	801f65a <__register_exitproc+0x42>
 801f64a:	f8d8 0000 	ldr.w	r0, [r8]
 801f64e:	f7ff ffd3 	bl	801f5f8 <__retarget_lock_release_recursive>
 801f652:	f04f 30ff 	mov.w	r0, #4294967295
 801f656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f65a:	b32e      	cbz	r6, 801f6a8 <__register_exitproc+0x90>
 801f65c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801f660:	b968      	cbnz	r0, 801f67e <__register_exitproc+0x66>
 801f662:	4b1a      	ldr	r3, [pc, #104]	; (801f6cc <__register_exitproc+0xb4>)
 801f664:	2b00      	cmp	r3, #0
 801f666:	d0f0      	beq.n	801f64a <__register_exitproc+0x32>
 801f668:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f66c:	f7ff fbee 	bl	801ee4c <malloc>
 801f670:	2800      	cmp	r0, #0
 801f672:	d0ea      	beq.n	801f64a <__register_exitproc+0x32>
 801f674:	2300      	movs	r3, #0
 801f676:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801f67a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801f67e:	6863      	ldr	r3, [r4, #4]
 801f680:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801f684:	2201      	movs	r2, #1
 801f686:	409a      	lsls	r2, r3
 801f688:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801f68c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801f690:	4313      	orrs	r3, r2
 801f692:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801f696:	2e02      	cmp	r6, #2
 801f698:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801f69c:	bf02      	ittt	eq
 801f69e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801f6a2:	4313      	orreq	r3, r2
 801f6a4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801f6a8:	6863      	ldr	r3, [r4, #4]
 801f6aa:	f8d8 0000 	ldr.w	r0, [r8]
 801f6ae:	1c5a      	adds	r2, r3, #1
 801f6b0:	3302      	adds	r3, #2
 801f6b2:	6062      	str	r2, [r4, #4]
 801f6b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801f6b8:	f7ff ff9e 	bl	801f5f8 <__retarget_lock_release_recursive>
 801f6bc:	2000      	movs	r0, #0
 801f6be:	e7ca      	b.n	801f656 <__register_exitproc+0x3e>
 801f6c0:	200148c8 	.word	0x200148c8
 801f6c4:	2001483c 	.word	0x2001483c
 801f6c8:	080245dc 	.word	0x080245dc
 801f6cc:	0801ee4d 	.word	0x0801ee4d
 801f6d0:	2000009c 	.word	0x2000009c

0801f6d4 <_free_r>:
 801f6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f6d6:	2900      	cmp	r1, #0
 801f6d8:	d044      	beq.n	801f764 <_free_r+0x90>
 801f6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f6de:	9001      	str	r0, [sp, #4]
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	f1a1 0404 	sub.w	r4, r1, #4
 801f6e6:	bfb8      	it	lt
 801f6e8:	18e4      	addlt	r4, r4, r3
 801f6ea:	f7ff fc5f 	bl	801efac <__malloc_lock>
 801f6ee:	4a1e      	ldr	r2, [pc, #120]	; (801f768 <_free_r+0x94>)
 801f6f0:	9801      	ldr	r0, [sp, #4]
 801f6f2:	6813      	ldr	r3, [r2, #0]
 801f6f4:	b933      	cbnz	r3, 801f704 <_free_r+0x30>
 801f6f6:	6063      	str	r3, [r4, #4]
 801f6f8:	6014      	str	r4, [r2, #0]
 801f6fa:	b003      	add	sp, #12
 801f6fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f700:	f7ff bc5a 	b.w	801efb8 <__malloc_unlock>
 801f704:	42a3      	cmp	r3, r4
 801f706:	d908      	bls.n	801f71a <_free_r+0x46>
 801f708:	6825      	ldr	r5, [r4, #0]
 801f70a:	1961      	adds	r1, r4, r5
 801f70c:	428b      	cmp	r3, r1
 801f70e:	bf01      	itttt	eq
 801f710:	6819      	ldreq	r1, [r3, #0]
 801f712:	685b      	ldreq	r3, [r3, #4]
 801f714:	1949      	addeq	r1, r1, r5
 801f716:	6021      	streq	r1, [r4, #0]
 801f718:	e7ed      	b.n	801f6f6 <_free_r+0x22>
 801f71a:	461a      	mov	r2, r3
 801f71c:	685b      	ldr	r3, [r3, #4]
 801f71e:	b10b      	cbz	r3, 801f724 <_free_r+0x50>
 801f720:	42a3      	cmp	r3, r4
 801f722:	d9fa      	bls.n	801f71a <_free_r+0x46>
 801f724:	6811      	ldr	r1, [r2, #0]
 801f726:	1855      	adds	r5, r2, r1
 801f728:	42a5      	cmp	r5, r4
 801f72a:	d10b      	bne.n	801f744 <_free_r+0x70>
 801f72c:	6824      	ldr	r4, [r4, #0]
 801f72e:	4421      	add	r1, r4
 801f730:	1854      	adds	r4, r2, r1
 801f732:	42a3      	cmp	r3, r4
 801f734:	6011      	str	r1, [r2, #0]
 801f736:	d1e0      	bne.n	801f6fa <_free_r+0x26>
 801f738:	681c      	ldr	r4, [r3, #0]
 801f73a:	685b      	ldr	r3, [r3, #4]
 801f73c:	6053      	str	r3, [r2, #4]
 801f73e:	440c      	add	r4, r1
 801f740:	6014      	str	r4, [r2, #0]
 801f742:	e7da      	b.n	801f6fa <_free_r+0x26>
 801f744:	d902      	bls.n	801f74c <_free_r+0x78>
 801f746:	230c      	movs	r3, #12
 801f748:	6003      	str	r3, [r0, #0]
 801f74a:	e7d6      	b.n	801f6fa <_free_r+0x26>
 801f74c:	6825      	ldr	r5, [r4, #0]
 801f74e:	1961      	adds	r1, r4, r5
 801f750:	428b      	cmp	r3, r1
 801f752:	bf04      	itt	eq
 801f754:	6819      	ldreq	r1, [r3, #0]
 801f756:	685b      	ldreq	r3, [r3, #4]
 801f758:	6063      	str	r3, [r4, #4]
 801f75a:	bf04      	itt	eq
 801f75c:	1949      	addeq	r1, r1, r5
 801f75e:	6021      	streq	r1, [r4, #0]
 801f760:	6054      	str	r4, [r2, #4]
 801f762:	e7ca      	b.n	801f6fa <_free_r+0x26>
 801f764:	b003      	add	sp, #12
 801f766:	bd30      	pop	{r4, r5, pc}
 801f768:	200146f0 	.word	0x200146f0

0801f76c <__ssputs_r>:
 801f76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f770:	688e      	ldr	r6, [r1, #8]
 801f772:	461f      	mov	r7, r3
 801f774:	42be      	cmp	r6, r7
 801f776:	680b      	ldr	r3, [r1, #0]
 801f778:	4682      	mov	sl, r0
 801f77a:	460c      	mov	r4, r1
 801f77c:	4690      	mov	r8, r2
 801f77e:	d82c      	bhi.n	801f7da <__ssputs_r+0x6e>
 801f780:	898a      	ldrh	r2, [r1, #12]
 801f782:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f786:	d026      	beq.n	801f7d6 <__ssputs_r+0x6a>
 801f788:	6965      	ldr	r5, [r4, #20]
 801f78a:	6909      	ldr	r1, [r1, #16]
 801f78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f790:	eba3 0901 	sub.w	r9, r3, r1
 801f794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f798:	1c7b      	adds	r3, r7, #1
 801f79a:	444b      	add	r3, r9
 801f79c:	106d      	asrs	r5, r5, #1
 801f79e:	429d      	cmp	r5, r3
 801f7a0:	bf38      	it	cc
 801f7a2:	461d      	movcc	r5, r3
 801f7a4:	0553      	lsls	r3, r2, #21
 801f7a6:	d527      	bpl.n	801f7f8 <__ssputs_r+0x8c>
 801f7a8:	4629      	mov	r1, r5
 801f7aa:	f7ff fb7f 	bl	801eeac <_malloc_r>
 801f7ae:	4606      	mov	r6, r0
 801f7b0:	b360      	cbz	r0, 801f80c <__ssputs_r+0xa0>
 801f7b2:	6921      	ldr	r1, [r4, #16]
 801f7b4:	464a      	mov	r2, r9
 801f7b6:	f7ff ff20 	bl	801f5fa <memcpy>
 801f7ba:	89a3      	ldrh	r3, [r4, #12]
 801f7bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f7c4:	81a3      	strh	r3, [r4, #12]
 801f7c6:	6126      	str	r6, [r4, #16]
 801f7c8:	6165      	str	r5, [r4, #20]
 801f7ca:	444e      	add	r6, r9
 801f7cc:	eba5 0509 	sub.w	r5, r5, r9
 801f7d0:	6026      	str	r6, [r4, #0]
 801f7d2:	60a5      	str	r5, [r4, #8]
 801f7d4:	463e      	mov	r6, r7
 801f7d6:	42be      	cmp	r6, r7
 801f7d8:	d900      	bls.n	801f7dc <__ssputs_r+0x70>
 801f7da:	463e      	mov	r6, r7
 801f7dc:	6820      	ldr	r0, [r4, #0]
 801f7de:	4632      	mov	r2, r6
 801f7e0:	4641      	mov	r1, r8
 801f7e2:	f000 fcff 	bl	80201e4 <memmove>
 801f7e6:	68a3      	ldr	r3, [r4, #8]
 801f7e8:	1b9b      	subs	r3, r3, r6
 801f7ea:	60a3      	str	r3, [r4, #8]
 801f7ec:	6823      	ldr	r3, [r4, #0]
 801f7ee:	4433      	add	r3, r6
 801f7f0:	6023      	str	r3, [r4, #0]
 801f7f2:	2000      	movs	r0, #0
 801f7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7f8:	462a      	mov	r2, r5
 801f7fa:	f000 fd2f 	bl	802025c <_realloc_r>
 801f7fe:	4606      	mov	r6, r0
 801f800:	2800      	cmp	r0, #0
 801f802:	d1e0      	bne.n	801f7c6 <__ssputs_r+0x5a>
 801f804:	6921      	ldr	r1, [r4, #16]
 801f806:	4650      	mov	r0, sl
 801f808:	f7ff ff64 	bl	801f6d4 <_free_r>
 801f80c:	230c      	movs	r3, #12
 801f80e:	f8ca 3000 	str.w	r3, [sl]
 801f812:	89a3      	ldrh	r3, [r4, #12]
 801f814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f818:	81a3      	strh	r3, [r4, #12]
 801f81a:	f04f 30ff 	mov.w	r0, #4294967295
 801f81e:	e7e9      	b.n	801f7f4 <__ssputs_r+0x88>

0801f820 <_svfiprintf_r>:
 801f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f824:	4698      	mov	r8, r3
 801f826:	898b      	ldrh	r3, [r1, #12]
 801f828:	061b      	lsls	r3, r3, #24
 801f82a:	b09d      	sub	sp, #116	; 0x74
 801f82c:	4607      	mov	r7, r0
 801f82e:	460d      	mov	r5, r1
 801f830:	4614      	mov	r4, r2
 801f832:	d50e      	bpl.n	801f852 <_svfiprintf_r+0x32>
 801f834:	690b      	ldr	r3, [r1, #16]
 801f836:	b963      	cbnz	r3, 801f852 <_svfiprintf_r+0x32>
 801f838:	2140      	movs	r1, #64	; 0x40
 801f83a:	f7ff fb37 	bl	801eeac <_malloc_r>
 801f83e:	6028      	str	r0, [r5, #0]
 801f840:	6128      	str	r0, [r5, #16]
 801f842:	b920      	cbnz	r0, 801f84e <_svfiprintf_r+0x2e>
 801f844:	230c      	movs	r3, #12
 801f846:	603b      	str	r3, [r7, #0]
 801f848:	f04f 30ff 	mov.w	r0, #4294967295
 801f84c:	e0d0      	b.n	801f9f0 <_svfiprintf_r+0x1d0>
 801f84e:	2340      	movs	r3, #64	; 0x40
 801f850:	616b      	str	r3, [r5, #20]
 801f852:	2300      	movs	r3, #0
 801f854:	9309      	str	r3, [sp, #36]	; 0x24
 801f856:	2320      	movs	r3, #32
 801f858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f85c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f860:	2330      	movs	r3, #48	; 0x30
 801f862:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801fa08 <_svfiprintf_r+0x1e8>
 801f866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f86a:	f04f 0901 	mov.w	r9, #1
 801f86e:	4623      	mov	r3, r4
 801f870:	469a      	mov	sl, r3
 801f872:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f876:	b10a      	cbz	r2, 801f87c <_svfiprintf_r+0x5c>
 801f878:	2a25      	cmp	r2, #37	; 0x25
 801f87a:	d1f9      	bne.n	801f870 <_svfiprintf_r+0x50>
 801f87c:	ebba 0b04 	subs.w	fp, sl, r4
 801f880:	d00b      	beq.n	801f89a <_svfiprintf_r+0x7a>
 801f882:	465b      	mov	r3, fp
 801f884:	4622      	mov	r2, r4
 801f886:	4629      	mov	r1, r5
 801f888:	4638      	mov	r0, r7
 801f88a:	f7ff ff6f 	bl	801f76c <__ssputs_r>
 801f88e:	3001      	adds	r0, #1
 801f890:	f000 80a9 	beq.w	801f9e6 <_svfiprintf_r+0x1c6>
 801f894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f896:	445a      	add	r2, fp
 801f898:	9209      	str	r2, [sp, #36]	; 0x24
 801f89a:	f89a 3000 	ldrb.w	r3, [sl]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	f000 80a1 	beq.w	801f9e6 <_svfiprintf_r+0x1c6>
 801f8a4:	2300      	movs	r3, #0
 801f8a6:	f04f 32ff 	mov.w	r2, #4294967295
 801f8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f8ae:	f10a 0a01 	add.w	sl, sl, #1
 801f8b2:	9304      	str	r3, [sp, #16]
 801f8b4:	9307      	str	r3, [sp, #28]
 801f8b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f8ba:	931a      	str	r3, [sp, #104]	; 0x68
 801f8bc:	4654      	mov	r4, sl
 801f8be:	2205      	movs	r2, #5
 801f8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f8c4:	4850      	ldr	r0, [pc, #320]	; (801fa08 <_svfiprintf_r+0x1e8>)
 801f8c6:	f7e0 fca3 	bl	8000210 <memchr>
 801f8ca:	9a04      	ldr	r2, [sp, #16]
 801f8cc:	b9d8      	cbnz	r0, 801f906 <_svfiprintf_r+0xe6>
 801f8ce:	06d0      	lsls	r0, r2, #27
 801f8d0:	bf44      	itt	mi
 801f8d2:	2320      	movmi	r3, #32
 801f8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8d8:	0711      	lsls	r1, r2, #28
 801f8da:	bf44      	itt	mi
 801f8dc:	232b      	movmi	r3, #43	; 0x2b
 801f8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8e2:	f89a 3000 	ldrb.w	r3, [sl]
 801f8e6:	2b2a      	cmp	r3, #42	; 0x2a
 801f8e8:	d015      	beq.n	801f916 <_svfiprintf_r+0xf6>
 801f8ea:	9a07      	ldr	r2, [sp, #28]
 801f8ec:	4654      	mov	r4, sl
 801f8ee:	2000      	movs	r0, #0
 801f8f0:	f04f 0c0a 	mov.w	ip, #10
 801f8f4:	4621      	mov	r1, r4
 801f8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8fa:	3b30      	subs	r3, #48	; 0x30
 801f8fc:	2b09      	cmp	r3, #9
 801f8fe:	d94d      	bls.n	801f99c <_svfiprintf_r+0x17c>
 801f900:	b1b0      	cbz	r0, 801f930 <_svfiprintf_r+0x110>
 801f902:	9207      	str	r2, [sp, #28]
 801f904:	e014      	b.n	801f930 <_svfiprintf_r+0x110>
 801f906:	eba0 0308 	sub.w	r3, r0, r8
 801f90a:	fa09 f303 	lsl.w	r3, r9, r3
 801f90e:	4313      	orrs	r3, r2
 801f910:	9304      	str	r3, [sp, #16]
 801f912:	46a2      	mov	sl, r4
 801f914:	e7d2      	b.n	801f8bc <_svfiprintf_r+0x9c>
 801f916:	9b03      	ldr	r3, [sp, #12]
 801f918:	1d19      	adds	r1, r3, #4
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	9103      	str	r1, [sp, #12]
 801f91e:	2b00      	cmp	r3, #0
 801f920:	bfbb      	ittet	lt
 801f922:	425b      	neglt	r3, r3
 801f924:	f042 0202 	orrlt.w	r2, r2, #2
 801f928:	9307      	strge	r3, [sp, #28]
 801f92a:	9307      	strlt	r3, [sp, #28]
 801f92c:	bfb8      	it	lt
 801f92e:	9204      	strlt	r2, [sp, #16]
 801f930:	7823      	ldrb	r3, [r4, #0]
 801f932:	2b2e      	cmp	r3, #46	; 0x2e
 801f934:	d10c      	bne.n	801f950 <_svfiprintf_r+0x130>
 801f936:	7863      	ldrb	r3, [r4, #1]
 801f938:	2b2a      	cmp	r3, #42	; 0x2a
 801f93a:	d134      	bne.n	801f9a6 <_svfiprintf_r+0x186>
 801f93c:	9b03      	ldr	r3, [sp, #12]
 801f93e:	1d1a      	adds	r2, r3, #4
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	9203      	str	r2, [sp, #12]
 801f944:	2b00      	cmp	r3, #0
 801f946:	bfb8      	it	lt
 801f948:	f04f 33ff 	movlt.w	r3, #4294967295
 801f94c:	3402      	adds	r4, #2
 801f94e:	9305      	str	r3, [sp, #20]
 801f950:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801fa18 <_svfiprintf_r+0x1f8>
 801f954:	7821      	ldrb	r1, [r4, #0]
 801f956:	2203      	movs	r2, #3
 801f958:	4650      	mov	r0, sl
 801f95a:	f7e0 fc59 	bl	8000210 <memchr>
 801f95e:	b138      	cbz	r0, 801f970 <_svfiprintf_r+0x150>
 801f960:	9b04      	ldr	r3, [sp, #16]
 801f962:	eba0 000a 	sub.w	r0, r0, sl
 801f966:	2240      	movs	r2, #64	; 0x40
 801f968:	4082      	lsls	r2, r0
 801f96a:	4313      	orrs	r3, r2
 801f96c:	3401      	adds	r4, #1
 801f96e:	9304      	str	r3, [sp, #16]
 801f970:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f974:	4825      	ldr	r0, [pc, #148]	; (801fa0c <_svfiprintf_r+0x1ec>)
 801f976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f97a:	2206      	movs	r2, #6
 801f97c:	f7e0 fc48 	bl	8000210 <memchr>
 801f980:	2800      	cmp	r0, #0
 801f982:	d038      	beq.n	801f9f6 <_svfiprintf_r+0x1d6>
 801f984:	4b22      	ldr	r3, [pc, #136]	; (801fa10 <_svfiprintf_r+0x1f0>)
 801f986:	bb1b      	cbnz	r3, 801f9d0 <_svfiprintf_r+0x1b0>
 801f988:	9b03      	ldr	r3, [sp, #12]
 801f98a:	3307      	adds	r3, #7
 801f98c:	f023 0307 	bic.w	r3, r3, #7
 801f990:	3308      	adds	r3, #8
 801f992:	9303      	str	r3, [sp, #12]
 801f994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f996:	4433      	add	r3, r6
 801f998:	9309      	str	r3, [sp, #36]	; 0x24
 801f99a:	e768      	b.n	801f86e <_svfiprintf_r+0x4e>
 801f99c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f9a0:	460c      	mov	r4, r1
 801f9a2:	2001      	movs	r0, #1
 801f9a4:	e7a6      	b.n	801f8f4 <_svfiprintf_r+0xd4>
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	3401      	adds	r4, #1
 801f9aa:	9305      	str	r3, [sp, #20]
 801f9ac:	4619      	mov	r1, r3
 801f9ae:	f04f 0c0a 	mov.w	ip, #10
 801f9b2:	4620      	mov	r0, r4
 801f9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f9b8:	3a30      	subs	r2, #48	; 0x30
 801f9ba:	2a09      	cmp	r2, #9
 801f9bc:	d903      	bls.n	801f9c6 <_svfiprintf_r+0x1a6>
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d0c6      	beq.n	801f950 <_svfiprintf_r+0x130>
 801f9c2:	9105      	str	r1, [sp, #20]
 801f9c4:	e7c4      	b.n	801f950 <_svfiprintf_r+0x130>
 801f9c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f9ca:	4604      	mov	r4, r0
 801f9cc:	2301      	movs	r3, #1
 801f9ce:	e7f0      	b.n	801f9b2 <_svfiprintf_r+0x192>
 801f9d0:	ab03      	add	r3, sp, #12
 801f9d2:	9300      	str	r3, [sp, #0]
 801f9d4:	462a      	mov	r2, r5
 801f9d6:	4b0f      	ldr	r3, [pc, #60]	; (801fa14 <_svfiprintf_r+0x1f4>)
 801f9d8:	a904      	add	r1, sp, #16
 801f9da:	4638      	mov	r0, r7
 801f9dc:	f3af 8000 	nop.w
 801f9e0:	1c42      	adds	r2, r0, #1
 801f9e2:	4606      	mov	r6, r0
 801f9e4:	d1d6      	bne.n	801f994 <_svfiprintf_r+0x174>
 801f9e6:	89ab      	ldrh	r3, [r5, #12]
 801f9e8:	065b      	lsls	r3, r3, #25
 801f9ea:	f53f af2d 	bmi.w	801f848 <_svfiprintf_r+0x28>
 801f9ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9f0:	b01d      	add	sp, #116	; 0x74
 801f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9f6:	ab03      	add	r3, sp, #12
 801f9f8:	9300      	str	r3, [sp, #0]
 801f9fa:	462a      	mov	r2, r5
 801f9fc:	4b05      	ldr	r3, [pc, #20]	; (801fa14 <_svfiprintf_r+0x1f4>)
 801f9fe:	a904      	add	r1, sp, #16
 801fa00:	4638      	mov	r0, r7
 801fa02:	f000 f9bd 	bl	801fd80 <_printf_i>
 801fa06:	e7eb      	b.n	801f9e0 <_svfiprintf_r+0x1c0>
 801fa08:	080245e0 	.word	0x080245e0
 801fa0c:	080245ea 	.word	0x080245ea
 801fa10:	00000000 	.word	0x00000000
 801fa14:	0801f76d 	.word	0x0801f76d
 801fa18:	080245e6 	.word	0x080245e6

0801fa1c <__sfputc_r>:
 801fa1c:	6893      	ldr	r3, [r2, #8]
 801fa1e:	3b01      	subs	r3, #1
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	b410      	push	{r4}
 801fa24:	6093      	str	r3, [r2, #8]
 801fa26:	da08      	bge.n	801fa3a <__sfputc_r+0x1e>
 801fa28:	6994      	ldr	r4, [r2, #24]
 801fa2a:	42a3      	cmp	r3, r4
 801fa2c:	db01      	blt.n	801fa32 <__sfputc_r+0x16>
 801fa2e:	290a      	cmp	r1, #10
 801fa30:	d103      	bne.n	801fa3a <__sfputc_r+0x1e>
 801fa32:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa36:	f7ff bc6a 	b.w	801f30e <__swbuf_r>
 801fa3a:	6813      	ldr	r3, [r2, #0]
 801fa3c:	1c58      	adds	r0, r3, #1
 801fa3e:	6010      	str	r0, [r2, #0]
 801fa40:	7019      	strb	r1, [r3, #0]
 801fa42:	4608      	mov	r0, r1
 801fa44:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa48:	4770      	bx	lr

0801fa4a <__sfputs_r>:
 801fa4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa4c:	4606      	mov	r6, r0
 801fa4e:	460f      	mov	r7, r1
 801fa50:	4614      	mov	r4, r2
 801fa52:	18d5      	adds	r5, r2, r3
 801fa54:	42ac      	cmp	r4, r5
 801fa56:	d101      	bne.n	801fa5c <__sfputs_r+0x12>
 801fa58:	2000      	movs	r0, #0
 801fa5a:	e007      	b.n	801fa6c <__sfputs_r+0x22>
 801fa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa60:	463a      	mov	r2, r7
 801fa62:	4630      	mov	r0, r6
 801fa64:	f7ff ffda 	bl	801fa1c <__sfputc_r>
 801fa68:	1c43      	adds	r3, r0, #1
 801fa6a:	d1f3      	bne.n	801fa54 <__sfputs_r+0xa>
 801fa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fa70 <_vfiprintf_r>:
 801fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa74:	460d      	mov	r5, r1
 801fa76:	b09d      	sub	sp, #116	; 0x74
 801fa78:	4614      	mov	r4, r2
 801fa7a:	4698      	mov	r8, r3
 801fa7c:	4606      	mov	r6, r0
 801fa7e:	b118      	cbz	r0, 801fa88 <_vfiprintf_r+0x18>
 801fa80:	6a03      	ldr	r3, [r0, #32]
 801fa82:	b90b      	cbnz	r3, 801fa88 <_vfiprintf_r+0x18>
 801fa84:	f7ff fb2a 	bl	801f0dc <__sinit>
 801fa88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa8a:	07d9      	lsls	r1, r3, #31
 801fa8c:	d405      	bmi.n	801fa9a <_vfiprintf_r+0x2a>
 801fa8e:	89ab      	ldrh	r3, [r5, #12]
 801fa90:	059a      	lsls	r2, r3, #22
 801fa92:	d402      	bmi.n	801fa9a <_vfiprintf_r+0x2a>
 801fa94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa96:	f7ff fdae 	bl	801f5f6 <__retarget_lock_acquire_recursive>
 801fa9a:	89ab      	ldrh	r3, [r5, #12]
 801fa9c:	071b      	lsls	r3, r3, #28
 801fa9e:	d501      	bpl.n	801faa4 <_vfiprintf_r+0x34>
 801faa0:	692b      	ldr	r3, [r5, #16]
 801faa2:	b99b      	cbnz	r3, 801facc <_vfiprintf_r+0x5c>
 801faa4:	4629      	mov	r1, r5
 801faa6:	4630      	mov	r0, r6
 801faa8:	f7ff fc6e 	bl	801f388 <__swsetup_r>
 801faac:	b170      	cbz	r0, 801facc <_vfiprintf_r+0x5c>
 801faae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fab0:	07dc      	lsls	r4, r3, #31
 801fab2:	d504      	bpl.n	801fabe <_vfiprintf_r+0x4e>
 801fab4:	f04f 30ff 	mov.w	r0, #4294967295
 801fab8:	b01d      	add	sp, #116	; 0x74
 801faba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fabe:	89ab      	ldrh	r3, [r5, #12]
 801fac0:	0598      	lsls	r0, r3, #22
 801fac2:	d4f7      	bmi.n	801fab4 <_vfiprintf_r+0x44>
 801fac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fac6:	f7ff fd97 	bl	801f5f8 <__retarget_lock_release_recursive>
 801faca:	e7f3      	b.n	801fab4 <_vfiprintf_r+0x44>
 801facc:	2300      	movs	r3, #0
 801face:	9309      	str	r3, [sp, #36]	; 0x24
 801fad0:	2320      	movs	r3, #32
 801fad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fad6:	f8cd 800c 	str.w	r8, [sp, #12]
 801fada:	2330      	movs	r3, #48	; 0x30
 801fadc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801fc90 <_vfiprintf_r+0x220>
 801fae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fae4:	f04f 0901 	mov.w	r9, #1
 801fae8:	4623      	mov	r3, r4
 801faea:	469a      	mov	sl, r3
 801faec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801faf0:	b10a      	cbz	r2, 801faf6 <_vfiprintf_r+0x86>
 801faf2:	2a25      	cmp	r2, #37	; 0x25
 801faf4:	d1f9      	bne.n	801faea <_vfiprintf_r+0x7a>
 801faf6:	ebba 0b04 	subs.w	fp, sl, r4
 801fafa:	d00b      	beq.n	801fb14 <_vfiprintf_r+0xa4>
 801fafc:	465b      	mov	r3, fp
 801fafe:	4622      	mov	r2, r4
 801fb00:	4629      	mov	r1, r5
 801fb02:	4630      	mov	r0, r6
 801fb04:	f7ff ffa1 	bl	801fa4a <__sfputs_r>
 801fb08:	3001      	adds	r0, #1
 801fb0a:	f000 80a9 	beq.w	801fc60 <_vfiprintf_r+0x1f0>
 801fb0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb10:	445a      	add	r2, fp
 801fb12:	9209      	str	r2, [sp, #36]	; 0x24
 801fb14:	f89a 3000 	ldrb.w	r3, [sl]
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	f000 80a1 	beq.w	801fc60 <_vfiprintf_r+0x1f0>
 801fb1e:	2300      	movs	r3, #0
 801fb20:	f04f 32ff 	mov.w	r2, #4294967295
 801fb24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fb28:	f10a 0a01 	add.w	sl, sl, #1
 801fb2c:	9304      	str	r3, [sp, #16]
 801fb2e:	9307      	str	r3, [sp, #28]
 801fb30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fb34:	931a      	str	r3, [sp, #104]	; 0x68
 801fb36:	4654      	mov	r4, sl
 801fb38:	2205      	movs	r2, #5
 801fb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb3e:	4854      	ldr	r0, [pc, #336]	; (801fc90 <_vfiprintf_r+0x220>)
 801fb40:	f7e0 fb66 	bl	8000210 <memchr>
 801fb44:	9a04      	ldr	r2, [sp, #16]
 801fb46:	b9d8      	cbnz	r0, 801fb80 <_vfiprintf_r+0x110>
 801fb48:	06d1      	lsls	r1, r2, #27
 801fb4a:	bf44      	itt	mi
 801fb4c:	2320      	movmi	r3, #32
 801fb4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb52:	0713      	lsls	r3, r2, #28
 801fb54:	bf44      	itt	mi
 801fb56:	232b      	movmi	r3, #43	; 0x2b
 801fb58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb5c:	f89a 3000 	ldrb.w	r3, [sl]
 801fb60:	2b2a      	cmp	r3, #42	; 0x2a
 801fb62:	d015      	beq.n	801fb90 <_vfiprintf_r+0x120>
 801fb64:	9a07      	ldr	r2, [sp, #28]
 801fb66:	4654      	mov	r4, sl
 801fb68:	2000      	movs	r0, #0
 801fb6a:	f04f 0c0a 	mov.w	ip, #10
 801fb6e:	4621      	mov	r1, r4
 801fb70:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fb74:	3b30      	subs	r3, #48	; 0x30
 801fb76:	2b09      	cmp	r3, #9
 801fb78:	d94d      	bls.n	801fc16 <_vfiprintf_r+0x1a6>
 801fb7a:	b1b0      	cbz	r0, 801fbaa <_vfiprintf_r+0x13a>
 801fb7c:	9207      	str	r2, [sp, #28]
 801fb7e:	e014      	b.n	801fbaa <_vfiprintf_r+0x13a>
 801fb80:	eba0 0308 	sub.w	r3, r0, r8
 801fb84:	fa09 f303 	lsl.w	r3, r9, r3
 801fb88:	4313      	orrs	r3, r2
 801fb8a:	9304      	str	r3, [sp, #16]
 801fb8c:	46a2      	mov	sl, r4
 801fb8e:	e7d2      	b.n	801fb36 <_vfiprintf_r+0xc6>
 801fb90:	9b03      	ldr	r3, [sp, #12]
 801fb92:	1d19      	adds	r1, r3, #4
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	9103      	str	r1, [sp, #12]
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	bfbb      	ittet	lt
 801fb9c:	425b      	neglt	r3, r3
 801fb9e:	f042 0202 	orrlt.w	r2, r2, #2
 801fba2:	9307      	strge	r3, [sp, #28]
 801fba4:	9307      	strlt	r3, [sp, #28]
 801fba6:	bfb8      	it	lt
 801fba8:	9204      	strlt	r2, [sp, #16]
 801fbaa:	7823      	ldrb	r3, [r4, #0]
 801fbac:	2b2e      	cmp	r3, #46	; 0x2e
 801fbae:	d10c      	bne.n	801fbca <_vfiprintf_r+0x15a>
 801fbb0:	7863      	ldrb	r3, [r4, #1]
 801fbb2:	2b2a      	cmp	r3, #42	; 0x2a
 801fbb4:	d134      	bne.n	801fc20 <_vfiprintf_r+0x1b0>
 801fbb6:	9b03      	ldr	r3, [sp, #12]
 801fbb8:	1d1a      	adds	r2, r3, #4
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	9203      	str	r2, [sp, #12]
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	bfb8      	it	lt
 801fbc2:	f04f 33ff 	movlt.w	r3, #4294967295
 801fbc6:	3402      	adds	r4, #2
 801fbc8:	9305      	str	r3, [sp, #20]
 801fbca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fca0 <_vfiprintf_r+0x230>
 801fbce:	7821      	ldrb	r1, [r4, #0]
 801fbd0:	2203      	movs	r2, #3
 801fbd2:	4650      	mov	r0, sl
 801fbd4:	f7e0 fb1c 	bl	8000210 <memchr>
 801fbd8:	b138      	cbz	r0, 801fbea <_vfiprintf_r+0x17a>
 801fbda:	9b04      	ldr	r3, [sp, #16]
 801fbdc:	eba0 000a 	sub.w	r0, r0, sl
 801fbe0:	2240      	movs	r2, #64	; 0x40
 801fbe2:	4082      	lsls	r2, r0
 801fbe4:	4313      	orrs	r3, r2
 801fbe6:	3401      	adds	r4, #1
 801fbe8:	9304      	str	r3, [sp, #16]
 801fbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbee:	4829      	ldr	r0, [pc, #164]	; (801fc94 <_vfiprintf_r+0x224>)
 801fbf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fbf4:	2206      	movs	r2, #6
 801fbf6:	f7e0 fb0b 	bl	8000210 <memchr>
 801fbfa:	2800      	cmp	r0, #0
 801fbfc:	d03f      	beq.n	801fc7e <_vfiprintf_r+0x20e>
 801fbfe:	4b26      	ldr	r3, [pc, #152]	; (801fc98 <_vfiprintf_r+0x228>)
 801fc00:	bb1b      	cbnz	r3, 801fc4a <_vfiprintf_r+0x1da>
 801fc02:	9b03      	ldr	r3, [sp, #12]
 801fc04:	3307      	adds	r3, #7
 801fc06:	f023 0307 	bic.w	r3, r3, #7
 801fc0a:	3308      	adds	r3, #8
 801fc0c:	9303      	str	r3, [sp, #12]
 801fc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc10:	443b      	add	r3, r7
 801fc12:	9309      	str	r3, [sp, #36]	; 0x24
 801fc14:	e768      	b.n	801fae8 <_vfiprintf_r+0x78>
 801fc16:	fb0c 3202 	mla	r2, ip, r2, r3
 801fc1a:	460c      	mov	r4, r1
 801fc1c:	2001      	movs	r0, #1
 801fc1e:	e7a6      	b.n	801fb6e <_vfiprintf_r+0xfe>
 801fc20:	2300      	movs	r3, #0
 801fc22:	3401      	adds	r4, #1
 801fc24:	9305      	str	r3, [sp, #20]
 801fc26:	4619      	mov	r1, r3
 801fc28:	f04f 0c0a 	mov.w	ip, #10
 801fc2c:	4620      	mov	r0, r4
 801fc2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fc32:	3a30      	subs	r2, #48	; 0x30
 801fc34:	2a09      	cmp	r2, #9
 801fc36:	d903      	bls.n	801fc40 <_vfiprintf_r+0x1d0>
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d0c6      	beq.n	801fbca <_vfiprintf_r+0x15a>
 801fc3c:	9105      	str	r1, [sp, #20]
 801fc3e:	e7c4      	b.n	801fbca <_vfiprintf_r+0x15a>
 801fc40:	fb0c 2101 	mla	r1, ip, r1, r2
 801fc44:	4604      	mov	r4, r0
 801fc46:	2301      	movs	r3, #1
 801fc48:	e7f0      	b.n	801fc2c <_vfiprintf_r+0x1bc>
 801fc4a:	ab03      	add	r3, sp, #12
 801fc4c:	9300      	str	r3, [sp, #0]
 801fc4e:	462a      	mov	r2, r5
 801fc50:	4b12      	ldr	r3, [pc, #72]	; (801fc9c <_vfiprintf_r+0x22c>)
 801fc52:	a904      	add	r1, sp, #16
 801fc54:	4630      	mov	r0, r6
 801fc56:	f3af 8000 	nop.w
 801fc5a:	4607      	mov	r7, r0
 801fc5c:	1c78      	adds	r0, r7, #1
 801fc5e:	d1d6      	bne.n	801fc0e <_vfiprintf_r+0x19e>
 801fc60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fc62:	07d9      	lsls	r1, r3, #31
 801fc64:	d405      	bmi.n	801fc72 <_vfiprintf_r+0x202>
 801fc66:	89ab      	ldrh	r3, [r5, #12]
 801fc68:	059a      	lsls	r2, r3, #22
 801fc6a:	d402      	bmi.n	801fc72 <_vfiprintf_r+0x202>
 801fc6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fc6e:	f7ff fcc3 	bl	801f5f8 <__retarget_lock_release_recursive>
 801fc72:	89ab      	ldrh	r3, [r5, #12]
 801fc74:	065b      	lsls	r3, r3, #25
 801fc76:	f53f af1d 	bmi.w	801fab4 <_vfiprintf_r+0x44>
 801fc7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fc7c:	e71c      	b.n	801fab8 <_vfiprintf_r+0x48>
 801fc7e:	ab03      	add	r3, sp, #12
 801fc80:	9300      	str	r3, [sp, #0]
 801fc82:	462a      	mov	r2, r5
 801fc84:	4b05      	ldr	r3, [pc, #20]	; (801fc9c <_vfiprintf_r+0x22c>)
 801fc86:	a904      	add	r1, sp, #16
 801fc88:	4630      	mov	r0, r6
 801fc8a:	f000 f879 	bl	801fd80 <_printf_i>
 801fc8e:	e7e4      	b.n	801fc5a <_vfiprintf_r+0x1ea>
 801fc90:	080245e0 	.word	0x080245e0
 801fc94:	080245ea 	.word	0x080245ea
 801fc98:	00000000 	.word	0x00000000
 801fc9c:	0801fa4b 	.word	0x0801fa4b
 801fca0:	080245e6 	.word	0x080245e6

0801fca4 <_printf_common>:
 801fca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fca8:	4616      	mov	r6, r2
 801fcaa:	4699      	mov	r9, r3
 801fcac:	688a      	ldr	r2, [r1, #8]
 801fcae:	690b      	ldr	r3, [r1, #16]
 801fcb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fcb4:	4293      	cmp	r3, r2
 801fcb6:	bfb8      	it	lt
 801fcb8:	4613      	movlt	r3, r2
 801fcba:	6033      	str	r3, [r6, #0]
 801fcbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fcc0:	4607      	mov	r7, r0
 801fcc2:	460c      	mov	r4, r1
 801fcc4:	b10a      	cbz	r2, 801fcca <_printf_common+0x26>
 801fcc6:	3301      	adds	r3, #1
 801fcc8:	6033      	str	r3, [r6, #0]
 801fcca:	6823      	ldr	r3, [r4, #0]
 801fccc:	0699      	lsls	r1, r3, #26
 801fcce:	bf42      	ittt	mi
 801fcd0:	6833      	ldrmi	r3, [r6, #0]
 801fcd2:	3302      	addmi	r3, #2
 801fcd4:	6033      	strmi	r3, [r6, #0]
 801fcd6:	6825      	ldr	r5, [r4, #0]
 801fcd8:	f015 0506 	ands.w	r5, r5, #6
 801fcdc:	d106      	bne.n	801fcec <_printf_common+0x48>
 801fcde:	f104 0a19 	add.w	sl, r4, #25
 801fce2:	68e3      	ldr	r3, [r4, #12]
 801fce4:	6832      	ldr	r2, [r6, #0]
 801fce6:	1a9b      	subs	r3, r3, r2
 801fce8:	42ab      	cmp	r3, r5
 801fcea:	dc26      	bgt.n	801fd3a <_printf_common+0x96>
 801fcec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fcf0:	1e13      	subs	r3, r2, #0
 801fcf2:	6822      	ldr	r2, [r4, #0]
 801fcf4:	bf18      	it	ne
 801fcf6:	2301      	movne	r3, #1
 801fcf8:	0692      	lsls	r2, r2, #26
 801fcfa:	d42b      	bmi.n	801fd54 <_printf_common+0xb0>
 801fcfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fd00:	4649      	mov	r1, r9
 801fd02:	4638      	mov	r0, r7
 801fd04:	47c0      	blx	r8
 801fd06:	3001      	adds	r0, #1
 801fd08:	d01e      	beq.n	801fd48 <_printf_common+0xa4>
 801fd0a:	6823      	ldr	r3, [r4, #0]
 801fd0c:	6922      	ldr	r2, [r4, #16]
 801fd0e:	f003 0306 	and.w	r3, r3, #6
 801fd12:	2b04      	cmp	r3, #4
 801fd14:	bf02      	ittt	eq
 801fd16:	68e5      	ldreq	r5, [r4, #12]
 801fd18:	6833      	ldreq	r3, [r6, #0]
 801fd1a:	1aed      	subeq	r5, r5, r3
 801fd1c:	68a3      	ldr	r3, [r4, #8]
 801fd1e:	bf0c      	ite	eq
 801fd20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fd24:	2500      	movne	r5, #0
 801fd26:	4293      	cmp	r3, r2
 801fd28:	bfc4      	itt	gt
 801fd2a:	1a9b      	subgt	r3, r3, r2
 801fd2c:	18ed      	addgt	r5, r5, r3
 801fd2e:	2600      	movs	r6, #0
 801fd30:	341a      	adds	r4, #26
 801fd32:	42b5      	cmp	r5, r6
 801fd34:	d11a      	bne.n	801fd6c <_printf_common+0xc8>
 801fd36:	2000      	movs	r0, #0
 801fd38:	e008      	b.n	801fd4c <_printf_common+0xa8>
 801fd3a:	2301      	movs	r3, #1
 801fd3c:	4652      	mov	r2, sl
 801fd3e:	4649      	mov	r1, r9
 801fd40:	4638      	mov	r0, r7
 801fd42:	47c0      	blx	r8
 801fd44:	3001      	adds	r0, #1
 801fd46:	d103      	bne.n	801fd50 <_printf_common+0xac>
 801fd48:	f04f 30ff 	mov.w	r0, #4294967295
 801fd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd50:	3501      	adds	r5, #1
 801fd52:	e7c6      	b.n	801fce2 <_printf_common+0x3e>
 801fd54:	18e1      	adds	r1, r4, r3
 801fd56:	1c5a      	adds	r2, r3, #1
 801fd58:	2030      	movs	r0, #48	; 0x30
 801fd5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fd5e:	4422      	add	r2, r4
 801fd60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fd64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fd68:	3302      	adds	r3, #2
 801fd6a:	e7c7      	b.n	801fcfc <_printf_common+0x58>
 801fd6c:	2301      	movs	r3, #1
 801fd6e:	4622      	mov	r2, r4
 801fd70:	4649      	mov	r1, r9
 801fd72:	4638      	mov	r0, r7
 801fd74:	47c0      	blx	r8
 801fd76:	3001      	adds	r0, #1
 801fd78:	d0e6      	beq.n	801fd48 <_printf_common+0xa4>
 801fd7a:	3601      	adds	r6, #1
 801fd7c:	e7d9      	b.n	801fd32 <_printf_common+0x8e>
	...

0801fd80 <_printf_i>:
 801fd80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fd84:	7e0f      	ldrb	r7, [r1, #24]
 801fd86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fd88:	2f78      	cmp	r7, #120	; 0x78
 801fd8a:	4691      	mov	r9, r2
 801fd8c:	4680      	mov	r8, r0
 801fd8e:	460c      	mov	r4, r1
 801fd90:	469a      	mov	sl, r3
 801fd92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fd96:	d807      	bhi.n	801fda8 <_printf_i+0x28>
 801fd98:	2f62      	cmp	r7, #98	; 0x62
 801fd9a:	d80a      	bhi.n	801fdb2 <_printf_i+0x32>
 801fd9c:	2f00      	cmp	r7, #0
 801fd9e:	f000 80d4 	beq.w	801ff4a <_printf_i+0x1ca>
 801fda2:	2f58      	cmp	r7, #88	; 0x58
 801fda4:	f000 80c0 	beq.w	801ff28 <_printf_i+0x1a8>
 801fda8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fdac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fdb0:	e03a      	b.n	801fe28 <_printf_i+0xa8>
 801fdb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fdb6:	2b15      	cmp	r3, #21
 801fdb8:	d8f6      	bhi.n	801fda8 <_printf_i+0x28>
 801fdba:	a101      	add	r1, pc, #4	; (adr r1, 801fdc0 <_printf_i+0x40>)
 801fdbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fdc0:	0801fe19 	.word	0x0801fe19
 801fdc4:	0801fe2d 	.word	0x0801fe2d
 801fdc8:	0801fda9 	.word	0x0801fda9
 801fdcc:	0801fda9 	.word	0x0801fda9
 801fdd0:	0801fda9 	.word	0x0801fda9
 801fdd4:	0801fda9 	.word	0x0801fda9
 801fdd8:	0801fe2d 	.word	0x0801fe2d
 801fddc:	0801fda9 	.word	0x0801fda9
 801fde0:	0801fda9 	.word	0x0801fda9
 801fde4:	0801fda9 	.word	0x0801fda9
 801fde8:	0801fda9 	.word	0x0801fda9
 801fdec:	0801ff31 	.word	0x0801ff31
 801fdf0:	0801fe59 	.word	0x0801fe59
 801fdf4:	0801feeb 	.word	0x0801feeb
 801fdf8:	0801fda9 	.word	0x0801fda9
 801fdfc:	0801fda9 	.word	0x0801fda9
 801fe00:	0801ff53 	.word	0x0801ff53
 801fe04:	0801fda9 	.word	0x0801fda9
 801fe08:	0801fe59 	.word	0x0801fe59
 801fe0c:	0801fda9 	.word	0x0801fda9
 801fe10:	0801fda9 	.word	0x0801fda9
 801fe14:	0801fef3 	.word	0x0801fef3
 801fe18:	682b      	ldr	r3, [r5, #0]
 801fe1a:	1d1a      	adds	r2, r3, #4
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	602a      	str	r2, [r5, #0]
 801fe20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fe24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fe28:	2301      	movs	r3, #1
 801fe2a:	e09f      	b.n	801ff6c <_printf_i+0x1ec>
 801fe2c:	6820      	ldr	r0, [r4, #0]
 801fe2e:	682b      	ldr	r3, [r5, #0]
 801fe30:	0607      	lsls	r7, r0, #24
 801fe32:	f103 0104 	add.w	r1, r3, #4
 801fe36:	6029      	str	r1, [r5, #0]
 801fe38:	d501      	bpl.n	801fe3e <_printf_i+0xbe>
 801fe3a:	681e      	ldr	r6, [r3, #0]
 801fe3c:	e003      	b.n	801fe46 <_printf_i+0xc6>
 801fe3e:	0646      	lsls	r6, r0, #25
 801fe40:	d5fb      	bpl.n	801fe3a <_printf_i+0xba>
 801fe42:	f9b3 6000 	ldrsh.w	r6, [r3]
 801fe46:	2e00      	cmp	r6, #0
 801fe48:	da03      	bge.n	801fe52 <_printf_i+0xd2>
 801fe4a:	232d      	movs	r3, #45	; 0x2d
 801fe4c:	4276      	negs	r6, r6
 801fe4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe52:	485a      	ldr	r0, [pc, #360]	; (801ffbc <_printf_i+0x23c>)
 801fe54:	230a      	movs	r3, #10
 801fe56:	e012      	b.n	801fe7e <_printf_i+0xfe>
 801fe58:	682b      	ldr	r3, [r5, #0]
 801fe5a:	6820      	ldr	r0, [r4, #0]
 801fe5c:	1d19      	adds	r1, r3, #4
 801fe5e:	6029      	str	r1, [r5, #0]
 801fe60:	0605      	lsls	r5, r0, #24
 801fe62:	d501      	bpl.n	801fe68 <_printf_i+0xe8>
 801fe64:	681e      	ldr	r6, [r3, #0]
 801fe66:	e002      	b.n	801fe6e <_printf_i+0xee>
 801fe68:	0641      	lsls	r1, r0, #25
 801fe6a:	d5fb      	bpl.n	801fe64 <_printf_i+0xe4>
 801fe6c:	881e      	ldrh	r6, [r3, #0]
 801fe6e:	4853      	ldr	r0, [pc, #332]	; (801ffbc <_printf_i+0x23c>)
 801fe70:	2f6f      	cmp	r7, #111	; 0x6f
 801fe72:	bf0c      	ite	eq
 801fe74:	2308      	moveq	r3, #8
 801fe76:	230a      	movne	r3, #10
 801fe78:	2100      	movs	r1, #0
 801fe7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fe7e:	6865      	ldr	r5, [r4, #4]
 801fe80:	60a5      	str	r5, [r4, #8]
 801fe82:	2d00      	cmp	r5, #0
 801fe84:	bfa2      	ittt	ge
 801fe86:	6821      	ldrge	r1, [r4, #0]
 801fe88:	f021 0104 	bicge.w	r1, r1, #4
 801fe8c:	6021      	strge	r1, [r4, #0]
 801fe8e:	b90e      	cbnz	r6, 801fe94 <_printf_i+0x114>
 801fe90:	2d00      	cmp	r5, #0
 801fe92:	d04b      	beq.n	801ff2c <_printf_i+0x1ac>
 801fe94:	4615      	mov	r5, r2
 801fe96:	fbb6 f1f3 	udiv	r1, r6, r3
 801fe9a:	fb03 6711 	mls	r7, r3, r1, r6
 801fe9e:	5dc7      	ldrb	r7, [r0, r7]
 801fea0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fea4:	4637      	mov	r7, r6
 801fea6:	42bb      	cmp	r3, r7
 801fea8:	460e      	mov	r6, r1
 801feaa:	d9f4      	bls.n	801fe96 <_printf_i+0x116>
 801feac:	2b08      	cmp	r3, #8
 801feae:	d10b      	bne.n	801fec8 <_printf_i+0x148>
 801feb0:	6823      	ldr	r3, [r4, #0]
 801feb2:	07de      	lsls	r6, r3, #31
 801feb4:	d508      	bpl.n	801fec8 <_printf_i+0x148>
 801feb6:	6923      	ldr	r3, [r4, #16]
 801feb8:	6861      	ldr	r1, [r4, #4]
 801feba:	4299      	cmp	r1, r3
 801febc:	bfde      	ittt	le
 801febe:	2330      	movle	r3, #48	; 0x30
 801fec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fec8:	1b52      	subs	r2, r2, r5
 801feca:	6122      	str	r2, [r4, #16]
 801fecc:	f8cd a000 	str.w	sl, [sp]
 801fed0:	464b      	mov	r3, r9
 801fed2:	aa03      	add	r2, sp, #12
 801fed4:	4621      	mov	r1, r4
 801fed6:	4640      	mov	r0, r8
 801fed8:	f7ff fee4 	bl	801fca4 <_printf_common>
 801fedc:	3001      	adds	r0, #1
 801fede:	d14a      	bne.n	801ff76 <_printf_i+0x1f6>
 801fee0:	f04f 30ff 	mov.w	r0, #4294967295
 801fee4:	b004      	add	sp, #16
 801fee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feea:	6823      	ldr	r3, [r4, #0]
 801feec:	f043 0320 	orr.w	r3, r3, #32
 801fef0:	6023      	str	r3, [r4, #0]
 801fef2:	4833      	ldr	r0, [pc, #204]	; (801ffc0 <_printf_i+0x240>)
 801fef4:	2778      	movs	r7, #120	; 0x78
 801fef6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fefa:	6823      	ldr	r3, [r4, #0]
 801fefc:	6829      	ldr	r1, [r5, #0]
 801fefe:	061f      	lsls	r7, r3, #24
 801ff00:	f851 6b04 	ldr.w	r6, [r1], #4
 801ff04:	d402      	bmi.n	801ff0c <_printf_i+0x18c>
 801ff06:	065f      	lsls	r7, r3, #25
 801ff08:	bf48      	it	mi
 801ff0a:	b2b6      	uxthmi	r6, r6
 801ff0c:	07df      	lsls	r7, r3, #31
 801ff0e:	bf48      	it	mi
 801ff10:	f043 0320 	orrmi.w	r3, r3, #32
 801ff14:	6029      	str	r1, [r5, #0]
 801ff16:	bf48      	it	mi
 801ff18:	6023      	strmi	r3, [r4, #0]
 801ff1a:	b91e      	cbnz	r6, 801ff24 <_printf_i+0x1a4>
 801ff1c:	6823      	ldr	r3, [r4, #0]
 801ff1e:	f023 0320 	bic.w	r3, r3, #32
 801ff22:	6023      	str	r3, [r4, #0]
 801ff24:	2310      	movs	r3, #16
 801ff26:	e7a7      	b.n	801fe78 <_printf_i+0xf8>
 801ff28:	4824      	ldr	r0, [pc, #144]	; (801ffbc <_printf_i+0x23c>)
 801ff2a:	e7e4      	b.n	801fef6 <_printf_i+0x176>
 801ff2c:	4615      	mov	r5, r2
 801ff2e:	e7bd      	b.n	801feac <_printf_i+0x12c>
 801ff30:	682b      	ldr	r3, [r5, #0]
 801ff32:	6826      	ldr	r6, [r4, #0]
 801ff34:	6961      	ldr	r1, [r4, #20]
 801ff36:	1d18      	adds	r0, r3, #4
 801ff38:	6028      	str	r0, [r5, #0]
 801ff3a:	0635      	lsls	r5, r6, #24
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	d501      	bpl.n	801ff44 <_printf_i+0x1c4>
 801ff40:	6019      	str	r1, [r3, #0]
 801ff42:	e002      	b.n	801ff4a <_printf_i+0x1ca>
 801ff44:	0670      	lsls	r0, r6, #25
 801ff46:	d5fb      	bpl.n	801ff40 <_printf_i+0x1c0>
 801ff48:	8019      	strh	r1, [r3, #0]
 801ff4a:	2300      	movs	r3, #0
 801ff4c:	6123      	str	r3, [r4, #16]
 801ff4e:	4615      	mov	r5, r2
 801ff50:	e7bc      	b.n	801fecc <_printf_i+0x14c>
 801ff52:	682b      	ldr	r3, [r5, #0]
 801ff54:	1d1a      	adds	r2, r3, #4
 801ff56:	602a      	str	r2, [r5, #0]
 801ff58:	681d      	ldr	r5, [r3, #0]
 801ff5a:	6862      	ldr	r2, [r4, #4]
 801ff5c:	2100      	movs	r1, #0
 801ff5e:	4628      	mov	r0, r5
 801ff60:	f7e0 f956 	bl	8000210 <memchr>
 801ff64:	b108      	cbz	r0, 801ff6a <_printf_i+0x1ea>
 801ff66:	1b40      	subs	r0, r0, r5
 801ff68:	6060      	str	r0, [r4, #4]
 801ff6a:	6863      	ldr	r3, [r4, #4]
 801ff6c:	6123      	str	r3, [r4, #16]
 801ff6e:	2300      	movs	r3, #0
 801ff70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ff74:	e7aa      	b.n	801fecc <_printf_i+0x14c>
 801ff76:	6923      	ldr	r3, [r4, #16]
 801ff78:	462a      	mov	r2, r5
 801ff7a:	4649      	mov	r1, r9
 801ff7c:	4640      	mov	r0, r8
 801ff7e:	47d0      	blx	sl
 801ff80:	3001      	adds	r0, #1
 801ff82:	d0ad      	beq.n	801fee0 <_printf_i+0x160>
 801ff84:	6823      	ldr	r3, [r4, #0]
 801ff86:	079b      	lsls	r3, r3, #30
 801ff88:	d413      	bmi.n	801ffb2 <_printf_i+0x232>
 801ff8a:	68e0      	ldr	r0, [r4, #12]
 801ff8c:	9b03      	ldr	r3, [sp, #12]
 801ff8e:	4298      	cmp	r0, r3
 801ff90:	bfb8      	it	lt
 801ff92:	4618      	movlt	r0, r3
 801ff94:	e7a6      	b.n	801fee4 <_printf_i+0x164>
 801ff96:	2301      	movs	r3, #1
 801ff98:	4632      	mov	r2, r6
 801ff9a:	4649      	mov	r1, r9
 801ff9c:	4640      	mov	r0, r8
 801ff9e:	47d0      	blx	sl
 801ffa0:	3001      	adds	r0, #1
 801ffa2:	d09d      	beq.n	801fee0 <_printf_i+0x160>
 801ffa4:	3501      	adds	r5, #1
 801ffa6:	68e3      	ldr	r3, [r4, #12]
 801ffa8:	9903      	ldr	r1, [sp, #12]
 801ffaa:	1a5b      	subs	r3, r3, r1
 801ffac:	42ab      	cmp	r3, r5
 801ffae:	dcf2      	bgt.n	801ff96 <_printf_i+0x216>
 801ffb0:	e7eb      	b.n	801ff8a <_printf_i+0x20a>
 801ffb2:	2500      	movs	r5, #0
 801ffb4:	f104 0619 	add.w	r6, r4, #25
 801ffb8:	e7f5      	b.n	801ffa6 <_printf_i+0x226>
 801ffba:	bf00      	nop
 801ffbc:	080245f1 	.word	0x080245f1
 801ffc0:	08024602 	.word	0x08024602

0801ffc4 <__sflush_r>:
 801ffc4:	898a      	ldrh	r2, [r1, #12]
 801ffc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffca:	4605      	mov	r5, r0
 801ffcc:	0710      	lsls	r0, r2, #28
 801ffce:	460c      	mov	r4, r1
 801ffd0:	d458      	bmi.n	8020084 <__sflush_r+0xc0>
 801ffd2:	684b      	ldr	r3, [r1, #4]
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	dc05      	bgt.n	801ffe4 <__sflush_r+0x20>
 801ffd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	dc02      	bgt.n	801ffe4 <__sflush_r+0x20>
 801ffde:	2000      	movs	r0, #0
 801ffe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ffe6:	2e00      	cmp	r6, #0
 801ffe8:	d0f9      	beq.n	801ffde <__sflush_r+0x1a>
 801ffea:	2300      	movs	r3, #0
 801ffec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fff0:	682f      	ldr	r7, [r5, #0]
 801fff2:	6a21      	ldr	r1, [r4, #32]
 801fff4:	602b      	str	r3, [r5, #0]
 801fff6:	d032      	beq.n	802005e <__sflush_r+0x9a>
 801fff8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fffa:	89a3      	ldrh	r3, [r4, #12]
 801fffc:	075a      	lsls	r2, r3, #29
 801fffe:	d505      	bpl.n	802000c <__sflush_r+0x48>
 8020000:	6863      	ldr	r3, [r4, #4]
 8020002:	1ac0      	subs	r0, r0, r3
 8020004:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020006:	b10b      	cbz	r3, 802000c <__sflush_r+0x48>
 8020008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802000a:	1ac0      	subs	r0, r0, r3
 802000c:	2300      	movs	r3, #0
 802000e:	4602      	mov	r2, r0
 8020010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020012:	6a21      	ldr	r1, [r4, #32]
 8020014:	4628      	mov	r0, r5
 8020016:	47b0      	blx	r6
 8020018:	1c43      	adds	r3, r0, #1
 802001a:	89a3      	ldrh	r3, [r4, #12]
 802001c:	d106      	bne.n	802002c <__sflush_r+0x68>
 802001e:	6829      	ldr	r1, [r5, #0]
 8020020:	291d      	cmp	r1, #29
 8020022:	d82b      	bhi.n	802007c <__sflush_r+0xb8>
 8020024:	4a29      	ldr	r2, [pc, #164]	; (80200cc <__sflush_r+0x108>)
 8020026:	410a      	asrs	r2, r1
 8020028:	07d6      	lsls	r6, r2, #31
 802002a:	d427      	bmi.n	802007c <__sflush_r+0xb8>
 802002c:	2200      	movs	r2, #0
 802002e:	6062      	str	r2, [r4, #4]
 8020030:	04d9      	lsls	r1, r3, #19
 8020032:	6922      	ldr	r2, [r4, #16]
 8020034:	6022      	str	r2, [r4, #0]
 8020036:	d504      	bpl.n	8020042 <__sflush_r+0x7e>
 8020038:	1c42      	adds	r2, r0, #1
 802003a:	d101      	bne.n	8020040 <__sflush_r+0x7c>
 802003c:	682b      	ldr	r3, [r5, #0]
 802003e:	b903      	cbnz	r3, 8020042 <__sflush_r+0x7e>
 8020040:	6560      	str	r0, [r4, #84]	; 0x54
 8020042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020044:	602f      	str	r7, [r5, #0]
 8020046:	2900      	cmp	r1, #0
 8020048:	d0c9      	beq.n	801ffde <__sflush_r+0x1a>
 802004a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802004e:	4299      	cmp	r1, r3
 8020050:	d002      	beq.n	8020058 <__sflush_r+0x94>
 8020052:	4628      	mov	r0, r5
 8020054:	f7ff fb3e 	bl	801f6d4 <_free_r>
 8020058:	2000      	movs	r0, #0
 802005a:	6360      	str	r0, [r4, #52]	; 0x34
 802005c:	e7c0      	b.n	801ffe0 <__sflush_r+0x1c>
 802005e:	2301      	movs	r3, #1
 8020060:	4628      	mov	r0, r5
 8020062:	47b0      	blx	r6
 8020064:	1c41      	adds	r1, r0, #1
 8020066:	d1c8      	bne.n	801fffa <__sflush_r+0x36>
 8020068:	682b      	ldr	r3, [r5, #0]
 802006a:	2b00      	cmp	r3, #0
 802006c:	d0c5      	beq.n	801fffa <__sflush_r+0x36>
 802006e:	2b1d      	cmp	r3, #29
 8020070:	d001      	beq.n	8020076 <__sflush_r+0xb2>
 8020072:	2b16      	cmp	r3, #22
 8020074:	d101      	bne.n	802007a <__sflush_r+0xb6>
 8020076:	602f      	str	r7, [r5, #0]
 8020078:	e7b1      	b.n	801ffde <__sflush_r+0x1a>
 802007a:	89a3      	ldrh	r3, [r4, #12]
 802007c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020080:	81a3      	strh	r3, [r4, #12]
 8020082:	e7ad      	b.n	801ffe0 <__sflush_r+0x1c>
 8020084:	690f      	ldr	r7, [r1, #16]
 8020086:	2f00      	cmp	r7, #0
 8020088:	d0a9      	beq.n	801ffde <__sflush_r+0x1a>
 802008a:	0793      	lsls	r3, r2, #30
 802008c:	680e      	ldr	r6, [r1, #0]
 802008e:	bf08      	it	eq
 8020090:	694b      	ldreq	r3, [r1, #20]
 8020092:	600f      	str	r7, [r1, #0]
 8020094:	bf18      	it	ne
 8020096:	2300      	movne	r3, #0
 8020098:	eba6 0807 	sub.w	r8, r6, r7
 802009c:	608b      	str	r3, [r1, #8]
 802009e:	f1b8 0f00 	cmp.w	r8, #0
 80200a2:	dd9c      	ble.n	801ffde <__sflush_r+0x1a>
 80200a4:	6a21      	ldr	r1, [r4, #32]
 80200a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80200a8:	4643      	mov	r3, r8
 80200aa:	463a      	mov	r2, r7
 80200ac:	4628      	mov	r0, r5
 80200ae:	47b0      	blx	r6
 80200b0:	2800      	cmp	r0, #0
 80200b2:	dc06      	bgt.n	80200c2 <__sflush_r+0xfe>
 80200b4:	89a3      	ldrh	r3, [r4, #12]
 80200b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80200ba:	81a3      	strh	r3, [r4, #12]
 80200bc:	f04f 30ff 	mov.w	r0, #4294967295
 80200c0:	e78e      	b.n	801ffe0 <__sflush_r+0x1c>
 80200c2:	4407      	add	r7, r0
 80200c4:	eba8 0800 	sub.w	r8, r8, r0
 80200c8:	e7e9      	b.n	802009e <__sflush_r+0xda>
 80200ca:	bf00      	nop
 80200cc:	dfbffffe 	.word	0xdfbffffe

080200d0 <_fflush_r>:
 80200d0:	b538      	push	{r3, r4, r5, lr}
 80200d2:	690b      	ldr	r3, [r1, #16]
 80200d4:	4605      	mov	r5, r0
 80200d6:	460c      	mov	r4, r1
 80200d8:	b913      	cbnz	r3, 80200e0 <_fflush_r+0x10>
 80200da:	2500      	movs	r5, #0
 80200dc:	4628      	mov	r0, r5
 80200de:	bd38      	pop	{r3, r4, r5, pc}
 80200e0:	b118      	cbz	r0, 80200ea <_fflush_r+0x1a>
 80200e2:	6a03      	ldr	r3, [r0, #32]
 80200e4:	b90b      	cbnz	r3, 80200ea <_fflush_r+0x1a>
 80200e6:	f7fe fff9 	bl	801f0dc <__sinit>
 80200ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d0f3      	beq.n	80200da <_fflush_r+0xa>
 80200f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80200f4:	07d0      	lsls	r0, r2, #31
 80200f6:	d404      	bmi.n	8020102 <_fflush_r+0x32>
 80200f8:	0599      	lsls	r1, r3, #22
 80200fa:	d402      	bmi.n	8020102 <_fflush_r+0x32>
 80200fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200fe:	f7ff fa7a 	bl	801f5f6 <__retarget_lock_acquire_recursive>
 8020102:	4628      	mov	r0, r5
 8020104:	4621      	mov	r1, r4
 8020106:	f7ff ff5d 	bl	801ffc4 <__sflush_r>
 802010a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802010c:	07da      	lsls	r2, r3, #31
 802010e:	4605      	mov	r5, r0
 8020110:	d4e4      	bmi.n	80200dc <_fflush_r+0xc>
 8020112:	89a3      	ldrh	r3, [r4, #12]
 8020114:	059b      	lsls	r3, r3, #22
 8020116:	d4e1      	bmi.n	80200dc <_fflush_r+0xc>
 8020118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802011a:	f7ff fa6d 	bl	801f5f8 <__retarget_lock_release_recursive>
 802011e:	e7dd      	b.n	80200dc <_fflush_r+0xc>

08020120 <__swhatbuf_r>:
 8020120:	b570      	push	{r4, r5, r6, lr}
 8020122:	460c      	mov	r4, r1
 8020124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020128:	2900      	cmp	r1, #0
 802012a:	b096      	sub	sp, #88	; 0x58
 802012c:	4615      	mov	r5, r2
 802012e:	461e      	mov	r6, r3
 8020130:	da0d      	bge.n	802014e <__swhatbuf_r+0x2e>
 8020132:	89a3      	ldrh	r3, [r4, #12]
 8020134:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020138:	f04f 0100 	mov.w	r1, #0
 802013c:	bf0c      	ite	eq
 802013e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020142:	2340      	movne	r3, #64	; 0x40
 8020144:	2000      	movs	r0, #0
 8020146:	6031      	str	r1, [r6, #0]
 8020148:	602b      	str	r3, [r5, #0]
 802014a:	b016      	add	sp, #88	; 0x58
 802014c:	bd70      	pop	{r4, r5, r6, pc}
 802014e:	466a      	mov	r2, sp
 8020150:	f000 f862 	bl	8020218 <_fstat_r>
 8020154:	2800      	cmp	r0, #0
 8020156:	dbec      	blt.n	8020132 <__swhatbuf_r+0x12>
 8020158:	9901      	ldr	r1, [sp, #4]
 802015a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802015e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8020162:	4259      	negs	r1, r3
 8020164:	4159      	adcs	r1, r3
 8020166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802016a:	e7eb      	b.n	8020144 <__swhatbuf_r+0x24>

0802016c <__smakebuf_r>:
 802016c:	898b      	ldrh	r3, [r1, #12]
 802016e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020170:	079d      	lsls	r5, r3, #30
 8020172:	4606      	mov	r6, r0
 8020174:	460c      	mov	r4, r1
 8020176:	d507      	bpl.n	8020188 <__smakebuf_r+0x1c>
 8020178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802017c:	6023      	str	r3, [r4, #0]
 802017e:	6123      	str	r3, [r4, #16]
 8020180:	2301      	movs	r3, #1
 8020182:	6163      	str	r3, [r4, #20]
 8020184:	b002      	add	sp, #8
 8020186:	bd70      	pop	{r4, r5, r6, pc}
 8020188:	ab01      	add	r3, sp, #4
 802018a:	466a      	mov	r2, sp
 802018c:	f7ff ffc8 	bl	8020120 <__swhatbuf_r>
 8020190:	9900      	ldr	r1, [sp, #0]
 8020192:	4605      	mov	r5, r0
 8020194:	4630      	mov	r0, r6
 8020196:	f7fe fe89 	bl	801eeac <_malloc_r>
 802019a:	b948      	cbnz	r0, 80201b0 <__smakebuf_r+0x44>
 802019c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80201a0:	059a      	lsls	r2, r3, #22
 80201a2:	d4ef      	bmi.n	8020184 <__smakebuf_r+0x18>
 80201a4:	f023 0303 	bic.w	r3, r3, #3
 80201a8:	f043 0302 	orr.w	r3, r3, #2
 80201ac:	81a3      	strh	r3, [r4, #12]
 80201ae:	e7e3      	b.n	8020178 <__smakebuf_r+0xc>
 80201b0:	89a3      	ldrh	r3, [r4, #12]
 80201b2:	6020      	str	r0, [r4, #0]
 80201b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201b8:	81a3      	strh	r3, [r4, #12]
 80201ba:	9b00      	ldr	r3, [sp, #0]
 80201bc:	6163      	str	r3, [r4, #20]
 80201be:	9b01      	ldr	r3, [sp, #4]
 80201c0:	6120      	str	r0, [r4, #16]
 80201c2:	b15b      	cbz	r3, 80201dc <__smakebuf_r+0x70>
 80201c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201c8:	4630      	mov	r0, r6
 80201ca:	f000 f837 	bl	802023c <_isatty_r>
 80201ce:	b128      	cbz	r0, 80201dc <__smakebuf_r+0x70>
 80201d0:	89a3      	ldrh	r3, [r4, #12]
 80201d2:	f023 0303 	bic.w	r3, r3, #3
 80201d6:	f043 0301 	orr.w	r3, r3, #1
 80201da:	81a3      	strh	r3, [r4, #12]
 80201dc:	89a3      	ldrh	r3, [r4, #12]
 80201de:	431d      	orrs	r5, r3
 80201e0:	81a5      	strh	r5, [r4, #12]
 80201e2:	e7cf      	b.n	8020184 <__smakebuf_r+0x18>

080201e4 <memmove>:
 80201e4:	4288      	cmp	r0, r1
 80201e6:	b510      	push	{r4, lr}
 80201e8:	eb01 0402 	add.w	r4, r1, r2
 80201ec:	d902      	bls.n	80201f4 <memmove+0x10>
 80201ee:	4284      	cmp	r4, r0
 80201f0:	4623      	mov	r3, r4
 80201f2:	d807      	bhi.n	8020204 <memmove+0x20>
 80201f4:	1e43      	subs	r3, r0, #1
 80201f6:	42a1      	cmp	r1, r4
 80201f8:	d008      	beq.n	802020c <memmove+0x28>
 80201fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80201fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020202:	e7f8      	b.n	80201f6 <memmove+0x12>
 8020204:	4402      	add	r2, r0
 8020206:	4601      	mov	r1, r0
 8020208:	428a      	cmp	r2, r1
 802020a:	d100      	bne.n	802020e <memmove+0x2a>
 802020c:	bd10      	pop	{r4, pc}
 802020e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020216:	e7f7      	b.n	8020208 <memmove+0x24>

08020218 <_fstat_r>:
 8020218:	b538      	push	{r3, r4, r5, lr}
 802021a:	4d07      	ldr	r5, [pc, #28]	; (8020238 <_fstat_r+0x20>)
 802021c:	2300      	movs	r3, #0
 802021e:	4604      	mov	r4, r0
 8020220:	4608      	mov	r0, r1
 8020222:	4611      	mov	r1, r2
 8020224:	602b      	str	r3, [r5, #0]
 8020226:	f7e1 fcd8 	bl	8001bda <_fstat>
 802022a:	1c43      	adds	r3, r0, #1
 802022c:	d102      	bne.n	8020234 <_fstat_r+0x1c>
 802022e:	682b      	ldr	r3, [r5, #0]
 8020230:	b103      	cbz	r3, 8020234 <_fstat_r+0x1c>
 8020232:	6023      	str	r3, [r4, #0]
 8020234:	bd38      	pop	{r3, r4, r5, pc}
 8020236:	bf00      	nop
 8020238:	20014834 	.word	0x20014834

0802023c <_isatty_r>:
 802023c:	b538      	push	{r3, r4, r5, lr}
 802023e:	4d06      	ldr	r5, [pc, #24]	; (8020258 <_isatty_r+0x1c>)
 8020240:	2300      	movs	r3, #0
 8020242:	4604      	mov	r4, r0
 8020244:	4608      	mov	r0, r1
 8020246:	602b      	str	r3, [r5, #0]
 8020248:	f7e1 fccc 	bl	8001be4 <_isatty>
 802024c:	1c43      	adds	r3, r0, #1
 802024e:	d102      	bne.n	8020256 <_isatty_r+0x1a>
 8020250:	682b      	ldr	r3, [r5, #0]
 8020252:	b103      	cbz	r3, 8020256 <_isatty_r+0x1a>
 8020254:	6023      	str	r3, [r4, #0]
 8020256:	bd38      	pop	{r3, r4, r5, pc}
 8020258:	20014834 	.word	0x20014834

0802025c <_realloc_r>:
 802025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020260:	4680      	mov	r8, r0
 8020262:	4614      	mov	r4, r2
 8020264:	460e      	mov	r6, r1
 8020266:	b921      	cbnz	r1, 8020272 <_realloc_r+0x16>
 8020268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802026c:	4611      	mov	r1, r2
 802026e:	f7fe be1d 	b.w	801eeac <_malloc_r>
 8020272:	b92a      	cbnz	r2, 8020280 <_realloc_r+0x24>
 8020274:	f7ff fa2e 	bl	801f6d4 <_free_r>
 8020278:	4625      	mov	r5, r4
 802027a:	4628      	mov	r0, r5
 802027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020280:	f000 f81b 	bl	80202ba <_malloc_usable_size_r>
 8020284:	4284      	cmp	r4, r0
 8020286:	4607      	mov	r7, r0
 8020288:	d802      	bhi.n	8020290 <_realloc_r+0x34>
 802028a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802028e:	d812      	bhi.n	80202b6 <_realloc_r+0x5a>
 8020290:	4621      	mov	r1, r4
 8020292:	4640      	mov	r0, r8
 8020294:	f7fe fe0a 	bl	801eeac <_malloc_r>
 8020298:	4605      	mov	r5, r0
 802029a:	2800      	cmp	r0, #0
 802029c:	d0ed      	beq.n	802027a <_realloc_r+0x1e>
 802029e:	42bc      	cmp	r4, r7
 80202a0:	4622      	mov	r2, r4
 80202a2:	4631      	mov	r1, r6
 80202a4:	bf28      	it	cs
 80202a6:	463a      	movcs	r2, r7
 80202a8:	f7ff f9a7 	bl	801f5fa <memcpy>
 80202ac:	4631      	mov	r1, r6
 80202ae:	4640      	mov	r0, r8
 80202b0:	f7ff fa10 	bl	801f6d4 <_free_r>
 80202b4:	e7e1      	b.n	802027a <_realloc_r+0x1e>
 80202b6:	4635      	mov	r5, r6
 80202b8:	e7df      	b.n	802027a <_realloc_r+0x1e>

080202ba <_malloc_usable_size_r>:
 80202ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80202be:	1f18      	subs	r0, r3, #4
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	bfbc      	itt	lt
 80202c4:	580b      	ldrlt	r3, [r1, r0]
 80202c6:	18c0      	addlt	r0, r0, r3
 80202c8:	4770      	bx	lr
	...

080202cc <_init>:
 80202cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202ce:	bf00      	nop
 80202d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80202d2:	bc08      	pop	{r3}
 80202d4:	469e      	mov	lr, r3
 80202d6:	4770      	bx	lr

080202d8 <_fini>:
 80202d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202da:	bf00      	nop
 80202dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80202de:	bc08      	pop	{r3}
 80202e0:	469e      	mov	lr, r3
 80202e2:	4770      	bx	lr
